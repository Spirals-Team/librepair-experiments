{
  "repository": {
    "name": "ftomassetti/javaparser",
    "githubId": 13719157,
    "url": "https://github.com/ftomassetti/javaparser",
    "isFork": true,
    "original": {
      "name": "javaparser/javaparser",
      "githubId": 2675355,
      "url": "https://github.com/javaparser/javaparser"
    },
    "isPullRequest": false,
    "pullRequestId": 0
  },
  "builds": {
    "buggyBuild": {
      "id": 409480835,
      "url": "http://travis-ci.org/ftomassetti/javaparser/builds/409480835",
      "date": "Jul 29, 2018 11:16:48 AM"
    }
  },
  "reproductionBuggyBuild": {
    "reproductionDateBeginning": "Jul 29, 2018 11:17:08 AM",
    "reproductionDateEnd": "Jul 29, 2018 11:29:15 AM",
    "totalDuration": 722,
    "processDurations": {
      "cloning": {
        "nbSteps": 1,
        "totalDuration": 13,
        "stepNames": [
          "CloneRepository"
        ],
        "stepDurations": [
          13
        ]
      },
      "building": {
        "nbSteps": 2,
        "totalDuration": 61,
        "stepNames": [
          "CheckoutBuggyBuild",
          "BuildProject"
        ],
        "stepDurations": [
          2,
          59
        ]
      },
      "testing": {
        "nbSteps": 1,
        "totalDuration": 418,
        "stepNames": [
          "TestProject"
        ],
        "stepDurations": [
          418
        ]
      }
    },
    "projectRootPomPath": "./workspace/ftomassetti/javaparser/409480835/pom.xml"
  },
  "patchDiff": {
    "files": {
      "numberAdded": 0,
      "numberChanged": 0,
      "numberDeleted": 0
    },
    "lines": {
      "numberAdded": 0,
      "numberDeleted": 0
    }
  },
  "commits": {
    "buggyBuild": {
      "repoName": "ftomassetti/javaparser",
      "branchName": "ssJLSnamesDisambiguation",
      "sha": "1b47288751aae6a20466bb405b5331c719afb0e0",
      "url": "http://github.com/ftomassetti/javaparser/commit/1b47288751aae6a20466bb405b5331c719afb0e0",
      "date": "Jul 29, 2018 11:09:26 AM"
    }
  },
  "projectMetrics": {
    "numberModules": 8,
    "numberSourceFiles": 615,
    "numberTestFiles": 256,
    "numberLibrariesFailingModule": 16
  },
  "tests": {
    "failingModule": "/root/workspace/ftomassetti/javaparser/409480835/javaparser-symbol-solver-testing",
    "overallMetrics": {
      "numberRunning": 2213,
      "numberPassing": 2158,
      "numberFailing": 1,
      "numberErroring": 54,
      "numberSkipping": 6,
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "isError": true,
          "occurrences": 13
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false,
          "occurrences": 1
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true,
          "occurrences": 33
        },
        {
          "failureName": "com.github.javaparser.resolution.UnsolvedSymbolException",
          "isError": true,
          "occurrences": 8
        }
      ]
    },
    "failingClasses": [
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.naming.NameLogicDisambiguationTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.javaparsermodel.DifferentiateDotExpressionTest",
        "numberRunning": 4,
        "numberPassing": 3,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.EnumResolutionTest",
        "numberRunning": 2,
        "numberPassing": 1,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.javaparsermodel.contexts.MultiCatchMethodCallExprTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.VariadicResolutionTest",
        "numberRunning": 4,
        "numberPassing": 3,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.JavaParserFacadeResolutionTest",
        "numberRunning": 7,
        "numberPassing": 4,
        "numberFailing": 0,
        "numberErroring": 3,
        "numberSkipping": 0
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.javaparser.contexts.FieldAccessContextResolutionTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.javaparser.contexts.LambdaExprContextResolutionTest",
        "numberRunning": 3,
        "numberPassing": 2,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.AnalyseNewJavaParserHelpersTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.javaparser.contexts.MethodCallExprContextResolutionTest",
        "numberRunning": 5,
        "numberPassing": 4,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.LambdaResolutionTest",
        "numberRunning": 10,
        "numberPassing": 2,
        "numberFailing": 0,
        "numberErroring": 8,
        "numberSkipping": 0
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.GenericsResolutionTest",
        "numberRunning": 22,
        "numberPassing": 14,
        "numberFailing": 0,
        "numberErroring": 8,
        "numberSkipping": 0
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.javaparser.declarations.JavaParserTypeParameterResolutionTest",
        "numberRunning": 4,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 4,
        "numberSkipping": 0
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.ContextTest",
        "numberRunning": 26,
        "numberPassing": 9,
        "numberFailing": 0,
        "numberErroring": 17,
        "numberSkipping": 0
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserAnonymousClassDeclarationTest",
        "numberRunning": 5,
        "numberPassing": 3,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.StatementContextResolutionTest",
        "numberRunning": 5,
        "numberPassing": 2,
        "numberFailing": 0,
        "numberErroring": 3,
        "numberSkipping": 0
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.FieldsResolutionTest",
        "numberRunning": 9,
        "numberPassing": 8,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      }
    ],
    "failureDetails": [
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.LambdaResolutionTest",
        "testMethod": "lambdaBlockExplicitReturn",
        "failureName": "java.lang.RuntimeException",
        "detail": "Error calculating the type of parameter i -\u003e {\n    return addPerson(\"\");\n} of method call persons.stream().parallel().map(i -\u003e {\n    return addPerson(\"\");\n})",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.StatementContextResolutionTest",
        "testMethod": "resolveLocalAndSeveralAnnidatedLevels",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.ContextTest",
        "testMethod": "resolveTypeUsageOfFirstMethodInGenericClass",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.EnumResolutionTest",
        "testMethod": "enumAndStaticInitializer",
        "failureName": "java.lang.RuntimeException",
        "detail": "Error calculating the type of parameter unboxedType.nameOfBoxedType of method call unboxMap.put(unboxedType.nameOfBoxedType, unboxedType)",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.ContextTest",
        "testMethod": "resolveGenericReturnTypeOfMethodInJar",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.LambdaResolutionTest",
        "testMethod": "lambdaBifunc",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.GenericsResolutionTest",
        "testMethod": "classCast",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.ContextTest",
        "testMethod": "resolveTypeUsageOfMethodInGenericClass",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.AnalyseNewJavaParserHelpersTest",
        "testMethod": "nodesTypeIsCorrect",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.javaparser.declarations.JavaParserTypeParameterResolutionTest",
        "testMethod": "declaredOnMethodNegativeCase",
        "failureName": "java.lang.RuntimeException",
        "detail": "Unable to calculate the type of a parameter of a method call. Method call: foo(a), Parameter: a",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.ContextTest",
        "testMethod": "resolveInheritedFieldReference",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.ContextTest",
        "testMethod": "resolveCascadeOfReferencesToMethod",
        "failureName": "com.github.javaparser.resolution.UnsolvedSymbolException",
        "detail": "Unsolved symbol in cu.getTypes().stream() : cu.getTypes()",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.LambdaResolutionTest",
        "testMethod": "lambdaMapParameter",
        "failureName": "com.github.javaparser.resolution.UnsolvedSymbolException",
        "detail": "Unsolved symbol in persons.stream().map(p -\u003e p.toLowerCase()) : persons.stream()",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.ContextTest",
        "testMethod": "resolveTypeUsageOfCascadeMethodInGenericClass",
        "failureName": "java.lang.RuntimeException",
        "detail": "Error calculating the type of parameter (t) -\u003e t.getName().equals(name) of method call cu.getTypes().stream().filter((t) -\u003e t.getName().equals(name))",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.JavaParserFacadeResolutionTest",
        "testMethod": "solvingReferenceToCatchClauseParam",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.javaparsermodel.DifferentiateDotExpressionTest",
        "testMethod": "packageStaticMethodCalls",
        "failureName": "java.lang.AssertionError",
        "detail": "expected:\u003ctrue\u003e but was:\u003cfalse\u003e",
        "isError": false
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.GenericsResolutionTest",
        "testMethod": "resolveUsageOfMethodOfGenericClass",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.LambdaResolutionTest",
        "testMethod": "lambdaBlockMultiLineReturn",
        "failureName": "java.lang.RuntimeException",
        "detail": "Error calculating the type of parameter i -\u003e {\n    int irrelevant;\n    return addPerson(\"\");\n} of method call persons.stream().parallel().map(i -\u003e {\n    int irrelevant;\n    return addPerson(\"\");\n})",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.ContextTest",
        "testMethod": "resolveReferenceToCallOnLambdaParam",
        "failureName": "java.lang.RuntimeException",
        "detail": "Error calculating the type of parameter (t) -\u003e t.getName().equals(name) of method call cu.getTypes().stream().filter((t) -\u003e t.getName().equals(name))",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.GenericsResolutionTest",
        "testMethod": "typeParamOnReturnTypeStep3",
        "failureName": "java.lang.RuntimeException",
        "detail": "Error calculating the type of parameter n2 of method call n1.accept(this, n2)",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.ContextTest",
        "testMethod": "resolveReferenceToOverloadMethodFindOnlyCompatible",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.ContextTest",
        "testMethod": "resolveReferenceToOverloadMethodWithNullParam",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.ContextTest",
        "testMethod": "localVariableDeclarationInScope",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.FieldsResolutionTest",
        "testMethod": "resolveClassFieldOfClassExtendingUnknownClass1",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.ContextTest",
        "testMethod": "resolveReferenceToLambdaParam",
        "failureName": "java.lang.RuntimeException",
        "detail": "Error calculating the type of parameter (t) -\u003e t.getName().equals(name) of method call cu.getTypes().stream().filter((t) -\u003e t.getName().equals(name))",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.StatementContextResolutionTest",
        "testMethod": "resolveLocalVariableInParent",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.ContextTest",
        "testMethod": "resolveReferenceToOverloadMethodFindStricter",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.JavaParserFacadeResolutionTest",
        "testMethod": "solvingReferenceToUnsupportedOperationException",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.ContextTest",
        "testMethod": "resolveReferenceToMethod",
        "failureName": "com.github.javaparser.resolution.UnsolvedSymbolException",
        "detail": "Unsolved symbol in cu.getTypes() : cu",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.GenericsResolutionTest",
        "testMethod": "methodTypeParams",
        "failureName": "java.lang.RuntimeException",
        "detail": "Error calculating the type of parameter arg of method call javadocComment.accept(this, arg)",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.LambdaResolutionTest",
        "testMethod": "lambdaCollect",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.javaparser.contexts.LambdaExprContextResolutionTest",
        "testMethod": "solveParameterOfLambdaInMethodCallExpr",
        "failureName": "java.lang.RuntimeException",
        "detail": "Error calculating the type of parameter p -\u003e p.toLowerCase() of method call persons.stream().map(p -\u003e p.toLowerCase())",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserAnonymousClassDeclarationTest",
        "testMethod": "callingAnonymousClassInnerMethod",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.javaparser.declarations.JavaParserTypeParameterResolutionTest",
        "testMethod": "declaredOnMethodPositiveCase",
        "failureName": "java.lang.RuntimeException",
        "detail": "Unable to calculate the type of a parameter of a method call. Method call: foo(s), Parameter: s",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.VariadicResolutionTest",
        "testMethod": "selectMostSpecificVariadic",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.javaparser.declarations.JavaParserTypeParameterResolutionTest",
        "testMethod": "genericMethodWithGenericClassBasedArgument",
        "failureName": "com.github.javaparser.resolution.UnsolvedSymbolException",
        "detail": "Unsolved symbol in items.apply(Transforms.of(new MyFn2())) : items",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.javaparser.contexts.FieldAccessContextResolutionTest",
        "testMethod": "solveMethodCallInFieldAccessContext",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.JavaParserFacadeResolutionTest",
        "testMethod": "solveTryWithResourceVariable",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.ContextTest",
        "testMethod": "resolveParameterReference",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.javaparser.contexts.MethodCallExprContextResolutionTest",
        "testMethod": "solveNestedMethodCallExprContextWithoutScope",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.GenericsResolutionTest",
        "testMethod": "classCastScope",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.LambdaResolutionTest",
        "testMethod": "typeOfVoidLambda",
        "failureName": "com.github.javaparser.resolution.UnsolvedSymbolException",
        "detail": "Unsolved symbol in persons.stream().forEach(p -\u003e {\n    System.out.println(p);\n}) : persons.stream()",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.GenericsResolutionTest",
        "testMethod": "typeParamOnReturnTypeStep2",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.LambdaResolutionTest",
        "testMethod": "personsStream",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.javaparser.declarations.JavaParserTypeParameterResolutionTest",
        "testMethod": "genericMethodWithGenericClassArgument",
        "failureName": "com.github.javaparser.resolution.UnsolvedSymbolException",
        "detail": "Unsolved symbol in items.apply(Transforms.of(new DoFn\u003cInteger, Long\u003e() {\n})) : items",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.ContextTest",
        "testMethod": "resolveReferenceToMethodCalledOnArrayAccess",
        "failureName": "com.github.javaparser.resolution.UnsolvedSymbolException",
        "detail": "Unsolved symbol in array[0].trim() : array[0]",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.javaparsermodel.contexts.MultiCatchMethodCallExprTest",
        "testMethod": "issue1482",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.naming.NameLogicDisambiguationTest",
        "testMethod": "ambiguousNameToLocalVar",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.LambdaResolutionTest",
        "testMethod": "lambdaMap",
        "failureName": "java.lang.RuntimeException",
        "detail": "Error calculating the type of parameter p -\u003e p.toLowerCase() of method call persons.stream().map(p -\u003e p.toLowerCase())",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserAnonymousClassDeclarationTest",
        "testMethod": "callingSuperClassInnerClassMethod",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.StatementContextResolutionTest",
        "testMethod": "resolveLocalVariableInParentOfParent",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.GenericsResolutionTest",
        "testMethod": "methodWithGenericParameterTypes",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.GenericsResolutionTest",
        "testMethod": "typeParamOnReturnType",
        "failureName": "java.lang.RuntimeException",
        "detail": "Error calculating the type of parameter n2 of method call n1.accept(this, n2)",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.ContextTest",
        "testMethod": "resolveDeclaredFieldReference",
        "failureName": "java.lang.UnsupportedOperationException",
        "isError": true
      },
      {
        "testClass": "com.github.javaparser.symbolsolver.resolution.ContextTest",
        "testMethod": "resolveLambdaType",
        "failureName": "com.github.javaparser.resolution.UnsolvedSymbolException",
        "detail": "Unsolved symbol in cu.getTypes().stream().filter((t) -\u003e t.getName().equals(name)) : cu.getTypes().stream()",
        "isError": true
      }
    ]
  },
  "type": "only_fail"
}