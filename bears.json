{
  "repository": {
    "name": "spring-projects/spring-data-redis",
    "githubId": 1983092,
    "url": "https://github.com/spring-projects/spring-data-redis",
    "isFork": false,
    "original": {
      "name": "",
      "githubId": 0,
      "url": ""
    },
    "isPullRequest": false,
    "pullRequestId": 0
  },
  "builds": {
    "buggyBuild": {
      "id": 418137641,
      "url": "http://travis-ci.org/spring-projects/spring-data-redis/builds/418137641",
      "date": "Aug 20, 2018 2:51:46 PM"
    }
  },
  "reproductionBuggyBuild": {
    "reproductionDateBeginning": "Aug 20, 2018 3:01:25 PM",
    "reproductionDateEnd": "Aug 20, 2018 3:10:44 PM",
    "totalDuration": 552,
    "processDurations": {
      "cloning": {
        "nbSteps": 1,
        "totalDuration": 11,
        "stepNames": [
          "CloneRepository"
        ],
        "stepDurations": [
          11
        ]
      },
      "building": {
        "nbSteps": 2,
        "totalDuration": 181,
        "stepNames": [
          "CheckoutBuggyBuild",
          "BuildProject"
        ],
        "stepDurations": [
          0,
          181
        ]
      },
      "testing": {
        "nbSteps": 1,
        "totalDuration": 291,
        "stepNames": [
          "TestProject"
        ],
        "stepDurations": [
          291
        ]
      }
    },
    "projectRootPomPath": "./workspace/spring-projects/spring-data-redis/418137641/pom.xml"
  },
  "patchDiff": {
    "files": {
      "numberAdded": 0,
      "numberChanged": 0,
      "numberDeleted": 0
    },
    "lines": {
      "numberAdded": 0,
      "numberDeleted": 0
    }
  },
  "commits": {
    "buggyBuild": {
      "repoName": "spring-projects/spring-data-redis",
      "branchName": "2.0.x",
      "sha": "54ccb6460154a42626e2b15a905533206682aef8",
      "url": "http://github.com/spring-projects/spring-data-redis/commit/54ccb6460154a42626e2b15a905533206682aef8",
      "date": "Aug 20, 2018 11:08:00 AM"
    }
  },
  "projectMetrics": {
    "numberModules": 1,
    "numberSourceFiles": 448,
    "numberTestFiles": 238,
    "numberLibrariesFailingModule": 60
  },
  "tests": {
    "failingModule": "/root/workspace/spring-projects/spring-data-redis/418137641",
    "overallMetrics": {
      "numberRunning": 9350,
      "numberPassing": 1803,
      "numberFailing": 0,
      "numberErroring": 7547,
      "numberSkipping": 131,
      "failures": [
        {
          "failureName": "org.springframework.beans.factory.BeanCreationException",
          "isError": true,
          "occurrences": 1
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true,
          "occurrences": 2
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "isError": true,
          "occurrences": 2299
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "isError": true,
          "occurrences": 4517
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "isError": true,
          "occurrences": 412
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "isError": true,
          "occurrences": 114
        },
        {
          "failureName": "java.lang.Exception",
          "isError": true,
          "occurrences": 93
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "isError": true,
          "occurrences": 109
        }
      ]
    },
    "failingClasses": [
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.TransactionalLettuceIntegrationTests",
        "numberRunning": 10,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 10,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "numberRunning": 108,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 108,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "numberRunning": 32,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 32,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultHyperLogLogOperationsTests",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "numberRunning": 251,
        "numberPassing": 27,
        "numberFailing": 0,
        "numberErroring": 224,
        "numberSkipping": 54
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "numberRunning": 231,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 231,
        "numberSkipping": 0
      },
      {
        "testClass": "org.apache.maven.surefire.junit4.JUnit4Provider",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.listener.PubSubTests",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultGeoOperationsTests",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.JedisConnectionFactoryIntegrationTests",
        "numberRunning": 2,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHyperLogLogCommandsTests",
        "numberRunning": 10,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 10,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveScriptingCommandsTests",
        "numberRunning": 20,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 20,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveServerCommandsTests",
        "numberRunning": 28,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 28,
        "numberSkipping": 4
      },
      {
        "testClass": "org.springframework.data.redis.listener.SubscriptionConnectionTests",
        "numberRunning": 6,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 6,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.core.script.lettuce.LettuceDefaultScriptExecutorTests",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.CompareAndSetIntegrationTests",
        "numberRunning": 12,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 12,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "numberRunning": 187,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 187,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "numberRunning": 305,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 305,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "numberRunning": 1710,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1710,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "numberRunning": 50,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 50,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "numberRunning": 62,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 62,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "numberRunning": 330,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 330,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "numberRunning": 165,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 165,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests",
        "numberRunning": 16,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 16,
        "numberSkipping": 2
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultHashOperationsTests",
        "numberRunning": 6,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 6,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "numberRunning": 176,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 176,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "numberRunning": 80,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 80,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.listener.KeyExpirationEventMessageListenerTests",
        "numberRunning": 4,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 4,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.core.script.DefaultReactiveScriptExecutorTests",
        "numberRunning": 16,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 16,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "numberRunning": 44,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 44,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.SupportXmlTests",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "numberRunning": 80,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 80,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "numberRunning": 135,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 135,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest",
        "numberRunning": 18,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 18,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "numberRunning": 34,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 34,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "numberRunning": 630,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 630,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.ScanTests",
        "numberRunning": 2,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.mapping.Jackson2HashMapperTests",
        "numberRunning": 2,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "numberRunning": 102,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 102,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisCollectionFactoryBeanTests",
        "numberRunning": 4,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 4,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "numberRunning": 33,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 33,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.core.script.jedis.JedisDefaultScriptExecutorTests",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "numberRunning": 532,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 532,
        "numberSkipping": 28
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveNumberCommandsTests",
        "numberRunning": 12,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 12,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
        "numberRunning": 28,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 28,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "numberRunning": 801,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 801,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests",
        "numberRunning": 16,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 16,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
        "numberRunning": 28,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 28,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.repository.cdi.CdiExtensionIntegrationTests",
        "numberRunning": 4,
        "numberPassing": 2,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "numberRunning": 44,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 44,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.support.BoundKeyOperationsTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests",
        "numberRunning": 10,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 10,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.cache.DefaultRedisCacheWriterTests",
        "numberRunning": 30,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 30,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "numberRunning": 58,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 58,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "numberRunning": 330,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 330,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "numberRunning": 464,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 464,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "numberRunning": 32,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 32,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests",
        "numberRunning": 11,
        "numberPassing": 4,
        "numberFailing": 0,
        "numberErroring": 7,
        "numberSkipping": 2
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveGeoOperationsIntegrationTests",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests",
        "numberRunning": 28,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 28,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.listener.PubSubResubscribeTests",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "numberRunning": 234,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 234,
        "numberSkipping": 0
      }
    ],
    "failureDetails": [
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeLast[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentReplaceTwoArgs[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIterator[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiSet[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "removeAll[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetPropertyDefault[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testUnion[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopAndLeftPushWithTimeout[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutLast[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScore[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecCustomSerializer[4]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "shouldReportTimeToLiveCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithLimit[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testUnionAndStore[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopAndLeftPush[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetIfAbsent[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedThrowsExceptionInValueLoader[8]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGet[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSeconds[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIsEmpty[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testUnwatch[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRangeByScoreShouldReturnValuesCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithScores[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeLast[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putNullShouldAddEntryForNullValue[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPut[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekFirst[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testDiffAndStore[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setRange[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLast[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setIfAbsent[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetKey[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPutIfAbsent[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByLex[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "removeAll[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRangeShouldReturnValuesCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexBounded[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeByScore[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToString[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "preciseExpire[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentReplaceOneArg[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToString[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testIncrementScore[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testMove[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRemRangeByScoreShouldRemoveValuesCorrectlyWithExcludingMinRange[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullNewValue[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRevRangeByScoreShouldReturnValuesCorrectlyWithMinExclusion[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultHashOperationsTests",
        "testMethod": "testDelete[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "preciseExpireAt[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullValue[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "putWritesSimpleIndexDataCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testHashCode[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeWithScores[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAll[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToString[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekLast[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByScore[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithScores[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "exists[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeLast[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testEquals[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testEquals[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOffer[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testLast[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushIfPresent[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testScanWorksCorrectly[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekLast[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testKeys[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "distinctRandomMembers[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testScanWorksCorrectly[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToString[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionHead[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsObject[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeByScoreWithScores[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedCustomSerializer[2]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortStore[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsent[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetAndSet[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testClear[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIsEmpty[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillis[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushIfPresent[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArray[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetRange[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "intersectAndStore[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "setBitShouldReturnValueCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "bitCountShouldReturnValueCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testDistinctRandomMembers[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests",
        "testMethod": "factoryCreatesPooledConnections",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutLast[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "shouldReadAndWriteSimpleCacheKey[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullRedisCallback[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullOldValue[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemoveByScore[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetKey[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testAddMultiple[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeFirst[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnNullIfNoCachedValueFound[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "executeScript[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSet[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testAdd[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRangeByScoreWithScoreShouldReturnTuplesCorrectlyWithMaxExclusion[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToArray[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByLexLimit[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexUnbounded[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testKeys[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testFirstException[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOffer[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testDiffAndStore[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrement[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "type[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDescendingIterator[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSet[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeByScore[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testUnionAndStore[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIsEmpty[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.CompareAndSetIntegrationTests",
        "testMethod": "expectationNotMet[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToString[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.CompareAndSetIntegrationTests",
        "testMethod": "concurrentUpdate[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "shouldReadAndWriteSimpleCacheKey[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRange[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLastTimeout[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.DefaultRedisCacheWriterTests",
        "testMethod": "putIfAbsentShouldAddEternalEntryWhenKeyDoesNotExist[1: LettuceConnectionFactory]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekLast[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollectionWithMaxElements[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "shouldReadBackExplicitTimeToLiveWhenFetchingList[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "size[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "union[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testGetKey[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.listener.KeyExpirationEventMessageListenerTests",
        "testMethod": "listenerShouldPublishEventCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTake[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
        "testMethod": "testIncrementAndGet[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testScanWorksCorrectly[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToArrayWithGenerics[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexUnbounded[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithLimit[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRange[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testElement[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentReplaceTwoArgs[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronized[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testRawKeys[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOffer[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionTail[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRandomMembersNegative[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "evictShouldRemoveKey[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "difference[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIntersectAndStore[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollTimeout[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronized[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRange[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testClear[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testSize[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testSize[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testKeySet[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.script.jedis.JedisDefaultScriptExecutorTests",
        "testMethod": "org.springframework.data.redis.core.script.jedis.JedisDefaultScriptExecutorTests",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddAll[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testLast[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrementDouble[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentReplaceOneArg[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.script.DefaultReactiveScriptExecutorTests",
        "testMethod": "shouldApplyCustomArgsSerializer",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollectionWithMaxElements[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testReverseRangeByScoreWithScoresOffsetCount[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testScore[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSet[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testStringPropertyNames[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByLexLimit[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[6]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpirationWithTimeUnitMilliseconds[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "differenceAndStore[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testContainsValue[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTake[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetFirst[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRank[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "set[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateComplexTypedMap[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testConcurrentRead[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "set[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAdd[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "getWithCallableShouldNotResolveValueIfPresent[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testSize[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPop[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lIndexShouldReturnValueCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemove[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpirationWithTimeUnitMilliseconds[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedNullNotAllowingNull[0]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testUnion[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "removeAll[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRange[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirst[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrement[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToString[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getRange[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullValue[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAdd[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushIfPresent[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testMove[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRange[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSort[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRemove[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionHead[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeWithScores[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesLoad[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollFirst[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpirationWithTimeUnitMilliseconds[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecuteScriptCustomSerializers[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekLast[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentRemove[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "isMember[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRmoveLastOccurrence[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testClear[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "intersectAndStoreShouldReturnNumberOfElementsInDestination[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testDeserializeKey[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRank[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectTail[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "sizeRetrievesDataCorrectly[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testClear[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testHashCode[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRank[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "deleteRemovesEntriesCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLastTimeout[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveObject[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "testMethod": "testDecrementAndGet[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "range[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollectionWithMaxElements[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "executeScript[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testLast[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "removeAll[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "index[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetFirst[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSize[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveObject[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lPushShouldPrependValuesCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushWithPivot[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testUnionAndStore[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAllCollection[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingPipelining[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testEquals[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "size[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPutAll[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testAddAll[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetAndGetBit[4]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testValues[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushAll[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushIfPresent[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testDiffAndStore[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirst[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "testMethod": "multiGet[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByLex[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeLast[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRandomMembersNegative[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testCappedCollection[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testPop[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetOperations[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScore[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPop[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testContainsObject[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPut[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToArray[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirstOccurrence[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIsEmpty[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRange[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIsEmpty[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillis[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushIfPresent[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOffer[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testValues[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectHead[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lInsertShouldAddValueCorrectlyBeforeExisting[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexBounded[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetRange[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testHashCode[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPutIfAbsent[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testDeserializeKey[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testUnionAndStore[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIsEmpty[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPoll[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "leftPushAllShouldThrowExceptionWhenCalledWithNull[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAddAll[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "count[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRestoreTtl[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCachePut[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.DefaultRedisCacheWriterTests",
        "testMethod": "getShouldReturnValue[0: JedisConnectionFactory]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectHead[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRange[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArrayWithGenerics[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "add[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testHashCode[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldThrowExceptionOnInvalidType[6]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyDoesNotExist[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSort[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRandomMember[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAll[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRange[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "bitOpAndShouldWorkAsExpected[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnNullIfNoCachedValueFound[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testKeys[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "executeScriptWithElementReaderAndWriter[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsent[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAllCollection[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetPropertyDefault[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "bitCountShouldCountInRangeCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testHashCode[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeByScore[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIsEmpty[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToArrayWithGenerics[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetOperations[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testEquals[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testClear[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekFirst[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests",
        "testMethod": "testGetConnectionException",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testSize[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRename[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "updateShouldAlterIndexDataCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testClear[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
        "testMethod": "testDecrementAndGet[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "getShouldRetrieveEntry[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "incrementScore[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testKeySet[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "delete[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "removeRange[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentReplaceOneArg[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testSize[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testSize[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getBit[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekFirst[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCachePut[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "updateShouldAlterGeoIndexCorrectlyOnUpdate[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testSize[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testPersist[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExec[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "popWithCount[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRestoreTtl[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToArray[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "shouldDeleteKeyCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testAppend[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveScriptingCommandsTests",
        "testMethod": "evalShouldFailWithScriptError[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecuteScriptCustomSerializers[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirst[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testContainsAll[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullNewValue[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddFirst[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "clientListShouldReturnCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullSessionCallback[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheClear[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddLast[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.JedisConnectionFactoryIntegrationTests",
        "testMethod": "shardInfoShouldOverrideFactorySettings",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "putIfAbsentShouldSetValueOnlyIfNotPresent[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLast[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToString[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "testMethod": "testGetAndSet[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPut[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testSSCanReadsValuesFully[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hKeysShouldReturnFieldsCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutFirst[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrement[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveLast[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyDoesNotExist[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLast[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeByScoreWithScores[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "shouldApplyCustomSerializationContextToValues[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "delete[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testFirst[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRemRangeByRankShouldRemoveValuesCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithScores[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGet[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddLast[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRange[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testScanWorksCorrectly[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRangeByLex[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemove[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullOldValue[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedNullWithStoredNull[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPop[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAdd[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testFirstException[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDumpAndRestoreNoTtl[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirst[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirst[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPush[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGet[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToArrayWithGenerics[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToArray[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testScanWorksCorrectly[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "shouldReadBackExplicitTimeToLiveWhenFetchingList[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddFirst[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testSize[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeek[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToString[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateSimpleTypedMap[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testLastException[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPutIfAbsent[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullRedisCallback[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSet[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionHead[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushIfPresent[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIntersectAndStore[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testHashCode[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArray[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testFirstException[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetSet[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTx[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnNullIfNoCachedValueFound[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests",
        "testMethod": "valueOperationSetShouldBeRolledBackCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zUnionStoreShouldWorkCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSort[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "shouldDeleteKeysInMultipleBatchesCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "shouldDeleteKeysInBatchCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetKey[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testPersist[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "rename[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testScore[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrementNotNumber[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.apache.maven.surefire.junit4.JUnit4Provider",
        "testMethod": "org.springframework.data.redis.connection.jedis.JedisConnectionTransactionIntegrationTests",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hGetShouldReturnNullForNotExistingField[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "removeAll[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testPopWithCount[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemove[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetSet[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "size[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionTail[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexUnboundedWithLimit[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIterator[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullValue[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatch[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexUnbounded[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetAndSet[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSize[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveObject[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDumpAndRestoreNoTtl[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateObjectTypedMap[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "remove[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPut[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldThrowExceptionOnInvalidType[2]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionHead[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemove[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyDoesNotExist[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSet[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortBulkMapper[5]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests",
        "testMethod": "geoHash[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByLexWithLimit[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRange[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testScanWorksCorrectly[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveObject[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheClear[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testValues[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest",
        "testMethod": "valueOperationSetShouldBeCommittedCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hSetShouldOperateCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectMiddle[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "intersectAndStoreShouldReturnNumberOfElementsInDestination[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionMiddle[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateComplexTypedList[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekLast[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopAndLeftPush[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemove[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testUnwatch[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionTail[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithScores[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectHead[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "union[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullNewValue[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateObjectType[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsent[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsentFailure[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScore[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIntersect[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testSize[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeek[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testClear[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullSessionCallback[4]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "delete[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "remove[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "pop[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testContainsAll[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPushTimeout[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getBit[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToArray[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testClear[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testRawKeysCollection[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testContainsObject[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPopWithTimeout[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSize[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRange[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "remove[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithLimit[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testNotEquals[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testAddAll[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectHead[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest",
        "testMethod": "testNumberOfOperationsEqualToNumberOfConnections",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "putWritesSimpleIndexDataCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveScriptingCommandsTests",
        "testMethod": "evalShaShouldReturnMulti[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testDefaultScore[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexUnbounded[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "mGetShouldRetrieveValuesCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testNotEquals[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRank[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullOldValue[15]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushIfPresent[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testConcurrentRead[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testValues[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrement[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentReplaceTwoArgs[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAddAll[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeek[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddFirst[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "testMethod": "putIfAbsent[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithScoresWithLimit[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAll[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testStringPropertyNames[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirst[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLastTimeout[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testDefaultInit[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrement[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "incrementScore[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "index[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "intersectAndStore[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testConvertAndSend[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests",
        "testMethod": "geoRadiusByMemberShouldReturnDistanceCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDescendingIterator[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRandomKey[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTxCustomSerializer[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "members[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferLast[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testClear[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRename[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekFirst[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentReplaceOneArg[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetAndGetBit[6]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrement[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPoll[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "renameNx[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAndGetExpireMillis[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testAdd[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "get[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionTail[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirst[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "score[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
        "testMethod": "testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoValueSerializer[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPopWithMillisecondTimeoutShouldFail[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisNotSupported[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "rename[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAt[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRangeByScoreShouldReturnValuesCorrectlyWithMaxExclusion[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSize[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOffer[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrement[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingPipelining[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullValue[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "size[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLastTimeout[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setBit[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testContainsAll[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecCustomSerializer[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushAll[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "union[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollection[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPut[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOffer[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "removeRangeByScore[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelined[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "delete[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPop[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeLast[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testEquals[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setWithExpiry[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisNotSupported[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "updateShouldRemoveSimpleListValuesCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSeconds[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionHead[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullNewValue[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentReplaceTwoArgs[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "move[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDescendingIterator[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateObjectTypedMap[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "addAll[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "setEXshouldSetKeyAndExpirationTime[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectTail[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "putWritesDataCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testClear[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIntersectAndStore[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIndexOfObject[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testContainsKey[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrementDouble[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveNumberCommandsTests",
        "testMethod": "decrByIntegerShouldDecreaseValueCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "executeScriptWithElementReaderAndWriter[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTrim[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnCachedInstance[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingPipelining[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopWithTimeout[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "difference[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testRemove[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAndGetExpireMillis[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testReverseRangeByScoreOffsetCount[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPushTimeout[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIterator[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecConversionDisabled[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetRange[7]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpiration[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExec[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testSize[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemove[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRename[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIsEmpty[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testContainsObject[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "trim[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPoll[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecConversionDisabled[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lTrimShouldReturnValuesCorrectlyWithMaxUnbounded[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRandomMember[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferFirst[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillis[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRangeByScoreShouldReturnValuesCorrectlyWithMinUnbounded[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTrim[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullNewValue[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRange[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeWithScores[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAtMillisNotSupported[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollFirst[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sIsMemberShouldReturnTrueWhenValueContainedInKey[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testFirstException[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "set[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDescendingIterator[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnNullIfNoCachedValueFound[15]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexUnbounded[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushIfPresent[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectTail[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testHashCode[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyDoesNotExist[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "add[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsentFailure[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "shouldPersist[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "expireAt[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutLast[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPopWithTimeout[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testEquals[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "getTtlForKeyWithoutExpiryShouldCompleteWithZeroDuration[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecCustomSerializer[3]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "incrementScore[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionTail[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGet[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "getWithCallableShouldNotResolveValueIfPresent[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetPropertyDefault[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionMiddle[7]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPushTimeout[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsAll[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectMiddle[7]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferLast[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultHashOperationsTests",
        "testMethod": "testHScanReadsValuesFully[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushIfPresent[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAdd[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "zCardRetrievesDataCorrectly[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferLast[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingTransactions[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testContainsAll[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSize[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemove[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollTimeout[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGetKey[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "removeAll[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "getShouldRetrieveEntry[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddLast[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPut[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPopWithTimeout[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIsEmpty[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveNumberCommandsTests",
        "testMethod": "incrByIntegerShouldIncreaseValueCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetFirst[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDiscard[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullSessionCallback[2]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatch[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectTail[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "remove[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIntersectAndStore[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithScores[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testHashCode[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeWithScores[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testContainsObject[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTxCustomSerializer[7]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPutIfAbsent[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testUnionAndStore[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "difference[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testContainsObject[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyDoesNotExist[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.CompareAndSetIntegrationTests",
        "testMethod": "concurrentUpdate[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTake[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testPop[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollectionWithMaxElements[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "removeAll[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsObject[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testValues[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDiscard[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeWithScores[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testEquals[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.script.DefaultReactiveScriptExecutorTests",
        "testMethod": "shouldReturnValueResult",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByLexLimit[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetRange[1]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "leftPushAllShouldThrowExceptionWhenCalledWithNull[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRange[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setWithExpiry[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testClear[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatch[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
        "testMethod": "testGetAndSet[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testClear[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPushTimeout[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByScoreOffsetCount[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRmoveLastOccurrence[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectMiddle[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "fetchKeyWithComputedPrefixReturnsExpectedResult[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testDefaultInit[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutFirst[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexUnbounded[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRangeByScoreShouldReturnValuesCorrectlyWithMinExclusion[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeWithScores[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetAndSet[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testContainsObject[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutFirst[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLastTimeout[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIterator[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireNoTimeUnit[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIsEmpty[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsentFailure[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "removeRangeByScore[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testEntrySet[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putShouldAddEntry[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillis[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIterator[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testStringPropertyNames[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "size[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sMoveShouldReturnOperateCorrectlyWhenValueAlreadyPresentInTarget[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpiration[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushIfPresent[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesList[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTrim[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronized[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrementNotNumber[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "shouldReadAndWriteSimpleCacheKey[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithScores[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "pushShouldThrowErrorForMoreThanOneValueWhenUsingExistsOption[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectTail[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGetOperations[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testCappedCollection[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testKeySet[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTxCustomSerializer[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "preciseExpire[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testStringPropertyNames[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetRange[2]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDescendingIterator[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDeleteMultiple[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferLast[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "incrementScore[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementLong[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeByScore[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testMove[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeByScoreWithScores[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRangeWithScoreShouldReturnTuplesCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetSet[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testElement[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSort[5]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "removeRangeByScore[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "renameNx[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRemRangeByRankShouldRemoveValuesCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testDefaultScore[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTxCustomSerializer[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpiration[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollectionWithMaxElements[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushIfPresent[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetSet[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatchMultipleKeys[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirst[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
        "testMethod": "testShouldBeAbleToUseRedisAtomicIntegerWithProperlyConfiguredRedisTemplate[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemoveObject[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAt[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutFirst[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrementNotNumber[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiGet[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testDistinctRandomMembersNegative[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests",
        "testMethod": "simpleFindShouldReturnEntitiesCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "delete[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRemove[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAddAll[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "getShouldRetrieveEntry[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "move[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHyperLogLogCommandsTests",
        "testMethod": "pfCountWithMultipleKeysShouldReturnCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testIncrementScore[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "getWithCallableShouldResolveValueIfNotPresent[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithLimit[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testUnwatch[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithScores[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "removeAll[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "brPopLPushShouldWorkCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexBoundedWithLimit[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRange[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIterator[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexBounded[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testConvertAndSend[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSet[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "exists[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testSize[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementDouble[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutFirst[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveScriptingCommandsTests",
        "testMethod": "evalShouldReturnBooleanFalse[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRevRangeByScoreWithScoreShouldReturnTuplesCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testTemplateNotInitialized[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testEntrySet[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "addAll[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testDefaultScore[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setRange[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRange[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "range[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDelete[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testRemoveNullValue[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "updateShouldRemoveComplexObjectCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeFirst[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullNewValue[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByScore[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "executeScriptWithElementReaderAndWriter[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionHead[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPoll[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testConvertAndSend[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testClear[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testSize[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeLast[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "mSetNXShouldAddMultipleKeyValuePairs[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullValue[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testScanWorksCorrectly[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testType[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "removeAll[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnNullIfNoCachedValueFound[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testCappedCollection[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPutIfAbsent[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPop[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "zCardRetrievesDataCorrectly[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullRedisCallback[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testGetKey[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetAndGetBit[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "get[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testHashCode[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testGetKey[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIntersectAndStore[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testGetKey[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testLast[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "updateShouldAlterIndexDataForObjectsWithColonInIdCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionHead[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRename[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testContainsObject[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutLast[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testLast[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullNewValue[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithScoresWithLimit[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testContainsAll[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "remove[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectHead[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithScoresWithLimit[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "removeAll[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByLexLimit[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "preciseExpireAt[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiSetIfAbsent[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "intersectAndStoreShouldReturnNumberOfElementsInDestination[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutLast[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexUnboundedWithLimit[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRestoreTtl[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "popWithCount[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLastTimeout[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "remove[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeWithScores[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetKey[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "getShouldReturnNullWhenKeyDoesNotExist[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.DefaultRedisCacheWriterTests",
        "testMethod": "getShouldReturnValue[1: LettuceConnectionFactory]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithScoresWithLimit[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemoveObject[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "updateShouldRemoveSimpleMapValuesCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hKeysShouldReturnFieldsCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "isMember[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRange[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "members[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hValsShouldReturnValuesCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testGetKey[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeek[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[16]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPop[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testDefaultInit[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testLastException[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "popWithCount[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPush[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeByScoreWithScores[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testKeySet[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeByScoreWithScores[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getBit[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionTail[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testNotEquals[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddLast[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests",
        "testMethod": "listOperationLPushShoudBeRolledBackCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testClear[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRandomMembersWithDuplicates[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "add[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutLast[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireNoTimeUnit[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveNumberCommandsTests",
        "testMethod": "hIncrByIntegerShouldIncreaseValueCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecuteScriptCustomSerializers[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisCollectionFactoryBeanTests",
        "testMethod": "testExistingCol",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testCappedCollection[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "add[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentReplaceOneArg[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetAndGetBit[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "setShouldAddValueCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "leftPushAllShouldThrowExceptionWhenCalledWithNull[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToArray[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutFirst[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingTransactions[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSort[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingTransactions[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRank[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests",
        "testMethod": "geoAddShouldAddMultipleGeoLocationsCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testAppend[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollTimeout[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopWithTimeout[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisNotSupported[8]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "updateShouldAlterGeoIndexCorrectlyOnDelete[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexBoundedWithLimit[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPop[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeek[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveScriptingCommandsTests",
        "testMethod": "evalShouldReturnMultiNumbers[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentReplaceOneArg[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "shouldApplyCustomSerializationContextToValues[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekFirst[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingTransactions[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "executeScriptWithElementReaderAndWriter[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "getSetShouldNotEmitPreviousValueCorrectlyWhenNotExists[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddAll[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testHashCode[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testDeserializeKey[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testCappedCollection[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementDouble[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "shouldReportTimeToLiveCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentReplaceTwoArgs[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testHashCode[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "size[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testRemove[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDelete[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullOldValue[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddLast[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsentFailure[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSet[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testDiffAndStore[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeWithScores[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDescendingIterator[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentRemove[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPoll[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lRemSouldRemoveLastValuesCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getAndSet[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpirationWithTimeUnitMilliseconds[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveScriptingCommandsTests",
        "testMethod": "evalShouldReturnBooleanFalse[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesSave[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRemove[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "couldReadsKeyspaceSizeCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "removeAll[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "set[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRank[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionTail[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "expire[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetRange[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesLoad[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "isMember[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "getTtlForAbsentKeyShouldCompleteWithoutValue[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPopWithMillisecondTimeoutShouldFail[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testScore[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.DefaultRedisCacheWriterTests",
        "testMethod": "lockingCacheWriterShouldIgnoreExistingLockOnDifferenceCache[1: LettuceConnectionFactory]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetKey[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSet[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireNoTimeUnit[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekFirst[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToString[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testLast[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "removeRange[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectTail[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirstOccurrence[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "getWithCallableShouldNotResolveValueIfPresent[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushAll[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArray[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGetKey[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "rPushShouldAppendValuesCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecConversionDisabled[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHyperLogLogCommandsTests",
        "testMethod": "pfCountWithMultipleKeysShouldReturnCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingTransactions[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArray[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddAll[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullValue[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsAll[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetKey[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionTail[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentReplaceOneArg[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIsEmpty[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrementDouble[15]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "popWithCount[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "randomMembers[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRange[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRandomKey[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testFirstException[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "size[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests",
        "testMethod": "geoRadiusShouldReturnDistanceCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingPipelining[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testSSCanReadsValuesFully[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "removeRange[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateShouldLeaveIndexesNotInvolvedInUpdateUntouched[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRmoveLastOccurrence[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekLast[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIntersect[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullOldValue[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "shouldDeleteKeysCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests",
        "testMethod": "geoHashNotExisting[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementDouble[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testAddMultiple[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentReplaceTwoArgs[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testRawKeys[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveObject[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testEquals[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPop[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddLast[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRange[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithScoresWithLimit[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferFirst[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testSSCanReadsValuesFully[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testType[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "zCardRetrievesDataCorrectly[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRmoveLastOccurrence[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDescendingIterator[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAndGetExpireMillis[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferLast[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithLimit[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "expireAt[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testHashCode[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddFirst[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesSave[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPop[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testHashCode[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArrayWithGenerics[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDeleteMultiple[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testContainsAll[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByLex[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "testMethod": "get[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testRemove[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "preciseExpire[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "get[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testCappedCollection[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAt[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetRange[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutFirst[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testStringTemplateExecutesWithStringConn[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByLex[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeWithScores[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRangeByScoreShouldReturnValuesCorrectlyWithMaxExclusion[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPutIfAbsent[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronized[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testLast[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortStore[3]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testScanWorksCorrectly[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPushTimeout[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsObject[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putShouldAddEntry[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExec[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingTransactions[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddLast[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSort[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testGetKey[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "add[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithScores[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "type[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testRemove[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "removeAll[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollection[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithScoresWithLimit[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lPopSouldRemoveFirstValueCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testConcurrentRead[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddFirst[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullValue[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setBit[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hMGetShouldReturnNullValueForFieldsThatHaveNoValue[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRemShouldRemoveValuesFromSet[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testSize[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "intersectAndStore[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetSet[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSize[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "size[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesList[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testLast[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testEntrySet[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testSize[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingPipelining[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "popWithCount[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "rightPushAllShouldThrowExceptionWhenCalledWithNull[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyDoesNotExist[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexBoundedWithLimit[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingPipelining[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testSize[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexBounded[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollFirst[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "testMethod": "testGetAndDecrement[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "expireAt[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getBit[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIterator[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "members[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testDiffAndStore[0]",
        "failureName": "java.lang.ExceptionInInitializerError",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRestoreTtl[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testIncrementScore[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDelete[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testLastException[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByScoreWithScores[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPop[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testRawKeys[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "renameNx[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLastTimeout[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "intersectAndStore[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putIfAbsentShouldReturnExistingNullValueIfExists[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRemRangeByScoreShouldRemoveValuesCorrectlyWithExcludingMinRange[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testElement[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPut[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testElement[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetPropertyDefault[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferLast[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisNotSupported[2]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "union[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAll[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeek[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementLong[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferFirst[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionMiddle[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRange[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddLast[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateComplexType[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRenameIfAbsent[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetOperations[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests",
        "testMethod": "factoryWorksWithoutClientResources",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiSet[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testPersist[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithScoresWithLimit[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lRangeShouldReturnValuesCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByScore[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToArray[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateSimpleTypedList[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingTransactions[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "set[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToString[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests",
        "testMethod": "findUsingOrReturnsResultCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testRemoveNullValue[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testType[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testDefaultScore[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRange[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testHashCode[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testScanWorksCorrectly[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRank[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddLast[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveScriptingCommandsTests",
        "testMethod": "evalShaShouldFail[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
        "testMethod": "testIncrementAndGet[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecuteScriptCustomSerializers[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortStore[5]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testKeySet[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullNewValue[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortBulkMapper[0]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests",
        "testMethod": "testConnectionErrorNoValidate",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeFirst[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetRange[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetAndGetBit[2]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRank[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushIfPresent[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSize[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpiration[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "removeAll[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "shouldReadAndWriteSimpleCacheKey[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "shouldApplyCustomSerializationContextToHash[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "unionAndStore[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testRemoveNullValue[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLastTimeout[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "size[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddAll[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testNotEquals[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectTail[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testPop[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRange[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPut[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testClear[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "renameNx[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testHashCode[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSet[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.script.DefaultReactiveScriptExecutorTests",
        "testMethod": "executeAddsScriptToScriptCache",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollection[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAdd[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveScriptingCommandsTests",
        "testMethod": "evalShaShouldFail[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushAll[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testDeserializeKey[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetProperty[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "shouldReadBackExplicitTimeToLive[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrement[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testEntrySet[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectHead[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRestoreTtl[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeLast[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionTail[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAdd[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetRange[3]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectHead[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "unionAndStore[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemove[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedCustomSerializer[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIterator[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPop[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesList[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullSessionCallback[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelined[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setIfAbsent[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "add[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekFirst[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "randomMember[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetOperations[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetKey[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullOldValue[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectHead[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAddAll[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisNotSupported[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByScoreWithScoresOffsetCount[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setIfPresent[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPut[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionTail[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testUnion[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollTimeout[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectTail[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollectionWithMaxElements[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.DefaultRedisCacheWriterTests",
        "testMethod": "cleanShouldRemoveAllKeysByPattern[0: JedisConnectionFactory]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullSessionCallback[8]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentRemove[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPutAll[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "putIfAbsentShouldSetValueOnlyIfNotPresent[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testGetKey[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSize[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionHead[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "count[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRevRangeByLex[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollFirst[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushIfPresent[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGet[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testTemplateNotInitialized[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRange[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSet[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testRemove[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsAll[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetSet[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferLast[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "size[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToArray[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToArrayWithGenerics[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRange[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testElement[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rank[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setWithExpiry[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hLenShouldReturnSizeCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getRange[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRmoveLastOccurrence[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPutIfAbsent[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "intersectAndStoreShouldReturnNumberOfElementsInDestination[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "executeScript[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPush[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatchMultipleKeys[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushWithPivot[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testValues[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testDeserializeKey[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDiscard[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRankShouldReturnIndexCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollection[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIsEmpty[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferFirst[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "removeAll[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillis[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAndGetExpireMillis[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest",
        "testMethod": "valueOperationSetShouldBeCommittedCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexBounded[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testDistinctRandomMembersNegative[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testRemoveNullValue[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "testMethod": "testCheckAndSet[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollectionWithMaxElements[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToString[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeWithScores[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeFirst[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementDouble[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testClear[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPutAll[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lRangeShouldReturnValuesCorrectlyWithMinUnbounded[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "delete[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGet[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testContainsObject[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldThrowExceptionOnInvalidType[10]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushWithPivot[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testContainsAll[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSize[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByLex[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAtMillisNotSupported[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemove[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRestoreTtl[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "remove[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekLast[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectTail[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrementNotNumber[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "preciseExpire[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAtMillisNotSupported[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirstOccurrence[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "preciseExpireAt[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRemove[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemove[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementDouble[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "shouldDeleteKeyCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddAll[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAll[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testRawKeys[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByScoreWithScores[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testContainsValue[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testPersist[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrement[15]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedCustomSerializer[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setWithExpiry[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnNullIfNoCachedValueFound[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[7]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeLast[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "score[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
        "testMethod": "testAddAndGet[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "delete[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementLong[5]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHyperLogLogCommandsTests",
        "testMethod": "pfCountShouldReturnCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "shouldApplyCustomSerializationContextToHash[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexUnboundedWithLimit[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRemRangeByScoreShouldRemoveValuesCorrectlyWithExcludingMaxRange[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDeleteMultiple[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrement[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "type[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByScore[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByLexWithLimit[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheClear[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArray[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "getShouldRetrieveEntry[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectTail[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirst[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "updateShouldRemoveSimpleListValuesCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "fetchKeyWithComputedPrefixReturnsExpectedResult[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testRemove[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testUnionAndStore[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTake[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPut[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExec[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexBoundedWithLimit[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testConvertAndSend[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemoveObject[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSize[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetKey[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullRedisCallback[3]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatchMultipleKeys[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sInterShouldIntersectSetsCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopAndLeftPushWithTimeout[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSet[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testValues[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testContainsValue[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGetOperations[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.listener.SubscriptionConnectionTests",
        "testMethod": "testRemoveLastListener[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetOperations[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecConversionDisabled[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedCustomSerializer[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPopWithMillisecondTimeoutShouldFail[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToArray[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIsEmpty[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "range[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "putIfAbsentShouldSetValueOnlyIfNotPresent[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexBoundedWithLimit[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testLast[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testClear[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeWithScores[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTake[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRmoveLastOccurrence[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetPropertyDefault[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldThrowExceptionOnInvalidType[7]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "removeRange[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testKeys[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testFirst[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArray[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "clientListShouldReturnCorrectly[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushIfPresent[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPoll[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hExistsShouldReturnFalseForNonExistingField[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetPropertyDefault[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIsEmpty[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testHashCode[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelined[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetKey[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "add[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLast[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIsEmpty[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetKey[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToString[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByLex[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnCachedInstance[15]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnCachedInstance[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "leftPushAllShouldThrowExceptionWhenCalledWithNull[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zCountShouldCountValuesInRangeWithMinExlusion[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testUnionAndStore[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushIfPresent[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testStringTemplateExecutesWithStringConn[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldRetunInstanceOfCorrectType[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferFirst[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSet[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithScores[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSeconds[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testContainsObject[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "delete[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testTemplateNotInitialized[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRange[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "sizeRetrievesDataCorrectly[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "updateShouldAlterIndexDataOnNestedObjectCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest",
        "testMethod": "valueOperationSetShouldBeRolledBackCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCachePut[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectTail[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
        "testMethod": "getAndSetReturnsZeroWhenKeyHasBeenRemoved[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutFirst[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getRange[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecuteScriptCustomSerializers[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.TransactionalLettuceIntegrationTests",
        "testMethod": "valueOperationSetShouldBeRolledBackCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testIncrementScore[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByLexWithLimit[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddAll[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.script.lettuce.LettuceDefaultScriptExecutorTests",
        "testMethod": "org.springframework.data.redis.core.script.lettuce.LettuceDefaultScriptExecutorTests",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.core.script.AbstractDefaultScriptExecutorTests",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rank[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopAndLeftPush[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testClear[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRemove[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveLast[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testRemoveNullValue[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRemove[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIsEmpty[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveNumberCommandsTests",
        "testMethod": "hIncrByDoubleShouldIncreaseValueCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testSize[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemove[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldThrowExceptionOnInvalidType[5]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToArray[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testLast[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lSetSouldSetValueCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveLast[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIntersect[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests",
        "testMethod": "geoRadiusByMemberShouldReturnMembersCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIsEmpty[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddFirst[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddAll[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "removeRangeByScore[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest",
        "testMethod": "testNumberOfOperationsGreaterThanNumberOfConnections",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "brPopShouldReturnLastAvailable[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "getTtlForKeyWithoutExpiryShouldCompleteWithZeroDuration[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "getWithCallableShouldResolveValueIfNotPresent[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRevRangeByScoreWithScoreShouldReturnTuplesCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferLast[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest",
        "testMethod": "listOperationLPushShoudBeRolledBackCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testContainsObject[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPut[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireNoTimeUnit[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testContainsObject[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentRemove[15]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnNullIfNoCachedValueFound[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "set[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.script.DefaultReactiveScriptExecutorTests",
        "testMethod": "shouldReturnStatusValue",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testEquals[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDeleteMultiple[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sMembersReadsValuesFromSetCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDumpAndRestoreNoTtl[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGetOperations[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortStore[4]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveLast[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPut[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "shouldApplyCustomSerializationContextToHash[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "rename[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollection[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPop[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRank[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeek[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "testMethod": "testIncrementAndGet[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getAndSet[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testConvertAndSend[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByScoreWithScores[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIterator[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullNewValue[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCachePut[17]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testCappedCollection[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "blPopShouldReturnFirstAvailable[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionHead[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests",
        "testMethod": "testCreateFactoryWithPool",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testLast[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldThrowExceptionOnInvalidType[9]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "move[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
        "testMethod": "getThrowsExceptionWhenKeyHasBeenRemoved[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "size[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testSize[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testValues[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddFirst[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSize[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByScoreOffsetCount[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "difference[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecuteScriptCustomSerializers[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddFirst[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "getTtlForAbsentKeyShouldCompleteWithoutValue[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testSize[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testHashCode[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testEquals[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "removeAll[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPutAll[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testPop[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeek[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPutAll[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireNoTimeUnit[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setRange[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeByScoreWithScores[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetAndSet[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.listener.KeyExpirationEventMessageListenerTests",
        "testMethod": "listenerShouldPublishEventCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAll[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullOldValue[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLast[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullValue[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTrim[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArrayWithGenerics[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testContainsAll[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullSessionCallback[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testHashCode[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "move[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTxCustomSerializer[3]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testEquals[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToString[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushIfPresent[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithScoresWithLimit[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOffer[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSize[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeWithScores[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testAddMultiple[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateSimpleType[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "move[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testUnionAndStore[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertyNames[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSet[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testDiff[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "renameNXShouldNotAlterExistingKeyName[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrementDouble[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPoll[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testLastException[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testRemoveNullValue[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "computePrefixCreatesCacheKeyCorrectly[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testReverseRangeByScoreOffsetCount[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeLast[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testScanWorksCorrectly[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "union[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "size[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "mSetNXShouldAddMultipleKeyValuePairs[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddFirst[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIterator[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setBit[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollection[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testCappedCollection[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "renameNx[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testDiff[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutLast[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "removeAll[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirstOccurrence[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferLast[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testRemoveNullValue[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollTimeout[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexUnbounded[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests",
        "testMethod": "shouldReturnEmptyListWhenPageableOutOfBoundsUsingFindAll",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectMiddle[14]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekLast[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIndexOfObject[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testRemove[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testSize[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIsEmpty[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveLast[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "removeAll[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.listener.SubscriptionConnectionTests",
        "testMethod": "testStopListening[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionHead[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeek[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAll[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testScanWorksCorrectly[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDelete[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesList[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "bitCountShouldCountInRangeCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollection[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeWithScores[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArrayWithGenerics[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCachePut[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIterator[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAdd[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDiscard[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushWithPivot[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveLast[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetAndSet[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sRandMemberReturnsRandomMember[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushAll[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexBounded[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullValue[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "members[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeWithScores[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testLast[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
        "testMethod": "testAddAndGet[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testPersist[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "delete[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithScoresWithLimit[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddLast[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testEquals[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSize[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnCachedInstance[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testAddAll[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.script.DefaultReactiveScriptExecutorTests",
        "testMethod": "shouldReturnValueResult",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "exists[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "updateShouldAlterIndexesCorrectlyWhenValuesGetRemovedFromHash[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortBulkMapper[7]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lRemSouldRemoveFirstValuesCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToArray[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollection[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollectionWithMaxElements[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testFirst[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollTimeout[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutLast[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedNullAllowingNull[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "executeScriptWithElementReaderAndWriter[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSize[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutLast[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirstOccurrence[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testDefaultInit[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testConvertAndSend[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionTail[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "existsShouldReturnTrueForExistingKeys[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetFirst[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "rightPushAllShouldThrowExceptionWhenCalledWithNull[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentReplaceOneArg[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullRedisCallback[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testContainsValue[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTrim[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAt[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[2]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecCustomSerializer[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpirationWithTimeUnitMilliseconds[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "computePrefixCreatesCacheKeyCorrectly[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getRange[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testAppend[8]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferFirst[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testKeys[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testNotEquals[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.apache.maven.surefire.junit4.JUnit4Provider",
        "testMethod": "org.springframework.data.redis.connection.jedis.JedisConnectionPipelineIntegrationTests",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithScoresWithLimit[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "remove[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPutIfAbsent[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testAdd[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "shouldExpireKeysCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "updateShouldRemoveComplexMapValuesCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPop[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testUnwatch[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTx[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeFirst[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests",
        "testMethod": "nearQueryShouldFindNothingIfOutOfRange",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecConversionDisabled[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPush[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAt[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTake[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "removeAll[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testReverseRangeByScoreOffsetCount[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest",
        "testMethod": "listOperationLPushShouldBeCommittedCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushIfPresent[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldThrowExceptionOnInvalidType[11]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testContainsAll[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testLast[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "updateShouldRemoveComplexObjectCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setBit[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedNullAllowingNull[15]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "exists[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeWithScores[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetIfAbsent[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "shouldReadBackExplicitTimeToLiveAndSetItToMinusOnelIfPersisted[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "incrementScore[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementLong[4]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "testMethod": "entries[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "renameNx[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSet[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToArray[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getAndSet[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpiration[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeek[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddLast[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIsEmpty[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollectionWithMaxElements[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSize[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRandomKey[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferLast[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPop[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSeconds[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "findProcessesCallbackReturningMultipleIdsCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveObject[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "differenceAndStore[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "getTtlForKeyWithoutExpiryShouldCompleteWithZeroDuration[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testAddAll[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementDouble[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPopWithMillisecondTimeoutShouldFail[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "shouldRejectNonInvalidKey[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testLast[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArray[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPutIfAbsent[15]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPoll[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPushTimeout[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByScoreWithScoresOffsetCount[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullOldValue[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "score[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsentFailure[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAll[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSize[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentReplaceTwoArgs[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAdd[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentReplaceOneArg[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "union[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIterator[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testSize[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "removeRange[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.TransactionalLettuceIntegrationTests",
        "testMethod": "valueOperationShouldWorkWithReadOnlyTransactions",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPop[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPoll[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testHashCode[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "clientListShouldReturnCorrectly[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSize[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "delete[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testEntrySet[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "getShouldReturnNullWhenKeyDoesNotExist[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testClear[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScore[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPut[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelined[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatchMultipleKeys[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemove[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "size[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setRange[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveScriptingCommandsTests",
        "testMethod": "evalShouldReturnStatus[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushAll[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecConversionDisabled[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionHead[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testStringTemplateExecutesWithStringConn[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "keyExpiredEventWithoutKeyspaceShouldBeIgnored[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testHashCode[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexUnboundedWithLimit[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "renameShouldThrowErrorWhenKeyDoesNotExist[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSeconds[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrementNotNumber[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPut[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getBit[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutFirst[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedCustomSerializer[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedThrowsExceptionInValueLoader[17]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrement[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullRedisCallback[1]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPush[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "distinctRandomMembers[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDumpAndRestoreNoTtl[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollection[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyDoesNotExist[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIntersect[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByScoreOffsetCount[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectHead[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetSet[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testRawKeysCollection[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeFirst[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "delete[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemainingCapacity[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testHashCode[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "size[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTx[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexBoundedWithLimit[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "shouldApplyCustomSerializationContextToValues[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testRemoveObject[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIsEmpty[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollFirst[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentRemove[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testScanWorksCorrectly[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatchMultipleKeys[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIsEmpty[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLastTimeout[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollFirst[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectHead[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPut[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRenameIfAbsent[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPutAll[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithScoresWithLimit[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPutAll[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "expireAt[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testConcurrentRead[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRenameIfAbsent[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIsEmpty[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollectionWithMaxElements[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "testMethod": "hasKey[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetSet[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "unionAndStore[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopAndLeftPushWithTimeout[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
        "testMethod": "testCompareSet[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnCachedInstance[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
        "testMethod": "testCheckAndSet[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPopWithTimeout[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementLong[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "move[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testRemoveObject[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutLast[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "setEXshouldSetKeyAndExpirationTime[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithLimit[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.DefaultRedisCacheWriterTests",
        "testMethod": "putShouldAddExpiringEntry[0: JedisConnectionFactory]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldThrowExceptionOnInvalidType[4]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnNullIfNoCachedValueFound[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRange[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testContainsValue[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExec[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.script.DefaultReactiveScriptExecutorTests",
        "testMethod": "shouldReturnBoolean",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testScanWorksCorrectly[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testHashCode[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullNewValue[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToArrayWithGenerics[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionTail[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testEquals[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "shouldApplyCustomSerializationContextToHash[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testHashCode[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zAddShouldAddValuesWithScores[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testLastException[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectHead[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lRangeShouldReturnValuesCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testLast[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultHashOperationsTests",
        "testMethod": "testHScanReadsValuesFully[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemoveObject[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesList[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeLast[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAt[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopAndLeftPushWithTimeout[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToString[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPutAll[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollTimeout[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testPersist[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "getShouldReturnNullWhenKeyDoesNotExist[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectMiddle[1]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "brPopShouldReturnLastAvailable[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAddAll[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hLenShouldReturnSizeCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLastTimeout[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "expire[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testKeySet[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByLexWithLimit[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectMiddle[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushWithPivot[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToArray[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testHashCode[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveIndex[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushWithPivot[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSeconds[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "randomKeyShouldReturnAnyKey[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutFirst[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sMoveShouldReturnFalseIfValueIsNotAMember[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testDiffAndStore[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushWithPivot[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPoll[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRank[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOffer[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetPropertyDefault[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testHashCode[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testReverseRangeByScoreWithScoresOffsetCount[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testRawKeysCollection[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.DefaultRedisCacheWriterTests",
        "testMethod": "lockingCacheWriterShouldExitWhenInterruptedWaitForLockRelease[0: JedisConnectionFactory]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testValues[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortStore[6]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionMiddle[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecCustomSerializer[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "add[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.apache.maven.surefire.junit4.JUnit4Provider",
        "testMethod": "org.springframework.data.redis.connection.lettuce.LettuceConnectionPipelineIntegrationTests",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "clientListShouldReturnCorrectly[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testRemoveObject[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRank[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushIfPresent[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOffer[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIterator[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOffer[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToArray[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPut[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLastTimeout[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollectionWithMaxElements[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveServerCommandsTests",
        "testMethod": "flushAllShouldRespondCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testSize[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScore[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testUnwatch[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToString[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisNotSupported[1]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testAdd[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "preciseExpire[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "intersect[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekFirst[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putIfAbsentWithNullShouldAddNullValueEntryIfNotExists[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIterator[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPush[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLast[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sRemShouldRemoveValues[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPushTimeout[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testEntrySet[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollection[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIsEmpty[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
        "testMethod": "testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoKeySerializer[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testLast[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushIfPresent[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testAdd[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferFirst[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveObject[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentReplaceTwoArgs[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "remove[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToArrayWithGenerics[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArrayWithGenerics[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "add[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrementDouble[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecConversionDisabled[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScore[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollectionWithMaxElements[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "keyExpiredEventShouldRemoveHelperStructuresForObjectsWithColonInId[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexUnboundedWithLimit[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentRemove[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testSize[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullNewValue[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testValues[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sUnionShouldCombineSetsCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLastTimeout[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSet[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testContainsKey[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiSetIfAbsent[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "unionAndStore[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIndexOfObject[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "differenceAndStore[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPushTimeout[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDescendingIterator[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIsEmpty[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "size[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsObject[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "appendShouldDoItsThing[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "pop[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "getShouldReturnValueWrapperHoldingNullIfNullValueStored[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testUnionAndStore[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToString[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testValues[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "strLenShouldReturnValueCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeWithScores[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIsEmpty[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveObject[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "getShouldReadNestedObjectCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushIfPresent[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPop[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetProperty[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testElement[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiGet[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullOldValue[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveServerCommandsTests",
        "testMethod": "configResetstatShouldRespondCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexUnbounded[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToArray[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "removeRange[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToString[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testDiff[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testEntrySet[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingTransactions[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testAdd[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testClear[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveObject[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGetKey[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementLong[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertyNames[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testCappedCollection[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testClear[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "union[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectTail[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "remove[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushWithPivot[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithLimit[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexUnboundedWithLimit[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemoveByScore[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[5]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddFirst[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "testMethod": "testGetAndDecrement[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRemove[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionTail[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPop[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemoveByScore[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests",
        "testMethod": "shouldApplyTopKeywordCorrectlyWhenCriteriaPresent",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRandomMembersNegative[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIterator[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAllCollection[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedThrowsExceptionInValueLoader[11]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopAndLeftPushWithTimeout[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedNullWithStoredNull[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollFirst[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateShouldLeaveIndexesNotInvolvedInUpdateUntouched[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testCount[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementLong[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekFirst[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRangeByLex[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveIndex[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushAll[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testDefaultInit[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetRange[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "testMethod": "put[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "mSetNXShouldNotAddMultipleKeyValuePairsWhenAlreadyExit[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRange[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferFirst[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "randomMember[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferFirst[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveObject[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRestoreTtl[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "deleteRemovesEntriesCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "removeAll[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testClear[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "removeAll[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecuteScriptCustomSerializers[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeFirst[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testUnion[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPopWithMillisecondTimeoutShouldFail[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "move[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRevRankShouldReturnIndexCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testConvertAndSend[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testContainsObject[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetOperations[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsent[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testLastException[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testAdd[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveIndex[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatch[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "testMethod": "testShouldBeAbleToUseRedisAtomicDoubleWithProperlyConfiguredRedisTemplate[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOffer[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "popWithCount[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetAndGetBit[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "pop[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[3]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testDefaultScore[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekFirst[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRandomMembersWithDuplicates[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testConcurrentRead[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAdd[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeLast[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullValue[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPut[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPut[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "delete[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAll[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrementNotNumber[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateObjectTypedList[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexBoundedWithLimit[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "remove[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRank[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testEntrySet[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testEquals[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPutIfAbsent[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.DefaultRedisCacheWriterTests",
        "testMethod": "nonLockingCacheWriterShouldIgnoreExistingLock[1: LettuceConnectionFactory]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecConversionDisabled[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "count[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "clientListShouldReturnCorrectly[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sMoveShouldReturnFalseIfValueIsNotAMember[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekFirst[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithScoresWithLimit[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "zCardRetrievesDataCorrectly[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekFirst[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testStringTemplateExecutesWithStringConn[4]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDelete[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "sizeRetrievesDataCorrectly[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithLimit[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSize[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetIfAbsent[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testLast[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "randomKeyShouldReturnNullWhenNoKeyExists[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testDeserializeKey[6]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutLast[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemoveByScore[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToString[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortStore[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testClear[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testUnionAndStore[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPop[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithScoresWithLimit[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIndexOfObject[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOffer[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRandomKey[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemainingCapacity[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionTail[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testHashCode[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAllCollection[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "size[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSeconds[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "set[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheClear[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "sizeRetrievesDataCorrectly[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "add[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillis[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAddWithScore[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRange[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemoveObject[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutLast[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "size[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testLast[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testCappedCollection[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullValue[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecuteScriptCustomSerializers[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testRemoveObject[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpiration[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateShouldLeaveIndexesNotInvolvedInUpdateUntouched[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRandomKey[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddLast[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingPipelining[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByLex[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushWithPivot[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testEquals[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRandomKey[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithScores[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "mGetShouldRetrieveValuesCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testClear[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "preciseExpireAt[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopAndLeftPushWithTimeout[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testClear[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
        "testMethod": "testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoValueSerializer[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToArrayWithGenerics[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIterator[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpiration[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "shouldReadBackExplicitTimeToLiveToPrimitiveField[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAllCollection[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollFirst[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollectionWithMaxElements[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesSave[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.listener.SubscriptionConnectionTests",
        "testMethod": "testStopListening[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "randomMembers[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTrim[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testAppend[3]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testEntrySet[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldThrowExceptionOnInvalidType[1]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateObjectType[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "updateShouldAlterIndexesCorrectlyWhenValuesGetRemovedFromHash[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testMove[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPutAll[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByScore[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLastTimeout[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "putIfAbsentShouldSetValueOnlyIfNotPresent[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveScriptingCommandsTests",
        "testMethod": "scriptFlushShouldRemoveScripts[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSize[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIsEmpty[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testNotEquals[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "trim[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "distinctRandomMembers[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushIfPresent[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullValue[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testScore[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testPersist[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testHashCode[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCachePut[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOffer[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "getRangeShouldReturnSubstringCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "expire[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionHead[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSet[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronized[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOffer[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "putIfAbsentShouldSetValueOnlyIfNotPresent[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAndGetExpireMillis[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testDistinctRandomMembers[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferFirst[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectMiddle[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveObject[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIndexOfObject[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentRemove[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectHead[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSet[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "shouldApplyCustomSerializationContextToValues[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelined[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelined[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRank[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetOperations[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirst[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testIncrementScore[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithScores[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecConversionDisabled[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemoveByScore[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireNoTimeUnit[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testSize[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferFirst[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertyNames[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "isMember[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetSet[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveLast[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPopWithTimeout[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionHead[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingTransactions[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedNullAllowingNull[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollFirst[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "members[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveLast[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRange[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testAppend[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrementDouble[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToArray[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionTail[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "move[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testContainsAll[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "exists[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCachePut[15]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullValue[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTx[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "set[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectHead[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnNullIfNoCachedValueFound[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectTail[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testSize[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRange[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedNullNotAllowingNull[8]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemove[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToString[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "isMember[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testAddMultiple[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testNotEquals[15]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "expire[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testGetKey[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testTemplateNotInitialized[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTxCustomSerializer[1]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testHashCode[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRandomMembersNegative[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentRemove[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByScoreWithScores[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeWithScores[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddFirst[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSort[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsentFailure[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetAndSet[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatch[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSet[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveServerCommandsTests",
        "testMethod": "infoShouldRespondCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentRemove[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByScore[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "set[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testScanWorksCorrectly[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDelete[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferFirst[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "set[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeFirst[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rank[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testContainsValue[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGetKey[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRevRangeWithScoreShouldReturnTuplesCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedThrowsExceptionInValueLoader[16]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeFirst[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutFirst[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTrim[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testClear[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGet[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionTail[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLast[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSort[6]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPop[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIsEmpty[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectTail[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrementDouble[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testScanWorksCorrectly[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDiscard[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testStringTemplateExecutesWithStringConn[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest",
        "testMethod": "valueOperationSetShouldBeRolledBackCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getAndSet[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "delete[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "difference[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddFirst[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveLast[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testLast[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testNotEquals[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testClear[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testCappedCollection[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekLast[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testContainsAll[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "trim[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecCustomSerializer[2]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAdd[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testReverseRangeByScoreWithScoresOffsetCount[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPut[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrement[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRenameIfAbsent[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushWithPivot[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPut[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests",
        "testMethod": "factoryShouldReturnReactiveConnectionWhenCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveServerCommandsTests",
        "testMethod": "dbSizeShouldRespondCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testValues[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testConcurrentRead[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "rename[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putIfAbsentShouldReturnExistingIfExists[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollTimeout[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIsEmpty[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testKeys[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testConvertAndSend[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsent[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testLast[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAndGetExpireMillis[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushIfPresent[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireNoTimeUnit[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentReplaceTwoArgs[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "removeAll[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testValues[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesSave[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrementNotNumber[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecuteScriptCustomSerializers[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "removeAll[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushWithPivot[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithScoresWithLimit[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.apache.maven.surefire.junit4.JUnit4Provider",
        "testMethod": "org.springframework.data.redis.connection.lettuce.LettuceConnectionIntegrationTests",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsObject[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testContainsValue[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "isMember[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAddWithScore[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "append[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGet[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sUnionShouldCombineSetsCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSize[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsent[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zCountShouldCountValuesInRangeWithMaxExlusion[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeLast[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAll[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentReplaceOneArg[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPut[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeWithScores[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetRange[4]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGetKey[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testFirstException[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testKeySet[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushIfPresent[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "savesObjectCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushIfPresent[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPush[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "addAll[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionHead[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollectionWithMaxElements[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testPopWithCount[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutLast[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPushTimeout[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testNotEquals[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "shouldReadBackExplicitTimeToLiveToPrimitiveField[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testEquals[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putIfAbsentShouldAddEntryIfNotExists[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesLoad[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollFirst[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "clientListShouldReturnCorrectly[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCachePut[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "randomMember[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAtMillisNotSupported[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexUnbounded[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToArrayWithGenerics[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPop[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsObject[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortBulkMapper[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPut[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setBit[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testClear[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testFirst[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testKeySet[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetIfAbsent[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sAddShouldAddValues[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lRemSouldRemoveAllValuesCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrementNotNumber[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetProperty[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithScores[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirst[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatch[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferFirst[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testLastException[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "shouldMoveToDatabase[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutLast[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpiration[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveGeoOperationsIntegrationTests",
        "testMethod": "initializationError",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetKey[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "testMethod": "testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoKeySerializer[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testLast[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToString[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "updateShouldRemoveComplexListValuesCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSort[4]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddLast[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPush[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRmoveLastOccurrence[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testAddAll[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "randomMember[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "add[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTrim[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAdd[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectMiddle[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "intersectAndStore[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSet[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testStringPropertyNames[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testUnwatch[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushWithPivot[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testEntrySet[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testClear[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "type[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecConversionDisabled[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testPopWithCount[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeByScoreWithScores[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAndGetExpireMillis[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "shouldAllowComplexKeyWithToStringMethod[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testRemoveNullValue[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "renameNXShouldAlterKeyNameCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullOldValue[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpiration[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRmoveLastOccurrence[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTake[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
        "testMethod": "testCheckAndSet[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddLast[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSet[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testReverseRangeByScoreOffsetCount[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushWithPivot[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "removeAll[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrementDouble[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddFirst[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekLast[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopAndLeftPush[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests",
        "testMethod": "shouldApplyPageableCorrectlyWhenUsingFindByWithoutCriteria",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetKey[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIntersectAndStore[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByScoreWithScores[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullOldValue[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLast[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecCustomSerializer[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollFirst[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRename[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLastTimeout[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGet[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDescendingIterator[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests",
        "testMethod": "geoDistShouldReturnDistanceInDesiredMetric[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDescendingIterator[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullRedisCallback[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testFirst[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeFirst[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushIfPresent[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "removeRangeByScore[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "getShouldReadNestedObjectCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRank[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLastTimeout[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testHashCode[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests",
        "testMethod": "shouldApplyTopKeywordCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAll[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testDistinctRandomMembersNegative[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementDouble[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelined[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByLexLimit[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldRetunInstanceOfCorrectType[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putNullShouldAddEntryForNullValue[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testContainsKey[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "score[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTake[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTrim[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "expireAt[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIterator[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testEquals[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrement[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirst[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testMove[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hSetNxShouldReturnFalseIfFieldAlreadyExists[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "union[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortStore[7]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetSet[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollFirst[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "randomKeyShouldReturnAnyKey[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testRemoveNullValue[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest",
        "testMethod": "listOperationLPushShoudBeRolledBackCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.BoundKeyOperationsTest",
        "testMethod": "initializationError",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrement[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecCustomSerializer[6]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testEquals[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementDouble[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testSetProperty[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIterator[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRmoveLastOccurrence[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveScriptingCommandsTests",
        "testMethod": "scriptExistsShouldReturnState[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIsEmpty[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdate[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "add[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDumpAndRestoreNoTtl[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentRemove[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testScanWorksCorrectly[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "fetchKeyWithComputedPrefixReturnsExpectedResult[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeLast[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testKeySet[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScore[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutLast[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "union[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testDeserializeKey[1]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushWithPivot[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testUnwatch[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "add[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "couldReadsKeyspaceSizeCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByScoreOffsetCount[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testRemoveNullValue[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "unionAndStore[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRange[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRmoveLastOccurrence[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testHashCode[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionHead[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "exists[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrementDouble[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentReplaceTwoArgs[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testTemplateNotInitialized[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetAndGetBit[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testDefaultInit[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertyNames[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRange[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testScore[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCachePut[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTrim[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "move[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveScriptingCommandsTests",
        "testMethod": "scriptFlushShouldRemoveScripts[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testSize[15]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testEquals[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest",
        "testMethod": "testNumberOfOperationsEqualToNumberOfConnections",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushAll[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveLast[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testRemove[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.JedisConnectionFactoryIntegrationTests",
        "testMethod": "shouldInitiaizeWithStandaloneConfiguration",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "shouldAllowComplexKeyWithToStringMethod[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArrayWithGenerics[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPutAll[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "isMember[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDeleteMultiple[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testRemoveNullValue[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullOldValue[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPop[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testKeys[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectHead[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "updateShouldAlterIndexDataForObjectsWithColonInIdCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeek[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrementDouble[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddAll[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPop[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIntersectAndStore[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "score[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScore[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests",
        "testMethod": "geoRadiusByMemberShouldApplyLimit[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatchMultipleKeys[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveObject[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putShouldAddEntry[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveObject[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexBoundedWithLimit[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRmoveLastOccurrence[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIterator[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "rPopLPushShouldWorkCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrement[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatch[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "putIfAbsentShouldSetValueOnlyIfNotPresent[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "bitOpOrShouldWorkAsExpected[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArrayWithGenerics[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDumpAndRestoreNoTtl[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollection[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetIfAbsent[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "delete[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveLast[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testHashCode[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testRemove[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testClear[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAdd[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "randomKeyShouldReturnNullWhenNoKeyExists[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "setNXshouldOnlySetValueWhenNotPresent[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "add[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "add[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTake[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRange[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetFirst[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPut[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushIfPresent[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScore[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testClear[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRemove[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArrayWithGenerics[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testDiffAndStore[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDescendingIterator[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "putIfAbsentShouldSetValueOnlyIfNotPresent[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrementDouble[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "shouldExpireKeysCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArray[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "testMethod": "remove[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRmoveLastOccurrence[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollFirst[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirst[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testRawKeysCollection[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testAdd[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testLast[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddFirst[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRange[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testKeys[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testHashCode[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisNotSupported[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAdd[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testElement[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "union[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOffer[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSize[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests",
        "testMethod": "geoDistShouldReturnDistanceInDesiredMetric[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeFirst[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testEquals[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "unionAndStore[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "executeScriptWithElementReaderAndWriter[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArrayWithGenerics[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionMiddle[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortBulkMapper[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "testMethod": "size[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zIncrByShouldInreaseAndReturnScore[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveIndex[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronized[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortStore[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetIfAbsent[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemove[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsentFailure[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests",
        "testMethod": "geoAddShouldAddMultipleGeoLocationsCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelined[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testIncrementScore[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "removeAll[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnCachedInstance[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testPersist[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "add[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedNullNotAllowingNull[10]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushWithPivot[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushWithPivot[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectMiddle[5]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithLimit[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testEntrySet[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testRemoveNullValue[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedCustomSerializer[4]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testScanWorksCorrectly[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lRemSouldRemoveLastValuesCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "getTtlForKeyWithoutExpiryShouldCompleteWithZeroDuration[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testType[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "remove[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullRedisCallback[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testConvertAndSend[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecConversionDisabled[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesLoad[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionTail[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testKeySet[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexBounded[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testEntrySet[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsAll[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "shouldReadBackExplicitTimeToLiveWhenFetchingList[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArray[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "getWithCallableShouldResolveValueIfNotPresent[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementDouble[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsObject[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentReplaceOneArg[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexBoundedWithLimit[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testElement[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetOperations[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLast[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheClear[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testGetKey[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushWithPivot[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemove[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiGet[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsentFailure[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSize[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushAll[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "size[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutLast[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIsEmpty[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirstOccurrence[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "removeAll[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionMiddle[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyDoesNotExist[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAddAll[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveServerCommandsTests",
        "testMethod": "timeShouldRespondCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectTail[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sPopCountShouldRetrieveValues[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushIfPresent[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionHead[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArrayWithGenerics[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRmoveLastOccurrence[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferFirst[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "removeAll[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopWithTimeout[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIterator[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "getShouldReturnNullWhenKeyDoesNotExist[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testRemove[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIsEmpty[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemoveObject[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferFirst[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireNoTimeUnit[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullSessionCallback[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests",
        "testMethod": "valueOperationSetShouldBeRolledBackCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireNoTimeUnit[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHyperLogLogCommandsTests",
        "testMethod": "pfAddShouldAddToNonExistingKeyCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lTrimShouldReturnValuesCorrectlyWithMaxUnbounded[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemainingCapacity[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedNullAllowingNull[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testContainsObject[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sAddShouldAddSingleValue[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIterator[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrementDouble[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testSSCanReadsValuesFully[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "differenceAndStore[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLast[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPutIfAbsent[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSeconds[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "incrementScore[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRank[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIntersect[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "preciseExpireAt[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferFirst[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDeleteMultiple[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRange[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testType[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekFirst[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTxCustomSerializer[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddAll[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushIfPresent[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testKeySet[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setRange[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hValsShouldReturnValuesCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sMoveShouldMoveValueCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testCount[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetAndSet[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "shouldReadBackExplicitTimeToLiveAndSetItToMinusOnelIfPersisted[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectHead[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortStore[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testScore[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testGetKey[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIndexOfObject[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRestoreTtl[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexBounded[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrement[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testContainsValue[15]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRank[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeFirst[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentReplaceTwoArgs[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAtMillisNotSupported[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesSave[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldThrowExceptionOnInvalidType[15]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirstOccurrence[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrementDouble[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekFirst[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullOldValue[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDumpAndRestoreNoTtl[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sRandMemberReturnsRandomMember[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollTimeout[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPut[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testClear[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOffer[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "testMethod": "testAddAndGet[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeLast[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zCountShouldCountValuesInRange[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldRetunInstanceOfCorrectType[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.DefaultRedisCacheWriterTests",
        "testMethod": "lockingCacheWriterShouldIgnoreExistingLockOnDifferenceCache[0: JedisConnectionFactory]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushIfPresent[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "union[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testFirstException[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDeleteMultiple[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testDeserializeKey[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest",
        "testMethod": "testNumberOfOperationsGreaterThanNumberOfConnections",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testFirst[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testSetProperty[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentReplaceTwoArgs[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullNewValue[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedCustomSerializer[6]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetSet[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushIfPresent[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentRemove[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedThrowsExceptionInValueLoader[1]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpirationWithTimeUnitMilliseconds[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testContainsKey[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentRemove[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
        "testMethod": "testGetAndSet[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hGetAllShouldReturnEntriesCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testCappedCollection[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.DefaultRedisCacheWriterTests",
        "testMethod": "lockingCacheWriterShouldWaitForLockRelease[1: LettuceConnectionFactory]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putIfAbsentShouldReturnExistingIfExists[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRandomKey[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "getShouldRetrieveValueCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testLast[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeFirst[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRange[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "move[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedThrowsExceptionInValueLoader[3]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testUnion[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveObject[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testUnwatch[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyDoesNotExist[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testIncrementScore[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testContainsObject[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testContainsKey[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSort[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentReplaceTwoArgs[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrementNotNumber[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDumpAndRestoreNoTtl[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemoveObject[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getAndSet[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIsEmpty[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRename[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPutAll[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRename[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirst[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCachePut[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rank[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testContainsObject[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "intersectAndStore[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpirationWithTimeUnitMilliseconds[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testRemove[15]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testSize[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectHead[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeWithScores[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByLexWithLimit[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hMSetSouldSetValuesCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testFirstException[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetFirst[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetKey[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
        "testMethod": "getThrowsExceptionWhenKeyHasBeenRemoved[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsentFailure[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testAppend[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeFirst[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hDelShouldRemoveMultipleFieldsCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushAll[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentReplaceTwoArgs[15]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveLast[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatchMultipleKeys[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldRetunInstanceOfCorrectType[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPut[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "clientListShouldReturnCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "renameNx[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemove[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushWithPivot[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAllCollection[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testSize[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testAdd[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushIfPresent[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSet[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testConvertAndSend[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testClear[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "intersect[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDeleteMultiple[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "renameShouldThrowErrorWhenKeyDoesNotExist[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyDoesNotExist[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiSetIfAbsent[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDescendingIterator[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLastTimeout[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testContainsKey[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentReplaceOneArg[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "remove[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "delete[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.repository.cdi.CdiExtensionIntegrationTests",
        "testMethod": "saveAndFindUnqualified",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRmoveLastOccurrence[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByScoreWithScoresOffsetCount[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAddAll[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "rename[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testContainsValue[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setBit[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSeconds[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollFirst[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentReplaceOneArg[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testElement[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetKey[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testHashCode[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "computePrefixCreatesCacheKeyCorrectly[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testSetProperty[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRank[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "evictShouldRemoveKey[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putShouldAddEntry[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testKeySet[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "shouldAllowComplexKeyWithToStringMethod[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPush[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sAddShouldAddSingleValue[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferLast[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateObjectTypedList[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeFirst[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testDiff[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "unionAndStore[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "getShouldReadSimpleObjectCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsObject[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setBit[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexBoundedWithLimit[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAddWithScore[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testKeySet[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentReplaceTwoArgs[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatchMultipleKeys[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSort[8]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPut[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testUnionAndStore[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheClear[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushWithPivot[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelined[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "size[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testContainsAll[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTxCustomSerializer[8]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "removeAll[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIterator[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "add[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.DefaultRedisCacheWriterTests",
        "testMethod": "getShouldReturnNullWhenKeyDoesNotExist[0: JedisConnectionFactory]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullNewValue[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sIsMemberShouldReturnTrueWhenValueContainedInKey[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByLexWithLimit[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToString[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferFirst[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "trim[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "append[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testConcurrentRead[15]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "remove[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.DefaultRedisCacheWriterTests",
        "testMethod": "putShouldOverwriteExistingExpiringEntryAndResetTtl[1: LettuceConnectionFactory]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "testMethod": "testCheckAndSet[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopAndLeftPush[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testAddAll[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexUnboundedWithLimit[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecConversionDisabled[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddFirst[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testRemove[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexBoundedWithLimit[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGet[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentReplaceOneArg[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyDoesNotExist[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSize[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIterator[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "testMethod": "testGetAndAdd[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortBulkMapper[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "intersectAndStore[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexUnboundedWithLimit[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRandomKey[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatch[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeByScore[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldRetunInstanceOfCorrectType[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "unionAndStore[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionTail[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetProperty[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "size[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testSize[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putIfAbsentWithNullShouldAddNullValueEntryIfNotExists[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultHashOperationsTests",
        "testMethod": "testEntries[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPutIfAbsent[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullRedisCallback[2]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushWithPivot[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testDiff[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testUnion[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAll[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedCustomSerializer[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekLast[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsent[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "append[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setWithExpiry[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheClear[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testHashCode[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "leftPushAllShouldThrowExceptionWhenCalledWithNull[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLast[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testContainsValue[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testContainsObject[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByScore[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToString[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddAll[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPut[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpiration[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "getShouldRetrieveEntry[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnNullIfNoCachedValueFound[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testReverseRangeByScoreWithScoresOffsetCount[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExec[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "getRangeShouldReturnSubstringCorrectlyWithMaxUnbound[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testUnion[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
        "testMethod": "getAndSetReturnsZeroWhenKeyHasBeenRemoved[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByLexLimit[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testScanWorksCorrectly[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIterator[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testSetProperty[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSet[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetRange[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIterator[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIsEmpty[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTake[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedCustomSerializer[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "shouldMoveToDatabase[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExec[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeWithScores[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToString[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIntersectAndStore[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentReplaceOneArg[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByScoreWithScores[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testRemoveNullValue[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRange[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIsEmpty[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAllCollection[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "set[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testSize[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPutAll[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGetOperations[15]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "members[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.CompareAndSetIntegrationTests",
        "testMethod": "expectationNotMet[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecCustomSerializer[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "delete[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testSetProperty[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetRange[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveServerCommandsTests",
        "testMethod": "flushDbShouldRespondCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesList[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testUnwatch[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsObject[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testContainsAll[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testReverseRangeByScoreWithScoresOffsetCount[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToArrayWithGenerics[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingPipelining[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hDelShouldRemoveSingleFieldsCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
        "testMethod": "testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoValueSerializer[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testType[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexBounded[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecuteScriptCustomSerializers[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDumpAndRestoreNoTtl[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testDefaultScore[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushIfPresent[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetAndGetBit[3]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lRangeShouldReturnValuesCorrectlyWithMaxUnbounded[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementLong[6]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingTransactions[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setBit[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "setBitShouldReturnValueCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "members[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rank[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheClear[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTake[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutFirst[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveLast[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGetKey[15]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testHashCode[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDelete[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentReplaceTwoArgs[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "computePrefixCreatesCacheKeyCorrectly[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testContainsKey[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollTimeout[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushIfPresent[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveNumberCommandsTests",
        "testMethod": "hIncrByIntegerShouldIncreaseValueCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveLast[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillis[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "removeAll[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSet[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zCountShouldCountValuesInRangeWithNegativeInfinity[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirstOccurrence[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiSet[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testRemove[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatch[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollectionWithMaxElements[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekLast[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirst[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToArrayWithGenerics[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollFirst[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIterator[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisNotSupported[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRange[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeByScore[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testAddAll[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testIncrementScore[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "trim[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAdd[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArrayWithGenerics[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRemRangeByScoreShouldRemoveValuesCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveServerCommandsTests",
        "testMethod": "setClientNameShouldSetName[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRemRangeByScoreShouldRemoveValuesCorrectlyWithNegativeInfinity[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushWithPivot[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGet[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIsEmpty[15]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putIfAbsentShouldReturnExistingNullValueIfExists[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsent[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIsEmpty[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.mapping.Jackson2HashMapperTests",
        "testMethod": "shouldWriteReadHashCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGetKey[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemoveByScore[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testEquals[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testClear[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeByScore[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldRetunInstanceOfCorrectType[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "testMethod": "putIfAbsent[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRenameIfAbsent[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDumpAndRestoreNoTtl[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectHead[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirst[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByScoreOffsetCount[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExec[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollection[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHyperLogLogCommandsTests",
        "testMethod": "pfAddShouldReturnZeroWhenValueAlreadyExists[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScore[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testContainsValue[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRmoveLastOccurrence[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetAndGetBit[7]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexBoundedWithLimit[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopAndLeftPushWithTimeout[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveObject[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testValues[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyDoesNotExist[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAllCollection[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddAll[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIndexOfObject[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests",
        "testMethod": "testSelectDb",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testContainsKey[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "intersect[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPopWithMillisecondTimeoutShouldFail[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testClear[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemove[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "putShouldCreateGeoIndexCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExec[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "sizeRetrievesDataCorrectly[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putIfAbsentWithNullShouldAddNullValueEntryIfNotExists[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisNotSupported[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testValues[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rank[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRandomMembersNegative[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferLast[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGet[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRenameIfAbsent[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testRawKeysCollection[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveNumberCommandsTests",
        "testMethod": "decrByDoubleShouldDecreaseValueCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexUnbounded[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "randomMembers[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetRange[1]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testUnionAndStore[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyDoesNotExist[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testGetKey[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "appendShouldDoItsThing[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushWithPivot[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests",
        "testMethod": "geoRadiusShouldReturnMembersCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRank[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisNotSupported[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "getShouldReadSimpleObjectWithColonInIdCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetOperations[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelined[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIsEmpty[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testScanWorksCorrectly[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferFirst[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
        "testMethod": "testAddAndGet[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexBoundedWithLimit[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementLong[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAllCollection[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushAll[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "removeRangeByScore[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testAppend[1]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemove[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests",
        "testMethod": "geoRadiusShouldReturnDistanceCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.apache.maven.surefire.junit4.JUnit4Provider",
        "testMethod": "org.springframework.data.redis.connection.jedis.JedisConnectionPipelineTxIntegrationTests",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "delete[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPush[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testKeySet[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.apache.maven.surefire.junit4.JUnit4Provider",
        "testMethod": "org.springframework.data.redis.connection.lettuce.LettuceConnectionTransactionIntegrationTests",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "move[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushWithPivot[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "randomMembers[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPutIfAbsent[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAllCollection[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "delete[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rank[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullOldValue[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getBit[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToArrayWithGenerics[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "remove[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testHashCode[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexBounded[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRmoveLastOccurrence[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testContainsAll[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIsEmpty[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testPersist[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGetOperations[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushWithPivot[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithScores[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexUnboundedWithLimit[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemoveByScore[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "intersect[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testUnionAndStore[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "existsShouldReturnTrueForExistingKeys[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGet[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPut[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsAll[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToArrayWithGenerics[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArrayWithGenerics[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheClear[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSeconds[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeWithScores[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "get[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullValue[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "findProcessesCallbackReturningNullCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "randomMembers[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushIfPresent[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "putIfAbsentShouldSetValueOnlyIfNotPresent[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testContainsObject[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "shouldApplyCustomSerializationContextToHash[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "append[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIntersectAndStore[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "index[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemove[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsObject[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrementDouble[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPop[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "type[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCachePut[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hExistsShouldReturnTrueForExistingField[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hExistsShouldReturnTrueForExistingField[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionMiddle[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyDoesNotExist[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemoveObject[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAll[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testDistinctRandomMembers[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "shouldRejectNonInvalidKey[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveLast[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSet[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testDistinctRandomMembers[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "removeAll[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirstOccurrence[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsentFailure[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAll[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "testMethod": "getAndSetReturnsZeroWhenKeyHasBeenRemoved[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testRemoveNullValue[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testGetKey[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSort[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
        "testMethod": "testGetAndSet[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPutAll[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIsEmpty[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests",
        "testMethod": "simpleFindByMultipleProperties",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testAppend[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldRetunInstanceOfCorrectType[16]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPoll[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIterator[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemainingCapacity[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetIfAbsent[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPut[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddFirst[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetAndGetBit[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAllCollection[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRandomMember[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testLast[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testSize[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexBoundedWithLimit[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testHashCode[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getBit[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "keysShouldReturnCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsAll[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "union[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeWithScores[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testClear[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testScanWorksCorrectly[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
        "testMethod": "testGetAndDecrement[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testEntrySet[15]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortBulkMapper[3]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testUnionAndStore[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testSetProperty[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGetOperations[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeek[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSize[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
        "testMethod": "testShouldBeAbleToUseRedisAtomicIntegerWithProperlyConfiguredRedisTemplate[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIsEmpty[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPutIfAbsent[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDiscard[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPutIfAbsent[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testDistinctRandomMembersNegative[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testGetKey[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPop[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeLast[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetAndSet[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollTimeout[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setWithExpiry[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRandomKey[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDiscard[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "blPopShouldReturnFirstAvailable[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetFirst[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollectionWithMaxElements[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPut[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToArrayWithGenerics[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToString[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsAll[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithLimit[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSet[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionHead[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexUnboundedWithLimit[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testContainsValue[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCachePut[16]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "testMethod": "incrementDouble[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAtMillisNotSupported[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testNotEquals[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "executeScriptWithElementReaderAndWriter[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "expireAt[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testAdd[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTake[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.DefaultRedisCacheWriterTests",
        "testMethod": "putIfAbsentShouldAddExpiringEntryWhenKeyDoesNotExist[0: JedisConnectionFactory]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementDouble[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexBoundedWithLimit[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpirationWithTimeUnitMilliseconds[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushIfPresent[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPoll[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "keyExpiredEventWithoutKeyspaceShouldBeIgnored[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedNullWithStoredNull[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillis[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyDoesNotExist[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "bitOpOrShouldWorkAsExpected[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "intersectAndStore[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testEquals[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveServerCommandsTests",
        "testMethod": "dbSizeShouldRespondCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setRange[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testKeySet[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyDoesNotExist[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAllCollection[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullNewValue[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpirationWithTimeUnitMilliseconds[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testValues[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testClear[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAdd[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putIfAbsentShouldReturnExistingIfExists[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetKey[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testClear[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDelete[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testScanWorksCorrectly[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTake[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "addAll[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPoll[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLastTimeout[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirstOccurrence[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexUnboundedWithLimit[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testScanWorksCorrectly[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testScanWorksCorrectly[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "brPopLPushShouldWorkCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTrim[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "keyExpiredEventShouldRemoveHelperStructuresForObjectsWithColonInId[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "getWithCallableShouldNotResolveValueIfPresent[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDelete[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArray[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "move[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testUnionAndStore[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortStore[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentReplaceOneArg[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedNullNotAllowingNull[12]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "evictShouldRemoveKey[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
        "testMethod": "testGetAndDecrement[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollFirst[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedNullWithStoredNull[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIterator[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testUnionAndStore[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testRemove[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsObject[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putIfAbsentShouldReturnExistingNullValueIfExists[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testAddMultiple[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testClear[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionTail[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testSize[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testPop[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionTail[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullSessionCallback[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "clientListShouldReturnCorrectly[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testPersist[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPush[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "delete[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddFirst[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "randomMember[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirstOccurrence[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByLexWithLimit[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetFirst[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "testMethod": "increment[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexUnbounded[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecuteScriptCustomSerializers[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronized[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSort[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "mSetShouldAddMultipleKeyValuePairs[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "distinctRandomMembers[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testKeySet[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testScanWorksCorrectly[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "shouldRejectNonInvalidKey[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedNullAllowingNull[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRank[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRevRankShouldReturnIndexCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToString[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetKey[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGetOperations[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddLast[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrement[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testUnionAndStore[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testSetProperty[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeWithScores[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesSave[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testPop[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "fetchKeyWithComputedPrefixReturnsExpectedResult[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lRemSouldRemoveFirstValuesCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testClear[15]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPutIfAbsent[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollection[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToArray[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTrim[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemove[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnNullIfNoCachedValueFound[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "updateShouldAlterGeoIndexCorrectlyOnDelete[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOffer[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetFirst[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetRange[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "getTtlForKeyWithoutExpiryShouldCompleteWithZeroDuration[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddLast[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectMiddle[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sPopShouldRetrieveRandomValue[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrement[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testClear[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsObject[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveObject[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateSimpleType[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetAndSet[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveLast[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.TransactionalLettuceIntegrationTests",
        "testMethod": "valueOperationSetShouldBeRolledBackCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPut[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRandomKey[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSize[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPut[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIsEmpty[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testKeys[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemoveObject[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIterator[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "add[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testDistinctRandomMembersNegative[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "add[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testKeys[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPoll[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDumpAndRestoreNoTtl[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRange[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullValue[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRandomMembersWithDuplicates[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushWithPivot[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTx[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLastTimeout[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnNullIfNoCachedValueFound[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
        "testMethod": "testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoKeySerializer[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "difference[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testElement[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testStringTemplateExecutesWithStringConn[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.script.DefaultReactiveScriptExecutorTests",
        "testMethod": "shouldReturnLong",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrementNotNumber[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hSetNxShouldReturnFalseIfFieldAlreadyExists[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests",
        "testMethod": "geoAddShouldAddSingleGeoLocationCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putIfAbsentWithNullShouldAddNullValueEntryIfNotExists[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testValues[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAdd[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTrim[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrementNotNumber[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testDefaultScore[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testGetKey[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiSet[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemove[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testCappedCollection[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirst[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollTimeout[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithScores[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hMGetShouldReturnValueForFields[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddAll[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRange[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByScoreWithScores[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testContainsKey[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnCachedInstance[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrement[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zAddShouldAddValuesWithScores[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetIfAbsent[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "randomMember[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "getTtlForAbsentKeyShouldCompleteWithoutValue[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "putIfAbsentShouldSetValueOnlyIfNotPresent[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyDoesNotExist[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "move[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testType[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setIfAbsent[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAddWithScore[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexUnbounded[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testUnionAndStore[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPop[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testFirst[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortBulkMapper[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectMiddle[3]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testScanWorksCorrectly[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testCappedCollection[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testZScanShouldReadEntireValueRange[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "leftPushAllShouldThrowExceptionWhenCalledWithNull[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testSize[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.DefaultRedisCacheWriterTests",
        "testMethod": "putIfAbsentShouldAddEternalEntryWhenKeyDoesNotExist[0: JedisConnectionFactory]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testUnion[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRange[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRandomKey[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testContainsKey[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPutAll[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "unionAndStore[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToString[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testTemplateNotInitialized[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setWithExpiry[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushIfPresent[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexBounded[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "rPopSouldRemoveFirstValueCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "shouldReadAndWriteSimpleCacheKey[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testKeys[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeLast[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrementDouble[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testContainsKey[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyDoesNotExist[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPut[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAll[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setRange[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testRawKeys[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPoll[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRename[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedCustomSerializer[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPopWithMillisecondTimeoutShouldFail[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingPipelining[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "intersectAndStoreShouldReturnNumberOfElementsInDestination[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateObjectType[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLastTimeout[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRenameIfAbsent[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIterator[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSort[3]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyDoesNotExist[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectMiddle[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRandomMember[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultHyperLogLogOperationsTests",
        "testMethod": "initializationError",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "addAll[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekFirst[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIterator[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPushTimeout[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "sizeRetrievesDataCorrectly[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRandomMembersWithDuplicates[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "rename[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testAdd[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "delete[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullSessionCallback[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testRemove[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedNullNotAllowingNull[4]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToString[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testEquals[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests",
        "testMethod": "shouldApplyPageableCorrectlyWhenUsingFindAll",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferLast[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRemove[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeWithScores[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "get[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testNotEquals[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferLast[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollection[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testEntrySet[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveObject[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRename[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putIfAbsentShouldReturnExistingIfExists[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPutIfAbsent[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testElement[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAll[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "remove[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrementDouble[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGet[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIntersectAndStore[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsObject[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testGetKey[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests",
        "testMethod": "testGetConnectionNotSharedBadHostname",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTxCustomSerializer[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testContainsObject[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAll[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelined[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testUnion[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetFirst[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionHead[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "shouldReadBackExplicitTimeToLiveWhenFetchingList[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionMiddle[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testContainsAll[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lInsertShouldAddValueCorrectlyAfterExisting[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testDefaultInit[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPush[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushIfPresent[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testCappedCollection[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testClear[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRange[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRange[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedCustomSerializer[8]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "popWithCount[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIntersect[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "intersectAndStore[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testScore[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTake[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "removeAll[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOffer[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentRemove[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "getShouldReadSimpleObjectCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testUnionAndStore[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopWithTimeout[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testPersist[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testFirstException[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPut[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAll[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionTail[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.TransactionalLettuceIntegrationTests",
        "testMethod": "valueOperationShouldWorkWithReadOnlyTransactions",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullValue[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToArrayWithGenerics[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeFirst[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testAddAll[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrementNotNumber[15]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionMiddle[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrement[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testDiffAndStore[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "randomMember[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAtMillisNotSupported[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecConversionDisabled[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testHashCode[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testClear[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsAll[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirstOccurrence[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutLast[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAllCollection[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "getTtlForAbsentKeyShouldCompleteWithoutValue[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAt[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByScore[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPop[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.listener.PubSubTests",
        "testMethod": "org.springframework.data.redis.listener.PubSubTests",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "executeScriptWithElementReaderAndWriter[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesSave[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirst[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "getWithCallableShouldNotResolveValueIfPresent[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAdd[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAll[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "strLenShouldReturnValueCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPutIfAbsent[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDumpAndRestoreNoTtl[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRestoreTtl[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testRemoveObject[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRevRangeWithScoreShouldReturnTuplesCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArray[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.CompareAndSetIntegrationTests",
        "testMethod": "shouldUpdateCounter[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sRemShouldRemoveSingleValue[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToString[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAddAll[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullNewValue[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullSessionCallback[7]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetSet[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeLast[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrement[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiGet[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests",
        "testMethod": "geoRadiusByMemberShouldApplyLimit[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testEquals[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGetKey[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPoll[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testEquals[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testStringTemplateExecutesWithStringConn[8]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAllCollection[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushAll[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirstOccurrence[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testElement[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTake[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectMiddle[9]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "testMethod": "testExpireAt[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSize[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillis[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArrayWithGenerics[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAdd[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithScoresWithLimit[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testCappedCollection[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithLimit[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPut[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSet[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testNotEquals[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testClear[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDiscard[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testAdd[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectMiddle[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToString[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSet[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateSimpleTypedMap[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testHashCode[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopWithTimeout[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "removeRangeByScore[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAtMillisNotSupported[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedThrowsExceptionInValueLoader[6]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests",
        "testMethod": "testCreateWithDbIndex",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testHashCode[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testDistinctRandomMembers[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiSet[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToArrayWithGenerics[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGetOperations[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "shouldReadAndWriteSimpleCacheKey[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testRemoveNullValue[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
        "testMethod": "testGetExistingValue[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollTimeout[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArray[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lTrimShouldReturnValuesCorrectlyWithMinUnbounded[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveServerCommandsTests",
        "testMethod": "lastSaveShouldRespondCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "delete[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "expireAt[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAddAll[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPush[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "unionAndStore[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpiration[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferFirst[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemoveObject[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIsEmpty[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "findProcessesCallbackReturningMultipleIdsCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDescendingIterator[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIsEmpty[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLast[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testClear[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionMiddle[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "size[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
        "testMethod": "testDecrementAndGet[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putNullShouldAddEntryForNullValue[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentReplaceTwoArgs[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testStringTemplateExecutesWithStringConn[5]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testRawKeysCollection[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeLast[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAndGetExpireMillis[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionHead[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyDoesNotExist[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateObjectTypedMap[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemoveObject[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetFirst[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testConvertAndSend[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullRedisCallback[5]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests",
        "testMethod": "testResetAndInitConnection",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemoveObject[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatch[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testEntrySet[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDumpAndRestoreNoTtl[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexBounded[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsAll[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillis[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testType[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRankShouldReturnIndexCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testClear[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushWithPivot[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeWithScores[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "intersect[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testScanWorksCorrectly[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "set[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "delete[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRemove[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetIfAbsent[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testRemove[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScore[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testEquals[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldThrowExceptionOnInvalidType[14]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveLast[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectHead[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementLong[3]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsObject[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTxCustomSerializer[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushWithPivot[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "testMethod": "getThrowsExceptionWhenKeyHasBeenRemoved[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testStringPropertyNames[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullOldValue[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateSimpleType[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetOperations[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "addAll[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zCardShouldReturnSizeCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiSetIfAbsent[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests",
        "testMethod": "testReturnBrokenResource",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testAdd[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementDouble[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testConcurrentRead[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveLast[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAllCollection[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLast[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "removeAll[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRestoreTtl[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testKeySet[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testReverseRangeByScoreWithScoresOffsetCount[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRestoreTtl[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testDefaultScore[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullNewValue[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "delete[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddFirst[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementDouble[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentRemove[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "clientListShouldReturnCorrectly[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrement[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "getShouldRetrieveValuesWithNullCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingTransactions[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
        "testMethod": "testShouldBeAbleToUseRedisAtomicLongWithProperlyConfiguredRedisTemplate[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "remove[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushIfPresent[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPop[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireNoTimeUnit[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDelete[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemove[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetPropertyDefault[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexUnbounded[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpirationWithTimeUnitMilliseconds[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArray[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPut[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsAll[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithScores[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDescendingIterator[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDescendingIterator[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.script.DefaultReactiveScriptExecutorTests",
        "testMethod": "shouldReturnBoolean",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests",
        "testMethod": "geoPos[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushWithPivot[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testClear[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "getWithCallableShouldResolveValueIfNotPresent[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeLast[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "count[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "fetchKeyWithComputedPrefixReturnsExpectedResult[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testHashCode[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "shouldDeleteKeysCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToString[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "difference[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveScriptingCommandsTests",
        "testMethod": "scriptKillShouldKillScripts[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests",
        "testMethod": "geoPosNonExisting[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.DefaultRedisCacheWriterTests",
        "testMethod": "cleanShouldRemoveAllKeysByPattern[1: LettuceConnectionFactory]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "getShouldReturnValueWrapperHoldingNullIfNullValueStored[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPutIfAbsent[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[17]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPopWithTimeout[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAddAll[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "testMethod": "remove[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRank[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testContainsValue[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testFirstException[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testSize[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testEquals[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRmoveLastOccurrence[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPut[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testContainsAll[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIsEmpty[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testStringTemplateExecutesWithStringConn[3]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testHashCode[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPut[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testType[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.apache.maven.surefire.junit4.JUnit4Provider",
        "testMethod": "org.springframework.data.redis.connection.lettuce.LettuceConnectionPipelineTxIntegrationTests",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPush[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAndGetExpireMillis[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPoll[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testHashCode[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hExistsShouldReturnFalseForNonExistingField[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "preciseExpireAt[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirst[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "popWithCount[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferLast[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullOldValue[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRank[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsObject[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testAddAll[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testClear[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPut[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testEquals[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testConvertAndSend[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRange[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putIfAbsentShouldReturnExistingIfExists[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIterator[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRank[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testUnwatch[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetSet[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testHashCode[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByScoreOffsetCount[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullOldValue[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testContainsKey[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIterator[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testRemoveObject[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByScoreWithScoresOffsetCount[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRange[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIsEmpty[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "size[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sRemShouldRemoveValues[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "shouldApplyCustomSerializationContextToValues[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "putIfAbsentShouldSetValueOnlyIfNotPresent[16]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testUnionAndStore[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutFirst[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIntersectAndStore[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecuteScriptCustomSerializers[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testContainsKey[15]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "range[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByScoreWithScoresOffsetCount[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByScoreWithScoresOffsetCount[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullNewValue[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
        "testMethod": "testGetAndDecrement[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testDefaultScore[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testClear[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testEquals[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPoll[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByScoreWithScoresOffsetCount[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testRemoveObject[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExec[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "remove[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecCustomSerializer[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeLast[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests",
        "testMethod": "testGetNewConnectionOnError",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemainingCapacity[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushWithPivot[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeWithScores[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddLast[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithScoresWithLimit[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testUnionAndStore[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "removeAll[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectMiddle[0]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testAdd[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPush[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushIfPresent[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpiration[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentRemove[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAllCollection[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemove[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillis[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "putWritesIndexDataCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrementDouble[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSet[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testLast[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionMiddle[6]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRange[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRevRangeByScoreShouldReturnValuesCorrectlyWithMaxExclusion[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "expireAt[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testContainsKey[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "remove[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrementNotNumber[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAtMillisNotSupported[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRestoreTtl[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentReplaceOneArg[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "mGetShouldRetrieveValueCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "testMethod": "testRename[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "shouldDeleteKeysInMultipleBatchesCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testType[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullRedisCallback[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeByScoreWithScores[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPop[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedNullNotAllowingNull[6]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRemove[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedCustomSerializer[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPush[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirstOccurrence[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testValues[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lRangeShouldReturnValuesCorrectlyWithMaxUnbounded[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "move[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemove[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testValues[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testReverseRangeByScoreWithScoresOffsetCount[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeByScoreWithScores[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testMove[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetProperty[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedNullAllowingNull[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testValues[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testContainsAll[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesLoad[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testHashCode[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "preciseExpire[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testSize[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[4]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRenameIfAbsent[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemove[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testZScanShouldReadEntireValueRange[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetFirst[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByLex[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecConversionDisabled[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lSetSouldSetValueCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsAll[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGetOperations[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopWithTimeout[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushWithPivot[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexUnboundedWithLimit[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "testMethod": "values[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "testMethod": "getAndSetReturnsZeroWhenKeyHasBeenRemoved[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "bitOpAndShouldWorkAsExpected[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testAdd[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLastTimeout[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrementNotNumber[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "count[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemainingCapacity[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPop[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests",
        "testMethod": "testGetResourceValidate",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPushTimeout[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTake[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testDistinctRandomMembersNegative[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPut[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
        "testMethod": "testGetAndAdd[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "pop[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "delete[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithLimit[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDescendingIterator[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRmoveLastOccurrence[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIntersect[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentReplaceOneArg[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests",
        "testMethod": "dbIndexShouldBePropagatedCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByLex[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getRange[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingTransactions[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentRemove[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testReverseRangeByScoreOffsetCount[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "remove[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "distinctRandomMembers[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionHead[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentReplaceOneArg[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAtMillisNotSupported[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIterator[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDiscard[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToArray[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRenameIfAbsent[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRmoveLastOccurrence[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExec[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests",
        "testMethod": "nearQueryShouldReturnResultsCorrectlyOnNestedProperty",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushIfPresent[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeWithScores[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testLastException[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushWithPivot[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setIfPresent[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectHead[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testLast[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPop[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToString[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRestoreTtl[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testRawKeysCollection[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "differenceAndStore[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "expire[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArrayWithGenerics[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testSetProperty[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "rightPushAllShouldThrowExceptionWhenCalledWithNull[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveNumberCommandsTests",
        "testMethod": "incrByDoubleShouldIncreaseValueCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sPopShouldReturnNullWhenNotPresent[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToString[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeWithScores[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "set[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeWithScores[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddAll[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testEquals[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushIfPresent[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testLast[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRank[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrementNotNumber[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollTimeout[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionTail[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setIfAbsent[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekLast[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "setShouldAddValuesCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setRange[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "removeAll[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testEquals[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecCustomSerializer[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "putWritesSimpleIndexDataWithColonCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests",
        "testMethod": "geoDistShouldReturnDistanceInMetersByDefault[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushWithPivot[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRandomMember[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeByScore[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRemove[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testReverseRangeByScoreWithScoresOffsetCount[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
        "testMethod": "testGetAndIncrement[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "trim[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests",
        "testMethod": "testReturnResource",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiGet[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "unionAndStore[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRmoveLastOccurrence[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testContainsAll[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullNewValue[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithScoresWithLimit[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeek[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldRetunInstanceOfCorrectType[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAll[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "get[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "delete[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeLast[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrementDouble[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLast[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rank[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByLexLimit[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionMiddle[0]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddAll[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDumpAndRestoreNoTtl[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIterator[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.DefaultRedisCacheWriterTests",
        "testMethod": "putShouldAddExpiringEntry[1: LettuceConnectionFactory]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testScanWorksCorrectly[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "union[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithLimit[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExec[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSet[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollFirst[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testDiff[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testHashCode[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddAll[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "putShouldCreateGeoIndexCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemainingCapacity[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testCappedCollection[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "fetchKeyWithComputedPrefixReturnsExpectedResult[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionHead[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveObject[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAtMillisNotSupported[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSize[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testStringPropertyNames[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testRemoveObject[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTake[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetPropertyDefault[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortBulkMapper[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testDiff[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectHead[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
        "testMethod": "testGetAndIncrement[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAll[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullRedisCallback[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSet[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeek[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetProperty[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToArray[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAll[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToString[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testLast[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortStore[8]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testContainsObject[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testLastException[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexUnbounded[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests",
        "testMethod": "geoDistShouldReturnDistanceInMetersByDefault[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpirationWithTimeUnitMilliseconds[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "shouldApplyCustomSerializationContextToValues[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testClear[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPutAll[15]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testDefaultInit[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "removeAll[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testNotEquals[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldRetunInstanceOfCorrectType[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTx[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeek[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsObject[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testContainsValue[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGet[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSize[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testContainsValue[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLast[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testScanWorksCorrectly[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "putIfAbsentShouldSetValueOnlyIfNotPresent[15]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToString[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddAll[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnCachedInstance[16]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArray[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushAll[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testEquals[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testSize[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRange[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testElement[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setIfPresent[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRange[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "delete[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiSetIfAbsent[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testAppend[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "testMethod": "testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoKeySerializer[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectHead[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testMove[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSize[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "intersect[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectHead[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRank[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "intersectAndStore[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "intersect[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testCount[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPop[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests",
        "testMethod": "geoRadiusByMemberShouldReturnMembersCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAll[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testClear[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sInterStoreShouldReturnSizeCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullValue[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testClear[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetKey[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronized[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeWithScores[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "remove[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "savesObjectCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldThrowExceptionOnInvalidType[17]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheClear[15]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIntersect[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIsEmpty[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAtMillisNotSupported[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddLast[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetAndSet[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testContainsValue[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullValue[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "expireAt[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setIfAbsent[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testElement[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testRemove[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "keyExpiredEventShouldRemoveHelperStructures[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTxCustomSerializer[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTrim[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testValues[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSet[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRank[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrementNotNumber[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "count[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testKeySet[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIndexOfObject[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.listener.SubscriptionConnectionTests",
        "testMethod": "testRemoveLastListener[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetOperations[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDiscard[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingPipelining[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "intersectAndStore[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateComplexType[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeWithScores[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testDiff[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertyNames[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sDiffShouldBeExcecutedCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollFirst[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testCappedCollection[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemove[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushIfPresent[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesList[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.apache.maven.surefire.junit4.JUnit4Provider",
        "testMethod": "org.springframework.data.redis.connection.jedis.JedisConnectionIntegrationTests",
        "failureName": "java.lang.ExceptionInInitializerError",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rank[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushWithPivot[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAddAll[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIterator[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testSize[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingPipelining[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lPopSouldRemoveFirstValueCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "getRangeShouldReturnSubstringCorrectlyWithMinUnbound[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectHead[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTxCustomSerializer[4]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeLast[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToString[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSet[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatchMultipleKeys[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullOldValue[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAddWithScore[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.TransactionalLettuceIntegrationTests",
        "testMethod": "listOperationLPushShouldBeCommittedCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrementDouble[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushAll[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddFirst[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentRemove[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putIfAbsentShouldAddEntryIfNotExists[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnNullIfNoCachedValueFound[16]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testDistinctRandomMembersNegative[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests",
        "testMethod": "shouldApplyFirstKeywordCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionTail[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedNullWithStoredNull[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "removeRangeByScore[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "delete[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetProperty[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeWithScores[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollTimeout[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionTail[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testStringPropertyNames[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullOldValue[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putIfAbsentShouldAddEntryIfNotExists[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testContainsAll[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "shouldRejectNonInvalidKey[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testConvertAndSend[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "leftPushAllShouldThrowExceptionWhenCalledWithNull[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertyNames[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIterator[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrementDouble[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCachePut[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingTransactions[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hSetShouldOperateCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullOldValue[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushWithPivot[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSort[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testHashCode[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRenameIfAbsent[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionHead[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirstOccurrence[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByScoreOffsetCount[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setIfAbsent[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setRange[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testUnwatch[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldRetunInstanceOfCorrectType[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testUnionAndStore[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "randomMembers[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rank[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemainingCapacity[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddLast[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
        "testMethod": "testIncrementAndGet[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullValue[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRange[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateComplexTypedList[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToString[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeek[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests",
        "testMethod": "pageableQueryWithTwoKeywordsShouldReturnCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "randomMember[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsent[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGet[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testSize[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "removeAll[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
        "testMethod": "testCheckAndSet[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexUnbounded[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "intersectAndStoreShouldReturnNumberOfElementsInDestination[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectTail[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetOperations[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testScanWorksCorrectly[15]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "index[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testCappedCollection[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testScanWorksCorrectly[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementDouble[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollTimeout[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testClear[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddFirst[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "union[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToString[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testSetProperty[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRank[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "getWithCallableShouldNotResolveValueIfPresent[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOffer[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSeconds[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPop[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeLast[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentRemove[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRename[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexBoundedWithLimit[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testNotEquals[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testRemove[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testKeySet[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests",
        "testMethod": "geoRadiusShouldApplyLimit[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testRemove[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeFirst[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectMiddle[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSet[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testScanWorksCorrectly[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testUnwatch[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testType[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectMiddle[2]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPutAll[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronized[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByLexLimit[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testEquals[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetProperty[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "getTtlForKeyWithoutExpiryShouldCompleteWithZeroDuration[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIsEmpty[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testPop[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAllCollection[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIsEmpty[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testEquals[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testDeserializeKey[7]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
        "testMethod": "getAndSetReturnsZeroWhenKeyHasBeenRemoved[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIsEmpty[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testScanWorksCorrectly[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "getShouldReturnValueWrapperHoldingNullIfNullValueStored[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArrayWithGenerics[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionMiddle[5]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveIndex[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.script.DefaultReactiveScriptExecutorTests",
        "testMethod": "testExecuteMixedListResult",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillis[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "count[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testNotEquals[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRename[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetProperty[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRandomMembersNegative[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRemRangeByScoreShouldRemoveValuesCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLastTimeout[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zCountShouldCountValuesInRangeWithMaxExlusion[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveServerCommandsTests",
        "testMethod": "lastSaveShouldRespondCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetRange[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
        "testMethod": "testDecrementAndGet[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToString[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "testMethod": "testAddAndGet[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "incrementScore[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectTail[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutLast[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDeleteMultiple[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "isMember[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "testMethod": "testShouldBeAbleToUseRedisAtomicDoubleWithProperlyConfiguredRedisTemplate[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveIndex[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushAll[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateSimpleTypedMap[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRank[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGet[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRangeByScoreShouldReturnValuesCorrectlyWithMaxUnbounded[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddAll[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullRedisCallback[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollectionWithMaxElements[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testReverseRangeByScoreOffsetCount[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedNullAllowingNull[17]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArray[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "incrementScore[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementLong[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByLex[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "renameNx[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultGeoOperationsTests",
        "testMethod": "initializationError",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "testMethod": "values[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentReplaceOneArg[15]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testContainsAll[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollection[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpiration[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "size[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testUnion[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekFirst[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAddWithScore[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionHead[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testScanWorksCorrectly[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsAll[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillis[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPoll[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullValue[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCachePut[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.DefaultRedisCacheWriterTests",
        "testMethod": "removeShouldDeleteEntry[1: LettuceConnectionFactory]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetIfAbsent[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zScoreShouldReturnScoreCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGetKey[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatchMultipleKeys[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArrayWithGenerics[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecCustomSerializer[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullSessionCallback[6]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheClear[16]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "clientListShouldReturnCorrectly[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testUnion[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveServerCommandsTests",
        "testMethod": "pingShouldRespondCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExec[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testGetKey[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAll[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testContainsValue[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemove[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScore[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrementDouble[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullSessionCallback[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTake[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests",
        "testMethod": "geoHashNotExisting[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetIfAbsent[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testReverseRangeByScoreOffsetCount[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushIfPresent[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRange[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRename[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpirationWithTimeUnitMilliseconds[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRemove[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPoll[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "intersectAndStore[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecCustomSerializer[5]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSize[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexUnboundedWithLimit[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireNoTimeUnit[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testSSCanReadsValuesFully[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lTrimShouldReturnValuesCorrectlyWithMinUnbounded[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAddAll[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "findProcessesCallbackReturningSingleIdCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "set[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheClear[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testClear[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testUnionAndStore[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeFirst[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests",
        "testMethod": "testInitConnection",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullRedisCallback[7]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "index[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingTransactions[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRmoveLastOccurrence[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setBit[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.script.DefaultReactiveScriptExecutorTests",
        "testMethod": "shouldReturnLong",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "updateShouldRemoveComplexMapValuesCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "preciseExpire[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "getTtlForKeyWithoutExpiryShouldCompleteWithZeroDuration[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGetOperations[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentReplaceTwoArgs[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "preciseExpire[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "getShouldReadSimpleObjectWithColonInIdCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "getTtlForKeyWithoutExpiryShouldCompleteWithZeroDuration[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrementNotNumber[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDeleteMultiple[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDescendingIterator[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemove[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.script.DefaultReactiveScriptExecutorTests",
        "testMethod": "shouldApplyCustomArgsSerializer",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTake[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollFirst[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testClear[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRename[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAt[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPush[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "existsShouldReturnFalseForNonExistingKeys[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTake[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionMiddle[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSize[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testEntrySet[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testElement[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "set[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putNullShouldAddEntryForNullValue[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testEquals[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "incrementScore[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIsEmpty[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToString[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveLast[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSeconds[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAll[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "intersectAndStore[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.DefaultRedisCacheWriterTests",
        "testMethod": "putShouldAddEternalEntry[1: LettuceConnectionFactory]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeek[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveServerCommandsTests",
        "testMethod": "configResetstatShouldRespondCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIterator[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectMiddle[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirst[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
        "testMethod": "testGetAndAdd[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPut[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyDoesNotExist[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeByScoreWithScores[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScore[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "remove[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "score[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testAddAll[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "mSetShouldAddMultipleKeyValuePairs[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetKey[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullNewValue[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRevRangeByScoreWithScoreShouldReturnTuplesCorrectlyWithMaxExclusion[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekFirst[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testEquals[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsAll[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelined[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "removeAll[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testNotEquals[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsAll[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsAll[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "randomMembers[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetKey[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetAndSet[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortBulkMapper[4]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortStore[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveIndex[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferLast[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillis[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullOldValue[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "keysShouldReturnCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdate[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testContainsKey[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIterator[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionTail[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRenameIfAbsent[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testEquals[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRange[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsObject[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDeleteMultiple[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeek[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "getSetShouldReturnPreviousValueCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRangeByScoreShouldReturnValuesCorrectlyWithMinUnbounded[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "getRangeShouldReturnSubstringCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "executeScript[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRandomMembersWithDuplicates[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionMiddle[12]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDelete[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPut[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAdd[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveIndex[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetRange[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetIfAbsent[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectTail[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopAndLeftPushWithTimeout[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "move[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testEntrySet[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveObject[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionMiddle[4]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollection[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetFirst[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "testMethod": "keys[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIterator[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekFirst[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekFirst[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "append[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetPropertyDefault[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "get[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testHashCode[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIsEmpty[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsentFailure[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "shouldExpireAtKeysCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "removeRange[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveLast[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetFirst[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIndexOfObject[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirst[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRevRangeByScoreWithScoreShouldReturnTuplesCorrectlyWithMaxExclusion[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAndGetExpireMillis[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByScore[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testScore[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIntersect[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPut[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPoll[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnNullIfNoCachedValueFound[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testClear[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "intersectAndStore[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPop[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiSetIfAbsent[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSize[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesLoad[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsent[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCachePut[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAt[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "union[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateSimpleTypedList[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testClear[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testHashCode[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testRemove[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTrim[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddLast[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveObject[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests",
        "testMethod": "testGetResourcePoolExhausted",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrementNotNumber[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sRandMemberReturnsRandomMembers[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
        "testMethod": "testGetAndDecrement[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferLast[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "delete[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirstOccurrence[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexBounded[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTxCustomSerializer[2]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "isMember[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushWithPivot[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testContainsObject[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTake[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testRemoveObject[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testDefaultScore[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testElement[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testSize[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetRange[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "unionAndStore[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPutAll[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "shouldApplyCustomSerializationContextToHash[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelined[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexBounded[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollection[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "testMethod": "multiGet[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAllCollection[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeWithScores[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testCappedCollection[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testSetProperty[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRandomMember[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexUnboundedWithLimit[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushWithPivot[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatchMultipleKeys[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPush[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArray[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldThrowExceptionOnInvalidType[8]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekLast[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsAll[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testScanWorksCorrectly[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToArrayWithGenerics[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldThrowExceptionOnInvalidType[12]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testClear[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAll[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "preciseExpireAt[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testSSCanReadsValuesFully[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testEquals[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
        "testMethod": "getAndSetReturnsZeroWhenKeyHasBeenRemoved[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIsEmpty[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "union[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testDiffAndStore[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToArrayWithGenerics[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetPropertyDefault[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "preciseExpireAt[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionMiddle[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testSize[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "renameShouldAlterKeyNameCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testContainsValue[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTake[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionMiddle[9]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullValue[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeWithScores[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrementNotNumber[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementDouble[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "putIfAbsentShouldSetValueOnlyIfNotPresent[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemainingCapacity[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexUnboundedWithLimit[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testEquals[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentRemove[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArrayWithGenerics[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "getShouldNotEmitValueValueIfAbsent[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollFirst[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hGetShouldReturnValueForExistingField[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIsEmpty[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putShouldAddEntry[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "testMethod": "increment[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollTimeout[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testScanWorksCorrectly[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "getTtlForAbsentKeyShouldCompleteWithoutValue[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testNotEquals[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testScanWorksCorrectly[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIterator[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "getShouldNotEmitValueValueIfAbsent[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testSize[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirst[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetFirst[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "removeRangeByScore[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOffer[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "delete[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIntersectAndStore[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGet[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testSetProperty[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsent[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeFirst[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "getTtlForKeyWithoutExpiryShouldCompleteWithZeroDuration[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToString[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollTimeout[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testSize[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingPipelining[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyDoesNotExist[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiSetIfAbsent[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "range[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldThrowExceptionOnInvalidType[16]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushIfPresent[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testNotEquals[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRangeByScoreWithScoreShouldReturnTuplesCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectHead[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testSize[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemove[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests",
        "testMethod": "testValidateNoError",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRename[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testContainsKey[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "shouldApplyCustomSerializationContextToValues[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testEquals[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToString[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIsEmpty[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAdd[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAtMillisNotSupported[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putIfAbsentShouldReturnExistingNullValueIfExists[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "size[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLast[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSet[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddFirst[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPutAll[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithScores[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "delete[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollFirst[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollectionWithMaxElements[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "append[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrement[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTake[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetProperty[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testSize[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testContainsKey[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPush[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferLast[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.ScanTests",
        "testMethod": "contextLoads[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSet[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "randomMembers[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "type[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemoveByScore[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGetKey[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByScoreWithScores[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveServerCommandsTests",
        "testMethod": "setClientNameShouldSetName[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAllCollection[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "differenceAndStore[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectTail[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGetKey[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testRemoveNullValue[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPop[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testScanWorksCorrectly[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDescendingIterator[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSize[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnNullIfNoCachedValueFound[17]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexBounded[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedThrowsExceptionInValueLoader[10]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetFirst[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testConcurrentRead[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexUnbounded[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sDiffStoreShouldBeExcecutedCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "pSetEXshouldSetKeyAndExpirationTime[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testFirst[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPut[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.CompareAndSetIntegrationTests",
        "testMethod": "concurrentUpdate[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExec[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushAll[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRenameIfAbsent[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIterator[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToString[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsentFailure[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "set[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "removeRangeByScore[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDeleteMultiple[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "incrementScore[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "remove[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testContainsAll[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testValues[15]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "pop[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testKeySet[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollection[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "removeAll[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyDoesNotExist[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "pop[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesLoad[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiSet[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testContainsKey[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lPushXShouldPrependValuesCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopAndLeftPush[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeek[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutLast[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLast[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyDoesNotExist[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTxCustomSerializer[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "putWritesDataCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedThrowsExceptionInValueLoader[9]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushAll[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyDoesNotExist[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveObject[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSeconds[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullNewValue[15]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "getShouldReturnNullWhenKeyDoesNotExist[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "executeScript[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testLast[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "trim[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testEntrySet[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemoveObject[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testEquals[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "randomMember[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testLast[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testKeys[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArray[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "set[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testHashCode[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopAndLeftPushWithTimeout[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testSize[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testEquals[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testContainsObject[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddLast[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "randomMember[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByLexLimit[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutFirst[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyDoesNotExist[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "add[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedNullAllowingNull[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatch[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAdd[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testEquals[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetAndGetBit[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRangeByScoreShouldReturnValuesCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.script.DefaultReactiveScriptExecutorTests",
        "testMethod": "testExecuteMixedListResult",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLastTimeout[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testContainsValue[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zCountShouldCountValuesInRangeWithNegativeInfinity[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAddWithScore[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddAll[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronized[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemove[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveLast[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testStringPropertyNames[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRangeByScoreWithScoreShouldReturnTuplesCorrectlyWithMinExclusion[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "removeAll[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testDefaultInit[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTake[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
        "testMethod": "testCompareSet[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lTrimShouldReturnValuesCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveServerCommandsTests",
        "testMethod": "pingShouldRespondCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopWithTimeout[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecConversionDisabled[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddAll[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testPersist[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testLast[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "testMethod": "testIncrementAndGet[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedCustomSerializer[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testContainsKey[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPush[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testEntrySet[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
        "testMethod": "testGetAndAdd[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeWithScores[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLast[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPush[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "rightPushAllShouldThrowExceptionWhenCalledWithNull[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArrayWithGenerics[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveServerCommandsTests",
        "testMethod": "getConfigShouldRespondCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests",
        "testMethod": "testDisableSharedConnection",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLastTimeout[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentReplaceTwoArgs[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheClear[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByLex[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionMiddle[8]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "type[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingPipelining[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testScanWorksCorrectly[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testSize[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sRandMemberReturnsRandomMembers[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIsEmpty[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "mGetShouldRetrieveNullValueCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "removeAll[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAndGetExpireMillis[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisNotSupported[6]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByLex[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getAndSet[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirstOccurrence[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "index[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIsEmpty[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "putIfAbsentShouldSetValueOnlyIfNotPresent[17]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToString[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTx[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectHead[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
        "testMethod": "testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoValueSerializer[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPut[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testEquals[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPut[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingTransactions[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRmoveLastOccurrence[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetRange[7]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lPushShouldPrependValuesCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "testMethod": "testGetAndIncrement[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testDiffAndStore[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddLast[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRestoreTtl[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTake[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testCappedCollection[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPush[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiGet[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testNotEquals[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "intersectAndStore[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemove[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexBounded[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetAndGetBit[1]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testNotEquals[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
        "testMethod": "testIncrementAndGet[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiSet[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "delete[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "shouldAllowComplexKeyWithToStringMethod[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "move[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByLexWithLimit[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnCachedInstance[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testHashCode[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testContainsValue[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.listener.SubscriptionConnectionTests",
        "testMethod": "testStopMessageListenerContainers[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "difference[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sMoveShouldMoveValueCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "union[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testSize[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetAndGetBit[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sIsMemberShouldReturnFalseWhenValueNotContainedInKey[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeWithScores[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testDefaultScore[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hMGetShouldReturnValueForFields[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testContainsValue[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirst[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemoveByScore[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "putWritesDataWithColonCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "setNXshouldOnlySetValueWhenNotPresent[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsentFailure[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "putIfAbsentShouldSetValueOnlyIfNotPresent[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testLast[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectTail[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "shouldReadBackExplicitTimeToLiveAndSetItToMinusOnelIfPersisted[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testSize[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testClear[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAdd[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testElement[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sIsMemberShouldReturnFalseWhenValueNotContainedInKey[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "type[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectTail[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "trim[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeFirst[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests",
        "testMethod": "valueOperationSetShouldBeCommittedCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToString[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "removeAll[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecuteScriptCustomSerializers[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "delete[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testContainsKey[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirstOccurrence[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testSize[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentReplaceOneArg[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpirationWithTimeUnitMilliseconds[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutFirst[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithLimit[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testStringTemplateExecutesWithStringConn[1]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "shouldReadBackExplicitTimeToLiveToPrimitiveField[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "append[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setBit[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertyNames[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireNoTimeUnit[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testClear[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetFirst[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "sizeRetrievesDataCorrectly[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIntersect[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullNewValue[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLast[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testDeserializeKey[0]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIterator[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testUnion[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "preciseExpireAt[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortStore[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemainingCapacity[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateComplexTypedMap[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutLast[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAddWithScore[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testEntrySet[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGet[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testHashCode[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testContainsAll[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "pop[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "testMethod": "testExpire[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "delete[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testEquals[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "set[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedThrowsExceptionInValueLoader[5]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAll[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "expire[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSize[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testSSCanReadsValuesFully[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "getBitShouldReturnValueCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testContainsObject[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testRemove[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetRange[8]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIterator[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testScanWorksCorrectly[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionHead[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisNotSupported[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testAdd[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "testMethod": "multiGetAbsentKeys[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexUnboundedWithLimit[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateShouldLeaveIndexesNotInvolvedInUpdateUntouched[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testClear[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "expire[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "testMethod": "getThrowsExceptionWhenKeyHasBeenRemoved[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "size[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "mSetNXShouldNotAddMultipleKeyValuePairsWhenAlreadyExit[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRemove[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferFirst[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTrim[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putShouldAddEntry[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIsEmpty[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecuteScriptCustomSerializers[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTx[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIterator[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushWithPivot[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIsEmpty[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIntersectAndStore[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheClear[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "updateShouldAlterIndexDataOnNestedObjectPathCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testValues[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRank[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRandomMembersNegative[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testFirst[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sPopShouldReturnNullWhenNotPresent[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "size[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "add[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemoveByScore[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeFirst[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testEquals[15]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectMiddle[4]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "intersect[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testRemoveNullValue[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRange[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "preciseExpireAt[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLast[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zUnionStoreShouldWorkCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putIfAbsentWithNullShouldAddNullValueEntryIfNotExists[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveIndex[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPush[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTrim[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddLast[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRemove[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGet[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyDoesNotExist[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testSize[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testGetKey[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRank[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertyNames[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putIfAbsentShouldReturnExistingNullValueIfExists[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushIfPresent[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "type[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrementNotNumber[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesLoad[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "removeAll[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "shouldRejectNonInvalidKey[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRmoveLastOccurrence[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollFirst[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testKeys[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexBoundedWithLimit[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "range[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArray[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDescendingIterator[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentRemove[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testContainsValue[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferFirst[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemainingCapacity[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullOldValue[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPop[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArrayWithGenerics[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveServerCommandsTests",
        "testMethod": "flushDbShouldRespondCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "shouldApplyCustomSerializationContextToHash[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "union[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullValue[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatch[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPut[15]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeek[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testAddMultiple[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRevRangeByScoreShouldReturnValuesCorrectlyWithMinExclusion[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemainingCapacity[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOffer[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testDefaultScore[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testClear[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sMembersReadsValuesFromSetCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.DefaultRedisCacheWriterTests",
        "testMethod": "putIfAbsentShouldNotAddEternalEntryWhenKeyAlreadyExist[1: LettuceConnectionFactory]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.DefaultRedisCacheWriterTests",
        "testMethod": "putShouldAddEternalEntry[0: JedisConnectionFactory]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesLoad[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zScoreShouldReturnScoreCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToString[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testClear[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "shouldApplyCustomSerializationContextToHash[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "putIfAbsentShouldSetValueOnlyIfNotPresent[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "shouldApplyCustomSerializationContextToHash[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testScanWorksCorrectly[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testPop[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPop[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "move[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testDeserializeKey[2]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTrim[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testConcurrentRead[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexUnboundedWithLimit[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "shouldPersist[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutFirst[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testContainsValue[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireNoTimeUnit[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArrayWithGenerics[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "exists[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testAdd[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedThrowsExceptionInValueLoader[0]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexUnboundedWithLimit[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRmoveLastOccurrence[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferLast[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToArrayWithGenerics[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "getTtlForAbsentKeyShouldCompleteWithoutValue[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsObject[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutFirst[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatchMultipleKeys[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeek[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testValues[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentReplaceOneArg[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getAndSet[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "removeAll[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testGetKey[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArray[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "testMethod": "size[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "getTtlForAbsentKeyShouldCompleteWithoutValue[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "testMethod": "testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoValueSerializer[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSet[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "add[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTrim[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zCountShouldCountValuesInRangeWithMinExlusion[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemoveByScore[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPush[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArray[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPopWithMillisecondTimeoutShouldFail[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSize[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIsEmpty[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAdd[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "intersectAndStoreShouldReturnNumberOfElementsInDestination[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrementNotNumber[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "move[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "intersectAndStore[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sAddShouldAddValues[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPop[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGet[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToString[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToString[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putNullShouldAddEntryForNullValue[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullOldValue[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSort[7]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeLast[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSeconds[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "isMember[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeWithScores[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeFirst[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddAll[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAtMillisNotSupported[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToArray[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testNotEquals[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToArray[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testAddMultiple[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "putWritesSimpleNestedIndexValuesCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "preciseExpire[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexUnbounded[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutFirst[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getBit[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "trim[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScore[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setIfAbsent[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushIfPresent[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullValue[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "executeScript[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrement[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testStringTemplateExecutesWithStringConn[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testHashCode[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testContainsKey[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveIndex[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDeleteMultiple[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexBounded[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putIfAbsentShouldReturnExistingNullValueIfExists[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testFirstException[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putIfAbsentWithNullShouldAddNullValueEntryIfNotExists[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.TransactionalLettuceIntegrationTests",
        "testMethod": "listOperationLPushShouldBeCommittedCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testAppend[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRangeShouldReturnValuesCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testScanWorksCorrectly[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIsEmpty[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDelete[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferFirst[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHyperLogLogCommandsTests",
        "testMethod": "pfAddShouldReturnZeroWhenValueAlreadyExists[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSize[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldThrowExceptionOnInvalidType[3]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExec[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIndexOfObject[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "range[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "getShouldRetrieveEntry[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToString[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testEntrySet[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullNewValue[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
        "testMethod": "testGetAndIncrement[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "getTtlForAbsentKeyShouldCompleteWithoutValue[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "remove[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAddWithScore[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "count[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sDiffShouldBeExcecutedCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests",
        "testMethod": "findReturnsPageCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setIfAbsent[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutFirst[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeLast[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollFirst[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "count[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPopWithTimeout[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByScore[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPush[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIndexOfObject[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "set[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAt[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "rightPushAllShouldThrowExceptionWhenCalledWithNull[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentReplaceTwoArgs[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithScoresWithLimit[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testClear[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "deleteCleansIndexedDataCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zCountShouldCountValuesInRange[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPutAll[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPush[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testKeySet[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testRemove[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnCachedInstance[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testDiff[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekLast[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDelete[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "append[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesLoad[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "unionAndStore[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zInterStoreShouldWorkCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAdd[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAt[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeByScoreWithScores[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testContainsValue[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetFirst[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPushTimeout[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentReplaceOneArg[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollectionWithMaxElements[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpirationWithTimeUnitMilliseconds[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsObject[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testAdd[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testCount[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectTail[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionMiddle[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortBulkMapper[6]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRangeByScoreShouldReturnValuesCorrectlyWithMaxUnbounded[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.CompareAndSetIntegrationTests",
        "testMethod": "concurrentUpdate[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsAll[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "removeAll[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetAndGetBit[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testDeserializeKey[4]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveScriptingCommandsTests",
        "testMethod": "evalShaShouldReturnKey[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeek[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortBulkMapper[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHyperLogLogCommandsTests",
        "testMethod": "pfAddShouldAddToNonExistingKeyCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScore[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testClear[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "getTtlForAbsentKeyShouldCompleteWithoutValue[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "move[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testDiff[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testZScanShouldReadEntireValueRange[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeByScoreWithScores[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "renameShouldAlterKeyNameCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testEquals[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeWithScores[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferFirst[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testNotEquals[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setIfPresent[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testDiff[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getRange[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPush[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
        "testMethod": "testGetAndAdd[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRevRangeByLex[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testAddMultiple[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedCustomSerializer[5]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "getRangeShouldReturnSubstringCorrectlyWithMinUnbound[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollFirst[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentRemove[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekLast[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGetKey[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRandomKey[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testDistinctRandomMembersNegative[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testDistinctRandomMembers[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setBit[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRank[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentRemove[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullSessionCallback[3]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetIfAbsent[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.TransactionalLettuceIntegrationTests",
        "testMethod": "listOperationLPushShoudBeRolledBackCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRemRangeByScoreShouldRemoveValuesCorrectlyWithExcludingMaxRange[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "removeAll[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testEquals[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "pushShouldThrowErrorForMoreThanOneValueWhenUsingExistsOption[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrementDouble[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testClear[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "removeRange[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLastTimeout[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAllCollection[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testDiffAndStore[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireNoTimeUnit[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushWithPivot[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexBoundedWithLimit[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testRemoveNullValue[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentReplaceTwoArgs[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetRange[6]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "findProcessesCallbackReturningNullCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnCachedInstance[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testLast[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAll[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "delete[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testLast[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "shouldReadBackExplicitTimeToLiveAndSetItToMinusOnelIfPersisted[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testHashCode[15]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zCountShouldCountValuesInRangeWithPositiveInfinity[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testAppend[5]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRmoveLastOccurrence[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollTimeout[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "testMethod": "entries[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "testMethod": "putAll[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "savesObjectCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testClear[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsAll[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testDistinctRandomMembersNegative[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedThrowsExceptionInValueLoader[4]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.DefaultRedisCacheWriterTests",
        "testMethod": "putIfAbsentShouldAddExpiringEntryWhenKeyDoesNotExist[1: LettuceConnectionFactory]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "add[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "trim[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testContainsAll[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testRemoveNullValue[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectHead[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testUnionAndStore[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisCollectionFactoryBeanTests",
        "testMethod": "testExistingCol",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sPopCountShouldRetrieveValues[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDelete[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetAndSet[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAllCollection[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPushTimeout[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexBoundedWithLimit[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldRetunInstanceOfCorrectType[15]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemove[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutLast[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests",
        "testMethod": "geoAddShouldAddSingleGeoLocationCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testHashCode[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArrayWithGenerics[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "add[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRmoveLastOccurrence[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushIfPresent[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLast[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testAppend[7]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLast[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrementNotNumber[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testElement[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIsEmpty[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "addAll[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAdd[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetPropertyDefault[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "updateShouldAlterIndexDataOnNestedObjectCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionHead[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushWithPivot[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionHead[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hGetAllShouldReturnEntriesCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testZScanShouldReadEntireValueRange[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testUnwatch[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hSetNxShouldOperateCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollection[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveObject[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.repository.cdi.CdiExtensionIntegrationTests",
        "testMethod": "saveAndFindQualified",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveLast[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rank[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArray[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testReverseRangeByScoreWithScoresOffsetCount[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRevRangeByScoreWithScoreShouldReturnTuplesCorrectlyWithMinExclusion[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testEquals[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
        "testMethod": "testGetAndIncrement[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testDeserializeKey[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testContainsAll[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRandomKey[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "testMethod": "testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoValueSerializer[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testCappedCollection[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[15]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "rename[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIterator[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrementNotNumber[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollTimeout[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIsEmpty[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "shouldPreciseExpireAtKeysCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "delete[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testContainsKey[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testConvertAndSend[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testLast[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIsEmpty[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullValue[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentRemove[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.TransactionalLettuceIntegrationTests",
        "testMethod": "valueOperationSetShouldBeCommittedCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionTail[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "index[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsent[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "pop[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "computePrefixCreatesCacheKeyCorrectly[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIsEmpty[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPut[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAll[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateComplexTypedMap[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveScriptingCommandsTests",
        "testMethod": "evalShouldFailWithScriptError[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testDeserializeKey[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPutAll[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopAndLeftPush[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullValue[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollTimeout[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zIncrByShouldInreaseAndReturnScore[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTrim[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveObject[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionMiddle[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "unionAndStore[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeFirst[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrement[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.DefaultRedisCacheWriterTests",
        "testMethod": "putIfAbsentShouldNotAddEternalEntryWhenKeyAlreadyExist[0: JedisConnectionFactory]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testClear[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testUnion[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "getShouldReturnValueWrapperHoldingNullIfNullValueStored[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekLast[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIterator[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
        "testMethod": "testGetAndSet[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddFirst[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiGet[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekLast[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSet[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testCappedCollection[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAt[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "bitNotShouldThrowExceptionWhenMoreThanOnSourceKey[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "get[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAdd[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectMiddle[12]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putNullShouldAddEntryForNullValue[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedThrowsExceptionInValueLoader[7]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests",
        "testMethod": "findReturnsReferenceDataCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetAndSet[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lTrimShouldReturnValuesCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testEquals[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentRemove[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveScriptingCommandsTests",
        "testMethod": "evalShaShouldReturnMulti[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getAndSet[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "putIfAbsentShouldSetValueOnlyIfNotPresent[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testNotEquals[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByLexWithLimit[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToString[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirst[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsObject[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "union[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateComplexTypedList[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testScanWorksCorrectly[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDiscard[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.script.DefaultReactiveScriptExecutorTests",
        "testMethod": "shouldReturnStatusValue",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testDefaultInit[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithScoresWithLimit[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "intersectAndStore[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRenameIfAbsent[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithScores[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionHead[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekFirst[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "evictShouldRemoveKey[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetRange[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testKeySet[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTake[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testType[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGet[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testUnwatch[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDumpAndRestoreNoTtl[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollectionWithMaxElements[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGet[15]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests",
        "testMethod": "nearQueryShouldReturnResultsCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testClear[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrement[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldRetunInstanceOfCorrectType[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIsEmpty[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testCount[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetSet[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testScore[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testGetKey[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollTimeout[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testClear[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirst[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushWithPivot[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "exists[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "removeAll[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testElement[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "append[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPut[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyDoesNotExist[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexUnbounded[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testElement[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testType[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.script.DefaultReactiveScriptExecutorTests",
        "testMethod": "shouldApplyCustomResultSerializer",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushWithPivot[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testContainsObject[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testHashCode[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetFirst[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "renameNXShouldAlterKeyNameCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "existsShouldReturnFalseForNonExistingKeys[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateObjectType[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "size[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testClear[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testRemove[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTxCustomSerializer[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lRemSouldRemoveAllValuesCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testMove[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferFirst[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLast[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOffer[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDiscard[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiGet[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putIfAbsentShouldAddEntryIfNotExists[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSort[0]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushWithPivot[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setWithExpiry[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheClear[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "index[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExec[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisCollectionFactoryBeanTests",
        "testMethod": "testNone",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testConcurrentRead[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopWithTimeout[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setRange[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullValue[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testUnionAndStore[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIsEmpty[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedCustomSerializer[1]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedNullWithStoredNull[17]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testHashCode[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
        "testMethod": "testGetExistingValue[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSet[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexBounded[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setIfPresent[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "preciseExpire[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollTimeout[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIsEmpty[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.ScanTests",
        "testMethod": "contextLoads[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDeleteMultiple[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "putWritesNestedDataCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTx[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "computePrefixCreatesCacheKeyCorrectly[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testRemoveNullValue[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatch[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIterator[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDescendingIterator[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "trim[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "pop[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushAll[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "removeAll[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testUnwatch[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testContainsAll[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testElement[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "findProcessesCallbackReturningMultipleIdsCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testZScanShouldReadEntireValueRange[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesLoad[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testKeySet[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRange[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldRetunInstanceOfCorrectType[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemove[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testAppend[6]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testFirst[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedNullNotAllowingNull[16]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testGetKey[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisNotSupported[7]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testCount[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldRetunInstanceOfCorrectType[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.listener.SubscriptionConnectionTests",
        "testMethod": "testStopMessageListenerContainers[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyDoesNotExist[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "setNXshouldNotSetValueWhenAlreadyPresent[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIterator[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "addAll[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIsEmpty[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetSet[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSet[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyDoesNotExist[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testType[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "testMethod": "keys[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPop[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemove[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSeconds[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDescendingIterator[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "range[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testRemove[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "getRangeShouldReturnSubstringCorrectlyWithMaxUnbound[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDelete[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeWithScores[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testScanWorksCorrectly[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "unionAndStore[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "intersectAndStore[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "rPopSouldRemoveFirstValueCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateSimpleTypedMap[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testAppend[4]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "delete[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullNewValue[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPush[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.CompareAndSetIntegrationTests",
        "testMethod": "expectationNotMet[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests",
        "testMethod": "valueOperationShouldWorkWithReadOnlyTransactions",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRandomMember[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lLenShouldReturnSizeCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.TransactionalLettuceIntegrationTests",
        "testMethod": "listOperationLPushShoudBeRolledBackCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAndGetExpireMillis[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testNotEquals[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testConcurrentRead[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushWithPivot[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPoll[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArrayWithGenerics[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testPopWithCount[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "keyExpiredEventShouldRemoveHelperStructures[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsAll[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testIncrementScore[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTrim[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPut[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutFirst[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPutAll[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDescendingIterator[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrementNotNumber[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testElement[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollTimeout[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushAll[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testNotEquals[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testRemoveObject[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setIfAbsent[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRangeByScoreWithScoreShouldReturnTuplesCorrectlyWithMinExclusion[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeek[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutLast[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPutIfAbsent[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeWithScores[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testLastException[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiSet[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTx[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopWithTimeout[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests",
        "testMethod": "poolWorksWithoutClientResources",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "putIfAbsentShouldSetValueOnlyIfNotPresent[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "testMethod": "multiGetAbsentKeys[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRemove[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "remove[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testAddAll[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hMSetShouldOverwriteValuesCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHyperLogLogCommandsTests",
        "testMethod": "pfCountShouldReturnCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testContainsObject[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "updateShouldAlterGeoIndexCorrectlyOnUpdate[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutFirst[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrementNotNumber[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeByScore[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest",
        "testMethod": "readonlyTransactionSyncShouldNotExcceedMaxConnections",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionMiddle[3]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecCustomSerializer[1]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGet[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithScoresWithLimit[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByLex[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testContainsKey[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectHead[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testSize[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "intersectAndStore[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testLast[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRenameIfAbsent[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAddWithScore[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lIndexShouldReturnValueCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithLimit[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekLast[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisNotSupported[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByScore[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "union[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAllCollection[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemove[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveObject[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexUnboundedWithLimit[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testLastException[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "score[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setIfPresent[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIsEmpty[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRandomMember[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekLast[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingTransactions[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByLexLimit[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddLast[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddAll[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToArrayWithGenerics[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetAndGetBit[5]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollectionWithMaxElements[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "getShouldReturnValueWrapperHoldingNullIfNullValueStored[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertyNames[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemoveByScore[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArrayWithGenerics[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testSetProperty[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPut[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsentFailure[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests",
        "testMethod": "valueOperationSetShouldBeCommittedCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "remove[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTrim[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIsEmpty[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "rightPushAllShouldThrowExceptionWhenCalledWithNull[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testAdd[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testKeys[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPush[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullValue[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTxCustomSerializer[6]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testValues[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testClear[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetFirst[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testEquals[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultHashOperationsTests",
        "testMethod": "testEntries[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest",
        "testMethod": "valueOperationShouldWorkWithReadOnlyTransactions",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "shouldReportPreciseTimeToLiveCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDiscard[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldRetunInstanceOfCorrectType[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "testMethod": "testRename[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "get[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "shouldApplyCustomSerializationContextToValues[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToArrayWithGenerics[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPush[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemove[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetRange[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAll[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testStringTemplateExecutesWithStringConn[2]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetPropertyDefault[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortBulkMapper[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekFirst[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOffer[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "removeRange[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementLong[7]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHyperLogLogCommandsTests",
        "testMethod": "pfMergeShouldWorkCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRevRangeByScoreShouldReturnValuesCorrectlyWithMaxExclusion[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullOldValue[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testEquals[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIterator[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testPersist[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "executeScript[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddLast[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronized[15]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testContainsObject[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "rightPushAllShouldThrowExceptionWhenCalledWithNull[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveLast[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testRemoveObject[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "removeAll[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScore[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "remove[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentRemove[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testPopWithCount[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionMiddle[2]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronized[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOffer[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDumpAndRestoreNoTtl[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesSave[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetSet[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertyNames[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAtMillisNotSupported[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
        "testMethod": "testCheckAndSet[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToArrayWithGenerics[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatchMultipleKeys[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testKeys[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testAddAll[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testUnionAndStore[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "remove[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekLast[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAddAll[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testEntrySet[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testKeySet[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "updateShouldAlterIndexDataCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToArrayWithGenerics[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testValues[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSet[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPopWithTimeout[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexUnboundedWithLimit[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsObject[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveScriptingCommandsTests",
        "testMethod": "scriptExistsShouldReturnState[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetKey[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullNewValue[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionTail[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testHashCode[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsent[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testReverseRangeByScoreOffsetCount[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentReplaceTwoArgs[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "addAll[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "move[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGet[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hDelShouldRemoveSingleFieldsCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "add[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexBoundedWithLimit[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPop[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollection[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testSSCanReadsValuesFully[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests",
        "testMethod": "shouldReturnEmptyListWhenPageableOutOfBoundsUsingQueryMethod",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectTail[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionTail[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "exists[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "testMethod": "testDecrementAndGet[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsObject[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testAdd[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "unionAndStore[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByScoreWithScores[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesList[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testKeys[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPoll[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "testMethod": "testGetAndSet[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetKey[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIterator[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRangeWithScoreShouldReturnTuplesCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAllCollection[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateComplexTypedMap[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "members[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "score[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "add[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests",
        "testMethod": "geoRadiusShouldReturnMembersCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "putWritesIndexDataCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testRemove[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnCachedInstance[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheClear[17]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrementNotNumber[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSize[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "removeAll[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetRange[3]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testContainsAll[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateSimpleType[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "removeRange[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRange[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIsEmpty[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "delete[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "score[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testStringTemplateExecutesWithStringConn[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScore[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAllCollection[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectTail[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testClear[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIsEmpty[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetRange[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testScanWorksCorrectly[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRank[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPut[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheClear[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeWithScores[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testConvertAndSend[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferFirst[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "unionAndStore[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "removeAll[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentReplaceOneArg[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushAll[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectMiddle[11]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest",
        "testMethod": "testNumberOfOperationsIsOne",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "executeScriptWithElementReaderAndWriter[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testEquals[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecConversionDisabled[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexBounded[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setIfPresent[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToString[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetAndSet[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDiscard[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testConvertAndSend[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnCachedInstance[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullSessionCallback[5]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemove[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testContainsValue[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "randomMember[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsAll[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testHashCode[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillis[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArray[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetRange[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPop[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lInsertShouldAddValueCorrectlyAfterExisting[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirstOccurrence[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hGetShouldReturnValueForExistingField[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveObject[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionHead[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushWithPivot[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsentFailure[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "setShouldAddValuesCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "mGetShouldRetrieveNullValueCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testHashCode[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetAndGetBit[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testScanWorksCorrectly[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToArrayWithGenerics[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "exists[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushIfPresent[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRemShouldRemoveValuesFromSet[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionMiddle[10]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testEquals[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "findProcessesCallbackReturningNullCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLast[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTrim[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.CompareAndSetIntegrationTests",
        "testMethod": "shouldUpdateCounter[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testAddAll[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testCount[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIsEmpty[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDelete[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "difference[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdate[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests",
        "testMethod": "valueOperationShouldWorkWithReadOnlyTransactions",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testRemoveNullValue[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRange[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSize[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToArray[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "preciseExpire[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testContainsAll[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeByScoreWithScores[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekFirst[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPutAll[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "removeAll[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "testMethod": "get[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByLex[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "add[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testDistinctRandomMembers[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "updateShouldAlterIndexesCorrectlyWhenValuesGetRemovedFromHash[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddAll[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPush[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferFirst[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOffer[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "executeScript[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRange[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "executeScriptWithElementReaderAndWriter[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentReplaceOneArg[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsentFailure[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testLast[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testClear[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExec[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPut[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPutAll[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectTail[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testRawKeys[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "getWithCallableShouldResolveValueIfNotPresent[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectMiddle[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testStringPropertyNames[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testPopWithCount[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementLong[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAdd[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeByScore[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPutIfAbsent[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testLastException[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAllCollection[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "get[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetKey[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveNumberCommandsTests",
        "testMethod": "decrByDoubleShouldDecreaseValueCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests",
        "testMethod": "geoPosNonExisting[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferLast[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnCachedInstance[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPut[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testValues[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "renameNx[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testEquals[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrementNotNumber[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "delete[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAdd[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeFirst[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testEntrySet[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests",
        "testMethod": "listOperationLPushShoudBeRolledBackCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeByScore[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedNullWithStoredNull[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRangeByScoreShouldReturnValuesCorrectlyWithMinExclusion[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByScoreWithScores[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPop[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddFirst[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testEntrySet[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testEquals[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "mGetShouldRetrieveValueCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpiration[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testSize[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testConvertAndSend[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testClear[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetIfAbsent[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexBounded[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectMiddle[8]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemoveByScore[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortStore[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPutAll[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetRange[4]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesList[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushIfPresent[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests",
        "testMethod": "listOperationLPushShouldBeCommittedCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByScoreWithScores[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetProperty[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveLast[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testPersist[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullNewValue[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollFirst[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullRedisCallback[4]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sCardShouldCountValuesCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "shouldPreciseExpireKeysCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortBulkMapper[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToArray[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecConversionDisabled[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopAndLeftPushWithTimeout[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsAll[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testHashCode[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setRange[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest",
        "testMethod": "valueOperationShouldWorkWithReadOnlyTransactions",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArray[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetIfAbsent[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiGet[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRestoreTtl[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "deleteCleansIndexedDataCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScore[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "putWritesNestedDataCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveIndex[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrementDouble[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSet[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "delete[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.mapping.Jackson2HashMapperTests",
        "testMethod": "shouldWriteReadHashCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testGetKey[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testScanWorksCorrectly[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testDiff[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "remove[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "findProcessesCallbackReturningNullCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testRemove[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexBoundedWithLimit[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testHashCode[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeFirst[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testScanWorksCorrectly[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "removeAll[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAll[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirstOccurrence[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsObject[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testUnionAndStore[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIterator[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByLex[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronized[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testConcurrentRead[16]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesList[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrementDouble[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRandomKey[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirstOccurrence[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRange[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "shouldRejectNonInvalidKey[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesLoad[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutFirst[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testPopWithCount[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPoll[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testLast[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "shouldReportPreciseTimeToLiveCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testAppend[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testHashCode[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAdd[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectMiddle[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPoll[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexBoundedWithLimit[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "shouldApplyCustomSerializationContextToValues[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushWithPivot[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "delete[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTx[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedNullAllowingNull[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirst[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectMiddle[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testLastException[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "executeScript[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutFirst[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testRemoveNullValue[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest",
        "testMethod": "listOperationLPushShouldBeCommittedCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setIfAbsent[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "leftPushAllShouldThrowExceptionWhenCalledWithNull[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAllCollection[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testLast[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "get[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullValue[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRange[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTxCustomSerializer[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testFirst[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAdd[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testHashCode[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testRawKeysCollection[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemoveByScore[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentReplaceTwoArgs[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testScanWorksCorrectly[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPutIfAbsent[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAddAll[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutFirst[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIsEmpty[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPutIfAbsent[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPutAll[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveLast[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedThrowsExceptionInValueLoader[14]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemove[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrementNotNumber[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testLastException[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTxCustomSerializer[5]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "getTtlForKeyWithoutExpiryShouldCompleteWithZeroDuration[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testKeys[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testGetKey[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testDistinctRandomMembers[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testRemove[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testUnwatch[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushIfPresent[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopAndLeftPush[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testAppend[2]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAllCollection[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveNumberCommandsTests",
        "testMethod": "incrByIntegerShouldIncreaseValueCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testKeySet[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemove[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLast[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testNotEquals[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testScanWorksCorrectly[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsAll[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireNoTimeUnit[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekFirst[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAt[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testEquals[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPush[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGetOperations[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "size[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsent[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testContainsKey[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecuteScriptCustomSerializers[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToString[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testSize[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullOldValue[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnCachedInstance[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByScoreWithScores[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "testMethod": "testGetAndAdd[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexUnboundedWithLimit[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sRemShouldRemoveSingleValue[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSeconds[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAndGetExpireMillis[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testEquals[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testUnionAndStore[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAllCollection[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "add[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetRange[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testUnionAndStore[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnCachedInstance[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRank[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getRange[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetProperty[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTx[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentReplaceTwoArgs[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testFirstException[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeek[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
        "testMethod": "testAddAndGet[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushIfPresent[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testContainsObject[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsAll[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemove[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "removeAll[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRandomMembersWithDuplicates[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "set[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRandomMembersNegative[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithScores[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentReplaceTwoArgs[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPop[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAndGetExpireMillis[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsAll[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCachePut[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRank[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests",
        "testMethod": "testResetConnection",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArray[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "score[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPop[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsAll[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexUnboundedWithLimit[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testSize[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexBounded[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testEquals[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testLast[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testTemplateNotInitialized[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "rPushXShouldAppendValuesCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testHashCode[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hMSetSouldSetValuesCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsentFailure[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "typeShouldReturnTypeCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIntersectAndStore[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testValues[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByScoreOffsetCount[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemoveByScore[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "addAll[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "setRangeShouldReturnNewStringLengthCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToArrayWithGenerics[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeWithScores[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "intersectAndStore[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testEntrySet[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemove[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToString[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetAndGetBit[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByLex[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests",
        "testMethod": "testGetResource",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByScoreOffsetCount[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testClear[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortStore[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "size[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexBoundedWithLimit[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCachePut[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectMiddle[6]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testRemoveNullValue[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToArray[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAdd[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testStringTemplateExecutesWithStringConn[6]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullOldValue[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutFirst[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRmoveLastOccurrence[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testStringTemplateExecutesWithStringConn[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollectionWithMaxElements[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.DefaultRedisCacheWriterTests",
        "testMethod": "putShouldOverwriteExistingEternalEntry[1: LettuceConnectionFactory]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "deleteShouldRemoveGeoIndexCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testContainsAll[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "randomMembers[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "append[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testScanWorksCorrectly[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testEquals[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testStringPropertyNames[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollTimeout[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRenameIfAbsent[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testCappedCollection[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferLast[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testType[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIterator[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testLast[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrementNotNumber[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.DefaultRedisCacheWriterTests",
        "testMethod": "lockingCacheWriterShouldWaitForLockRelease[0: JedisConnectionFactory]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeLast[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsAll[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLastTimeout[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentReplaceOneArg[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScore[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testCappedCollection[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionTail[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetKey[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPut[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testScore[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDescendingIterator[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testLast[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollection[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lRangeShouldReturnValuesCorrectlyWithMinUnbounded[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeFirst[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "difference[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeek[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSort[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRange[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRevRangeShouldReturnValuesCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentReplaceTwoArgs[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullRedisCallback[6]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnNullIfNoCachedValueFound[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScore[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByScore[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.DefaultRedisCacheWriterTests",
        "testMethod": "putShouldOverwriteExistingEternalEntry[0: JedisConnectionFactory]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemove[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddAll[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddAll[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "getShouldReturnNullWhenKeyDoesNotExist[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushIfPresent[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetAndGetBit[8]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testScanWorksCorrectly[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecuteScriptCustomSerializers[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testRemoveObject[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectTail[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getRange[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testHashCode[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setIfPresent[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPut[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRank[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAt[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "distinctRandomMembers[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingPipelining[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetIfAbsent[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGetKey[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedNullNotAllowingNull[14]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesSave[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToArray[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAddWithScore[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsObject[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetFirst[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "preciseExpireAt[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testRemoveNullValue[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testElement[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetAndSet[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAt[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTx[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "getWithCallableShouldResolveValueIfNotPresent[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiSetIfAbsent[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "clientListShouldReturnCorrectly[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "setRangeShouldReturnNewStringLengthCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiGet[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutFirst[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddAll[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiGet[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "intersectAndStore[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "differenceAndStore[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRestoreTtl[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testElement[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSize[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "delete[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHyperLogLogCommandsTests",
        "testMethod": "pfMergeShouldWorkCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushIfPresent[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLastTimeout[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByLexWithLimit[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testGetKey[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateSimpleTypedList[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testDefaultScore[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "getShouldReturnValueWrapperHoldingNullIfNullValueStored[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillis[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSize[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelined[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testDeserializeKey[8]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddFirst[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSet[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentReplaceOneArg[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testReverseRangeByScoreOffsetCount[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lInsertShouldAddValueCorrectlyBeforeExisting[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testScanWorksCorrectly[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testRawKeysCollection[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "leftPushAllShouldThrowExceptionWhenCalledWithNull[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeFirst[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetKey[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopAndLeftPush[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testZScanShouldReadEntireValueRange[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortStore[0]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIterator[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testMove[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zInterStoreShouldWorkCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentReplaceTwoArgs[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollectionWithMaxElements[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRank[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectMiddle[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedThrowsExceptionInValueLoader[12]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedNullWithStoredNull[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIterator[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testConcurrentRead[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testScore[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesList[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "sizeRetrievesDataCorrectly[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDiscard[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testSize[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiSet[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "differenceAndStore[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirst[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveIndex[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testCappedCollection[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrementDouble[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "members[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithLimit[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeLast[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAdd[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedNullWithStoredNull[15]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByScoreWithScores[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setIfAbsent[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddAll[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetFirst[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillis[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPutIfAbsent[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByScore[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAdd[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionMiddle[11]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpirationWithTimeUnitMilliseconds[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGetKey[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveServerCommandsTests",
        "testMethod": "timeShouldRespondCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "removeRange[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testAppend[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testEquals[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPushTimeout[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testConcurrentRead[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testContainsKey[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionMiddle[13]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToString[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "index[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArray[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsObject[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirstOccurrence[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushWithPivot[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "rPushShouldAppendValuesCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutLast[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testEquals[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "count[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollection[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferLast[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentReplaceOneArg[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedThrowsExceptionInValueLoader[2]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hMGetShouldReturnNullValueForFieldsThatHaveNoValue[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveServerCommandsTests",
        "testMethod": "getClientListShouldReportClient[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testScanWorksCorrectly[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testPersist[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArray[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests",
        "testMethod": "listOperationLPushShouldBeCommittedCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementLong[0]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testKeySet[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRandomMembersNegative[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementLong[8]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesList[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAll[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByScoreWithScoresOffsetCount[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferFirst[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToString[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingPipelining[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollectionWithMaxElements[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "shouldApplyCustomSerializationContextToValues[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testContainsKey[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "sizeRetrievesDataCorrectly[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGet[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddAll[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.DefaultRedisCacheWriterTests",
        "testMethod": "nonLockingCacheWriterShouldIgnoreExistingLock[0: JedisConnectionFactory]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testAdd[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithLimit[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelined[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPutIfAbsent[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetRange[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testCount[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "expireAt[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSize[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpiration[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemoveObject[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirstOccurrence[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexUnbounded[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lPushXShouldPrependValuesCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testStringPropertyNames[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentReplaceTwoArgs[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveLast[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testNotEquals[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementDouble[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirst[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAll[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testRawKeys[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAndGetExpireMillis[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testDefaultScore[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "shouldAllowComplexKeyWithToStringMethod[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "add[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "setNXshouldNotSetValueWhenAlreadyPresent[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "rightPushAllShouldThrowExceptionWhenCalledWithNull[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveNumberCommandsTests",
        "testMethod": "hIncrByDoubleShouldIncreaseValueCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithLimit[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecCustomSerializer[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setIfPresent[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testHashCode[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "index[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTake[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testElement[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArrayWithGenerics[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesSave[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIntersect[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRangeByScoreWithScoreShouldReturnTuplesCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushIfPresent[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRank[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testFirst[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getRange[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPutIfAbsent[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollection[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[8]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "randomMembers[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSet[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetAndSet[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGetOperations[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByLex[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "renameNx[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeFirst[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testFirst[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAdd[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.listener.PubSubResubscribeTests",
        "testMethod": "org.springframework.data.redis.listener.PubSubResubscribeTests",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testClear[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPopWithTimeout[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "shouldReadBackExplicitTimeToLive[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testEquals[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLast[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIndexOfObject[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "evictShouldRemoveKey[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testEquals[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrementDouble[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGetOperations[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "distinctRandomMembers[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.DefaultRedisCacheWriterTests",
        "testMethod": "getShouldReturnNullWhenKeyDoesNotExist[1: LettuceConnectionFactory]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "range[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testRemoveObject[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveIndex[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetSet[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPop[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushWithPivot[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getBit[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollectionWithMaxElements[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddAll[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertyNames[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArrayWithGenerics[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSeconds[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopAndLeftPush[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testLast[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveNumberCommandsTests",
        "testMethod": "decrByIntegerShouldDecreaseValueCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetIfAbsent[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getRange[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGetKey[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testEquals[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetKey[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOffer[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveServerCommandsTests",
        "testMethod": "standaloneInfoWithSectionShouldRespondCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentReplaceTwoArgs[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testContainsValue[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsObject[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIsEmpty[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArrayWithGenerics[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronized[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutLast[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithScores[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisNotSupported[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSize[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPush[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPush[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLastTimeout[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectTail[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementLong[2]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPop[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferLast[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushWithPivot[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testClear[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testHashCode[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopAndLeftPush[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRemove[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testSize[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testFirstException[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetRange[6]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setIfPresent[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushWithPivot[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTake[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zCardShouldReturnSizeCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "delete[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeByScore[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPutAll[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSet[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "getShouldRetrieveValuesWithNullCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToString[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "removeAll[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDescendingIterator[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPut[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrement[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToString[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sInterShouldIntersectSetsCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testRemoveNullValue[15]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexUnboundedWithLimit[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushWithPivot[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "delete[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "deleteShouldRemoveGeoIndexCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRange[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testEquals[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekFirst[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveServerCommandsTests",
        "testMethod": "saveShouldRespondCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testStringTemplateExecutesWithStringConn[7]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollectionWithMaxElements[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecuteScriptCustomSerializers[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPushTimeout[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "delete[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests",
        "testMethod": "geoHash[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRevRangeByScoreShouldReturnValuesCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testNotEquals[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRandomMember[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekLast[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetRange[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsentFailure[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setWithExpiry[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecCustomSerializer[8]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRandomKey[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "zCardRetrievesDataCorrectly[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRandomMembersWithDuplicates[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.SupportXmlTests",
        "testMethod": "testContainerSetup",
        "failureName": "org.springframework.beans.factory.BeanCreationException",
        "detail": "Error creating bean with name \u0027non-existing\u0027: Invocation of init method failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToString[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithScores[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "type[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiSet[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToArrayWithGenerics[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortStore[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testEquals[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesSave[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLastTimeout[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAtMillisNotSupported[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeWithScores[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrementDouble[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetFirst[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setIfPresent[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIsEmpty[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "removeAll[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "rPushXShouldAppendValuesCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToString[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testEquals[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetSet[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsent[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testCount[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIsEmpty[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "index[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.CompareAndSetIntegrationTests",
        "testMethod": "shouldUpdateCounter[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIsEmpty[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirstOccurrence[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetProperty[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesLoad[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testClear[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testSSCanReadsValuesFully[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddFirst[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testKeySet[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAt[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testEquals[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutLast[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testDiffAndStore[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPush[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrement[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testSetProperty[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testContainsObject[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testTemplateNotInitialized[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "differenceAndStore[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "removeAll[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdate[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeLast[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedThrowsExceptionInValueLoader[13]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testGetKey[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortBulkMapper[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testEntrySet[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByLexLimit[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithLimit[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "remove[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPutIfAbsent[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiSet[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisNotSupported[4]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "getTtlForAbsentKeyShouldCompleteWithoutValue[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRange[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRank[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireNoTimeUnit[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSet[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveServerCommandsTests",
        "testMethod": "setConfigShouldApplyConfiguration[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGetKey[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveServerCommandsTests",
        "testMethod": "setConfigShouldApplyConfiguration[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRange[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRemRangeByScoreShouldRemoveValuesCorrectlyWithPositiveInfinity[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testUnionAndStore[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSize[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultHashOperationsTests",
        "testMethod": "testDelete[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecCustomSerializer[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrementNotNumber[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTx[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionHead[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testAdd[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getAndSet[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIntersect[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetFirst[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRange[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementDouble[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testEntrySet[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testHashCode[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddLast[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "zCardRetrievesDataCorrectly[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollection[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "unionAndStore[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "findProcessesCallbackReturningSingleIdCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "rPopLPushShouldWorkCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRange[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferLast[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIsEmpty[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIterator[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAdd[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sPopShouldRetrieveRandomValue[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testConcurrentRead[17]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatchMultipleKeys[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "bitCountShouldReturnValueCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testDefaultScore[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectHead[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTrim[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "zCardRetrievesDataCorrectly[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "savesObjectCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testGetKey[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testScore[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "expire[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "rename[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testCappedCollection[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIsEmpty[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollTimeout[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArrayWithGenerics[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisCollectionFactoryBeanTests",
        "testMethod": "testNone",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexUnbounded[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "executeScriptWithElementReaderAndWriter[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testContainsAll[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.listener.KeyExpirationEventMessageListenerTests",
        "testMethod": "listenerShouldNotReactToDeleteEvents",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIsEmpty[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullNewValue[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRange[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "pSetEXshouldSetKeyAndExpirationTime[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
        "testMethod": "testShouldBeAbleToUseRedisAtomicLongWithProperlyConfiguredRedisTemplate[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemainingCapacity[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToArray[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyDoesNotExist[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "findProcessesCallbackReturningMultipleIdsCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToString[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testContainsAll[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testDefaultInit[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldThrowExceptionOnInvalidType[13]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "testMethod": "testGetAndIncrement[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testValues[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPutIfAbsent[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsAll[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIterator[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedCustomSerializer[7]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByLex[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectMiddle[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateComplexTypedList[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirstOccurrence[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentReplaceTwoArgs[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLastTimeout[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronized[17]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "clientListShouldReturnCorrectly[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putIfAbsentShouldAddEntryIfNotExists[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testDiffAndStore[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionMiddle[1]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "set[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDescendingIterator[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementLong[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testContainsObject[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRmoveLastOccurrence[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPush[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToArrayWithGenerics[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpiration[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getAndSet[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateComplexType[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testContainsKey[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
        "testMethod": "testDecrementAndGet[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "append[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTrim[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveObject[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRemRangeByScoreShouldRemoveValuesCorrectlyWithPositiveInfinity[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiSetIfAbsent[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingPipelining[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "differenceAndStore[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveLast[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementDouble[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferFirst[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRank[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testContainsObject[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollFirst[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testUnwatch[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAllCollection[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "remove[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testElement[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedNullNotAllowingNull[2]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "union[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPutAll[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetRange[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToArrayWithGenerics[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddFirst[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testScore[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTrim[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveObject[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetOperations[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "delete[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekFirst[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "add[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrementDouble[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedCustomSerializer[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "difference[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToArray[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirstOccurrence[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "rename[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testKeys[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testDeserializeKey[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPoll[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScoreWithScores[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "shouldExpireAtKeysCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeek[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testEquals[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "intersect[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveIndex[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpiration[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldRetunInstanceOfCorrectType[17]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIsEmpty[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testRemoveNullValue[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRmoveLastOccurrence[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushAll[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithScores[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "distinctRandomMembers[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest",
        "testMethod": "testNumberOfOperationsIsOne",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testRemoveNullValue[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAllCollection[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOffer[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPop[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "expire[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirstOccurrence[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsObject[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "shouldPreciseExpireAtKeysCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAddWithScore[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesSave[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPop[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "delete[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRange[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetFirst[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeByScore[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "getSetShouldNotEmitPreviousValueCorrectlyWhenNotExists[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPopWithMillisecondTimeoutShouldFail[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAdd[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRestoreTtl[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetProperty[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPop[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "range[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisNotSupported[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexUnbounded[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testKeySet[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testAdd[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testHashCode[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferFirst[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "differenceAndStore[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetFirst[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "shouldApplyCustomSerializationContextToHash[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "delete[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAtMillisNotSupported[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekFirst[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPutAll[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTrim[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIsEmpty[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectTail[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "score[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "getShouldRetrieveValuesCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetKey[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "unionAndStore[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementDouble[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRestoreTtl[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testDiff[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testEquals[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPoll[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "pop[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAdd[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOffer[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentRemove[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexUnboundedWithLimit[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAdd[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionHead[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPush[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushAll[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPopWithTimeout[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpirationWithTimeUnitMilliseconds[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArray[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingTransactions[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldRetunInstanceOfCorrectType[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeFirst[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testStringPropertyNames[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "testMethod": "testExpire[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRank[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPoll[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullOldValue[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "popWithCount[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "testMethod": "delete[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sUnionStoreShouldReturnSizeCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullValue[15]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveScriptingCommandsTests",
        "testMethod": "evalShouldReturnMultiNumbers[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "removeAll[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeByScore[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAllCollection[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testConcurrentRead[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullOldValue[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testContainsObject[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemove[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGetOperations[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronizedThrowsExceptionInValueLoader[15]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testPersist[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testSize[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testAddAll[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLastTimeout[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testContainsValue[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testRemoveObject[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillis[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAtMillisNotSupported[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
        "testMethod": "testExpireAt[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSize[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPutAll[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putIfAbsentShouldReturnExistingIfExists[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zCountShouldCountValuesInRangeWithPositiveInfinity[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "clientListShouldReturnCorrectly[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsent[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithScoresWithLimit[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecuteScriptCustomSerializers[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testType[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDescendingIterator[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "randomMembers[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getBit[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByScoreWithScores[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "count[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "getTtlForKeyWithoutExpiryShouldCompleteWithZeroDuration[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIsEmpty[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
        "testMethod": "lLenShouldReturnSizeCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTx[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetAndSet[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPut[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddAll[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollection[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToString[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testElement[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRandomKey[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushIfPresent[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTrim[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.listener.KeyExpirationEventMessageListenerTests",
        "testMethod": "listenerShouldNotReactToDeleteEvents",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveObject[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testGetKey[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testIncrementLong[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingTransactions[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollection[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortBulkMapper[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testAddMultiple[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSize[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRenameIfAbsent[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesList[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sDiffStoreShouldBeExcecutedCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "testMethod": "put[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testContainsValue[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "size[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexBounded[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetOperations[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToArrayWithGenerics[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "move[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeWithScores[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLast[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testHashCode[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "removeAll[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sInterStoreShouldReturnSizeCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatch[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekLast[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "move[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRange[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToArrayWithGenerics[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeWithScores[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekLast[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetFirst[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelined[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testPopWithCount[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAndGetExpireMillis[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "delete[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveLast[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeWithScores[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutLast[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getAndSet[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testDeserializeKey[5]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirst[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPush[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testEquals[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testRemoveNullValue[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronized[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectMiddle[13]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRange[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexBoundedWithLimit[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAllCollection[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAt[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "set[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hDelShouldRemoveMultipleFieldsCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testUnion[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveObject[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testClear[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testHashCode[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "putWritesDataWithColonCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionMiddle[14]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollTimeout[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekLast[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAt[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithLimit[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisNotSupported[3]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddLast[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddLast[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testClear[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScore[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSet[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "shouldDeleteKeysInBatchCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.script.DefaultReactiveScriptExecutorTests",
        "testMethod": "executeAddsScriptToScriptCache",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyDoesNotExist[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest",
        "testMethod": "readonlyTransactionSyncShouldNotExcceedMaxConnections",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullRedisCallback[0]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "testMethod": "incrementDouble[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushWithPivot[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekLast[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "setShouldAddValueCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testConvertAndSend[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "getShouldRetrieveValueCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "delete[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "intersect[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hSetNxShouldOperateCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPop[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeByScore[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingPipelining[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekLast[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrementDouble[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testHashCode[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByLex[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeWithScores[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "union[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testDiffAndStore[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "findProcessesCallbackReturningSingleIdCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testSetProperty[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollectionWithMaxElements[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testHashCode[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "intersect[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferLast[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testAddAll[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetFirst[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertyNames[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollFirst[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testCappedCollection[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArrayWithGenerics[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "updateShouldRemoveSimpleMapValuesCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRevRangeByScoreWithScoreShouldReturnTuplesCorrectlyWithMinExclusion[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testScore[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatch[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionMiddle[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetRange[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testRemoveNullValue[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testFirst[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentRemove[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeByScoreWithScores[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyDoesNotExist[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testType[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.DefaultRedisCacheWriterTests",
        "testMethod": "removeShouldDeleteEntry[0: JedisConnectionFactory]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "addAll[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekFirst[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDeleteMultiple[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullOldValue[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpiration[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToArray[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelined[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateComplexType[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRename[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDiscard[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testKeySet[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testDistinctRandomMembers[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[1]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "intersectAndStore[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "testMethod": "putAll[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirstOccurrence[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollTimeout[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRange[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "size[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "renameNXShouldNotAlterExistingKeyName[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
        "testMethod": "testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoKeySerializer[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekLast[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "remove[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sMoveShouldReturnOperateCorrectlyWhenValueAlreadyPresentInTarget[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetIfAbsent[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "getShouldRetrieveValuesCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRemove[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getRange[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutFirst[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testContainsKey[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testType[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortBulkMapper[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByScore[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollection[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGetOperations[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddFirst[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testClear[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hMSetShouldOverwriteValuesCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "shouldAllowComplexKeyWithToStringMethod[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRmoveLastOccurrence[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollTimeout[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIntersect[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests",
        "testMethod": "geoRadiusByMemberShouldReturnDistanceCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByScoreWithScoresOffsetCount[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSet[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRemoveObject[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferLast[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRemRangeByScoreShouldRemoveValuesCorrectlyWithNegativeInfinity[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullNewValue[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAdd[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "executeScript[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIndexOfObject[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetFirst[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushWithPivot[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByLex[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddFirst[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testScanWorksCorrectly[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollectionWithMaxElements[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDeleteMultiple[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyDoesNotExist[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferLast[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIsEmpty[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexBounded[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests",
        "testMethod": "geoRadiusShouldApplyLimit[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRandomKey[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testAppend[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testLastException[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPushTimeout[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "type[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnCachedInstance[17]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrementDouble[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDelete[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "distinctRandomMembers[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPop[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexUnbounded[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferFirst[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveServerCommandsTests",
        "testMethod": "getConfigShouldRespondCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testEntrySet[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "findProcessesCallbackReturningSingleIdCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullSessionCallback[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "putWritesSimpleNestedIndexValuesCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "getSetShouldReturnPreviousValueCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testElement[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testPutIfAbsent[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "getBitShouldReturnValueCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "intersectAndStoreShouldReturnNumberOfElementsInDestination[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIndexOfObject[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sCardShouldCountValuesCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollectionWithMaxElements[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSet[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSeconds[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferLast[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetPropertyDefault[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGetOperations[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsObject[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithScoresWithLimit[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "unionAndStore[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testRemove[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutLast[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testConcurrentRemove[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIntersectAndStore[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPoll[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "delete[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "updateShouldAlterIndexesCorrectlyWhenValuesGetRemovedFromHash[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddLast[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSize[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "size[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAddWithScore[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAllCollection[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekLast[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRange[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRandomMembersWithDuplicates[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortStore[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAll[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexUnbounded[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "removeAll[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPop[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testIncrement[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testStringPropertyNames[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatch[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAdd[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testStringTemplateExecutesWithStringConn[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "executeScript[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesSave[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "shouldApplyCustomSerializationContextToHash[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDeleteMultiple[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPushTimeout[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAdd[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIsEmpty[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithLimit[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectMiddle[10]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnCachedInstance[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutFirst[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPoll[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testClear[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveServerCommandsTests",
        "testMethod": "flushAllShouldRespondCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testClear[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testClear[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOffer[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollFirst[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByLexWithLimit[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatchMultipleKeys[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPop[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testClear[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "popWithCount[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsAll[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
        "testMethod": "getThrowsExceptionWhenKeyHasBeenRemoved[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
        "testMethod": "bitNotShouldThrowExceptionWhenMoreThanOnSourceKey[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "popWithCount[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPushIfPresent[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "delete[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testPop[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopWithTimeout[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferLast[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiSetIfAbsent[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRange[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testDefaultInit[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLast[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertyNames[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "shouldApplyCustomSerializationContextToValues[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "intersectAndStoreShouldReturnNumberOfElementsInDestination[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTx[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByScoreWithLimit[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "evictShouldRemoveKey[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGet[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAndGetExpireMillis[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutLast[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
        "testMethod": "hGetShouldReturnNullForNotExistingField[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushAllCollection[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTrim[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemove[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "unionAndStore[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopAndLeftPushWithTimeout[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTake[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "testMethod": "delete[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushWithPivot[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testScanWorksCorrectly[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testEquals[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveServerCommandsTests",
        "testMethod": "getClientListShouldReportClient[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByLex[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "expire[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedCustomSerializer[3]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRename[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushIfPresent[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDescendingIterator[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveServerCommandsTests",
        "testMethod": "saveShouldRespondCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPut[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "shouldPreciseExpireKeysCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollTimeout[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testRemove[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeek[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTake[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekFirst[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDiscard[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "delete[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIsEmpty[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushWithPivot[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "multiSetIfAbsent[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRangeByScoreWithScoreShouldReturnTuplesCorrectlyWithMaxExclusion[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAddWithScore[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testLast[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentRemove[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGet[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArray[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveLast[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "add[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testToArray[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeByLex[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetRange[2]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "remove[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollection[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testScore[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testScanWorksCorrectly[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAdd[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDiscard[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddLast[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollection[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExpireAndGetExpireMillis[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.RedisCacheTests",
        "testMethod": "putIfAbsentShouldAddEntryIfNotExists[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testClear[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "members[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollectionWithMaxElements[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testHashCode[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAllCollection[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPush[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeFirst[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testGetKey[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnNullIfNoCachedValueFound[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testRemove[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekFirst[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirstOccurrence[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertyNames[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveScriptingCommandsTests",
        "testMethod": "evalShaShouldReturnKey[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullSessionCallback[1]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemainingCapacity[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "zCardRetrievesDataCorrectly[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "isMember[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testEntrySet[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.DefaultRedisCacheWriterTests",
        "testMethod": "lockingCacheWriterShouldExitWhenInterruptedWaitForLockRelease[1: LettuceConnectionFactory]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testGetKey[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testDefaultInit[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetFirst[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "zCardRetrievesDataCorrectly[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArray[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.TransactionalLettuceIntegrationTests",
        "testMethod": "valueOperationSetShouldBeCommittedCorrectly",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testPersist[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRenameIfAbsent[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutLast[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testElement[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectTail[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "rightPushAllShouldThrowExceptionWhenCalledWithNull[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArrayWithGenerics[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDescendingIterator[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testNotEquals[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArrayWithGenerics[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
        "testMethod": "typeShouldReturnTypeCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddFirst[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRename[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.CompareAndSetIntegrationTests",
        "testMethod": "shouldUpdateCounter[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDumpAndRestoreNoTtl[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "rename[Generic Jackson 2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeLast[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullNewValue[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "testMethod": "getAbsentKey[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testAdd[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "distinctRandomMembers[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testDiffAndStore[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDeleteMultiple[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullSessionCallback[0]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIntersect[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPopWithMillisecondTimeoutShouldFail[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullValue[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testEquals[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOfferLast[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "renameNx[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsObject[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testSize[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testEntrySet[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "rangeByScore[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testGetKey[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionTail[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "delete[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testKeySet[15]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "unionAndStore[String/Person/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
        "testMethod": "testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoKeySerializer[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheClear[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testGetAndSet[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPushTimeout[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirstOccurrence[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testFirstException[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testRawKeys[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateObjectTypedMap[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIterator[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveIndex[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testZScanShouldReadEntireValueRange[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testSize[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetRange[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCachePut[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testRemoveNullValue[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesLoad[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "rename[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIsEmpty[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testReplaceNullNewValue[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "clientListShouldReturnCorrectly[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "delete[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollFirst[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTx[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testEquals[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatchMultipleKeys[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushWithPivot[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddAll[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testDiff[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testClear[11]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireNoTimeUnit[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushWithPivot[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPushWithPivot[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDescendingIterator[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetSynchronized[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeWithScores[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisUsingPipelining[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "rightPopWithTimeout[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testCappedCollection[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemainingCapacity[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "members[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testContainsKey[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setWithExpiry[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIntersect[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeek[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testScanWorksCorrectly[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "range[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatch[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testZScanShouldReadEntireValueRange[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRevRangeShouldReturnValuesCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "incrementScore[Jackson2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullNewValue[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "removeAll[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecConversionDisabled[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "removeRangeByScore[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testIncrement[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecCustomSerializer[7]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "exists[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullSessionCallback[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "add[String/OXM]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsAll[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatch[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsent[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAddAll[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.DefaultRedisCacheWriterTests",
        "testMethod": "putShouldOverwriteExistingExpiringEntryAndResetTtl[0: JedisConnectionFactory]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "clientListShouldReturnCorrectly[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDrainToCollection[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testStringTemplateExecutesWithStringConn[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testReplaceNullOldValue[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testUnion[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetKey[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testPersist[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "add[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSize[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testGetKey[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollFirst[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAdd[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPut[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testGetKey[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToArray[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIndexOfObject[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testToArrayWithGenerics[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testValues[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testRemoveObject[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutFirst[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "size[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeek[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveNumberCommandsTests",
        "testMethod": "incrByDoubleShouldIncreaseValueCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "distinctRandomMembers[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.script.DefaultReactiveScriptExecutorTests",
        "testMethod": "shouldApplyCustomResultSerializer",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExec[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "getTtlForAbsentKeyShouldCompleteWithoutValue[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRank[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testScanWorksCorrectly[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPopAndLeftPush[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentReplaceOneArg[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeek[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "updateShouldAlterIndexDataOnNestedObjectPathCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelined[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveScriptingCommandsTests",
        "testMethod": "scriptKillShouldKillScripts[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekLast[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPutAll[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpirationWithTimeUnitMilliseconds[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
        "testMethod": "zRevRangeByScoreShouldReturnValuesCorrectly[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRange[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedNonNullRedisCallback[8]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIsEmpty[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateObjectTypedList[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testContainsKey[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByScore[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testNotEquals[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectHead[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireNoTimeUnit[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "shouldReadBackExplicitTimeToLiveToPrimitiveField[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testIterator[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testUnwatch[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testSize[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectHead[10]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPopWithTimeout[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPeekFirst[9]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testSize[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "testMethod": "getAbsentKey[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
        "testMethod": "sUnionStoreShouldReturnSizeCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "getBit[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGetKey[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushWithPivot[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsAll[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAll[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testFirst[1]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testRawKeys[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testGet[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeByScoreWithScores[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testElement[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testReverseRangeWithScores[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testFirstException[8]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests",
        "testMethod": "testGetSharedConnectionNotShared",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLast[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldReturnNullIfNoCachedValueFound[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testClear[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPollLast[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "expireAt[Long]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testToArray[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentReplaceOneArg[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testConcurrentRead[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "removeAll[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetRange[8]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRandomKey[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDumpAndRestoreNoTtl[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutLast[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveScriptingCommandsTests",
        "testMethod": "evalShouldReturnStatus[Standalone]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "clientListShouldReturnCorrectly[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testTemplateNotInitialized[8]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "shouldReadBackExplicitTimeToLive[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveServerCommandsTests",
        "testMethod": "infoShouldRespondCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveFirst[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "clientListShouldReturnCorrectly[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesSave[3]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testSortBulkMapper[8]",
        "failureName": "org.junit.AssumptionViolatedException",
        "detail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testSize[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRename[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateSimpleTypedList[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddIndexObjectTail[14]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testContainsObject[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "addAllIndexCollectionMiddle[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testScanWorksCorrectly[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testClear[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testExecutePipelinedTx[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByLexUnbounded[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testRightPushIfPresent[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPutIfAbsent[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testDefaultInit[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemove[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeWithScores[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "partialUpdateObjectTypedList[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testContainsValue[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
        "testMethod": "pop[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRank[10]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests",
        "testMethod": "geoPos[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAdd[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireSecondsForKeyDoesNotExist[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
        "testMethod": "delete[raw]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
        "testMethod": "leftPopWithMillisecondTimeoutShouldFail[Pooled/Person/JDK]",
        "failureName": "org.springframework.data.redis.connection.PoolException",
        "detail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testPutFirst[12]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testRandomMembersWithDuplicates[2]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testConcurrentRemove[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatchMultipleKeys[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTrim[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testContainsValue[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "updateShouldRemoveComplexListValuesCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testWatchMultipleKeys[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testRangeByLexBounded[4]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testTakeLast[3]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisMapTests",
        "testMethod": "testScanWorksCorrectly[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeByScoreWithScores[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
        "testMethod": "getThrowsExceptionWhenKeyHasBeenRemoved[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testAddFirst[11]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testMultiSetIfAbsent[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testCappedCollection[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.atomic.CompareAndSetIntegrationTests",
        "testMethod": "expectationNotMet[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testDelete[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
        "testMethod": "shouldReadBackExplicitTimeToLive[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
        "testMethod": "testZScanShouldReadEntireValueRange[0]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAddWithScore[12]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testOffer[0]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.connection.lettuce.LettuceReactiveServerCommandsTests",
        "testMethod": "standaloneInfoWithSectionShouldRespondCorrectly[Standalone/Pooled]",
        "failureName": "io.lettuce.core.RedisConnectionException",
        "detail": "Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "clientListShouldReturnCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testGet[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testDiff[7]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldThrowExceptionOnInvalidType[0]",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testIsEmpty[7]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testDescendingIterator[13]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "testCacheGetShouldRetunInstanceOfCorrectType[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
        "testMethod": "putIfAbsentShouldSetValueOnlyIfNotPresent[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
        "testMethod": "testPropertiesList[13]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
        "testMethod": "hasKey[String]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
        "testMethod": "setWithExpiry[String/Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveLast[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
        "testMethod": "reverseRangeWithScores[Person/JDK]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testRangeWithScores[6]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testRemoveObject[5]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultValueOperationsTests",
        "testMethod": "testSetWithExpirationWithTimeUnitMilliseconds[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testRenameIfAbsent[6]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAll[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisZSetTests",
        "testMethod": "testAdd[9]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultListOperationsTests",
        "testMethod": "testLeftPushAllCollection[4]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
        "testMethod": "expire[Double]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisListTests",
        "testMethod": "testLast[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisTemplateTests",
        "testMethod": "testGetExpireMillisForKeyDoesNotExist[2]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.DefaultSetOperationsTests",
        "testMethod": "testPopWithCount[5]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
        "testMethod": "putWritesSimpleIndexDataWithColonCorrectly[1]",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
        "isError": true
      },
      {
        "testClass": "org.springframework.data.redis.support.collections.RedisSetTests",
        "testMethod": "testIterator[14]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
        "isError": true
      }
    ]
  },
  "type": "only_fail"
}