{
  "repository": {
    "name": "INRIA/spoon",
    "githubId": 14176513,
    "url": "https://github.com/INRIA/spoon",
    "isFork": false,
    "original": {
      "name": "",
      "githubId": 0,
      "url": ""
    },
    "isPullRequest": true,
    "pullRequestId": 2319
  },
  "builds": {
    "buggyBuild": {
      "id": 410920740,
      "url": "http://travis-ci.org/INRIA/spoon/builds/410920740",
      "date": "Aug 1, 2018 7:51:55 PM"
    }
  },
  "reproductionBuggyBuild": {
    "reproductionDateBeginning": "Aug 1, 2018 7:52:28 PM",
    "reproductionDateEnd": "Aug 1, 2018 8:08:42 PM",
    "totalDuration": 970,
    "processDurations": {
      "cloning": {
        "nbSteps": 1,
        "totalDuration": 13,
        "stepNames": [
          "CloneRepository"
        ],
        "stepDurations": [
          13
        ]
      },
      "building": {
        "nbSteps": 2,
        "totalDuration": 85,
        "stepNames": [
          "CheckoutBuggyBuild",
          "BuildProject"
        ],
        "stepDurations": [
          4,
          81
        ]
      },
      "testing": {
        "nbSteps": 1,
        "totalDuration": 763,
        "stepNames": [
          "TestProject"
        ],
        "stepDurations": [
          763
        ]
      }
    },
    "projectRootPomPath": "./workspace/INRIA/spoon/410920740/pom.xml"
  },
  "patchDiff": {
    "files": {
      "numberAdded": 0,
      "numberChanged": 0,
      "numberDeleted": 0
    },
    "lines": {
      "numberAdded": 0,
      "numberDeleted": 0
    }
  },
  "projectMetrics": {
    "numberModules": 1,
    "numberSourceFiles": 615,
    "numberTestFiles": 692,
    "numberLibrariesFailingModule": 30
  },
  "tests": {
    "failingModule": "/root/workspace/INRIA/spoon/410920740",
    "overallMetrics": {
      "numberRunning": 1534,
      "numberPassing": 1530,
      "numberFailing": 4,
      "numberErroring": 0,
      "numberSkipping": 4,
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false,
          "occurrences": 3
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "isError": false,
          "occurrences": 1
        }
      ]
    },
    "failingClasses": [
      {
        "testClass": "spoon.MavenLauncherTest",
        "numberRunning": 6,
        "numberPassing": 4,
        "numberFailing": 2,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.processing.CtGenerationTest",
        "numberRunning": 4,
        "numberPassing": 2,
        "numberFailing": 2,
        "numberErroring": 0,
        "numberSkipping": 0
      }
    ],
    "failureDetails": [
      {
        "testClass": "spoon.processing.CtGenerationTest",
        "testMethod": "testGenerateCtBiScanner",
        "failureName": "java.lang.AssertionError",
        "isError": false
      },
      {
        "testClass": "spoon.MavenLauncherTest",
        "testMethod": "mavenLauncherTestMultiModulesAndVariables",
        "failureName": "java.lang.AssertionError",
        "detail": "Content of classpath: ",
        "isError": false
      },
      {
        "testClass": "spoon.MavenLauncherTest",
        "testMethod": "spoonMavenLauncherTest",
        "failureName": "java.lang.AssertionError",
        "detail": "expected:\u003c23\u003e but was:\u003c0\u003e",
        "isError": false
      },
      {
        "testClass": "spoon.processing.CtGenerationTest",
        "testMethod": "testGenerateCloneVisitor",
        "failureName": "org.junit.ComparisonFailure",
        "detail": "CloneBuilder different expected:\u003c...isitorGenerator\n    [@java.lang.Override\n    public void scanCtElement(spoon.reflect.declaration.CtElement e) {\n        ((spoon.reflect.declaration.CtElement) (other)).setPosition(e.getPosition());\n        ((spoon.reflect.declaration.CtElement) (other)).setAllMetadata(e.getAllMetadata());\n        ((spoon.reflect.declaration.CtElement) (other)).setImplicit(e.isImplicit());\n        super.scanCtElement(e);\n    }\n\n    /**\n     * Scans an abstract named element.\n     */\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void scanCtNamedElement(spoon.reflect.declaration.CtNamedElement e) {\n        ((spoon.reflect.declaration.CtNamedElement) (other)).setSimpleName(e.getSimpleName());\n        super.scanCtNamedElement(e);\n    }\n\n    /**\n     * Scans an abstract reference.\n     */\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void scanCtReference(spoon.reflect.reference.CtReference reference) {\n        ((spoon.reflect.reference.CtReference) (other)).setSimpleName(reference.getSimpleName());\n        super.scanCtReference(reference);\n    }\n\n    /**\n     * Scans an abstract statement.\n     */\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void scanCtStatement(spoon.reflect.code.CtStatement s) {\n        ((spoon.reflect.code.CtStatement) (other)).setLabel(s.getLabel());\n        super.scanCtStatement(s);\n    }\n\n    /**\n     * Scans an abstract type.\n     */\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void scanCtType(spoon.reflect.declaration.CtType\u003cT\u003e type) {\n        ((spoon.reflect.declaration.CtType\u003cT\u003e) (other)).setModifiers(type.getModifiers());\n        ((spoon.reflect.declaration.CtType\u003cT\u003e) (other)).setShadow(type.isShadow());\n        super.scanCtType(type);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT, A extends T\u003e void visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment\u003cT, A\u003e e) {\n        ((spoon.reflect.code.CtOperatorAssignment\u003cT, A\u003e) (other)).setKind(e.getKind());\n        super.visitCtOperatorAssignment(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cA extends java.lang.annotation.Annotation\u003e void visitCtAnnotation(spoon.reflect.declaration.CtAnnotation\u003cA\u003e e) {\n        ((spoon.reflect.declaration.CtAnnotation\u003cA\u003e) (other)).setShadow(e.isShadow());\n        super.visitCtAnnotation(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable e) {\n        ((spoon.reflect.declaration.CtAnonymousExecutable) (other)).setModifiers(e.getModifiers());\n        super.visitCtAnonymousExecutable(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtBinaryOperator(spoon.reflect.code.CtBinaryOperator\u003cT\u003e e) {\n        ((spoon.reflect.code.CtBinaryOperator\u003cT\u003e) (other)).setKind(e.getKind());\n        super.visitCtBinaryOperator(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtBreak(spoon.reflect.code.CtBreak e) {\n        ((spoon.reflect.code.CtBreak) (other)).setTargetLabel(e.getTargetLabel());\n        super.visitCtBreak(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtConstructor(spoon.reflect.declaration.CtConstructor\u003cT\u003e e) {\n        ((spoon.reflect.declaration.CtConstructor\u003cT\u003e) (other)).setModifiers(e.getModifiers());\n        ((spoon.reflect.declaration.CtConstructor\u003cT\u003e) (other)).setShadow(e.isShadow());\n        super.visitCtConstructor(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtContinue(spoon.reflect.code.CtContinue e) {\n        ((spoon.reflect.code.CtContinue) (other)).setTargetLabel(e.getTargetLabel());\n        super.visitCtContinue(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtExecutableReference(spoon.reflect.reference.CtExecutableReference\u003cT\u003e e) {\n        ((spoon.reflect.reference.CtExecutableReference\u003cT\u003e) (other)).setStatic(e.isStatic());\n        super.visitCtExecutableReference(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtField(spoon.reflect.declaration.CtField\u003cT\u003e e) {\n        ((spoon.reflect.declaration.CtField\u003cT\u003e) (other)).setModifiers(e.getModifiers());\n        ((spoon.reflect.declaration.CtField\u003cT\u003e) (other)).setShadow(e.isShadow());\n        super.visitCtField(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtFieldReference(spoon.reflect.reference.CtFieldReference\u003cT\u003e e) {\n        ((spoon.reflect.reference.CtFieldReference\u003cT\u003e) (other)).setFinal(e.isFinal());\n        ((spoon.reflect.reference.CtFieldReference\u003cT\u003e) (other)).setStatic(e.isStatic());\n        super.visitCtFieldReference(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtInvocation(spoon.reflect.code.CtInvocation\u003cT\u003e e) {\n        ((spoon.reflect.code.CtInvocation\u003cT\u003e) (other)).setLabel(e.getLabel());\n        super.visitCtInvocation(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtLiteral(spoon.reflect.code.CtLiteral\u003cT\u003e e) {\n        ((spoon.reflect.code.CtLiteral\u003cT\u003e) (other)).setValue(e.getValue());\n        super.visitCtLiteral(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtLocalVariable(spoon.reflect.code.CtLocalVariable\u003cT\u003e e) {\n        ((spoon.reflect.code.CtLocalVariable\u003cT\u003e) (other)).setSimpleName(e.getSimpleName());\n        ((spoon.reflect.code.CtLocalVariable\u003cT\u003e) (other)).setModifiers(e.getModifiers());\n        ((spoon.reflect.code.CtLocalVariable\u003cT\u003e) (other)).setInferred(e.isInferred());\n        super.visitCtLocalVariable(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtCatchVariable(spoon.reflect.code.CtCatchVariable\u003cT\u003e e) {\n        ((spoon.reflect.code.CtCatchVariable\u003cT\u003e) (other)).setSimpleName(e.getSimpleName());\n        ((spoon.reflect.code.CtCatchVariable\u003cT\u003e) (other)).setModifiers(e.getModifiers());\n        super.visitCtCatchVariable(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtMethod(spoon.reflect.declaration.CtMethod\u003cT\u003e e) {\n        ((spoon.reflect.declaration.CtMethod\u003cT\u003e) (other)).setDefaultMethod(e.isDefaultMethod());\n        ((spoon.reflect.declaration.CtMethod\u003cT\u003e) (other)).setModifiers(e.getModifiers());\n        ((spoon.reflect.declaration.CtMethod\u003cT\u003e) (other)).setShadow(e.isShadow());\n        super.visitCtMethod(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtConstructorCall(spoon.reflect.code.CtConstructorCall\u003cT\u003e e) {\n        ((spoon.reflect.code.CtConstructorCall\u003cT\u003e) (other)).setLabel(e.getLabel());\n        super.visitCtConstructorCall(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtLambda(spoon.reflect.code.CtLambda\u003cT\u003e e) {\n        ((spoon.reflect.code.CtLambda\u003cT\u003e) (other)).setSimpleName(e.getSimpleName());\n        super.visitCtLambda(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override]\n    public \u003cT, A ex...\u003e but was:\u003c...isitorGenerator\n    [public void scanCtElement(spoon.reflect.declaration.CtElement e) {\n        ((spoon.reflect.declaration.CtElement) (other)).setPosition(e.getPosition());\n        ((spoon.reflect.declaration.CtElement) (other)).setAllMetadata(e.getAllMetadata());\n        ((spoon.reflect.declaration.CtElement) (other)).setImplicit(e.isImplicit());\n        super.scanCtElement(e);\n    }\n\n    /**\n     * Scans an abstract named element.\n     */\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public void scanCtNamedElement(spoon.reflect.declaration.CtNamedElement e) {\n        ((spoon.reflect.declaration.CtNamedElement) (other)).setSimpleName(e.getSimpleName());\n        super.scanCtNamedElement(e);\n    }\n\n    /**\n     * Scans an abstract reference.\n     */\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public void scanCtReference(spoon.reflect.reference.CtReference reference) {\n        ((spoon.reflect.reference.CtReference) (other)).setSimpleName(reference.getSimpleName());\n        super.scanCtReference(reference);\n    }\n\n    /**\n     * Scans an abstract statement.\n     */\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public void scanCtStatement(spoon.reflect.code.CtStatement s) {\n        ((spoon.reflect.code.CtStatement) (other)).setLabel(s.getLabel());\n        super.scanCtStatement(s);\n    }\n\n    /**\n     * Scans an abstract type.\n     */\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void scanCtType(spoon.reflect.declaration.CtType\u003cT\u003e type) {\n        ((spoon.reflect.declaration.CtType\u003cT\u003e) (other)).setModifiers(type.getModifiers());\n        ((spoon.reflect.declaration.CtType\u003cT\u003e) (other)).setShadow(type.isShadow());\n        super.scanCtType(type);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT, A extends T\u003e void visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment\u003cT, A\u003e e) {\n        ((spoon.reflect.code.CtOperatorAssignment\u003cT, A\u003e) (other)).setKind(e.getKind());\n        super.visitCtOperatorAssignment(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cA extends java.lang.annotation.Annotation\u003e void visitCtAnnotation(spoon.reflect.declaration.CtAnnotation\u003cA\u003e e) {\n        ((spoon.reflect.declaration.CtAnnotation\u003cA\u003e) (other)).setShadow(e.isShadow());\n        super.visitCtAnnotation(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable e) {\n        ((spoon.reflect.declaration.CtAnonymousExecutable) (other)).setModifiers(e.getModifiers());\n        super.visitCtAnonymousExecutable(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtBinaryOperator(spoon.reflect.code.CtBinaryOperator\u003cT\u003e e) {\n        ((spoon.reflect.code.CtBinaryOperator\u003cT\u003e) (other)).setKind(e.getKind());\n        super.visitCtBinaryOperator(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtBreak(spoon.reflect.code.CtBreak e) {\n        ((spoon.reflect.code.CtBreak) (other)).setTargetLabel(e.getTargetLabel());\n        super.visitCtBreak(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtConstructor(spoon.reflect.declaration.CtConstructor\u003cT\u003e e) {\n        ((spoon.reflect.declaration.CtConstructor\u003cT\u003e) (other)).setModifiers(e.getModifiers());\n        ((spoon.reflect.declaration.CtConstructor\u003cT\u003e) (other)).setShadow(e.isShadow());\n        super.visitCtConstructor(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtContinue(spoon.reflect.code.CtContinue e) {\n        ((spoon.reflect.code.CtContinue) (other)).setTargetLabel(e.getTargetLabel());\n        super.visitCtContinue(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtExecutableReference(spoon.reflect.reference.CtExecutableReference\u003cT\u003e e) {\n        ((spoon.reflect.reference.CtExecutableReference\u003cT\u003e) (other)).setStatic(e.isStatic());\n        super.visitCtExecutableReference(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtField(spoon.reflect.declaration.CtField\u003cT\u003e e) {\n        ((spoon.reflect.declaration.CtField\u003cT\u003e) (other)).setModifiers(e.getModifiers());\n        ((spoon.reflect.declaration.CtField\u003cT\u003e) (other)).setShadow(e.isShadow());\n        super.visitCtField(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtFieldReference(spoon.reflect.reference.CtFieldReference\u003cT\u003e e) {\n        ((spoon.reflect.reference.CtFieldReference\u003cT\u003e) (other)).setFinal(e.isFinal());\n        ((spoon.reflect.reference.CtFieldReference\u003cT\u003e) (other)).setStatic(e.isStatic());\n        super.visitCtFieldReference(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtInvocation(spoon.reflect.code.CtInvocation\u003cT\u003e e) {\n        ((spoon.reflect.code.CtInvocation\u003cT\u003e) (other)).setLabel(e.getLabel());\n        super.visitCtInvocation(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtLiteral(spoon.reflect.code.CtLiteral\u003cT\u003e e) {\n        ((spoon.reflect.code.CtLiteral\u003cT\u003e) (other)).setValue(e.getValue());\n        super.visitCtLiteral(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtLocalVariable(spoon.reflect.code.CtLocalVariable\u003cT\u003e e) {\n        ((spoon.reflect.code.CtLocalVariable\u003cT\u003e) (other)).setSimpleName(e.getSimpleName());\n        ((spoon.reflect.code.CtLocalVariable\u003cT\u003e) (other)).setModifiers(e.getModifiers());\n        ((spoon.reflect.code.CtLocalVariable\u003cT\u003e) (other)).setInferred(e.isInferred());\n        super.visitCtLocalVariable(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtCatchVariable(spoon.reflect.code.CtCatchVariable\u003cT\u003e e) {\n        ((spoon.reflect.code.CtCatchVariable\u003cT\u003e) (other)).setSimpleName(e.getSimpleName());\n        ((spoon.reflect.code.CtCatchVariable\u003cT\u003e) (other)).setModifiers(e.getModifiers());\n        super.visitCtCatchVariable(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtMethod(spoon.reflect.declaration.CtMethod\u003cT\u003e e) {\n        ((spoon.reflect.declaration.CtMethod\u003cT\u003e) (other)).setDefaultMethod(e.isDefaultMethod());\n        ((spoon.reflect.declaration.CtMethod\u003cT\u003e) (other)).setModifiers(e.getModifiers());\n        ((spoon.reflect.declaration.CtMethod\u003cT\u003e) (other)).setShadow(e.isShadow());\n        super.visitCtMethod(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtConstructorCall(spoon.reflect.code.CtConstructorCall\u003cT\u003e e) {\n        ((spoon.reflect.code.CtConstructorCall\u003cT\u003e) (other)).setLabel(e.getLabel());\n        super.visitCtConstructorCall(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtLambda(spoon.reflect.code.CtLambda\u003cT\u003e e) {\n        ((spoon.reflect.code.CtLambda\u003cT\u003e) (other)).setSimpleName(e.getSimpleName());\n        super.visitCtLambda(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator]\n    public \u003cT, A ex...\u003e",
        "isError": false
      }
    ]
  },
  "commits": {
    "buggyBuild": {
      "repoName": "INRIA/spoon",
      "branchName": "master",
      "sha": "7ad61cf3065ea2136ea55d056dcf161cc507fdc6",
      "url": "http://github.com/INRIA/spoon/commit/7ad61cf3065ea2136ea55d056dcf161cc507fdc6",
      "date": "Aug 1, 2018 7:34:32 PM"
    },
    "buggyBuildForkRepo": {
      "repoName": "zielint0/spoon",
      "branchName": "refactor-add-more-override-annotations",
      "sha": "9c99661acfce29e81b03b31bfbeda2633bcbc8c8",
      "url": "https://github.com/zielint0/spoon/commit/9c99661acfce29e81b03b31bfbeda2633bcbc8c8",
      "date": "Aug 1, 2018 7:34:32 PM"
    },
    "buggyBuildBaseRepo": {
      "repoName": "INRIA/spoon",
      "branchName": "master",
      "sha": "59ea00ebbc064205c2fc05caa438e437527cc402",
      "url": "https://github.com/INRIA/spoon/commit/59ea00ebbc064205c2fc05caa438e437527cc402",
      "date": "Aug 1, 2018 9:42:06 AM"
    }
  },
  "type": "only_fail"
}