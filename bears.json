{
  "projectMetrics": {
    "numberModules": 1,
    "numberSourceFiles": 619,
    "numberTestFiles": 692,
    "numberLibrariesFailingModule": 33
  },
  "repository": {
    "name": "INRIA/spoon",
    "githubId": 14176513,
    "url": "https://github.com/INRIA/spoon",
    "isFork": false,
    "original": {
      "name": "",
      "githubId": 0,
      "url": ""
    },
    "isPullRequest": true,
    "pullRequestId": 2406
  },
  "builds": {
    "buggyBuild": {
      "id": 419269227,
      "url": "http://travis-ci.org/INRIA/spoon/builds/419269227",
      "date": "Aug 22, 2018 7:01:15 PM"
    }
  },
  "commits": {
    "buggyBuild": {
      "repoName": "INRIA/spoon",
      "branchName": "master",
      "sha": "891ec3f4104dde60043215bd53916af280f9c5d4",
      "url": "http://github.com/INRIA/spoon/commit/891ec3f4104dde60043215bd53916af280f9c5d4",
      "date": "Aug 22, 2018 6:42:14 PM"
    },
    "buggyBuildForkRepo": {
      "repoName": "pvojtechovsky/spoon",
      "branchName": "refTypeParamRef",
      "sha": "9e5b4ea6704302eb6bf8dcbcc4a18ae252369e75",
      "url": "https://github.com/pvojtechovsky/spoon/commit/9e5b4ea6704302eb6bf8dcbcc4a18ae252369e75",
      "date": "Aug 22, 2018 6:42:14 PM"
    },
    "buggyBuildBaseRepo": {
      "repoName": "INRIA/spoon",
      "branchName": "master",
      "sha": "58d091f01c902fdf28988765e822c220267a49c1",
      "url": "https://github.com/INRIA/spoon/commit/58d091f01c902fdf28988765e822c220267a49c1",
      "date": "Aug 20, 2018 3:09:56 PM"
    }
  },
  "tests": {
    "failingModule": "/root/workspace/INRIA/spoon/419269227",
    "overallMetrics": {
      "numberRunning": 1536,
      "numberPassing": 1522,
      "numberFailing": 11,
      "numberErroring": 3,
      "numberSkipping": 4,
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false,
          "occurrences": 9
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true,
          "occurrences": 3
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "isError": false,
          "occurrences": 2
        }
      ]
    },
    "failingClasses": [
      {
        "testClass": "spoon.test.method.MethodTest",
        "numberRunning": 5,
        "numberPassing": 4,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.methodreference.MethodReferenceTest",
        "numberRunning": 13,
        "numberPassing": 11,
        "numberFailing": 2,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.reflect.visitor.CtScannerTest",
        "numberRunning": 3,
        "numberPassing": 2,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.reference.TypeReferenceTest",
        "numberRunning": 28,
        "numberPassing": 27,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.replace.ReplaceParametrizedTest",
        "numberRunning": 80,
        "numberPassing": 79,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.api.APITest",
        "numberRunning": 23,
        "numberPassing": 22,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.reflect.ast.AstCheckerTest",
        "numberRunning": 2,
        "numberPassing": 1,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.reference.ExecutableReferenceGenericTest",
        "numberRunning": 12,
        "numberPassing": 9,
        "numberFailing": 3,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.intercession.IntercessionTest",
        "numberRunning": 7,
        "numberPassing": 6,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 1
      },
      {
        "testClass": "spoon.test.generics.GenericsTest",
        "numberRunning": 45,
        "numberPassing": 43,
        "numberFailing": 2,
        "numberErroring": 0,
        "numberSkipping": 0
      }
    ],
    "failureDetails": [
      {
        "testClass": "spoon.test.reference.ExecutableReferenceGenericTest",
        "testMethod": "testMultiReferenceBetweenMethodsWithGenericInSameClass",
        "failureName": "org.junit.ComparisonFailure",
        "detail": "expected:\u003cmethod1(T[ extends java.lang.String])\u003e but was:\u003cmethod1(T[])\u003e",
        "isError": false
      },
      {
        "testClass": "spoon.test.intercession.IntercessionTest",
        "testMethod": "testSettersAreAllGood",
        "failureName": "java.lang.AssertionError",
        "detail": "Your setter setUpper in CtWildcardReference has a type reference who don\u0027t extends CtWildcardReference",
        "isError": false
      },
      {
        "testClass": "spoon.test.methodreference.MethodReferenceTest",
        "testMethod": "testCompileMethodReferenceGeneratedBySpoon",
        "failureName": "java.lang.AssertionError",
        "detail": "Can\u0027t compile testclasses because The method method(String, U) in the type Cloud\u003cString\u003e is not applicable for the arguments (String, InputStream) at /root/workspace/INRIA/spoon/419269227/target/spooned/spoon/test/methodreference/testclasses/Sun.java:7",
        "isError": false
      },
      {
        "testClass": "spoon.test.method.MethodTest",
        "testMethod": "testSearchMethodWithGeneric",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "spoon.reflect.ast.AstCheckerTest",
        "testMethod": "testPushToStackChanges",
        "failureName": "java.lang.AssertionError",
        "detail": "setUpper(boolean) on spoon.support.reflect.reference.CtTypeParameterReferenceImpl\nsetBoundingType(spoon.reflect.reference.CtTypeReference) on spoon.support.reflect.reference.CtTypeParameterReferenceImpl\nsetBounds(java.util.List) on spoon.support.reflect.reference.CtWildcardReferenceImpl\n",
        "isError": false
      },
      {
        "testClass": "spoon.test.reference.ExecutableReferenceGenericTest",
        "testMethod": "testOneReferenceWithGenericMethodOutOfTheClass",
        "failureName": "org.junit.ComparisonFailure",
        "detail": "expected:\u003cmethod1(T[ extends java.lang.String])\u003e but was:\u003cmethod1(T[])\u003e",
        "isError": false
      },
      {
        "testClass": "spoon.test.generics.GenericsTest",
        "testMethod": "testModelBuildingSimilarSignatureMethods",
        "failureName": "java.lang.AssertionError",
        "detail": "expected:\u003c2\u003e but was:\u003c1\u003e",
        "isError": false
      },
      {
        "testClass": "spoon.test.reference.ExecutableReferenceGenericTest",
        "testMethod": "testExecutableReferences",
        "failureName": "java.lang.AssertionError",
        "detail": "expected:\u003c10\u003e but was:\u003c9\u003e",
        "isError": false
      },
      {
        "testClass": "spoon.reflect.visitor.CtScannerTest",
        "testMethod": "testScannerCallsAllProperties",
        "failureName": "java.lang.AssertionError",
        "detail": "no getBoundingType() in public void visitCtTypeParameterReference(final spoon.reflect.reference.CtTypeParameterReference ref) {\n    enter(ref);\n    scan(spoon.reflect.path.CtRole.PACKAGE_REF, ref.getPackage());\n    scan(spoon.reflect.path.CtRole.DECLARING_TYPE, ref.getDeclaringType());\n    scan(spoon.reflect.path.CtRole.ANNOTATION, ref.getAnnotations());\n    exit(ref);\n}",
        "isError": false
      },
      {
        "testClass": "spoon.test.api.APITest",
        "testMethod": "testSetterInNodes",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "spoon.test.generics.GenericsTest",
        "testMethod": "testWildcard",
        "failureName": "java.lang.AssertionError",
        "detail": "expected:\u003c4\u003e but was:\u003c3\u003e",
        "isError": false
      },
      {
        "testClass": "spoon.test.methodreference.MethodReferenceTest",
        "testMethod": "testGetGenericExecutableReference",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: is \u003c3\u003e\n     but: was \u003c1\u003e",
        "isError": false
      },
      {
        "testClass": "spoon.test.reference.TypeReferenceTest",
        "testMethod": "testClearBoundsForTypeParameterReference",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "spoon.test.replace.ReplaceParametrizedTest",
        "testMethod": "testContract[CtTypeParameterReference]",
        "failureName": "java.lang.AssertionError",
        "detail": "Settable field CtTypeParameterReference#boundingType\u003cspoon.reflect.reference.CtTypeReference\u003c? extends java.lang.Object\u003e\u003e should set value.\n",
        "isError": false
      }
    ]
  },
  "reproductionBuggyBuild": {
    "reproductionDateBeginning": "Aug 22, 2018 7:36:24 PM",
    "reproductionDateEnd": "Aug 22, 2018 8:03:33 PM",
    "totalDuration": 1624,
    "processDurations": {
      "cloning": {
        "nbSteps": 1,
        "totalDuration": 12,
        "stepNames": [
          "CloneRepository"
        ],
        "stepDurations": [
          12
        ]
      },
      "building": {
        "nbSteps": 2,
        "totalDuration": 165,
        "stepNames": [
          "CheckoutBuggyBuild",
          "BuildProject"
        ],
        "stepDurations": [
          4,
          161
        ]
      },
      "testing": {
        "nbSteps": 1,
        "totalDuration": 1040,
        "stepNames": [
          "TestProject"
        ],
        "stepDurations": [
          1040
        ]
      }
    },
    "projectRootPomPath": "./workspace/INRIA/spoon/419269227/pom.xml"
  },
  "patchDiff": {
    "files": {
      "numberAdded": 0,
      "numberChanged": 0,
      "numberDeleted": 0
    },
    "lines": {
      "numberAdded": 0,
      "numberDeleted": 0
    }
  },
  "type": "only_fail"
}