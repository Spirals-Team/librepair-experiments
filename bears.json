{
  "repository": {
    "name": "INRIA/spoon",
    "githubId": 14176513,
    "url": "https://github.com/INRIA/spoon",
    "isFork": false,
    "original": {
      "name": "",
      "githubId": 0,
      "url": ""
    },
    "isPullRequest": true,
    "pullRequestId": 2239
  },
  "builds": {
    "buggyBuild": {
      "id": 405276650,
      "url": "http://travis-ci.org/INRIA/spoon/builds/405276650",
      "date": "Jul 18, 2018 11:49:40 AM"
    }
  },
  "reproductionBuggyBuild": {
    "reproductionDateBeginning": "Jul 18, 2018 11:50:17 AM",
    "reproductionDateEnd": "Jul 18, 2018 12:00:25 PM",
    "totalDuration": 603,
    "processDurations": {
      "cloning": {
        "nbSteps": 1,
        "totalDuration": 19,
        "stepNames": [
          "CloneRepository"
        ],
        "stepDurations": [
          19
        ]
      },
      "building": {
        "nbSteps": 2,
        "totalDuration": 125,
        "stepNames": [
          "CheckoutBuggyBuild",
          "BuildProject"
        ],
        "stepDurations": [
          9,
          116
        ]
      },
      "testing": {
        "nbSteps": 1,
        "totalDuration": 258,
        "stepNames": [
          "TestProject"
        ],
        "stepDurations": [
          258
        ]
      }
    },
    "projectRootPomPath": "./workspace/INRIA/spoon/405276650/pom.xml"
  },
  "patchDiff": {
    "files": {
      "numberAdded": 0,
      "numberChanged": 0,
      "numberDeleted": 0
    },
    "lines": {
      "numberAdded": 0,
      "numberDeleted": 0
    }
  },
  "commits": {
    "buggyBuild": {
      "repoName": "INRIA/spoon",
      "branchName": "master",
      "sha": "237e8348347f26346ac99d2ae21437d85eca15c5",
      "url": "http://github.com/INRIA/spoon/commit/237e8348347f26346ac99d2ae21437d85eca15c5",
      "date": "Jul 18, 2018 11:40:47 AM"
    },
    "buggyBuildForkRepo": {
      "repoName": "surli/spoon",
      "branchName": "check-identifiers",
      "sha": "2fe896b4f7df5cbdc0b8ed34e5ed3b2bafee4f5e",
      "url": "https://github.com/surli/spoon/commit/2fe896b4f7df5cbdc0b8ed34e5ed3b2bafee4f5e",
      "date": "Jul 18, 2018 11:40:47 AM"
    },
    "buggyBuildBaseRepo": {
      "repoName": "INRIA/spoon",
      "branchName": "master",
      "sha": "3608bd47c6758334464ff905d515137343e2c77f",
      "url": "https://github.com/INRIA/spoon/commit/3608bd47c6758334464ff905d515137343e2c77f",
      "date": "Jul 17, 2018 10:52:46 AM"
    }
  },
  "projectMetrics": {
    "numberModules": 1,
    "numberSourceFiles": 616,
    "numberTestFiles": 695,
    "numberLibrariesFailingModule": 30
  },
  "tests": {
    "failingModule": "/root/workspace/INRIA/spoon/405276650",
    "overallMetrics": {
      "numberRunning": 1403,
      "numberPassing": 1060,
      "numberFailing": 20,
      "numberErroring": 323,
      "numberSkipping": 4,
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "isError": true,
          "occurrences": 1
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "isError": true,
          "occurrences": 3
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true,
          "occurrences": 2
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "isError": false,
          "occurrences": 7
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false,
          "occurrences": 13
        },
        {
          "failureName": "java.lang.Exception",
          "isError": true,
          "occurrences": 3
        },
        {
          "failureName": "spoon.SpoonException",
          "isError": true,
          "occurrences": 314
        }
      ]
    },
    "failingClasses": [
      {
        "testClass": "spoon.test.executable.ExecutableRefTest",
        "numberRunning": 5,
        "numberPassing": 4,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.prettyprinter.LinesTest",
        "numberRunning": 3,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 3,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.processing.ProcessingTest",
        "numberRunning": 2,
        "numberPassing": 1,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.parameters.ParameterTest",
        "numberRunning": 3,
        "numberPassing": 1,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.refactoring.MethodsRefactoringTest",
        "numberRunning": 5,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 5,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.fieldaccesses.FieldAccessTest",
        "numberRunning": 16,
        "numberPassing": 5,
        "numberFailing": 1,
        "numberErroring": 10,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.template.TemplateClassAccessTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.ctClass.CtClassTest",
        "numberRunning": 8,
        "numberPassing": 3,
        "numberFailing": 1,
        "numberErroring": 4,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.generics.GenericsTest",
        "numberRunning": 45,
        "numberPassing": 38,
        "numberFailing": 4,
        "numberErroring": 3,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.template.TemplateArrayAccessTest",
        "numberRunning": 2,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.reflect.ast.CloneTest",
        "numberRunning": 5,
        "numberPassing": 1,
        "numberFailing": 0,
        "numberErroring": 4,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.model.TypeTest",
        "numberRunning": 8,
        "numberPassing": 6,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.comment.CommentTest",
        "numberRunning": 19,
        "numberPassing": 6,
        "numberFailing": 0,
        "numberErroring": 13,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.filters.FilterTest",
        "numberRunning": 43,
        "numberPassing": 40,
        "numberFailing": 3,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.eval.EvalTest",
        "numberRunning": 10,
        "numberPassing": 3,
        "numberFailing": 0,
        "numberErroring": 7,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.compilationunit.TestCompilationUnit",
        "numberRunning": 7,
        "numberPassing": 5,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.support.ResourceTest",
        "numberRunning": 4,
        "numberPassing": 3,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.template.TemplateTest",
        "numberRunning": 24,
        "numberPassing": 15,
        "numberFailing": 0,
        "numberErroring": 9,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.refactoring.CtRenameLocalVariableRefactoringTest",
        "numberRunning": 4,
        "numberPassing": 1,
        "numberFailing": 0,
        "numberErroring": 3,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.constructorcallnewclass.ConstructorCallTest",
        "numberRunning": 6,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 6,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.loop.LoopTest",
        "numberRunning": 2,
        "numberPassing": 1,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.position.PositionTest",
        "numberRunning": 25,
        "numberPassing": 20,
        "numberFailing": 0,
        "numberErroring": 5,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.reflect.declaration.UnknownDeclarationTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.prettyprinter.DefaultPrettyPrinterTest",
        "numberRunning": 12,
        "numberPassing": 7,
        "numberFailing": 0,
        "numberErroring": 5,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.type.TypeTest",
        "numberRunning": 13,
        "numberPassing": 6,
        "numberFailing": 0,
        "numberErroring": 7,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.replace.ReplaceParametrizedTest",
        "numberRunning": 80,
        "numberPassing": 77,
        "numberFailing": 0,
        "numberErroring": 3,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.signature.SignatureTest",
        "numberRunning": 8,
        "numberPassing": 6,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest",
        "numberRunning": 16,
        "numberPassing": 14,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.jar.JarTest",
        "numberRunning": 3,
        "numberPassing": 2,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.constructorcallnewclass.NewClassTest",
        "numberRunning": 7,
        "numberPassing": 5,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.reflect.visitor.CtVisitorTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.enums.EnumsTest",
        "numberRunning": 7,
        "numberPassing": 5,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.lambda.LambdaTest",
        "numberRunning": 23,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 23,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.MavenLauncherTest",
        "numberRunning": 6,
        "numberPassing": 4,
        "numberFailing": 2,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.refactoring.RefactoringTest",
        "numberRunning": 4,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 4,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.module.TestModule",
        "numberRunning": 6,
        "numberPassing": 2,
        "numberFailing": 0,
        "numberErroring": 4,
        "numberSkipping": 2
      },
      {
        "testClass": "spoon.testing.CtElementAssertTest",
        "numberRunning": 5,
        "numberPassing": 1,
        "numberFailing": 0,
        "numberErroring": 4,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.methodreference.MethodReferenceTest",
        "numberRunning": 13,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 13,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.reference.ExecutableReferenceTest",
        "numberRunning": 8,
        "numberPassing": 4,
        "numberFailing": 0,
        "numberErroring": 4,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.targeted.TargetedExpressionTest",
        "numberRunning": 17,
        "numberPassing": 10,
        "numberFailing": 0,
        "numberErroring": 7,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.api.MetamodelTest",
        "numberRunning": 14,
        "numberPassing": 12,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.trycatch.TryCatchTest",
        "numberRunning": 12,
        "numberPassing": 11,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.invocations.InvocationTest",
        "numberRunning": 3,
        "numberPassing": 2,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.strings.StringTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.intercession.IntercessionTest",
        "numberRunning": 7,
        "numberPassing": 6,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 1
      },
      {
        "testClass": "spoon.test.factory.FactoryTest",
        "numberRunning": 5,
        "numberPassing": 3,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.support.visitor.java.JavaReflectionTreeBuilderTest",
        "numberRunning": 18,
        "numberPassing": 17,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.imports.ImportAndExtendWithPackageNameTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.compilation.CompilationTest",
        "numberRunning": 13,
        "numberPassing": 10,
        "numberFailing": 0,
        "numberErroring": 3,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.reference.TypeReferenceTest",
        "numberRunning": 28,
        "numberPassing": 20,
        "numberFailing": 2,
        "numberErroring": 6,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.jdtimportbuilder.ImportBuilderTest",
        "numberRunning": 8,
        "numberPassing": 5,
        "numberFailing": 0,
        "numberErroring": 3,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.variable.AccessFullyQualifiedFieldTest",
        "numberRunning": 9,
        "numberPassing": 8,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.exceptions.ExceptionTest",
        "numberRunning": 6,
        "numberPassing": 5,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.varargs.VarArgsTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.secondaryclasses.ClassesTest",
        "numberRunning": 6,
        "numberPassing": 4,
        "numberFailing": 2,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.parent.ContractOnSettersParametrizedTest",
        "numberRunning": 67,
        "numberPassing": 65,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.arrays.ArraysTest",
        "numberRunning": 8,
        "numberPassing": 4,
        "numberFailing": 0,
        "numberErroring": 4,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.reference.ElasticsearchStackoverflowTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.compilationunit.GetBinaryFilesTest",
        "numberRunning": 5,
        "numberPassing": 4,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.reflect.ast.AstCheckerTest",
        "numberRunning": 2,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.labels.TestLabels",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.variable.AccessTest",
        "numberRunning": 8,
        "numberPassing": 6,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.reflect.visitor.CtInheritanceScannerMethodsTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.testing.CtPackageAssertTest",
        "numberRunning": 4,
        "numberPassing": 2,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.annotation.AnnotationValuesTest",
        "numberRunning": 6,
        "numberPassing": 2,
        "numberFailing": 0,
        "numberErroring": 4,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.main.MainTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.visibility.VisibilityTest",
        "numberRunning": 5,
        "numberPassing": 1,
        "numberFailing": 1,
        "numberErroring": 3,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.literal.LiteralTest",
        "numberRunning": 5,
        "numberPassing": 3,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.prettyprinter.QualifiedThisRefTest",
        "numberRunning": 3,
        "numberPassing": 2,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "numberRunning": 52,
        "numberPassing": 21,
        "numberFailing": 0,
        "numberErroring": 31,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.processing.ProcessingTest",
        "numberRunning": 10,
        "numberPassing": 8,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.imports.ImportTest",
        "numberRunning": 44,
        "numberPassing": 32,
        "numberFailing": 0,
        "numberErroring": 12,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
        "numberRunning": 8,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 8,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.modifiers.TestModifiers",
        "numberRunning": 6,
        "numberPassing": 3,
        "numberFailing": 0,
        "numberErroring": 3,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.template.PatternTest",
        "numberRunning": 31,
        "numberPassing": 12,
        "numberFailing": 2,
        "numberErroring": 17,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.staticFieldAccess.StaticAccessTest",
        "numberRunning": 2,
        "numberPassing": 1,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.prettyprinter.PrinterTest",
        "numberRunning": 9,
        "numberPassing": 3,
        "numberFailing": 0,
        "numberErroring": 6,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.imports.ImportScannerTest",
        "numberRunning": 6,
        "numberPassing": 4,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.api.APITest",
        "numberRunning": 24,
        "numberPassing": 20,
        "numberFailing": 0,
        "numberErroring": 4,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.reference.CloneReferenceTest",
        "numberRunning": 2,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.processing.CtGenerationTest",
        "numberRunning": 4,
        "numberPassing": 1,
        "numberFailing": 0,
        "numberErroring": 3,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.reference.VariableAccessTest",
        "numberRunning": 11,
        "numberPassing": 7,
        "numberFailing": 0,
        "numberErroring": 4,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.testing.AbstractAssertTest",
        "numberRunning": 4,
        "numberPassing": 3,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.pkg.PackageTest",
        "numberRunning": 12,
        "numberPassing": 8,
        "numberFailing": 0,
        "numberErroring": 4,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.reflect.visitor.CtScannerTest",
        "numberRunning": 3,
        "numberPassing": 1,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      }
    ],
    "failureDetails": [
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "annotationOverrideFQNIsOK",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Cache.Entry\u003cK",
        "isError": true
      },
      {
        "testClass": "spoon.test.modifiers.TestModifiers",
        "testMethod": "testMethodWithVarargsDoesNotBecomeTransient",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Object[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.jar.JarTest",
        "testMethod": "testJar",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.TemplateTest",
        "testMethod": "testTemplateInheritance",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.prettyprinter.LinesTest",
        "testMethod": "testIdenticalPrettyPrinter",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.fieldaccesses.FieldAccessTest",
        "testMethod": "testFieldAccessAutoExplicit",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.fieldaccesses.FieldAccessTest",
        "testMethod": "testIncrementationOnAVarIsAUnaryOperator",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.parent.ContractOnSettersParametrizedTest",
        "testMethod": "testContract[public interface CtModule extends spoon.reflect.declaration.CtNamedElement {\n    @spoon.support.DerivedProperty\n    spoon.reflect.reference.CtModuleReference getReference();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    spoon.reflect.declaration.CtPackage getRootPackage();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setRootPackage(spoon.reflect.declaration.CtPackage arg0);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    java.util.List\u003cspoon.reflect.declaration.CtModuleDirective\u003e getModuleDirectives();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.REQUIRED_MODULE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtModuleRequirement\u003e getRequiredModules();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.EXPORTED_PACKAGE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtPackageExport\u003e getExportedPackages();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.OPENED_PACKAGE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtPackageExport\u003e getOpenedPackages();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.SERVICE_TYPE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtUsedService\u003e getUsedServices();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.PROVIDED_SERVICE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtProvidedService\u003e getProvidedServices();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.MODIFIER)\n    boolean isOpenModule();\n\n    @spoon.support.DerivedProperty\n    boolean isUnnamedModule();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODIFIER)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setIsOpenModule(boolean arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setModuleDirectives(java.util.List\u003cspoon.reflect.declaration.CtModuleDirective\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addModuleDirective(spoon.reflect.declaration.CtModuleDirective arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addModuleDirectiveAt(int arg0, spoon.reflect.declaration.CtModuleDirective arg1);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeModuleDirective(spoon.reflect.declaration.CtModuleDirective arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SERVICE_TYPE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setUsedServices(java.util.List\u003cspoon.reflect.declaration.CtUsedService\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SERVICE_TYPE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addUsedService(spoon.reflect.declaration.CtUsedService arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SERVICE_TYPE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeUsedService(spoon.reflect.declaration.CtUsedService arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPORTED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setExportedPackages(java.util.List\u003cspoon.reflect.declaration.CtPackageExport\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPORTED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addExportedPackage(spoon.reflect.declaration.CtPackageExport arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPORTED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeExportedPackage(spoon.reflect.declaration.CtPackageExport arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.OPENED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setOpenedPackages(java.util.List\u003cspoon.reflect.declaration.CtPackageExport\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.OPENED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addOpenedPackage(spoon.reflect.declaration.CtPackageExport arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.OPENED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeOpenedPackage(spoon.reflect.declaration.CtPackageExport arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.REQUIRED_MODULE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setRequiredModules(java.util.List\u003cspoon.reflect.declaration.CtModuleRequirement\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.REQUIRED_MODULE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addRequiredModule(spoon.reflect.declaration.CtModuleRequirement arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.REQUIRED_MODULE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeRequiredModule(spoon.reflect.declaration.CtModuleRequirement arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.PROVIDED_SERVICE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setProvidedServices(java.util.List\u003cspoon.reflect.declaration.CtProvidedService\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.PROVIDED_SERVICE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addProvidedService(spoon.reflect.declaration.CtProvidedService arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.PROVIDED_SERVICE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeProvidedService(spoon.reflect.declaration.CtProvidedService arg0);\n\n    spoon.reflect.declaration.CtModule clone();\n\n    static final java.lang.String TOP_LEVEL_MODULE_NAME;\n}]",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: spoon.support.reflect.declaration.CtPackageImpl@1",
        "isError": true
      },
      {
        "testClass": "spoon.test.comment.CommentTest",
        "testMethod": "testJavaDocEmptyCommentAndTag",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.PatternTest",
        "testMethod": "testMatchForeach",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.methodreference.MethodReferenceTest",
        "testMethod": "testReferenceToAConstructor",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Person[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.model.TypeTest",
        "testMethod": "testGetDeclaredOrIheritedFieldByReflection",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: byte[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.TemplateTest",
        "testMethod": "testTemplateWithWrongUsedStringParam",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.api.APITest",
        "testMethod": "testPrintNotAllSourcesInCommandLine",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.eval.EvalTest",
        "testMethod": "testDoNotSimplify",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "testAnnotationAndShadowRuntimeRetentionPolicy",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.compilation.CompilationTest",
        "testMethod": "testNewInstance",
        "failureName": "spoon.SpoonException",
        "detail": "java.lang.ClassNotFoundException: \u003canonymous\u003e1X",
        "isError": true
      },
      {
        "testClass": "spoon.test.module.TestModule",
        "testMethod": "testCompleteModuleInfoContentNoClasspath",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: java.logging",
        "isError": true
      },
      {
        "testClass": "spoon.test.reference.CloneReferenceTest",
        "testMethod": "testGetDeclarationOfFieldAfterClone",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: char[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.eval.EvalTest",
        "testMethod": "testDoNotSimplifyCasts",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
        "testMethod": "testSpecPackage",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.visibility.VisibilityTest",
        "testMethod": "testName",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.prettyprinter.PrinterTest",
        "testMethod": "testJDTBatchCompilerCanBeBuild",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: CompilationUnit[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.lambda.LambdaTest",
        "testMethod": "testInterfaceWithObjectMethods",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Object[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.fieldaccesses.FieldAccessTest",
        "testMethod": "testTypeOfFieldAccess",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.constructorcallnewclass.ConstructorCallTest",
        "testMethod": "testConstructorCallObjectWithParameters",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: AtomicLong[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.position.PositionTest",
        "testMethod": "testPositionAnnotation",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "testAnnotationIntrospection",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.filters.FilterTest",
        "testMethod": "testOverridingMethodFromSubClassOfAbstractClass",
        "failureName": "org.junit.ComparisonFailure",
        "detail": "expected:\u003c...ses.AbstractTostada$[]1\u003e but was:\u003c...ses.AbstractTostada$[\u003canonymous\u003e]1\u003e",
        "isError": false
      },
      {
        "testClass": "spoon.test.methodreference.MethodReferenceTest",
        "testMethod": "testReferenceToAJavaUtilClassConstructor",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Person[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.PatternTest",
        "testMethod": "testGenerateMultiValues",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest",
        "testMethod": "initializationError",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: spoon.support.reflect.declaration.CtPackageImpl@1",
        "isError": true
      },
      {
        "testClass": "spoon.test.refactoring.CtRenameLocalVariableRefactoringTest",
        "testMethod": "testRenameAllLocalVariablesOfRenameTestSubject",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Method[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.support.ResourceTest",
        "testMethod": "testFilteringFolder",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "testOutputGeneratedByTypeAnnotation",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.processing.ProcessingTest",
        "testMethod": "testInterruptAProcessor",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.imports.ImportAndExtendWithPackageNameTest",
        "testMethod": "testBuildModel",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.PatternTest",
        "testMethod": "testMatchGreedyMultiValueUnlimited",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "testUsageOfTypeAnnotationOnLocalVariableInMethod",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.imports.ImportTest",
        "testMethod": "testAccessType",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.targeted.TargetedExpressionTest",
        "testMethod": "testCastWriteWithGenerics",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: T[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.comment.CommentTest",
        "testMethod": "testCommentsInComment1And2",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.targeted.TargetedExpressionTest",
        "testMethod": "testTargetsOfFieldAccessInInnerClass",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "spoon.test.generics.GenericsTest",
        "testMethod": "testBugCommonCollection",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Object[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.pkg.PackageTest",
        "testMethod": "testRenamePackageAndPrettyPrintWithProcessor",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.imports.ImportTest",
        "testMethod": "testStaticMethodWithDifferentClassSameNameJava7NoCollision",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.reference.TypeReferenceTest",
        "testMethod": "testTypeReferenceWithGenerics",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: spoon.test.imports.testclasses.withgenerics",
        "isError": true
      },
      {
        "testClass": "spoon.test.lambda.LambdaTest",
        "testMethod": "testEqualsLambdaParameterRef",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Object[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.signature.SignatureTest",
        "testMethod": "testBugSignature",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: InputType[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.model.TypeTest",
        "testMethod": "testTypeInfoIsInterface",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: byte[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.PatternTest",
        "testMethod": "testGenerateClassWithSelfReferences",
        "failureName": "java.lang.AssertionError",
        "detail": "expected:\u003c[spoon.test.generated.ACloneOfAClassWithMethodsAndRefs, void, boolean, spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$1Bar, java.lang.Object, int, spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$Local]\u003e but was:\u003c[spoon.test.generated.ACloneOfAClassWithMethodsAndRefs, void, boolean, spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$\u003canonymous\u003e1Bar, java.lang.Object, int, spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$Local]\u003e",
        "isError": false
      },
      {
        "testClass": "spoon.test.prettyprinter.PrinterTest",
        "testMethod": "testPrinterTokenListener",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.PatternTest",
        "testMethod": "testMatchIfElse",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.imports.ImportTest",
        "testMethod": "testImportWithGenerics",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: spoon.test.imports.testclasses.withgenerics",
        "isError": true
      },
      {
        "testClass": "spoon.test.eval.EvalTest",
        "testMethod": "testArrayLength",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "testUsageOfTypeAnnotationWithGenericTypesInClassDeclaration",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.reference.ExecutableReferenceTest",
        "testMethod": "testSuperClassInGetAllExecutables",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: double[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.jdtimportbuilder.ImportBuilderTest",
        "testMethod": "testWithSimpleImport",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.reflect.ast.AstCheckerTest",
        "testMethod": "testPushToStackChanges",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "testUsageOfTypeAnnotationInCast",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.methodreference.MethodReferenceTest",
        "testMethod": "testReferenceToAnInstanceMethodOfAnArbitraryObjectOfAParticularType",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Person[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.prettyprinter.PrinterTest",
        "testMethod": "testAutoimportModeDontImportUselessStatic",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.type.TypeTest",
        "testMethod": "testTypeAccessForDotClass",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.fieldaccesses.FieldAccessTest",
        "testMethod": "testFieldWriteWithPlusEqualsOperation",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.imports.ImportTest",
        "testMethod": "testAccessToNestedClass",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.PatternTest",
        "testMethod": "testMatchPossesiveMultiValueUnlimited",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.lambda.LambdaTest",
        "testMethod": "testTypeAccessInLambdaNoClassPath",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Object[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "testUsageOfTypeAnnotationBeforeExceptionInSignatureOfMethod",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.lambda.LambdaTest",
        "testMethod": "testFieldAccessInLambdaNoClassPathExternal1Example",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Object[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.lambda.LambdaTest",
        "testMethod": "testLambdaExpressionWithExpressionBodyAndWithoutTypeForParameter",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Object[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.comment.CommentTest",
        "testMethod": "testJavadocShortAndLongComment",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.TemplateTest",
        "testMethod": "substituteStringLiteral",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.position.PositionTest",
        "testMethod": "testArrayArgParameter",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.pkg.PackageTest",
        "testMethod": "testRenamePackageAndPrettyPrintNoclasspath",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.reference.ExecutableReferenceTest",
        "testMethod": "testSpecifyGetAllExecutablesMethod",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: double[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.PatternTest",
        "testMethod": "testMatchForeachWithOuterSubstitution",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.prettyprinter.LinesTest",
        "testMethod": "testCompileWhenUsingLinesArgument",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.arrays.ArraysTest",
        "testMethod": "testCtNewArrayWitComments",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "testRepeatableAnnotationAreManagedWithArrays",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.module.TestModule",
        "testMethod": "testModuleInfoWithComments",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: java.logging",
        "isError": true
      },
      {
        "testClass": "spoon.MavenLauncherTest",
        "testMethod": "spoonMavenLauncherTest",
        "failureName": "java.lang.AssertionError",
        "detail": "expected:\u003c23\u003e but was:\u003c0\u003e",
        "isError": false
      },
      {
        "testClass": "spoon.testing.CtPackageAssertTest",
        "testMethod": "testAddTypeToPackage",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: package",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.PatternTest",
        "testMethod": "testMatchReluctantMultivalue",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.pkg.PackageTest",
        "testMethod": "testRenameRootPackage",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.PatternTest",
        "testMethod": "testGenerateMethodWithSelfReferences",
        "failureName": "java.lang.AssertionError",
        "detail": "expected:\u003c[spoon.test.generated.ACloneOfAClassWithMethodsAndRefs, void, spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$1Bar, java.lang.Object, spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$Local]\u003e but was:\u003c[spoon.test.generated.ACloneOfAClassWithMethodsAndRefs, void, spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$\u003canonymous\u003e1Bar, java.lang.Object, spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$Local]\u003e",
        "isError": false
      },
      {
        "testClass": "spoon.reflect.visitor.CtInheritanceScannerMethodsTest",
        "testMethod": "testMethodsInInheritanceScanner",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.generics.GenericsTest",
        "testMethod": "testInvocationGenerics",
        "failureName": "java.lang.AssertionError",
        "detail": "Can\u0027t compile testclasses because Syntax error, insert \"enum Identifier\" to complete EnumHeaderName at /root/workspace/INRIA/spoon/405276650/target/spooned/spoon/test/generics/testclasses/Mole.java:7",
        "isError": false
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "testGetAnnotationOuter",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: MiddleAnnotation[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.generics.GenericsTest",
        "testMethod": "testGenericsOnLocalType",
        "failureName": "org.junit.ComparisonFailure",
        "detail": "expected:\u003cnew []Cook\u003cjava.lang.Strin...\u003e but was:\u003cnew [\u003canonymous\u003e1]Cook\u003cjava.lang.Strin...\u003e",
        "isError": false
      },
      {
        "testClass": "spoon.test.constructorcallnewclass.ConstructorCallTest",
        "testMethod": "testConstructorCallWithGenericArray",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: AtomicLong[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.lambda.LambdaTest",
        "testMethod": "testFieldAccessInLambdaNoClassPath",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Object[]",
        "isError": true
      },
      {
        "testClass": "spoon.testing.CtElementAssertTest",
        "testMethod": "testEqualityBetweenTwoCtElement",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.fieldaccesses.FieldAccessTest",
        "testMethod": "testBCUBug20140402",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Object[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.invocations.InvocationTest",
        "testMethod": "testIssue1753",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: HashMap\u003c\u003e",
        "isError": true
      },
      {
        "testClass": "spoon.test.imports.ImportTest",
        "testMethod": "testShouldNotCreateAutoreference",
        "failureName": "spoon.SpoonException",
        "detail": "spoon.SpoonException: The given identifier does not respect Java definition of an identifier: T[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.lambda.LambdaTest",
        "testMethod": "testCompileLambdaGeneratedBySpoon",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Object[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.visibility.VisibilityTest",
        "testMethod": "testInvocationVisibilityInFieldDeclaration",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.eval.EvalTest",
        "testMethod": "testScanAPartiallyEvaluatedElement",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "testAbstractAllAnnotationProcessor",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.lambda.LambdaTest",
        "testMethod": "testLambdaExpressionWithExpressionBodyAndWithMultiParametersTyped",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Object[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.lambda.LambdaTest",
        "testMethod": "testTypeParameterWithImplicitArrayType",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Object[]",
        "isError": true
      },
      {
        "testClass": "spoon.testing.CtPackageAssertTest",
        "testMethod": "testEqualityBetweenTwoDifferentCtPackage",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.AssertionError\u003e but was\u003cspoon.SpoonException\u003e",
        "isError": true
      },
      {
        "testClass": "spoon.test.refactoring.CtRenameLocalVariableRefactoringTest",
        "testMethod": "testRefactorWrongUsage",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Method[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.imports.ImportScannerTest",
        "testMethod": "testImportOnSpoon",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.comment.CommentTest",
        "testMethod": "testRemoveComment",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.signature.SignatureTest",
        "testMethod": "testArgumentNotNullForExecutableReference",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: null",
        "isError": true
      },
      {
        "testClass": "spoon.test.ctClass.CtClassTest",
        "testMethod": "testParentOfTheEnclosingClassOfStaticClass",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Object[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.position.PositionTest",
        "testMethod": "testPositionClassWithComments",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.targeted.TargetedExpressionTest",
        "testMethod": "testTargetsOfFieldInAnonymousClass",
        "failureName": "java.lang.IndexOutOfBoundsException",
        "detail": "Index: 0, Size: 0",
        "isError": true
      },
      {
        "testClass": "spoon.test.type.TypeTest",
        "testMethod": "testTypeReferenceInGenericsAndCasts",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.position.PositionTest",
        "testMethod": "testPositionInterface",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.TemplateArrayAccessTest",
        "testMethod": "testArrayLengthAccess",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.reference.VariableAccessTest",
        "testMethod": "testGetDeclarationAfterClone",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: char[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.comment.CommentTest",
        "testMethod": "testCombinedPackageInfoComment",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.ctClass.CtClassTest",
        "testMethod": "testNoClasspathWithSuperClassOfAClassInAnInterface",
        "failureName": "java.lang.AssertionError",
        "detail": "Can\u0027t compile draw2d because The given identifier does not respect Java definition of an identifier: org.eclipse.draw2d.MouseEvent",
        "isError": false
      },
      {
        "testClass": "spoon.test.targeted.TargetedExpressionTest",
        "testMethod": "testTargetsOfInvInAnonymousClass",
        "failureName": "java.lang.IndexOutOfBoundsException",
        "detail": "Index: 0, Size: 0",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "testAnnotationAndShadowDefaultRetentionPolicy",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.lambda.LambdaTest",
        "testMethod": "testGetOverriddenMethodWithFunction",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Object[]",
        "isError": true
      },
      {
        "testClass": "spoon.testing.CtElementAssertTest",
        "testMethod": "testEqualityBetweenTwoCtElementWithTheSameSignatureButNotTheSameContent",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.AssertionError\u003e but was\u003cspoon.SpoonException\u003e",
        "isError": true
      },
      {
        "testClass": "spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest",
        "testMethod": "testImplicitStaticClassAccessAutoImport",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.methodreference.MethodReferenceTest",
        "testMethod": "testReferenceToAStaticMethod",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Person[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.PatternTest",
        "testMethod": "testMatchSample1",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.reference.VariableAccessTest",
        "testMethod": "testParameterReferenceInConstructorNoClasspath",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Path[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.TemplateTest",
        "testMethod": "testSimpleTemplate",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Hello world",
        "isError": true
      },
      {
        "testClass": "spoon.test.imports.ImportTest",
        "testMethod": "testCanAccess",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.reflect.ast.CloneTest",
        "testMethod": "testCloneListener",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.TemplateTest",
        "testMethod": "testTemplateInterfaces",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.refactoring.MethodsRefactoringTest",
        "testMethod": "testExecutableReferenceFilter",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "testRepeatableAnnotationAreManaged",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.generics.GenericsTest",
        "testMethod": "testTypeParameterReference",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.reference.TypeReferenceTest",
        "testMethod": "testTypeReferenceSpecifiedInClassDeclarationInNoClasspath",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.lambda.LambdaTest",
        "testMethod": "testLambdaFilter",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Object[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.type.TypeTest",
        "testMethod": "testIntersectionTypeReferenceInGenericsAndCasts",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "testAnnotationArray",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.type.TypeTest",
        "testMethod": "testTypeAccessForTypeAccessInInstanceOf",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
        "testMethod": "metamodelPackageRule",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "testAnnotationAndShadowClassRetentionPolicy",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.targeted.TargetedExpressionTest",
        "testMethod": "testCtThisAccess",
        "failureName": "java.lang.IndexOutOfBoundsException",
        "detail": "Index: 0, Size: 0",
        "isError": true
      },
      {
        "testClass": "spoon.test.reference.ElasticsearchStackoverflowTest",
        "testMethod": "testStackOverflow",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.methodreference.MethodReferenceTest",
        "testMethod": "testReferenceBuilderWithComplexGenerics",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Person[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.processing.ProcessingTest",
        "testMethod": "testProcessorWithGenericType",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.PatternTest",
        "testMethod": "testMatchGreedyMultiValueMaxCountLimit",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.factory.FactoryTest",
        "testMethod": "testClassAccessCreatedFromFactories",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "testAccessAnnotationValue",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.refactoring.CtRenameLocalVariableRefactoringTest",
        "testMethod": "testRenameLocalVariableToSameName",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Method[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
        "testMethod": "testFactorySubFactory",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.replace.ReplaceParametrizedTest",
        "testMethod": "testContract[CtArrayTypeReference]",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Object[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationValuesTest",
        "testMethod": "testAnnotationPrintAnnotation",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: char[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
        "testMethod": "testSrcMainJava",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.jdtimportbuilder.ImportBuilderTest",
        "testMethod": "testInternalImportWhenNoClasspath",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: it.feio.android.omninotes.commons",
        "isError": true
      },
      {
        "testClass": "spoon.test.comment.CommentTest",
        "testMethod": "testWildComments",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.lambda.LambdaTest",
        "testMethod": "testLambdaExpressionWithStatementBodyAndWithParameter",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Object[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.executable.ExecutableRefTest",
        "testMethod": "testSameTypeInConstructorCallBetweenItsObjectAndItsExecutable",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: null",
        "isError": true
      },
      {
        "testClass": "spoon.test.comment.CommentTest",
        "testMethod": "testJavaDocCommentOnUnix",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.comment.CommentTest",
        "testMethod": "testInLineComment",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "testUsageOfParametersInTypeAnnotation",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.reference.TypeReferenceTest",
        "testMethod": "testPackageInNoClasspath",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.api.APITest",
        "testMethod": "testPrintNotAllSourcesWithFilter",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.imports.ImportScannerTest",
        "testMethod": "testComputeImportsInClassWithSameName",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.compilation.CompilationTest",
        "testMethod": "testFilterResourcesDir",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.parameters.ParameterTest",
        "testMethod": "testMultiParameterLambdaTypeReference",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: System.out",
        "isError": true
      },
      {
        "testClass": "spoon.test.prettyprinter.DefaultPrettyPrinterTest",
        "testMethod": "testIssue1501",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: null",
        "isError": true
      },
      {
        "testClass": "spoon.test.compilation.CompilationTest",
        "testMethod": "testPrecompile",
        "failureName": "spoon.SpoonException",
        "detail": "spoon.SpoonException: The given identifier does not respect Java definition of an identifier: char[]",
        "isError": true
      },
      {
        "testClass": "spoon.reflect.ast.CloneTest",
        "testMethod": "testCopyType",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.eval.EvalTest",
        "testMethod": "testDoNotSimplifyToExpressionWhenStatementIsExpected",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.api.APITest",
        "testMethod": "testPrintNotAllSourcesWithNames",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.reference.VariableAccessTest",
        "testMethod": "testDeclarationArray",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: double[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.fieldaccesses.FieldAccessTest",
        "testMethod": "testGetReference",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Object[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.labels.TestLabels",
        "testMethod": "testLabelsAreDetected",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.methodreference.MethodReferenceTest",
        "testMethod": "testReferenceToAnInstanceMethodOfAParticularObject",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Person[]",
        "isError": true
      },
      {
        "testClass": "spoon.processing.CtGenerationTest",
        "testMethod": "testGenerateCloneVisitor",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.MavenLauncherTest",
        "testMethod": "mavenLauncherTestMultiModulesAndVariables",
        "failureName": "java.lang.AssertionError",
        "detail": "Content of classpath: ",
        "isError": false
      },
      {
        "testClass": "spoon.test.pkg.PackageTest",
        "testMethod": "testRenameRootPackageWithNullOrEmpty",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "testCreateRepeatableAnnotation",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.type.TypeTest",
        "testMethod": "testTypeAccessOfArrayObjectInFullyQualifiedName",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "testAnnotationParameterTypes",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.trycatch.TryCatchTest",
        "testMethod": "testCompileMultiTryCatchWithCustomExceptions",
        "failureName": "spoon.SpoonException",
        "detail": "spoon.SpoonException: The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationValuesTest",
        "testMethod": "testValuesOnJava8Annotation",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "testUsageOfTypeAnnotationInNewInstance",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.refactoring.RefactoringTest",
        "testMethod": "testThisInConstructorAfterATransformation",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Method[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.reference.TypeReferenceTest",
        "testMethod": "testInvocationWithFieldAccessInNoClasspath",
        "failureName": "java.lang.AssertionError",
        "detail": "Can\u0027t compile TestBot.java because The given identifier does not respect Java definition of an identifier: Object[]",
        "isError": false
      },
      {
        "testClass": "spoon.test.annotation.AnnotationValuesTest",
        "testMethod": "testCtAnnotationAPI",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.constructorcallnewclass.ConstructorCallTest",
        "testMethod": "testConstructorCallObjectWithoutParameters",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: AtomicLong[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.processing.ProcessingTest",
        "testMethod": "testCallProcessorWithMultipleTypes",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.TemplateTest",
        "testMethod": "testSubstitutionInsertAllNtoN",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.lambda.LambdaTest",
        "testMethod": "testBuildExecutableReferenceFromLambda",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Object[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.imports.ImportTest",
        "testMethod": "testSpoonWithImports",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.ctClass.CtClassTest",
        "testMethod": "testAllTypeReferencesToALocalTypeShouldNotStartWithNumber",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.reference.ExecutableReferenceTest",
        "testMethod": "testLambdaNoClasspath",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "testCreateRepeatableAnnotationWithArrays",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.prettyprinter.DefaultPrettyPrinterTest",
        "testMethod": "testPrintAClassWithImports",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: FooCasper[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.reference.TypeReferenceTest",
        "testMethod": "testArgumentOfAInvocationIsNotATypeAccess",
        "failureName": "spoon.SpoonException",
        "detail": "spoon.SpoonException: The given identifier does not respect Java definition of an identifier: char[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
        "testMethod": "testStaticClasses",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.constructorcallnewclass.ConstructorCallTest",
        "testMethod": "testConstructorCallStringWithoutParameters",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: AtomicLong[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.PatternTest",
        "testMethod": "testMatchReluctantMultivalueMinCount1",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.prettyprinter.LinesTest",
        "testMethod": "testPrettyPrinterWithLines",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.literal.LiteralTest",
        "testMethod": "testLiteralInForEachWithNoClasspath",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.prettyprinter.PrinterTest",
        "testMethod": "testRuleCanBeBuild",
        "failureName": "spoon.SpoonException",
        "detail": "spoon.SpoonException: The given identifier does not respect Java definition of an identifier: T[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.type.TypeTest",
        "testMethod": "testPolyTypBindingInTernaryExpression",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.support.visitor.java.JavaReflectionTreeBuilderTest",
        "testMethod": "testShadowModelEqualsNormalModel",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.fieldaccesses.FieldAccessTest",
        "testMethod": "testFieldAccessNoClasspath",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.parameters.ParameterTest",
        "testMethod": "testGetParameterReferenceInLambdaNoClasspath",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: java.lang.HashMap",
        "isError": true
      },
      {
        "testClass": "spoon.test.lambda.LambdaTest",
        "testMethod": "testLambdaExpressionInIfConditional",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Object[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.parent.ContractOnSettersParametrizedTest",
        "testMethod": "testContract[public interface CtPackage extends spoon.reflect.declaration.CtNamedElement , spoon.reflect.declaration.CtShadowable {\n    @spoon.support.DerivedProperty\n    spoon.reflect.reference.CtPackageReference getReference();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    \u003cT extends spoon.reflect.declaration.CtPackage\u003e T addType(spoon.reflect.declaration.CtType\u003c?\u003e arg0);\n\n    java.lang.String getQualifiedName();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    void removeType(spoon.reflect.declaration.CtType\u003c?\u003e arg0);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    java.util.Set\u003cspoon.reflect.declaration.CtType\u003c?\u003e\u003e getTypes();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    \u003cT extends spoon.reflect.declaration.CtPackage\u003e T setPackages(java.util.Set\u003cspoon.reflect.declaration.CtPackage\u003e arg0);\n\n    @spoon.support.DerivedProperty\n    spoon.reflect.declaration.CtModule getDeclaringModule();\n\n    @spoon.support.DerivedProperty\n    spoon.reflect.declaration.CtPackage getDeclaringPackage();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    \u003cT extends spoon.reflect.declaration.CtPackage\u003e T addPackage(spoon.reflect.declaration.CtPackage arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    boolean removePackage(spoon.reflect.declaration.CtPackage arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    \u003cT extends spoon.reflect.declaration.CtPackage\u003e T setTypes(java.util.Set\u003cspoon.reflect.declaration.CtType\u003c?\u003e\u003e arg0);\n\n    boolean isUnnamedPackage();\n\n    spoon.reflect.declaration.CtPackage clone();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    spoon.reflect.declaration.CtPackage getPackage(java.lang.String arg0);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    java.util.Set\u003cspoon.reflect.declaration.CtPackage\u003e getPackages();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    \u003cT extends spoon.reflect.declaration.CtType\u003c?\u003e\u003e T getType(java.lang.String arg0);\n\n    static final java.lang.String PACKAGE_SEPARATOR;\n\n    static final char PACKAGE_SEPARATOR_CHAR;\n\n    static final java.lang.String TOP_LEVEL_PACKAGE_NAME;\n}]",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: spoon.support.reflect.declaration.CtPackageImpl@1",
        "isError": true
      },
      {
        "testClass": "spoon.test.generics.GenericsTest",
        "testMethod": "testNewClassGenerics",
        "failureName": "java.lang.AssertionError",
        "detail": "Can\u0027t compile testclasses because Syntax error, insert \"enum Identifier\" to complete EnumHeaderName at /root/workspace/INRIA/spoon/405276650/target/spooned/spoon/test/generics/testclasses/Mole.java:7",
        "isError": false
      },
      {
        "testClass": "spoon.test.prettyprinter.PrinterTest",
        "testMethod": "testPrettyPrinter",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.comment.CommentTest",
        "testMethod": "testCodeFactory",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.secondaryclasses.ClassesTest",
        "testMethod": "testIsAnonymousMethodInCtClass",
        "failureName": "org.junit.ComparisonFailure",
        "detail": "expected:\u003c...sses.AnonymousClass$[]1\u003e but was:\u003c...sses.AnonymousClass$[\u003canonymous\u003e]1\u003e",
        "isError": false
      },
      {
        "testClass": "spoon.test.template.TemplateArrayAccessTest",
        "testMethod": "testArrayAccess",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "testUsageOfTypeAnnotationInReturnTypeInMethod",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "testAbstractAllAnnotationProcessorWithGlobalAnnotation",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: InnerAnnot[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.position.PositionTest",
        "testMethod": "testPositionClass",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.variable.AccessFullyQualifiedFieldTest",
        "testMethod": "testPrivateStaticImportShouldNotBeImportedInSameClass",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: byte[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.reference.TypeReferenceTest",
        "testMethod": "testToStringEqualityBetweenTwoGenericTypeDifferent",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.prettyprinter.DefaultPrettyPrinterTest",
        "testMethod": "testPrintAMethodWithImports",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: FooCasper[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "testModelBuildingAnnotationBoundUsage",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.comment.CommentTest",
        "testMethod": "testBlockComment",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.reference.TypeReferenceTest",
        "testMethod": "testUnknownSuperClassWithSameNameInNoClasspath",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: it.feio.android.omninotes.commons",
        "isError": true
      },
      {
        "testClass": "spoon.test.methodreference.MethodReferenceTest",
        "testMethod": "testNoClasspathExecutableReferenceExpression",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Person[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.PatternTest",
        "testMethod": "testMatchReluctantMultivalueExactly2",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "testGetAnnotationFromParameter",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: this",
        "isError": true
      },
      {
        "testClass": "spoon.test.module.TestModule",
        "testMethod": "testDirectiveOrders",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: java.logging",
        "isError": true
      },
      {
        "testClass": "spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest",
        "testMethod": "testImplicitStaticClassAccess",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.PatternTest",
        "testMethod": "testMatchPossesiveMultiValueMaxCount4",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.TemplateTest",
        "testMethod": "testTemplateC1",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "testReplaceAnnotationValue",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.PatternTest",
        "testMethod": "testMatchParameterCondition",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.arrays.ArraysTest",
        "testMethod": "testInitializeWithNewArray",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.type.TypeTest",
        "testMethod": "testTypeAccessOnPrimitive",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { Class klass\u003dnull;  boolean x\u003d (klass \u003d\u003d short.class);}};;\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.test.imports.ImportTest",
        "testMethod": "testAnotherMissingImport",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.testing.AbstractAssertTest",
        "testMethod": "testTransformationFromCtElementWithProcessor",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.generics.GenericsTest",
        "testMethod": "testConstructorCallGenerics",
        "failureName": "java.lang.AssertionError",
        "detail": "Can\u0027t compile testclasses because Syntax error, insert \"enum Identifier\" to complete EnumHeaderName at /root/workspace/INRIA/spoon/405276650/target/spooned/spoon/test/generics/testclasses/Mole.java:7",
        "isError": false
      },
      {
        "testClass": "spoon.test.refactoring.RefactoringTest",
        "testMethod": "testRefactoringClassChangeAllCtTypeReferenceAssociatedWithClassConcerned",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Method[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.refactoring.MethodsRefactoringTest",
        "testMethod": "testSubInheritanceHierarchyFunction",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
        "testMethod": "testInterfacesAreCtScannable",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.visibility.VisibilityTest",
        "testMethod": "testFullyQualifiedNameOfTypeReferenceWithGeneric",
        "failureName": "java.lang.AssertionError",
        "detail": "Can\u0027t compile testclasses because Syntax error on token \"1D\", invalid Type at /root/workspace/INRIA/spoon/405276650/target/spooned/spoon/test/visibility_generics/testclasses/spoon/test/visibility/testclasses/A2.java:45",
        "isError": false
      },
      {
        "testClass": "spoon.test.targeted.TargetedExpressionTest",
        "testMethod": "testTargetsOfInvInInnerClass",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "spoon.reflect.ast.CloneTest",
        "testMethod": "testCloneMethodsDeclaredInAST",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.lambda.LambdaTest",
        "testMethod": "testLambdaExpressionWithExpressionBodyAndWithParameterTyped",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Object[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.eval.EvalTest",
        "testMethod": "testTryCatchAndStatement",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.varargs.VarArgsTest",
        "testMethod": "testModelBuildingInitializer",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.reflect.declaration.UnknownDeclarationTest",
        "testMethod": "testUnknownCalls",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.PatternTest",
        "testMethod": "testPatternToString",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.strings.StringTest",
        "testMethod": "testModelBuildingInitializer",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.refactoring.MethodsRefactoringTest",
        "testMethod": "testCtParameterRemoveRefactoringValidationCheck",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.processing.CtGenerationTest",
        "testMethod": "testGenerateRoleHandler",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.fieldaccesses.FieldAccessTest",
        "testMethod": "testFieldAccessOnUnknownType",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: A[]",
        "isError": true
      },
      {
        "testClass": "spoon.reflect.ast.CloneTest",
        "testMethod": "testCloneCastConditional",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: byte[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.lambda.LambdaTest",
        "testMethod": "testTypeParameterOfLambdaWithoutType2",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Object[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.staticFieldAccess.StaticAccessTest",
        "testMethod": "testProcessAndCompile",
        "failureName": "java.lang.AssertionError",
        "isError": false
      },
      {
        "testClass": "spoon.test.imports.ImportTest",
        "testMethod": "testWithInnerEnumDoesNotImportStaticInnerMethods",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: DataElement[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "testInnerAnnotationsWithArray",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: MiddleAnnotation[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.generics.GenericsTest",
        "testMethod": "testGenericMethodCallWithExtend",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: E[]",
        "isError": true
      },
      {
        "testClass": "spoon.reflect.visitor.CtScannerTest",
        "testMethod": "testScannerContract",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.modifiers.TestModifiers",
        "testMethod": "testCtModifiableAddRemoveReturnCtModifiable",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Object[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.fieldaccesses.FieldAccessTest",
        "testMethod": "testFieldAccessInAnonymousClass",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.reference.CloneReferenceTest",
        "testMethod": "testGetDeclarationAfterClone",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: char[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.constructorcallnewclass.ConstructorCallTest",
        "testMethod": "testCoreConstructorCall",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: AtomicLong[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.prettyprinter.QualifiedThisRefTest",
        "testMethod": "testPrintCtFieldAccessWorkEvenWhenParentNotInitialized",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.lambda.LambdaTest",
        "testMethod": "testLambdaExpressionWithStatementBodyAndWithoutParameters",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Object[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.constructorcallnewclass.ConstructorCallTest",
        "testMethod": "testConstructorCallStringWithParameters",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: AtomicLong[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.refactoring.RefactoringTest",
        "testMethod": "testThisInConstructor",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Method[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.jdtimportbuilder.ImportBuilderTest",
        "testMethod": "testWithSimpleImportNoAutoimport",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.main.MainTest",
        "testMethod": "spoon.test.main.MainTest",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.replace.ReplaceParametrizedTest",
        "testMethod": "testContract[CtPackage]",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: spoon.support.reflect.declaration.CtPackageImpl@1",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "testUsageOfTypeAnnotationInExtendsImplementsOfAClass",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.api.MetamodelTest",
        "testMethod": "testMetamodelWithoutSources",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.lambda.LambdaTest",
        "testMethod": "testGetDeclarationOnTypeParameterFromLambda",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Object[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.PatternTest",
        "testMethod": "testMatchParameterValueType",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.fieldaccesses.FieldAccessTest",
        "testMethod": "testModelBuildingFieldAccesses",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.imports.ImportTest",
        "testMethod": "testStaticMethodWithDifferentClassSameNameJava3NoCollision",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.refactoring.MethodsRefactoringTest",
        "testMethod": "testAllMethodsSameSignatureFunction",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.methodreference.MethodReferenceTest",
        "testMethod": "testReferenceToAnInstanceMethodOfMultiParticularObject",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Person[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.methodreference.MethodReferenceTest",
        "testMethod": "testCompileMethodReferenceGeneratedBySpoon",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Person[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.lambda.LambdaTest",
        "testMethod": "testLambdaMethod",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Object[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.enums.EnumsTest",
        "testMethod": "testModelBuildingEnum",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.prettyprinter.DefaultPrettyPrinterTest",
        "testMethod": "testPrintAMethodWithGeneric",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: FooCasper[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.lambda.LambdaTest",
        "testMethod": "testLambdaWithPrimitiveParameter",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Object[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.factory.FactoryTest",
        "testMethod": "testCtModel",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.constructorcallnewclass.NewClassTest",
        "testMethod": "testCtNewClassInNoClasspath",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Directory[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.PatternTest",
        "testMethod": "testMatchParameterValue",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.TemplateTest",
        "testMethod": "testTemplateArrayAccess",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.methodreference.MethodReferenceTest",
        "testMethod": "testGetGenericMethodFromReference",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Person[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.methodreference.MethodReferenceTest",
        "testMethod": "testGetGenericExecutableReference",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Person[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.compilationunit.GetBinaryFilesTest",
        "testMethod": "testAnonymousClasses",
        "failureName": "java.lang.AssertionError",
        "detail": "expected:\u003c4\u003e but was:\u003c2\u003e",
        "isError": false
      },
      {
        "testClass": "spoon.test.reference.VariableAccessTest",
        "testMethod": "testMultipleDeclarationsOfLocalVariable",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.loop.LoopTest",
        "testMethod": "testAnnotationInForLoop",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.variable.AccessTest",
        "testMethod": "testCanVisitArrayAccessAndSubClasses",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.variable.AccessTest",
        "testMethod": "testVariableAccessInNoClasspath",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: null",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.TemplateTest",
        "testMethod": "substituteTypeAccessReference",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.reference.ExecutableReferenceTest",
        "testMethod": "testPbWithStream",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Bar[]",
        "isError": true
      },
      {
        "testClass": "spoon.reflect.ast.AstCheckerTest",
        "testMethod": "testAvoidSetCollectionSavedOnAST",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.targeted.TargetedExpressionTest",
        "testMethod": "testClassDeclaredInALambda",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1",
        "isError": true
      },
      {
        "testClass": "spoon.test.lambda.LambdaTest",
        "testMethod": "testLambdaExpressionWithExpressionBodyAndWithMultiParameters",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Object[]",
        "isError": true
      },
      {
        "testClass": "spoon.processing.CtGenerationTest",
        "testMethod": "testGenerateReplacementVisitor",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: CtElement[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "testUsageOfTypeAnnotationWithGenericTypesInStatements",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.replace.ReplaceParametrizedTest",
        "testMethod": "testContract[CtModule]",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: spoon.support.reflect.declaration.CtPackageImpl@1",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationValuesTest",
        "testMethod": "testValuesOnJava7Annotation",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.fieldaccesses.FieldAccessTest",
        "testMethod": "testTypeDeclaredInAnonymousClass",
        "failureName": "java.lang.AssertionError",
        "isError": false
      },
      {
        "testClass": "spoon.test.filters.FilterTest",
        "testMethod": "testOverridingMethodFromSubClassOfInterface",
        "failureName": "org.junit.ComparisonFailure",
        "detail": "expected:\u003c...ses.AbstractTostada$[]1\u003e but was:\u003c...ses.AbstractTostada$[\u003canonymous\u003e]1\u003e",
        "isError": false
      },
      {
        "testClass": "spoon.test.methodreference.MethodReferenceTest",
        "testMethod": "testNoClasspathSuperExecutable",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Person[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.ctClass.CtClassTest",
        "testMethod": "getConstructor",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.reflect.visitor.CtVisitorTest",
        "testMethod": "testMethodsInVisitor",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.lambda.LambdaTest",
        "testMethod": "testTypeParameterOfLambdaWithoutType",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Object[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.prettyprinter.DefaultPrettyPrinterTest",
        "testMethod": "testIssue2130",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Void[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.filters.FilterTest",
        "testMethod": "testOverridingMethodFromAbstractClass",
        "failureName": "org.junit.ComparisonFailure",
        "detail": "expected:\u003c...ses.AbstractTostada$[]1\u003e but was:\u003c...ses.AbstractTostada$[\u003canonymous\u003e]1\u003e",
        "isError": false
      },
      {
        "testClass": "spoon.test.template.TemplateClassAccessTest",
        "testMethod": "testClassAccessTest",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.compilationunit.TestCompilationUnit",
        "testMethod": "testGetUnitTypeWorksWithCreatedObjects",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: package",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "testUsageOfTypeAnnotationOnParameterInMethod",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.constructorcallnewclass.NewClassTest",
        "testMethod": "testMoreThan9NewClass",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: double[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.enums.EnumsTest",
        "testMethod": "testAnnotationsOnEnum",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.api.APITest",
        "testMethod": "testSetterInNodes",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.literal.LiteralTest",
        "testMethod": "testCharLiteralInNoClasspath",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Index[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.refactoring.RefactoringTest",
        "testMethod": "testTransformedInstanceofAfterATransformation",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Method[]",
        "isError": true
      },
      {
        "testClass": "spoon.reflect.visitor.CtScannerTest",
        "testMethod": "testScannerCallsAllProperties",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.intercession.IntercessionTest",
        "testMethod": "testSettersAreAllGood",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.eval.EvalTest",
        "testMethod": "testStringConcatenation",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.modifiers.TestModifiers",
        "testMethod": "testGetModifiersHelpers",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.prettyprinter.PrinterTest",
        "testMethod": "testFQNModeWriteFQNConstructorInCtVisitor",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: CtElement[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.lambda.LambdaTest",
        "testMethod": "testLambdaExpressionWithExpressionBodyAndWithoutParameter",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Object[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.imports.ImportTest",
        "testMethod": "testSortingOfImports",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.PatternTest",
        "testMethod": "testPatternParameters",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.compilationunit.TestCompilationUnit",
        "testMethod": "testNewlyCreatedCUWouldGetAPartialPosition",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: new",
        "isError": true
      },
      {
        "testClass": "spoon.test.secondaryclasses.ClassesTest",
        "testMethod": "testAnonymousClass",
        "failureName": "org.junit.ComparisonFailure",
        "detail": "expected:\u003c[]1\u003e but was:\u003c[\u003canonymous\u003e]1\u003e",
        "isError": false
      },
      {
        "testClass": "spoon.test.ctClass.CtClassTest",
        "testMethod": "testDefaultConstructorAreOk",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: boolean[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.comment.CommentTest",
        "testMethod": "testInsertNewComment",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.comment.CommentTest",
        "testMethod": "testDocumentationContract",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.testing.CtElementAssertTest",
        "testMethod": "testEqualityBetweenACtElementAndAString",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
        "testMethod": "testGoodTestClassNames",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.visibility.VisibilityTest",
        "testMethod": "testVisibilityOfClassesNamedByClassesInJavaLangPackage",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.imports.ImportTest",
        "testMethod": "testStaticMethodWithDifferentClassSameNameCollision",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.exceptions.ExceptionTest",
        "testMethod": "testUnionCatchExceptionInsideLambdaInNoClasspath",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: System.out",
        "isError": true
      },
      {
        "testClass": "spoon.test.comment.CommentTest",
        "testMethod": "testCoreFactory",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.methodreference.MethodReferenceTest",
        "testMethod": "testReferenceToAClassParametrizedConstructor",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Person[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.arrays.ArraysTest",
        "testMethod": "testArrayReferences",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.module.TestModule",
        "testMethod": "testModuleInfoShouldBeCorrectlyPrettyPrinted",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: java.logging",
        "isError": true
      },
      {
        "testClass": "spoon.test.api.MetamodelTest",
        "testMethod": "testRoleOnField",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.refactoring.MethodsRefactoringTest",
        "testMethod": "testCtParameterRemoveRefactoring",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.arrays.ArraysTest",
        "testMethod": "testCtNewArrayInnerCtNewArray",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.reference.TypeReferenceTest",
        "testMethod": "testAnonymousClassesHaveAnEmptyStringForItsNameInNoClasspath",
        "failureName": "org.junit.ComparisonFailure",
        "detail": "expected:\u003c[]1\u003e but was:\u003c[\u003canonymous\u003e]1\u003e",
        "isError": false
      },
      {
        "testClass": "spoon.testing.CtElementAssertTest",
        "testMethod": "testEqualityBetweenTwoDifferentCtElement",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.AssertionError\u003e but was\u003cspoon.SpoonException\u003e",
        "isError": true
      },
      {
        "testClass": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
        "testMethod": "statelessFactory",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: class",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "testAnnotatedElementTypes",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: int[]",
        "isError": true
      }
    ]
  },
  "type": "only_fail"
}