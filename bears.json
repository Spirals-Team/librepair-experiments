{
  "repository": {
    "name": "evanchooly/kibble",
    "githubId": 86274566,
    "url": "https://github.com/evanchooly/kibble",
    "isFork": false,
    "original": {
      "name": "",
      "githubId": 0,
      "url": ""
    },
    "isPullRequest": false,
    "pullRequestId": 0
  },
  "builds": {
    "buggyBuild": {
      "id": 407846739,
      "url": "http://travis-ci.org/evanchooly/kibble/builds/407846739",
      "date": "Jul 25, 2018 1:31:13 AM"
    }
  },
  "reproductionBuggyBuild": {
    "reproductionDateBeginning": "Jul 25, 2018 1:31:26 AM",
    "reproductionDateEnd": "Jul 25, 2018 1:35:42 AM",
    "totalDuration": 251,
    "processDurations": {
      "cloning": {
        "nbSteps": 1,
        "totalDuration": 3,
        "stepNames": [
          "CloneRepository"
        ],
        "stepDurations": [
          3
        ]
      },
      "building": {
        "nbSteps": 2,
        "totalDuration": 164,
        "stepNames": [
          "CheckoutBuggyBuild",
          "BuildProject"
        ],
        "stepDurations": [
          0,
          164
        ]
      },
      "testing": {
        "nbSteps": 1,
        "totalDuration": 59,
        "stepNames": [
          "TestProject"
        ],
        "stepDurations": [
          59
        ]
      }
    },
    "projectRootPomPath": "./workspace/evanchooly/kibble/407846739/pom.xml"
  },
  "patchDiff": {
    "files": {
      "numberAdded": 0,
      "numberChanged": 0,
      "numberDeleted": 0
    },
    "lines": {
      "numberAdded": 0,
      "numberDeleted": 0
    }
  },
  "commits": {
    "buggyBuild": {
      "repoName": "evanchooly/kibble",
      "branchName": "visitor",
      "sha": "1e596b5e8717cb0b3ba603af64f8f822519d5b30",
      "url": "http://github.com/evanchooly/kibble/commit/1e596b5e8717cb0b3ba603af64f8f822519d5b30",
      "date": "Jul 25, 2018 1:27:31 AM"
    }
  },
  "projectMetrics": {
    "numberModules": 1,
    "numberSourceFiles": 0,
    "numberTestFiles": 0,
    "numberLibrariesFailingModule": 15
  },
  "tests": {
    "failingModule": "/root/workspace/evanchooly/kibble/407846739",
    "overallMetrics": {
      "numberRunning": 52,
      "numberPassing": 36,
      "numberFailing": 16,
      "numberErroring": 0,
      "numberSkipping": 0,
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false,
          "occurrences": 16
        }
      ]
    },
    "failingClasses": [
      {
        "testClass": "com.antwerkz.kibble.model.AnnotationHolderTest",
        "numberRunning": 3,
        "numberPassing": 2,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "com.antwerkz.kibble.model.ConstructorTest",
        "numberRunning": 2,
        "numberPassing": 1,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "com.antwerkz.kibble.model.KibbleFunctionTest",
        "numberRunning": 2,
        "numberPassing": 0,
        "numberFailing": 2,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "com.antwerkz.kibble.model.KibbleTypeTest",
        "numberRunning": 6,
        "numberPassing": 2,
        "numberFailing": 4,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "com.antwerkz.kibble.KibbleTest",
        "numberRunning": 6,
        "numberPassing": 3,
        "numberFailing": 3,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "com.antwerkz.kibble.model.KibbleFileTest",
        "numberRunning": 8,
        "numberPassing": 4,
        "numberFailing": 4,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "com.antwerkz.kibble.model.KibbleObjectTest",
        "numberRunning": 2,
        "numberPassing": 1,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 0
      }
    ],
    "failureDetails": [
      {
        "testClass": "com.antwerkz.kibble.model.KibbleFunctionTest",
        "testMethod": "generics",
        "failureName": "java.lang.AssertionError",
        "detail": "expected [fun \u003cT\u003e foo(t: T)] but found [fun \u003cT\u003e foo(t: T) ]",
        "isError": false
      },
      {
        "testClass": "com.antwerkz.kibble.KibbleTest",
        "testMethod": "create",
        "failureName": "java.lang.AssertionError",
        "detail": "expected [val topLevel: Int \u003d 4  open class KibbleTest {     val property: Double \u003d 0.0     protected fun test(): Double {         println(\"hello\")         return 0.0     } }  fun bareMethod() {     println(\"hi\") } ] but found [ val topLevel: Int \u003d 4  open class KibbleTest {     val property: Double \u003d 0.0     protected fun test(): Double {         println(\"hello\")         return 0.0     } }  fun bareMethod() {     println(\"hi\") } ]",
        "isError": false
      },
      {
        "testClass": "com.antwerkz.kibble.model.KibbleTypeTest",
        "testMethod": "generics",
        "failureName": "java.lang.AssertionError",
        "detail": "expected [com.foo.bar.SomeType\u003ckotlin.String, kotlin.Double\u003e?] but found [SomeType\u003cString, Double\u003e?]",
        "isError": false
      },
      {
        "testClass": "com.antwerkz.kibble.model.KibbleFileTest",
        "testMethod": "resolve",
        "failureName": "java.lang.AssertionError",
        "detail": "expected [com.antwerkz.testing.Second] but found [Second]",
        "isError": false
      },
      {
        "testClass": "com.antwerkz.kibble.KibbleTest",
        "testMethod": "standalone",
        "failureName": "java.lang.AssertionError",
        "detail": "expected [println(\"hi\") return \"hi\"] but found [    println(\"hi\") return \"hi\"]",
        "isError": false
      },
      {
        "testClass": "com.antwerkz.kibble.model.KibbleFileTest",
        "testMethod": "imports",
        "failureName": "java.lang.AssertionError",
        "detail": "expected [package com.antwerkz.kibble  import java.lang.String as anotherAlias import java.sql.ResultSet as aliasName] but found [package com.antwerkz.kibble   import java.lang.String as anotherAlias import java.sql.ResultSet as aliasName]",
        "isError": false
      },
      {
        "testClass": "com.antwerkz.kibble.model.ConstructorTest",
        "testMethod": "imports",
        "failureName": "java.lang.AssertionError",
        "detail": "expected [import com.foo.Bob import org.box.Bla  class temp(val temp: Bob) {     constructor(foo: Bla): this()  } ] but found [ import com.foo.Bob import org.box.Bla  class temp(val temp: Bob) {     constructor(foo: Bla): this()  } ]",
        "isError": false
      },
      {
        "testClass": "com.antwerkz.kibble.model.KibbleObjectTest",
        "testMethod": "functions",
        "failureName": "java.lang.AssertionError",
        "detail": "expected [object temp {     fun something(): Junk {         println(\"something\")     } } ] but found [object temp {     fun something(): Junk {         println(\"something\")     } } ]",
        "isError": false
      },
      {
        "testClass": "com.antwerkz.kibble.model.KibbleTypeTest",
        "testMethod": "simpleType",
        "failureName": "java.lang.AssertionError",
        "detail": "expected [com.foo.bar.Type] but found [Type]",
        "isError": false
      },
      {
        "testClass": "com.antwerkz.kibble.model.KibbleTypeTest",
        "testMethod": "components",
        "failureName": "java.lang.AssertionError",
        "detail": "expected [Map.Entry] but found [Entry]",
        "isError": false
      },
      {
        "testClass": "com.antwerkz.kibble.KibbleTest",
        "testMethod": "writeSource",
        "failureName": "java.lang.AssertionError",
        "detail": "expected [package com.antwerkz.test  import java.util.ArrayList import java.util.HashMap as HMap import javax.annotation.Generated  interface Dummy {     fun what() }  @Generated(\"I\u0027m the value\", date \u003d \"123455\", comments \u003d \"Fingers crossed\") internal abstract class KotlinSampleClass(val cost: Double, ignored: Int): ParentClass(21), Cloneable {     var name: String? \u003d null     protected open val age: Double \u003d -1.0     val list: List\u003cString\u003e \u003d ArrayList()     val map: HMap\u003cString, Int\u003e \u003d java.util.HashMap()     var time: Int? \u003d null     @SuppressWarnings(\"message\")     protected lateinit var random: String     @SuppressWarnings(\"message\")     protected fun output(count: Long) {         println(\"age \u003d $age\")     }     override fun toString(): String {         return \"KotlinSampleClass(name\u003d\u0027$name\u0027, time\u003d$time, age\u003d$age, list\u003d$list, map\u003d$map)\"     } }  open class ParentClass(val blurb: Int) { }  ] but found [package com.antwerkz.test   import java.util.ArrayList import java.util.HashMap as HMap import javax.annotation.Generated  interface Dummy {     fun what() }  @Generated(\"I\u0027m the value\", date \u003d \"123455\", comments \u003d \"Fingers crossed\") internal abstract class KotlinSampleClass(val cost: Double, ignored: Int): ParentClass(21), Cloneable {     var name: String? \u003d null     protected open val age: Double \u003d -1.0     val list: List\u003cString\u003e \u003d ArrayList()     val map: HMap\u003cString, Int\u003e \u003d java.util.HashMap()     var time: Int? \u003d null     @SuppressWarnings(\"message\")     protected lateinit var random: String     @SuppressWarnings(\"message\")     protected fun output(count: Long) {         println(\"age \u003d $age\")     }     override fun toString(): String {         return \"KotlinSampleClass(name\u003d\u0027$name\u0027, time\u003d$time, age\u003d$age, list\u003d$list, map\u003d$map)\"     } }  open class ParentClass(val blurb: Int) { } ]",
        "isError": false
      },
      {
        "testClass": "com.antwerkz.kibble.model.AnnotationHolderTest",
        "testMethod": "functions",
        "failureName": "java.lang.AssertionError",
        "detail": "expected [import kotlin.annotation.Retention  @Bob(name \u003d Feller) @Retention fun foo()] but found [ import kotlin.annotation.Retention  @Bob(name \u003d Feller) @Retention fun foo() ]",
        "isError": false
      },
      {
        "testClass": "com.antwerkz.kibble.model.KibbleFileTest",
        "testMethod": "resolveClassesInFile",
        "failureName": "java.lang.AssertionError",
        "detail": "expected [com.antwerkz.testing.Second] but found [Second]",
        "isError": false
      },
      {
        "testClass": "com.antwerkz.kibble.model.KibbleFileTest",
        "testMethod": "resolveClassesInAnotherFile",
        "failureName": "java.lang.AssertionError",
        "detail": "expected [com.antwerkz.testing.Second] but found [Second]",
        "isError": false
      },
      {
        "testClass": "com.antwerkz.kibble.model.KibbleTypeTest",
        "testMethod": "fullyQualified",
        "failureName": "java.lang.AssertionError",
        "detail": "expected [java.math.BigDecimal] but found [BigDecimal]",
        "isError": false
      },
      {
        "testClass": "com.antwerkz.kibble.model.KibbleFunctionTest",
        "testMethod": "varargs",
        "failureName": "java.lang.AssertionError",
        "detail": "expected [fun temp(vararg bob: String) {     return 4 } ] but found [ fun temp(vararg bob: String) {     return 4 } ]",
        "isError": false
      }
    ]
  },
  "type": "only_fail"
}