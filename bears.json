{
  "repository": {
    "name": "INRIA/spoon",
    "githubId": 14176513,
    "url": "https://github.com/INRIA/spoon",
    "isFork": false,
    "original": {
      "name": "",
      "githubId": 0,
      "url": ""
    },
    "isPullRequest": true,
    "pullRequestId": 2239
  },
  "builds": {
    "buggyBuild": {
      "id": 405322036,
      "url": "http://travis-ci.org/INRIA/spoon/builds/405322036",
      "date": "Jul 18, 2018 2:08:26 PM"
    }
  },
  "tests": {
    "failingModule": "/root/workspace/INRIA/spoon/405322036",
    "overallMetrics": {
      "numberRunning": 1403,
      "numberPassing": 1219,
      "numberFailing": 6,
      "numberErroring": 178,
      "numberSkipping": 4,
      "failures": [
        {
          "failureName": "java.lang.Exception",
          "isError": true,
          "occurrences": 3
        },
        {
          "failureName": "spoon.SpoonException",
          "isError": true,
          "occurrences": 139
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "isError": true,
          "occurrences": 36
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false,
          "occurrences": 6
        }
      ]
    },
    "failingClasses": [
      {
        "testClass": "spoon.reflect.visitor.CtScannerTest",
        "numberRunning": 3,
        "numberPassing": 1,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.ctClass.CtClassTest",
        "numberRunning": 8,
        "numberPassing": 5,
        "numberFailing": 1,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.testing.CtElementAssertTest",
        "numberRunning": 5,
        "numberPassing": 1,
        "numberFailing": 0,
        "numberErroring": 4,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.parent.ParentTest",
        "numberRunning": 10,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 10,
        "numberSkipping": 1
      },
      {
        "testClass": "spoon.test.targeted.TargetedExpressionTest",
        "numberRunning": 17,
        "numberPassing": 5,
        "numberFailing": 0,
        "numberErroring": 12,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.exceptions.ExceptionTest",
        "numberRunning": 6,
        "numberPassing": 5,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.trycatch.TryCatchTest",
        "numberRunning": 12,
        "numberPassing": 8,
        "numberFailing": 0,
        "numberErroring": 4,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.testing.CtPackageAssertTest",
        "numberRunning": 4,
        "numberPassing": 2,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.reflect.visitor.CtVisitorTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.imports.ImportTest",
        "numberRunning": 44,
        "numberPassing": 43,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.replace.ReplaceParametrizedTest",
        "numberRunning": 80,
        "numberPassing": 78,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.casts.CastTest",
        "numberRunning": 5,
        "numberPassing": 2,
        "numberFailing": 0,
        "numberErroring": 3,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.parameters.ParameterTest",
        "numberRunning": 3,
        "numberPassing": 1,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.executable.ExecutableRefTest",
        "numberRunning": 5,
        "numberPassing": 4,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.parent.ContractOnSettersParametrizedTest",
        "numberRunning": 67,
        "numberPassing": 65,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.support.visitor.java.JavaReflectionTreeBuilderTest",
        "numberRunning": 18,
        "numberPassing": 17,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.arrays.ArraysTest",
        "numberRunning": 8,
        "numberPassing": 7,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.position.PositionTest",
        "numberRunning": 25,
        "numberPassing": 24,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.invocations.InvocationTest",
        "numberRunning": 3,
        "numberPassing": 2,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.model.SwitchCaseTest",
        "numberRunning": 2,
        "numberPassing": 1,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.intercession.RemoveTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.type.TypeTest",
        "numberRunning": 13,
        "numberPassing": 7,
        "numberFailing": 0,
        "numberErroring": 6,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.MavenLauncherTest",
        "numberRunning": 6,
        "numberPassing": 4,
        "numberFailing": 2,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.compilationunit.TestCompilationUnit",
        "numberRunning": 7,
        "numberPassing": 5,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.reflect.visitor.CtInheritanceScannerMethodsTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.api.MetamodelTest",
        "numberRunning": 14,
        "numberPassing": 12,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.signature.SignatureTest",
        "numberRunning": 8,
        "numberPassing": 6,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.reflect.ast.AstCheckerTest",
        "numberRunning": 2,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.refactoring.RefactoringTest",
        "numberRunning": 4,
        "numberPassing": 1,
        "numberFailing": 0,
        "numberErroring": 3,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.ctType.CtTypeTest",
        "numberRunning": 8,
        "numberPassing": 5,
        "numberFailing": 0,
        "numberErroring": 3,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.main.MainTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.generics.GenericsTest",
        "numberRunning": 45,
        "numberPassing": 30,
        "numberFailing": 0,
        "numberErroring": 15,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
        "numberRunning": 8,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 8,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.query_function.VariableReferencesTest",
        "numberRunning": 8,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 8,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.prettyprinter.DefaultPrettyPrinterTest",
        "numberRunning": 12,
        "numberPassing": 10,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.jdtimportbuilder.ImportBuilderTest",
        "numberRunning": 8,
        "numberPassing": 7,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.constructorcallnewclass.NewClassTest",
        "numberRunning": 7,
        "numberPassing": 6,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.executable.ExecutableTest",
        "numberRunning": 4,
        "numberPassing": 3,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.processing.CtGenerationTest",
        "numberRunning": 4,
        "numberPassing": 2,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.model.TypeTest",
        "numberRunning": 8,
        "numberPassing": 7,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.visibility.VisibilityTest",
        "numberRunning": 5,
        "numberPassing": 2,
        "numberFailing": 0,
        "numberErroring": 3,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.variable.AccessTest",
        "numberRunning": 8,
        "numberPassing": 6,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.support.ResourceTest",
        "numberRunning": 4,
        "numberPassing": 3,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.refactoring.MethodsRefactoringTest",
        "numberRunning": 5,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 5,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.comment.CommentTest",
        "numberRunning": 19,
        "numberPassing": 18,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.model.BlockTest",
        "numberRunning": 2,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.intercession.insertBefore.InsertMethodsTest",
        "numberRunning": 9,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 9,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.template.PatternTest",
        "numberRunning": 31,
        "numberPassing": 28,
        "numberFailing": 0,
        "numberErroring": 3,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.snippets.SnippetTest",
        "numberRunning": 6,
        "numberPassing": 5,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.module.TestModule",
        "numberRunning": 6,
        "numberPassing": 2,
        "numberFailing": 0,
        "numberErroring": 4,
        "numberSkipping": 2
      },
      {
        "testClass": "spoon.test.intercession.IntercessionTest",
        "numberRunning": 7,
        "numberPassing": 1,
        "numberFailing": 0,
        "numberErroring": 6,
        "numberSkipping": 1
      },
      {
        "testClass": "spoon.test.api.APITest",
        "numberRunning": 24,
        "numberPassing": 22,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.template.TemplateTest",
        "numberRunning": 24,
        "numberPassing": 22,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.imports.ImportScannerTest",
        "numberRunning": 6,
        "numberPassing": 5,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.strings.StringLiteralTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.testing.AbstractAssertTest",
        "numberRunning": 4,
        "numberPassing": 3,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.literal.LiteralTest",
        "numberRunning": 5,
        "numberPassing": 4,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "numberRunning": 52,
        "numberPassing": 50,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.factory.FieldFactoryTest",
        "numberRunning": 2,
        "numberPassing": 1,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.parent.NullParentTest",
        "numberRunning": 8,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 8,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.compilation.CompilationTest",
        "numberRunning": 13,
        "numberPassing": 11,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.reflect.ast.CloneTest",
        "numberRunning": 5,
        "numberPassing": 4,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.parent.TopLevelTypeTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.reference.TypeReferenceTest",
        "numberRunning": 28,
        "numberPassing": 24,
        "numberFailing": 1,
        "numberErroring": 3,
        "numberSkipping": 0
      }
    ],
    "failureDetails": [
      {
        "testClass": "spoon.test.model.BlockTest",
        "testMethod": "testIterationStatements",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { int x\u003d0;int y\u003d0;}};;\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.test.intercession.RemoveTest",
        "testMethod": "testRemoveAllStatements",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { int x\u003d0;int y\u003d0;}};;\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.test.arrays.ArraysTest",
        "testMethod": "testInitializeWithNewArray",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: \u003cunknown\u003e",
        "isError": true
      },
      {
        "testClass": "spoon.test.generics.GenericsTest",
        "testMethod": "testGenericsInConstructorCall",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Cook",
        "isError": true
      },
      {
        "testClass": "spoon.test.refactoring.RefactoringTest",
        "testMethod": "testThisInConstructorAfterATransformation",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1X",
        "isError": true
      },
      {
        "testClass": "spoon.test.main.MainTest",
        "testMethod": "spoon.test.main.MainTest",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Result",
        "isError": true
      },
      {
        "testClass": "spoon.test.reference.TypeReferenceTest",
        "testMethod": "testTypeReferenceWithGenerics",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: spoon.test.imports.testclasses.withgenerics",
        "isError": true
      },
      {
        "testClass": "spoon.test.model.BlockTest",
        "testMethod": "testAddEmptyBlock",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { }};;\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.test.parent.ParentTest",
        "testMethod": "testParentOfGenericInTypeReference",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Bar",
        "isError": true
      },
      {
        "testClass": "spoon.test.api.MetamodelTest",
        "testMethod": "testRoleOnField",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1AnnotationInvocationHandler",
        "isError": true
      },
      {
        "testClass": "spoon.test.api.APITest",
        "testMethod": "testPrintNotAllSourcesInCommandLine",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Result",
        "isError": true
      },
      {
        "testClass": "spoon.testing.CtElementAssertTest",
        "testMethod": "testEqualityBetweenTwoCtElement",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1String",
        "isError": true
      },
      {
        "testClass": "spoon.test.type.TypeTest",
        "testMethod": "testTypeAccessForDotClass",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Test",
        "isError": true
      },
      {
        "testClass": "spoon.test.parent.ParentTest",
        "testMethod": "testParentOfCtPackageReference",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Bar",
        "isError": true
      },
      {
        "testClass": "spoon.test.generics.GenericsTest",
        "testMethod": "testMethodTypingContext",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Cook",
        "isError": true
      },
      {
        "testClass": "spoon.test.targeted.TargetedExpressionTest",
        "testMethod": "testTargetsOfFieldAccess",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1NestedTypeScanner",
        "isError": true
      },
      {
        "testClass": "spoon.test.reference.TypeReferenceTest",
        "testMethod": "testUnknownSuperClassWithSameNameInNoClasspath",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: it.feio.android.omninotes.commons",
        "isError": true
      },
      {
        "testClass": "spoon.test.type.TypeTest",
        "testMethod": "testTypeAccessForTypeAccessInInstanceOf",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Test",
        "isError": true
      },
      {
        "testClass": "spoon.test.parent.ParentTest",
        "testMethod": "testParentOfCtExecutableReference",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Bar",
        "isError": true
      },
      {
        "testClass": "spoon.test.refactoring.RefactoringTest",
        "testMethod": "testRefactoringClassChangeAllCtTypeReferenceAssociatedWithClassConcerned",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1X",
        "isError": true
      },
      {
        "testClass": "spoon.testing.CtElementAssertTest",
        "testMethod": "testEqualityBetweenTwoDifferentCtElement",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.AssertionError\u003e but was\u003cspoon.SpoonException\u003e",
        "isError": true
      },
      {
        "testClass": "spoon.test.executable.ExecutableTest",
        "testMethod": "testShadowValueOf",
        "failureName": "java.lang.AssertionError",
        "isError": false
      },
      {
        "testClass": "spoon.test.reference.TypeReferenceTest",
        "testMethod": "testConstructorCallInNoClasspath",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: \u003cunknown\u003e",
        "isError": true
      },
      {
        "testClass": "spoon.test.parent.NullParentTest",
        "testMethod": "testLocalVariableNullDefaultExpression",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Bar",
        "isError": true
      },
      {
        "testClass": "spoon.test.parent.NullParentTest",
        "testMethod": "testReturnNullExpression",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Bar",
        "isError": true
      },
      {
        "testClass": "spoon.reflect.visitor.CtInheritanceScannerMethodsTest",
        "testMethod": "testMethodsInInheritanceScanner",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1AnnotationInvocationHandler",
        "isError": true
      },
      {
        "testClass": "spoon.test.replace.ReplaceParametrizedTest",
        "testMethod": "testContract[CtModule]",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: spoon.support.reflect.declaration.CtPackageImpl@1",
        "isError": true
      },
      {
        "testClass": "spoon.test.casts.CastTest",
        "testMethod": "testCast1",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { String x\u003d(String) new Object();}};;\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
        "testMethod": "testInterfacesAreCtScannable",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1FindCommentParentScanner",
        "isError": true
      },
      {
        "testClass": "spoon.test.generics.GenericsTest",
        "testMethod": "testisGeneric",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Cook",
        "isError": true
      },
      {
        "testClass": "spoon.reflect.visitor.CtVisitorTest",
        "testMethod": "testMethodsInVisitor",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1AnnotationInvocationHandler",
        "isError": true
      },
      {
        "testClass": "spoon.testing.AbstractAssertTest",
        "testMethod": "testTransformationFromCtElementWithProcessor",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1String",
        "isError": true
      },
      {
        "testClass": "spoon.test.parent.ParentTest",
        "testMethod": "testHasParent",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Bar",
        "isError": true
      },
      {
        "testClass": "spoon.test.trycatch.TryCatchTest",
        "testMethod": "testFullyQualifiedException",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { try{}catch(java.lang.RuntimeException e){}}};;\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.test.generics.GenericsTest",
        "testMethod": "testGenericsOnLocalType",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Cook",
        "isError": true
      },
      {
        "testClass": "spoon.test.generics.GenericsTest",
        "testMethod": "testClassTypingContextMethodSignature",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Cook",
        "isError": true
      },
      {
        "testClass": "spoon.test.parent.ParentTest",
        "testMethod": "testParentPackage",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Bar",
        "isError": true
      },
      {
        "testClass": "spoon.test.refactoring.RefactoringTest",
        "testMethod": "testTransformedInstanceofAfterATransformation",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1X",
        "isError": true
      },
      {
        "testClass": "spoon.test.module.TestModule",
        "testMethod": "testCompleteModuleInfoContentNoClasspath",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: java.logging",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.TemplateTest",
        "testMethod": "testSimpleTemplate",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Hello world",
        "isError": true
      },
      {
        "testClass": "spoon.test.module.TestModule",
        "testMethod": "testDirectiveOrders",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: java.logging",
        "isError": true
      },
      {
        "testClass": "spoon.test.parent.NullParentTest",
        "testMethod": "testForLoopNullChildren",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Bar",
        "isError": true
      },
      {
        "testClass": "spoon.test.imports.ImportTest",
        "testMethod": "testImportWithGenerics",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: spoon.test.imports.testclasses.withgenerics",
        "isError": true
      },
      {
        "testClass": "spoon.test.trycatch.TryCatchTest",
        "testMethod": "testExceptionJava7",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { try{}catch(RuntimeException | Error e){System.exit(0);}}};;\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.reflect.ast.CloneTest",
        "testMethod": "testCloneMethodsDeclaredInAST",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1AnnotationInvocationHandler",
        "isError": true
      },
      {
        "testClass": "spoon.test.generics.GenericsTest",
        "testMethod": "testDiamond1",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class Diamond {\n         java.util.List\u003cString\u003e f \u003d new java.util.ArrayList\u003c\u003e();\n        };\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.test.ctType.CtTypeTest",
        "testMethod": "testHasMethodInDirectMethod",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X { public void foo() {} };\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.test.intercession.insertBefore.InsertMethodsTest",
        "testMethod": "testInsertAfterSwitchCase",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() {  int x\u003d0;  int y\u003d0;  int z\u003dx+y; }};;\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
        "testMethod": "testStaticClasses",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Result",
        "isError": true
      },
      {
        "testClass": "spoon.test.query_function.VariableReferencesTest",
        "testMethod": "testVariableScopeFunction",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Local",
        "isError": true
      },
      {
        "testClass": "spoon.test.prettyprinter.DefaultPrettyPrinterTest",
        "testMethod": "testIssue1501",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: null",
        "isError": true
      },
      {
        "testClass": "spoon.test.model.TypeTest",
        "testMethod": "testGetUsedTypesForTypeInRootPackage",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X { X x; };\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.test.ctClass.CtClassTest",
        "testMethod": "testAllTypeReferencesToALocalTypeShouldNotStartWithNumber",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Cook",
        "isError": true
      },
      {
        "testClass": "spoon.test.targeted.TargetedExpressionTest",
        "testMethod": "testCtThisAccess",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1InnerClass",
        "isError": true
      },
      {
        "testClass": "spoon.test.query_function.VariableReferencesTest",
        "testMethod": "testVariableReferenceFunction",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Local",
        "isError": true
      },
      {
        "testClass": "spoon.processing.CtGenerationTest",
        "testMethod": "testGenerateCloneVisitor",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1AnnotationInvocationHandler",
        "isError": true
      },
      {
        "testClass": "spoon.test.ctType.CtTypeTest",
        "testMethod": "testHasMethodNotHasMethod",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X { public void foo() {} };\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.test.intercession.insertBefore.InsertMethodsTest",
        "testMethod": "testInsertBefore",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() {  int x\u003d0;  int y\u003d0;  int z\u003dx+y; }};;\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.test.refactoring.MethodsRefactoringTest",
        "testMethod": "testCtParameterRemoveRefactoring",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Local",
        "isError": true
      },
      {
        "testClass": "spoon.test.intercession.IntercessionTest",
        "testMethod": "testInsertIfIntercession",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public int bar() {if (1 \u003d\u003d 0)\n            return 1;\n        else\n            return 0;\n        }};;\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.test.targeted.TargetedExpressionTest",
        "testMethod": "testTargetsOfFieldAccessInInnerClass",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1NestedTypeScanner",
        "isError": true
      },
      {
        "testClass": "spoon.test.intercession.insertBefore.InsertMethodsTest",
        "testMethod": "testInsertBeforeSwitchCase",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() {  int x\u003d0;  int y\u003d0;  int z\u003dx+y; }};;\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.test.support.ResourceTest",
        "testMethod": "testFilteringFolder",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1D",
        "isError": true
      },
      {
        "testClass": "spoon.test.query_function.VariableReferencesTest",
        "testMethod": "testLocalVariableReferenceFunction",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Local",
        "isError": true
      },
      {
        "testClass": "spoon.test.intercession.IntercessionTest",
        "testMethod": "testInsertEnd",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { int x\u003d0; String foo\u003d\"toto\";}};;\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.test.generics.GenericsTest",
        "testMethod": "testConstructorCallGenerics",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Cook",
        "isError": true
      },
      {
        "testClass": "spoon.test.visibility.VisibilityTest",
        "testMethod": "testInvocationVisibilityInFieldDeclaration",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: null",
        "isError": true
      },
      {
        "testClass": "spoon.test.parent.ParentTest",
        "testMethod": "testParentSet",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Bar",
        "isError": true
      },
      {
        "testClass": "spoon.test.position.PositionTest",
        "testMethod": "testPositionTryCatch",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Local",
        "isError": true
      },
      {
        "testClass": "spoon.test.constructorcallnewclass.NewClassTest",
        "testMethod": "testCtNewClassInNoClasspath",
        "failureName": "java.lang.AssertionError",
        "detail": "Can\u0027t compile new-class because The given identifier does not respect Java definition of an identifier: org.apache.lucene",
        "isError": false
      },
      {
        "testClass": "spoon.test.parent.ContractOnSettersParametrizedTest",
        "testMethod": "testContract[public interface CtModule extends spoon.reflect.declaration.CtNamedElement {\n    @spoon.support.DerivedProperty\n    spoon.reflect.reference.CtModuleReference getReference();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    spoon.reflect.declaration.CtPackage getRootPackage();\n\n    @spoon.support.DerivedProperty\n    boolean isUnnamedModule();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODIFIER)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setIsOpenModule(boolean arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setModuleDirectives(java.util.List\u003cspoon.reflect.declaration.CtModuleDirective\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addModuleDirective(spoon.reflect.declaration.CtModuleDirective arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addModuleDirectiveAt(int arg0, spoon.reflect.declaration.CtModuleDirective arg1);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeModuleDirective(spoon.reflect.declaration.CtModuleDirective arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SERVICE_TYPE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setUsedServices(java.util.List\u003cspoon.reflect.declaration.CtUsedService\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SERVICE_TYPE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeUsedService(spoon.reflect.declaration.CtUsedService arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SERVICE_TYPE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addUsedService(spoon.reflect.declaration.CtUsedService arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPORTED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setExportedPackages(java.util.List\u003cspoon.reflect.declaration.CtPackageExport\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPORTED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addExportedPackage(spoon.reflect.declaration.CtPackageExport arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPORTED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeExportedPackage(spoon.reflect.declaration.CtPackageExport arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.OPENED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setOpenedPackages(java.util.List\u003cspoon.reflect.declaration.CtPackageExport\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.OPENED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addOpenedPackage(spoon.reflect.declaration.CtPackageExport arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.OPENED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeOpenedPackage(spoon.reflect.declaration.CtPackageExport arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.REQUIRED_MODULE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setRequiredModules(java.util.List\u003cspoon.reflect.declaration.CtModuleRequirement\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.REQUIRED_MODULE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addRequiredModule(spoon.reflect.declaration.CtModuleRequirement arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.REQUIRED_MODULE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeRequiredModule(spoon.reflect.declaration.CtModuleRequirement arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.PROVIDED_SERVICE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setProvidedServices(java.util.List\u003cspoon.reflect.declaration.CtProvidedService\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.PROVIDED_SERVICE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addProvidedService(spoon.reflect.declaration.CtProvidedService arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.PROVIDED_SERVICE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeProvidedService(spoon.reflect.declaration.CtProvidedService arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setRootPackage(spoon.reflect.declaration.CtPackage arg0);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    java.util.List\u003cspoon.reflect.declaration.CtModuleDirective\u003e getModuleDirectives();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.REQUIRED_MODULE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtModuleRequirement\u003e getRequiredModules();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.EXPORTED_PACKAGE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtPackageExport\u003e getExportedPackages();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.OPENED_PACKAGE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtPackageExport\u003e getOpenedPackages();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.SERVICE_TYPE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtUsedService\u003e getUsedServices();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.PROVIDED_SERVICE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtProvidedService\u003e getProvidedServices();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.MODIFIER)\n    boolean isOpenModule();\n\n    spoon.reflect.declaration.CtModule clone();\n\n    static final java.lang.String TOP_LEVEL_MODULE_NAME;\n}]",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: spoon.support.reflect.declaration.CtPackageImpl@1",
        "isError": true
      },
      {
        "testClass": "spoon.test.intercession.insertBefore.InsertMethodsTest",
        "testMethod": "testInsertBeforeWithoutBrace",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() {  int x\u003d0;  int y\u003d0;  int z\u003dx+y; }};;\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.test.generics.GenericsTest",
        "testMethod": "testCtTypeReference_getSuperclass",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Cook",
        "isError": true
      },
      {
        "testClass": "spoon.test.replace.ReplaceParametrizedTest",
        "testMethod": "testContract[CtPackage]",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: spoon.support.reflect.declaration.CtPackageImpl@1",
        "isError": true
      },
      {
        "testClass": "spoon.processing.CtGenerationTest",
        "testMethod": "testGenerateRoleHandler",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1AnnotationInvocationHandler",
        "isError": true
      },
      {
        "testClass": "spoon.test.module.TestModule",
        "testMethod": "testModuleInfoWithComments",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: java.logging",
        "isError": true
      },
      {
        "testClass": "spoon.test.generics.GenericsTest",
        "testMethod": "testNewClassGenerics",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Cook",
        "isError": true
      },
      {
        "testClass": "spoon.test.parent.NullParentTest",
        "testMethod": "testTargetedAccessNullTarget",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Bar",
        "isError": true
      },
      {
        "testClass": "spoon.test.intercession.insertBefore.InsertMethodsTest",
        "testMethod": "testInsertAfterWithBrace",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() {  int x\u003d0;  int y\u003d0;  int z\u003dx+y; }};;\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.test.compilationunit.TestCompilationUnit",
        "testMethod": "testNewlyCreatedCUWouldGetAPartialPosition",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: new",
        "isError": true
      },
      {
        "testClass": "spoon.test.jdtimportbuilder.ImportBuilderTest",
        "testMethod": "testInternalImportWhenNoClasspath",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: it.feio.android.omninotes.commons",
        "isError": true
      },
      {
        "testClass": "spoon.test.intercession.insertBefore.InsertMethodsTest",
        "testMethod": "insertBeforeAndUpdateParent",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() {  int x\u003d0;  int y\u003d0;  int z\u003dx+y; }};;\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.test.parent.ParentTest",
        "testMethod": "testGetParentWithFilter",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Bar",
        "isError": true
      },
      {
        "testClass": "spoon.test.api.APITest",
        "testMethod": "testSetterInNodes",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Visitor",
        "isError": true
      },
      {
        "testClass": "spoon.MavenLauncherTest",
        "testMethod": "spoonMavenLauncherTest",
        "failureName": "java.lang.AssertionError",
        "detail": "expected:\u003c23\u003e but was:\u003c0\u003e",
        "isError": false
      },
      {
        "testClass": "spoon.test.variable.AccessTest",
        "testMethod": "testAccessToStringOnPostIncrement",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { Integer i \u003d 1; (i++).toString(); int k \u003d 0; k++;}};;\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.reflect.visitor.CtScannerTest",
        "testMethod": "testScannerContract",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1AnnotationInvocationHandler",
        "isError": true
      },
      {
        "testClass": "spoon.test.type.TypeTest",
        "testMethod": "testTypeAccessOnPrimitive",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { Class klass\u003dnull;  boolean x\u003d (klass \u003d\u003d short.class);}};;\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.test.query_function.VariableReferencesTest",
        "testMethod": "testLocalVariableReferenceDeclarationFunction",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Local",
        "isError": true
      },
      {
        "testClass": "spoon.test.targeted.TargetedExpressionTest",
        "testMethod": "testTargetsOfInvInInnerClass",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1NestedTypeScanner",
        "isError": true
      },
      {
        "testClass": "spoon.test.intercession.insertBefore.InsertMethodsTest",
        "testMethod": "testInsertBeforeWithBrace",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() {  int x\u003d0;  int y\u003d0;  int z\u003dx+y; }};;\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.test.targeted.TargetedExpressionTest",
        "testMethod": "testTargetOfFieldAccess",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1NestedTypeScanner",
        "isError": true
      },
      {
        "testClass": "spoon.test.snippets.SnippetTest",
        "testMethod": "testSnippetFullClass",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { int x\u003d0;}};;\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.test.parameters.ParameterTest",
        "testMethod": "testMultiParameterLambdaTypeReference",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: System.out",
        "isError": true
      },
      {
        "testClass": "spoon.test.reference.TypeReferenceTest",
        "testMethod": "testInvocationWithFieldAccessInNoClasspath",
        "failureName": "java.lang.AssertionError",
        "detail": "Can\u0027t compile TestBot.java because The given identifier does not respect Java definition of an identifier: null",
        "isError": false
      },
      {
        "testClass": "spoon.test.parent.NullParentTest",
        "testMethod": "testFieldNullDefaultExpression",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Bar",
        "isError": true
      },
      {
        "testClass": "spoon.test.type.TypeTest",
        "testMethod": "testTypeReferenceInGenericsAndCasts",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Test",
        "isError": true
      },
      {
        "testClass": "spoon.test.targeted.TargetedExpressionTest",
        "testMethod": "testClassDeclaredInALambda",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 3InnerSubscriber",
        "isError": true
      },
      {
        "testClass": "spoon.test.generics.GenericsTest",
        "testMethod": "testInvocationGenerics",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Cook",
        "isError": true
      },
      {
        "testClass": "spoon.test.targeted.TargetedExpressionTest",
        "testMethod": "testTargetsOfStaticFieldAccess",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1NestedTypeScanner",
        "isError": true
      },
      {
        "testClass": "spoon.test.signature.SignatureTest",
        "testMethod": "testArgumentNotNullForExecutableReference",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: null",
        "isError": true
      },
      {
        "testClass": "spoon.test.comment.CommentTest",
        "testMethod": "testDocumentationContract",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Visitor",
        "isError": true
      },
      {
        "testClass": "spoon.test.trycatch.TryCatchTest",
        "testMethod": "testCatchOrder",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { try{}catch(RuntimeException e){java.lang.System.exit(0);}      catch(Exception e){}}};;\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
        "testMethod": "testFactorySubFactory",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Visitor",
        "isError": true
      },
      {
        "testClass": "spoon.test.parent.ParentTest",
        "testMethod": "testParentOfCtVariableReference",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Bar",
        "isError": true
      },
      {
        "testClass": "spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest",
        "testMethod": "initializationError",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: spoon.support.reflect.declaration.CtPackageImpl@1",
        "isError": true
      },
      {
        "testClass": "spoon.test.targeted.TargetedExpressionTest",
        "testMethod": "testNotTargetedExpression",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1NestedTypeScanner",
        "isError": true
      },
      {
        "testClass": "spoon.test.parent.ParentTest",
        "testMethod": "testParentOfPrimitiveReference",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Bar",
        "isError": true
      },
      {
        "testClass": "spoon.test.intercession.IntercessionTest",
        "testMethod": "testInsertBegin",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { int x\u003d0;}};;\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.test.parent.NullParentTest",
        "testMethod": "testAssertNullExpression",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Bar",
        "isError": true
      },
      {
        "testClass": "spoon.test.trycatch.TryCatchTest",
        "testMethod": "testTryCatchVariableGetType",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { try{}catch(RuntimeException e){System.exit(0);}}};;\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.test.parameters.ParameterTest",
        "testMethod": "testGetParameterReferenceInLambdaNoClasspath",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: java.lang.HashMap",
        "isError": true
      },
      {
        "testClass": "spoon.test.refactoring.MethodsRefactoringTest",
        "testMethod": "testAllMethodsSameSignatureFunction",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Local",
        "isError": true
      },
      {
        "testClass": "spoon.test.targeted.TargetedExpressionTest",
        "testMethod": "testTargetsOfInvInAnonymousClass",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1NestedTypeScanner",
        "isError": true
      },
      {
        "testClass": "spoon.test.intercession.IntercessionTest",
        "testMethod": "testSettersAreAllGood",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Visitor",
        "isError": true
      },
      {
        "testClass": "spoon.test.prettyprinter.DefaultPrettyPrinterTest",
        "testMethod": "testIssue2130",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: \u003cunknown\u003e",
        "isError": true
      },
      {
        "testClass": "spoon.test.strings.StringLiteralTest",
        "testMethod": "testSnippetFullClass",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class StringValueUTF {\n         String f0 \u003d \"toto\";\n         String f1 \u003d \"\\n\";\n         char c1 \u003d \u0027\\n\u0027;\n         String f2 \u003d \"\\u20ac\";\n         char c2 \u003d \u0027\\u20ac\u0027;\n         String f3 \u003d \"€\";\n         char c3 \u003d \u0027€\u0027;\n         String f4 \u003d \"\\t\";\n         char c4 \u003d \u0027\\t\u0027;\n         String f5 \u003d \" \";\n         char c5 \u003d \u0027 \u0027;\n         String f6 \u003d \"€\\u20ac\";\n        };\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.test.factory.FieldFactoryTest",
        "testMethod": "testCreateFromSource",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1NestedTypeScanner",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "testGetAnnotationFromParameter",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: this",
        "isError": true
      },
      {
        "testClass": "spoon.test.ctClass.CtClassTest",
        "testMethod": "testParentOfTheEnclosingClassOfStaticClass",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: daikon.Runtime",
        "isError": true
      },
      {
        "testClass": "spoon.test.exceptions.ExceptionTest",
        "testMethod": "testUnionCatchExceptionInsideLambdaInNoClasspath",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: System.out",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "annotationOverrideFQNIsOK",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Cache.Entry\u003cK",
        "isError": true
      },
      {
        "testClass": "spoon.test.query_function.VariableReferencesTest",
        "testMethod": "testPotentialVariableAccessFromStaticMethod",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Local",
        "isError": true
      },
      {
        "testClass": "spoon.test.generics.GenericsTest",
        "testMethod": "testGenericsInQualifiedNameInConstructorCall",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Cook",
        "isError": true
      },
      {
        "testClass": "spoon.reflect.visitor.CtScannerTest",
        "testMethod": "testScannerCallsAllProperties",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Visitor",
        "isError": true
      },
      {
        "testClass": "spoon.test.generics.GenericsTest",
        "testMethod": "testName",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Cook",
        "isError": true
      },
      {
        "testClass": "spoon.test.refactoring.MethodsRefactoringTest",
        "testMethod": "testExecutableReferenceFilter",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Local",
        "isError": true
      },
      {
        "testClass": "spoon.test.intercession.IntercessionTest",
        "testMethod": "testEqualConstructor",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X { public X() {} };;\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.test.type.TypeTest",
        "testMethod": "testTypeAccessOfArrayObjectInFullyQualifiedName",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Test",
        "isError": true
      },
      {
        "testClass": "spoon.test.query_function.VariableReferencesTest",
        "testMethod": "testCatchVariableReferenceFunction",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Local",
        "isError": true
      },
      {
        "testClass": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
        "testMethod": "testSrcMainJava",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Result",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.PatternTest",
        "testMethod": "testGenerateClassWithSelfReferences",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Bar",
        "isError": true
      },
      {
        "testClass": "spoon.test.invocations.InvocationTest",
        "testMethod": "testIssue1753",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: HashMap\u003c\u003e",
        "isError": true
      },
      {
        "testClass": "spoon.test.generics.GenericsTest",
        "testMethod": "testMethodsWithGenericsWhoExtendsObject",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Cook",
        "isError": true
      },
      {
        "testClass": "spoon.test.parent.NullParentTest",
        "testMethod": "testTargetedExpressionNullTarget",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Bar",
        "isError": true
      },
      {
        "testClass": "spoon.test.intercession.insertBefore.InsertMethodsTest",
        "testMethod": "testInsertAfter",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() {  int x\u003d0;  int y\u003d0;  int z\u003dx+y; }};;\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.test.module.TestModule",
        "testMethod": "testModuleInfoShouldBeCorrectlyPrettyPrinted",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: java.logging",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.TemplateTest",
        "testMethod": "createTypeFromTemplate",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Bar",
        "isError": true
      },
      {
        "testClass": "spoon.test.signature.SignatureTest",
        "testMethod": "testNullSignature",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public Object foo() { return null;}};;\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
        "testMethod": "testGoodTestClassNames",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1CloneListener",
        "isError": true
      },
      {
        "testClass": "spoon.test.variable.AccessTest",
        "testMethod": "testVariableAccessInNoClasspath",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: null",
        "isError": true
      },
      {
        "testClass": "spoon.test.ctType.CtTypeTest",
        "testMethod": "testHasMethodOnNull",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X { public void foo() {} };\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.test.type.TypeTest",
        "testMethod": "testIntersectionTypeReferenceInGenericsAndCasts",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Test",
        "isError": true
      },
      {
        "testClass": "spoon.test.intercession.insertBefore.InsertMethodsTest",
        "testMethod": "testInsertAfterWithoutBrace",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() {  int x\u003d0;  int y\u003d0;  int z\u003dx+y; }};;\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
        "testMethod": "metamodelPackageRule",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1AnnotationInvocationHandler",
        "isError": true
      },
      {
        "testClass": "spoon.test.casts.CastTest",
        "testMethod": "testCast2",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { Class\u003cString\u003e x\u003d(Class\u003cString\u003e) new Object();}};;\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.reflect.ast.AstCheckerTest",
        "testMethod": "testAvoidSetCollectionSavedOnAST",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Result",
        "isError": true
      },
      {
        "testClass": "spoon.test.imports.ImportScannerTest",
        "testMethod": "testImportOnSpoon",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Result",
        "isError": true
      },
      {
        "testClass": "spoon.support.visitor.java.JavaReflectionTreeBuilderTest",
        "testMethod": "testShadowModelEqualsNormalModel",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1AnnotationInvocationHandler",
        "isError": true
      },
      {
        "testClass": "spoon.test.visibility.VisibilityTest",
        "testMethod": "testFullyQualifiedNameOfTypeReferenceWithGeneric",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1D",
        "isError": true
      },
      {
        "testClass": "spoon.test.generics.GenericsTest",
        "testMethod": "testMethodTypingContextAdaptMethod",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Cook",
        "isError": true
      },
      {
        "testClass": "spoon.test.casts.CastTest",
        "testMethod": "testCast3",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X\u003cA\u003e {void addConsumedAnnotationType(Class\u003c? extends A\u003e annotationType) {}\n        public void foo() { Class\u003c?\u003e x \u003d null; addConsumedAnnotationType((Class\u003cA\u003e) x);}};;\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.test.ctClass.CtClassTest",
        "testMethod": "testNoClasspathWithSuperClassOfAClassInAnInterface",
        "failureName": "java.lang.AssertionError",
        "detail": "Can\u0027t compile draw2d because The given identifier does not respect Java definition of an identifier: org.eclipse.draw2d.MouseEvent",
        "isError": false
      },
      {
        "testClass": "spoon.test.query_function.VariableReferencesTest",
        "testMethod": "testCheckModelConsistency",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Local",
        "isError": true
      },
      {
        "testClass": "spoon.test.targeted.TargetedExpressionTest",
        "testMethod": "testTargetsOfFieldInAnonymousClass",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1NestedTypeScanner",
        "isError": true
      },
      {
        "testClass": "spoon.test.refactoring.MethodsRefactoringTest",
        "testMethod": "testCtParameterRemoveRefactoringValidationCheck",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Local",
        "isError": true
      },
      {
        "testClass": "spoon.MavenLauncherTest",
        "testMethod": "mavenLauncherTestMultiModulesAndVariables",
        "failureName": "java.lang.AssertionError",
        "detail": "Content of classpath: ",
        "isError": false
      },
      {
        "testClass": "spoon.test.targeted.TargetedExpressionTest",
        "testMethod": "testStaticTargetsOfInv",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1NestedTypeScanner",
        "isError": true
      },
      {
        "testClass": "spoon.testing.CtPackageAssertTest",
        "testMethod": "testEqualityBetweenTwoDifferentCtPackage",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.AssertionError\u003e but was\u003cspoon.SpoonException\u003e",
        "isError": true
      },
      {
        "testClass": "spoon.test.executable.ExecutableRefTest",
        "testMethod": "testSameTypeInConstructorCallBetweenItsObjectAndItsExecutable",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: null",
        "isError": true
      },
      {
        "testClass": "spoon.test.parent.NullParentTest",
        "testMethod": "testIfNullBranches",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Bar",
        "isError": true
      },
      {
        "testClass": "spoon.test.visibility.VisibilityTest",
        "testMethod": "testVisibilityOfClassesNamedByClassesInJavaLangPackage",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1D",
        "isError": true
      },
      {
        "testClass": "spoon.test.targeted.TargetedExpressionTest",
        "testMethod": "testTargetsOfInv",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1NestedTypeScanner",
        "isError": true
      },
      {
        "testClass": "spoon.test.compilationunit.TestCompilationUnit",
        "testMethod": "testGetUnitTypeWorksWithCreatedObjects",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: package",
        "isError": true
      },
      {
        "testClass": "spoon.reflect.ast.AstCheckerTest",
        "testMethod": "testPushToStackChanges",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1AnnotationInvocationHandler",
        "isError": true
      },
      {
        "testClass": "spoon.test.parent.ParentTest",
        "testMethod": "testParent",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Bar",
        "isError": true
      },
      {
        "testClass": "spoon.test.compilation.CompilationTest",
        "testMethod": "testNewInstance",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X implements spoon.test.compilation.testclasses.Ifoo { public int foo() {int i\u003d0; return i;} };\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.test.parent.ContractOnSettersParametrizedTest",
        "testMethod": "testContract[public interface CtPackage extends spoon.reflect.declaration.CtNamedElement , spoon.reflect.declaration.CtShadowable {\n    @spoon.support.DerivedProperty\n    spoon.reflect.reference.CtPackageReference getReference();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    \u003cT extends spoon.reflect.declaration.CtPackage\u003e T addType(spoon.reflect.declaration.CtType\u003c?\u003e arg0);\n\n    java.lang.String getQualifiedName();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    void removeType(spoon.reflect.declaration.CtType\u003c?\u003e arg0);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    java.util.Set\u003cspoon.reflect.declaration.CtType\u003c?\u003e\u003e getTypes();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    \u003cT extends spoon.reflect.declaration.CtPackage\u003e T setPackages(java.util.Set\u003cspoon.reflect.declaration.CtPackage\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    \u003cT extends spoon.reflect.declaration.CtPackage\u003e T addPackage(spoon.reflect.declaration.CtPackage arg0);\n\n    @spoon.support.DerivedProperty\n    spoon.reflect.declaration.CtModule getDeclaringModule();\n\n    @spoon.support.DerivedProperty\n    spoon.reflect.declaration.CtPackage getDeclaringPackage();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    boolean removePackage(spoon.reflect.declaration.CtPackage arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    \u003cT extends spoon.reflect.declaration.CtPackage\u003e T setTypes(java.util.Set\u003cspoon.reflect.declaration.CtType\u003c?\u003e\u003e arg0);\n\n    boolean isUnnamedPackage();\n\n    spoon.reflect.declaration.CtPackage clone();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    spoon.reflect.declaration.CtPackage getPackage(java.lang.String arg0);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    java.util.Set\u003cspoon.reflect.declaration.CtPackage\u003e getPackages();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    \u003cT extends spoon.reflect.declaration.CtType\u003c?\u003e\u003e T getType(java.lang.String arg0);\n\n    static final java.lang.String PACKAGE_SEPARATOR;\n\n    static final char PACKAGE_SEPARATOR_CHAR;\n\n    static final java.lang.String TOP_LEVEL_PACKAGE_NAME;\n}]",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: spoon.support.reflect.declaration.CtPackageImpl@1",
        "isError": true
      },
      {
        "testClass": "spoon.testing.CtPackageAssertTest",
        "testMethod": "testAddTypeToPackage",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: package",
        "isError": true
      },
      {
        "testClass": "spoon.test.query_function.VariableReferencesTest",
        "testMethod": "testParameterReferenceFunction",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Local",
        "isError": true
      },
      {
        "testClass": "spoon.test.generics.GenericsTest",
        "testMethod": "testClassTypingContext",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Cook",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.PatternTest",
        "testMethod": "testAddGeneratedBy",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Bar",
        "isError": true
      },
      {
        "testClass": "spoon.test.literal.LiteralTest",
        "testMethod": "testCharLiteralInNoClasspath",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: IndexTransaction.Type.UPDATE",
        "isError": true
      },
      {
        "testClass": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
        "testMethod": "testSpecPackage",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Result",
        "isError": true
      },
      {
        "testClass": "spoon.test.compilation.CompilationTest",
        "testMethod": "testFilterResourcesDir",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1CtLocalVariableReferenceScanner",
        "isError": true
      },
      {
        "testClass": "spoon.test.intercession.IntercessionTest",
        "testMethod": "testInsertAfter",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { int x\u003d0; int y\u003d0; int z\u003dx+y;}};;\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.testing.CtElementAssertTest",
        "testMethod": "testEqualityBetweenTwoCtElementWithTheSameSignatureButNotTheSameContent",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.AssertionError\u003e but was\u003cspoon.SpoonException\u003e",
        "isError": true
      },
      {
        "testClass": "spoon.test.parent.TopLevelTypeTest",
        "testMethod": "testTopLevelType",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Bar",
        "isError": true
      },
      {
        "testClass": "spoon.test.api.MetamodelTest",
        "testMethod": "testMetamodelWithoutSources",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1AnnotationInvocationHandler",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.PatternTest",
        "testMethod": "testGenerateMethodWithSelfReferences",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Bar",
        "isError": true
      },
      {
        "testClass": "spoon.test.model.SwitchCaseTest",
        "testMethod": "testIterationStatements",
        "failureName": "spoon.compiler.ModelBuildingException",
        "detail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { int x\u003d0;switch(x) {case 0: x\u003dx+1;break;case 1: x\u003d0;default: x\u003d-1;}}};;\n    }\n}",
        "isError": true
      },
      {
        "testClass": "spoon.testing.CtElementAssertTest",
        "testMethod": "testEqualityBetweenACtElementAndAString",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1String",
        "isError": true
      },
      {
        "testClass": "spoon.test.refactoring.MethodsRefactoringTest",
        "testMethod": "testSubInheritanceHierarchyFunction",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Local",
        "isError": true
      },
      {
        "testClass": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
        "testMethod": "statelessFactory",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1Visitor",
        "isError": true
      }
    ]
  },
  "projectMetrics": {
    "numberModules": 1,
    "numberSourceFiles": 616,
    "numberTestFiles": 695,
    "numberLibrariesFailingModule": 30
  },
  "commits": {
    "buggyBuild": {
      "repoName": "INRIA/spoon",
      "branchName": "master",
      "sha": "43f9c81f85bb5e38a9fbaa7aa2ca79431b324dbc",
      "url": "http://github.com/INRIA/spoon/commit/43f9c81f85bb5e38a9fbaa7aa2ca79431b324dbc",
      "date": "Jul 18, 2018 1:58:45 PM"
    },
    "buggyBuildForkRepo": {
      "repoName": "surli/spoon",
      "branchName": "check-identifiers",
      "sha": "8c8c75bb23299dded6e7f8a508b08835ef596c64",
      "url": "https://github.com/surli/spoon/commit/8c8c75bb23299dded6e7f8a508b08835ef596c64",
      "date": "Jul 18, 2018 1:58:45 PM"
    },
    "buggyBuildBaseRepo": {
      "repoName": "INRIA/spoon",
      "branchName": "master",
      "sha": "a172b5698f0ad418722d5388c7de548907d69685",
      "url": "https://github.com/INRIA/spoon/commit/a172b5698f0ad418722d5388c7de548907d69685",
      "date": "Jul 18, 2018 1:03:50 PM"
    }
  },
  "reproductionBuggyBuild": {
    "reproductionDateBeginning": "Jul 18, 2018 2:08:53 PM",
    "reproductionDateEnd": "Jul 18, 2018 2:21:37 PM",
    "totalDuration": 759,
    "processDurations": {
      "cloning": {
        "nbSteps": 1,
        "totalDuration": 17,
        "stepNames": [
          "CloneRepository"
        ],
        "stepDurations": [
          17
        ]
      },
      "building": {
        "nbSteps": 2,
        "totalDuration": 148,
        "stepNames": [
          "CheckoutBuggyBuild",
          "BuildProject"
        ],
        "stepDurations": [
          11,
          137
        ]
      },
      "testing": {
        "nbSteps": 1,
        "totalDuration": 499,
        "stepNames": [
          "TestProject"
        ],
        "stepDurations": [
          499
        ]
      }
    },
    "projectRootPomPath": "./workspace/INRIA/spoon/405322036/pom.xml"
  },
  "patchDiff": {
    "files": {
      "numberAdded": 0,
      "numberChanged": 0,
      "numberDeleted": 0
    },
    "lines": {
      "numberAdded": 0,
      "numberDeleted": 0
    }
  },
  "type": "only_fail"
}