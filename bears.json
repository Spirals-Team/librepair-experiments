{
  "projectMetrics": {
    "numberModules": 1,
    "numberSourceFiles": 616,
    "numberTestFiles": 695,
    "numberLibrariesFailingModule": 30
  },
  "repository": {
    "name": "INRIA/spoon",
    "githubId": 14176513,
    "url": "https://github.com/INRIA/spoon",
    "isFork": false,
    "original": {
      "name": "",
      "githubId": 0,
      "url": ""
    },
    "isPullRequest": true,
    "pullRequestId": 2239
  },
  "builds": {
    "buggyBuild": {
      "id": 405344762,
      "url": "http://travis-ci.org/INRIA/spoon/builds/405344762",
      "date": "Jul 18, 2018 3:21:08 PM"
    }
  },
  "commits": {
    "buggyBuild": {
      "repoName": "INRIA/spoon",
      "branchName": "master",
      "sha": "fea22172df21f70c47c46ab4d0d4e92855b15686",
      "url": "http://github.com/INRIA/spoon/commit/fea22172df21f70c47c46ab4d0d4e92855b15686",
      "date": "Jul 18, 2018 3:02:08 PM"
    },
    "buggyBuildForkRepo": {
      "repoName": "surli/spoon",
      "branchName": "check-identifiers",
      "sha": "c26ddaddd1534634feeaac54c948206544d27619",
      "url": "https://github.com/surli/spoon/commit/c26ddaddd1534634feeaac54c948206544d27619",
      "date": "Jul 18, 2018 3:02:08 PM"
    },
    "buggyBuildBaseRepo": {
      "repoName": "INRIA/spoon",
      "branchName": "master",
      "sha": "a172b5698f0ad418722d5388c7de548907d69685",
      "url": "https://github.com/INRIA/spoon/commit/a172b5698f0ad418722d5388c7de548907d69685",
      "date": "Jul 18, 2018 1:03:50 PM"
    }
  },
  "tests": {
    "failingModule": "/root/workspace/INRIA/spoon/405344762",
    "overallMetrics": {
      "numberRunning": 1416,
      "numberPassing": 1379,
      "numberFailing": 9,
      "numberErroring": 28,
      "numberSkipping": 4,
      "failures": [
        {
          "failureName": "java.lang.Exception",
          "isError": true,
          "occurrences": 2
        },
        {
          "failureName": "spoon.SpoonException",
          "isError": true,
          "occurrences": 17
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "isError": true,
          "occurrences": 1
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true,
          "occurrences": 4
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "isError": true,
          "occurrences": 4
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false,
          "occurrences": 9
        }
      ]
    },
    "failingClasses": [
      {
        "testClass": "spoon.MavenLauncherTest",
        "numberRunning": 6,
        "numberPassing": 4,
        "numberFailing": 2,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "numberRunning": 52,
        "numberPassing": 50,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.api.APITest",
        "numberRunning": 24,
        "numberPassing": 23,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.refactoring.MethodsRefactoringTest",
        "numberRunning": 5,
        "numberPassing": 4,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.invocations.InvocationTest",
        "numberRunning": 3,
        "numberPassing": 2,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.replace.ReplaceParametrizedTest",
        "numberRunning": 80,
        "numberPassing": 78,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
        "numberRunning": 8,
        "numberPassing": 6,
        "numberFailing": 1,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.main.MainTest",
        "numberRunning": 14,
        "numberPassing": 11,
        "numberFailing": 2,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.targeted.TargetedExpressionTest",
        "numberRunning": 17,
        "numberPassing": 13,
        "numberFailing": 0,
        "numberErroring": 4,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.executable.ExecutableTest",
        "numberRunning": 4,
        "numberPassing": 3,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.refactoring.RefactoringTest",
        "numberRunning": 4,
        "numberPassing": 1,
        "numberFailing": 0,
        "numberErroring": 3,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.query_function.VariableReferencesTest",
        "numberRunning": 8,
        "numberPassing": 5,
        "numberFailing": 0,
        "numberErroring": 3,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.testing.CtElementAssertTest",
        "numberRunning": 5,
        "numberPassing": 4,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.testing.CtPackageAssertTest",
        "numberRunning": 4,
        "numberPassing": 2,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.ctClass.CtClassTest",
        "numberRunning": 8,
        "numberPassing": 7,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.template.TemplateTest",
        "numberRunning": 24,
        "numberPassing": 23,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.compilationunit.TestCompilationUnit",
        "numberRunning": 7,
        "numberPassing": 5,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.template.PatternTest",
        "numberRunning": 31,
        "numberPassing": 29,
        "numberFailing": 2,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.parent.ContractOnSettersParametrizedTest",
        "numberRunning": 67,
        "numberPassing": 65,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      }
    ],
    "failureDetails": [
      {
        "testClass": "spoon.test.template.PatternTest",
        "testMethod": "testGenerateMethodWithSelfReferences",
        "failureName": "java.lang.AssertionError",
        "detail": "expected:\u003c[spoon.test.generated.ACloneOfAClassWithMethodsAndRefs, void, spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$1Bar, java.lang.Object, spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$Local]\u003e but was:\u003c[spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$Bar, spoon.test.generated.ACloneOfAClassWithMethodsAndRefs, void, java.lang.Object, spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$Local]\u003e",
        "isError": false
      },
      {
        "testClass": "spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest",
        "testMethod": "initializationError",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: spoon.support.reflect.declaration.CtPackageImpl@1",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.TemplateTest",
        "testMethod": "testSimpleTemplate",
        "failureName": "spoon.SpoonException",
        "detail": "Invocation of setter on CtFieldReference#name\u003cjava.lang.String\u003e failed",
        "isError": true
      },
      {
        "testClass": "spoon.test.executable.ExecutableTest",
        "testMethod": "testShadowValueOf",
        "failureName": "java.lang.AssertionError",
        "isError": false
      },
      {
        "testClass": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
        "testMethod": "testStaticClasses",
        "failureName": "java.lang.AssertionError",
        "isError": false
      },
      {
        "testClass": "spoon.testing.CtPackageAssertTest",
        "testMethod": "testEqualityBetweenTwoDifferentCtPackage",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.AssertionError\u003e but was\u003cspoon.SpoonException\u003e",
        "isError": true
      },
      {
        "testClass": "spoon.test.ctClass.CtClassTest",
        "testMethod": "testAllTypeReferencesToALocalTypeShouldNotStartWithNumber",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "spoon.test.main.MainTest",
        "testMethod": "test",
        "failureName": "java.lang.AssertionError",
        "isError": false
      },
      {
        "testClass": "spoon.test.refactoring.RefactoringTest",
        "testMethod": "testRefactoringClassChangeAllCtTypeReferenceAssociatedWithClassConcerned",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1X",
        "isError": true
      },
      {
        "testClass": "spoon.test.refactoring.RefactoringTest",
        "testMethod": "testThisInConstructorAfterATransformation",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1X",
        "isError": true
      },
      {
        "testClass": "spoon.test.query_function.VariableReferencesTest",
        "testMethod": "testParameterReferenceFunction",
        "failureName": "java.lang.IndexOutOfBoundsException",
        "detail": "Index: 0, Size: 0",
        "isError": true
      },
      {
        "testClass": "spoon.test.main.MainTest",
        "testMethod": "testMain_checkShadow",
        "failureName": "java.lang.AssertionError",
        "isError": false
      },
      {
        "testClass": "spoon.test.query_function.VariableReferencesTest",
        "testMethod": "testVariableReferenceFunction",
        "failureName": "java.lang.IndexOutOfBoundsException",
        "detail": "Index: 0, Size: 0",
        "isError": true
      },
      {
        "testClass": "spoon.test.api.APITest",
        "testMethod": "testSetterInNodes",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "spoon.test.refactoring.RefactoringTest",
        "testMethod": "testTransformedInstanceofAfterATransformation",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 1X",
        "isError": true
      },
      {
        "testClass": "spoon.MavenLauncherTest",
        "testMethod": "mavenLauncherTestMultiModulesAndVariables",
        "failureName": "java.lang.AssertionError",
        "detail": "Content of classpath: ",
        "isError": false
      },
      {
        "testClass": "spoon.test.targeted.TargetedExpressionTest",
        "testMethod": "testTargetsOfFieldAccessInInnerClass",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "spoon.test.targeted.TargetedExpressionTest",
        "testMethod": "testTargetsOfInvInInnerClass",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "spoon.test.replace.ReplaceParametrizedTest",
        "testMethod": "testContract[CtPackage]",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: spoon.support.reflect.declaration.CtPackageImpl@1",
        "isError": true
      },
      {
        "testClass": "spoon.test.replace.ReplaceParametrizedTest",
        "testMethod": "testContract[CtModule]",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: spoon.support.reflect.declaration.CtPackageImpl@1",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "annotationOverrideFQNIsOK",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: Cache.Entry\u003cK",
        "isError": true
      },
      {
        "testClass": "spoon.test.parent.ContractOnSettersParametrizedTest",
        "testMethod": "testContract[public interface CtPackage extends spoon.reflect.declaration.CtNamedElement , spoon.reflect.declaration.CtShadowable {\n    @spoon.support.DerivedProperty\n    spoon.reflect.reference.CtPackageReference getReference();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    \u003cT extends spoon.reflect.declaration.CtPackage\u003e T addType(spoon.reflect.declaration.CtType\u003c?\u003e arg0);\n\n    java.lang.String getQualifiedName();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    void removeType(spoon.reflect.declaration.CtType\u003c?\u003e arg0);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    java.util.Set\u003cspoon.reflect.declaration.CtType\u003c?\u003e\u003e getTypes();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    \u003cT extends spoon.reflect.declaration.CtPackage\u003e T setPackages(java.util.Set\u003cspoon.reflect.declaration.CtPackage\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    \u003cT extends spoon.reflect.declaration.CtPackage\u003e T addPackage(spoon.reflect.declaration.CtPackage arg0);\n\n    @spoon.support.DerivedProperty\n    spoon.reflect.declaration.CtModule getDeclaringModule();\n\n    @spoon.support.DerivedProperty\n    spoon.reflect.declaration.CtPackage getDeclaringPackage();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    boolean removePackage(spoon.reflect.declaration.CtPackage arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    \u003cT extends spoon.reflect.declaration.CtPackage\u003e T setTypes(java.util.Set\u003cspoon.reflect.declaration.CtType\u003c?\u003e\u003e arg0);\n\n    boolean isUnnamedPackage();\n\n    spoon.reflect.declaration.CtPackage clone();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    spoon.reflect.declaration.CtPackage getPackage(java.lang.String arg0);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    java.util.Set\u003cspoon.reflect.declaration.CtPackage\u003e getPackages();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    \u003cT extends spoon.reflect.declaration.CtType\u003c?\u003e\u003e T getType(java.lang.String arg0);\n\n    static final java.lang.String PACKAGE_SEPARATOR;\n\n    static final char PACKAGE_SEPARATOR_CHAR;\n\n    static final java.lang.String TOP_LEVEL_PACKAGE_NAME;\n}]",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: spoon.support.reflect.declaration.CtPackageImpl@1",
        "isError": true
      },
      {
        "testClass": "spoon.testing.CtElementAssertTest",
        "testMethod": "testEqualityBetweenTwoDifferentCtElement",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003cjava.lang.AssertionError\u003e but was\u003cjava.lang.NullPointerException\u003e",
        "isError": true
      },
      {
        "testClass": "spoon.MavenLauncherTest",
        "testMethod": "spoonMavenLauncherTest",
        "failureName": "java.lang.AssertionError",
        "detail": "expected:\u003c23\u003e but was:\u003c0\u003e",
        "isError": false
      },
      {
        "testClass": "spoon.test.invocations.InvocationTest",
        "testMethod": "testIssue1753",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: HashMap\u003c\u003e",
        "isError": true
      },
      {
        "testClass": "spoon.test.compilationunit.TestCompilationUnit",
        "testMethod": "testGetUnitTypeWorksWithCreatedObjects",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: package",
        "isError": true
      },
      {
        "testClass": "spoon.test.template.PatternTest",
        "testMethod": "testGenerateClassWithSelfReferences",
        "failureName": "java.lang.AssertionError",
        "detail": "expected:\u003c[spoon.test.generated.ACloneOfAClassWithMethodsAndRefs, void, boolean, spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$1Bar, java.lang.Object, int, spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$Local]\u003e but was:\u003c[spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$Bar, spoon.test.generated.ACloneOfAClassWithMethodsAndRefs, void, boolean, java.lang.Object, int, spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$Local]\u003e",
        "isError": false
      },
      {
        "testClass": "spoon.test.targeted.TargetedExpressionTest",
        "testMethod": "testClassDeclaredInALambda",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: 3InnerSubscriber",
        "isError": true
      },
      {
        "testClass": "spoon.testing.CtPackageAssertTest",
        "testMethod": "testAddTypeToPackage",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: package",
        "isError": true
      },
      {
        "testClass": "spoon.test.parent.ContractOnSettersParametrizedTest",
        "testMethod": "testContract[public interface CtModule extends spoon.reflect.declaration.CtNamedElement {\n    @spoon.support.DerivedProperty\n    spoon.reflect.reference.CtModuleReference getReference();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    spoon.reflect.declaration.CtPackage getRootPackage();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setRootPackage(spoon.reflect.declaration.CtPackage arg0);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    java.util.List\u003cspoon.reflect.declaration.CtModuleDirective\u003e getModuleDirectives();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.REQUIRED_MODULE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtModuleRequirement\u003e getRequiredModules();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.EXPORTED_PACKAGE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtPackageExport\u003e getExportedPackages();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.OPENED_PACKAGE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtPackageExport\u003e getOpenedPackages();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.SERVICE_TYPE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtUsedService\u003e getUsedServices();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.PROVIDED_SERVICE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtProvidedService\u003e getProvidedServices();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.MODIFIER)\n    boolean isOpenModule();\n\n    @spoon.support.DerivedProperty\n    boolean isUnnamedModule();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODIFIER)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setIsOpenModule(boolean arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setModuleDirectives(java.util.List\u003cspoon.reflect.declaration.CtModuleDirective\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addModuleDirective(spoon.reflect.declaration.CtModuleDirective arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addModuleDirectiveAt(int arg0, spoon.reflect.declaration.CtModuleDirective arg1);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeModuleDirective(spoon.reflect.declaration.CtModuleDirective arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SERVICE_TYPE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setUsedServices(java.util.List\u003cspoon.reflect.declaration.CtUsedService\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SERVICE_TYPE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addUsedService(spoon.reflect.declaration.CtUsedService arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SERVICE_TYPE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeUsedService(spoon.reflect.declaration.CtUsedService arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPORTED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setExportedPackages(java.util.List\u003cspoon.reflect.declaration.CtPackageExport\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPORTED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addExportedPackage(spoon.reflect.declaration.CtPackageExport arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPORTED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeExportedPackage(spoon.reflect.declaration.CtPackageExport arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.OPENED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setOpenedPackages(java.util.List\u003cspoon.reflect.declaration.CtPackageExport\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.OPENED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addOpenedPackage(spoon.reflect.declaration.CtPackageExport arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.OPENED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeOpenedPackage(spoon.reflect.declaration.CtPackageExport arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.REQUIRED_MODULE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setRequiredModules(java.util.List\u003cspoon.reflect.declaration.CtModuleRequirement\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.REQUIRED_MODULE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addRequiredModule(spoon.reflect.declaration.CtModuleRequirement arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.REQUIRED_MODULE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeRequiredModule(spoon.reflect.declaration.CtModuleRequirement arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.PROVIDED_SERVICE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setProvidedServices(java.util.List\u003cspoon.reflect.declaration.CtProvidedService\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.PROVIDED_SERVICE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addProvidedService(spoon.reflect.declaration.CtProvidedService arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.PROVIDED_SERVICE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeProvidedService(spoon.reflect.declaration.CtProvidedService arg0);\n\n    spoon.reflect.declaration.CtModule clone();\n\n    static final java.lang.String TOP_LEVEL_MODULE_NAME;\n}]",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: spoon.support.reflect.declaration.CtPackageImpl@1",
        "isError": true
      },
      {
        "testClass": "spoon.test.compilationunit.TestCompilationUnit",
        "testMethod": "testNewlyCreatedCUWouldGetAPartialPosition",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: new",
        "isError": true
      },
      {
        "testClass": "spoon.test.targeted.TargetedExpressionTest",
        "testMethod": "testCtThisAccess",
        "failureName": "java.lang.IndexOutOfBoundsException",
        "detail": "Index: 0, Size: 0",
        "isError": true
      },
      {
        "testClass": "spoon.test.refactoring.MethodsRefactoringTest",
        "testMethod": "testSubInheritanceHierarchyFunction",
        "failureName": "java.lang.AssertionError",
        "detail": "The spoon.test.refactoring.parameter.testclasses.TypeB$1Local not found",
        "isError": false
      },
      {
        "testClass": "spoon.test.main.MainTest",
        "testMethod": "testTest",
        "failureName": "spoon.SpoonException",
        "detail": "spoon.SpoonException: The given identifier does not respect Java definition of an identifier: String[]",
        "isError": true
      },
      {
        "testClass": "spoon.test.annotation.AnnotationTest",
        "testMethod": "testGetAnnotationFromParameter",
        "failureName": "spoon.SpoonException",
        "detail": "The given identifier does not respect Java definition of an identifier: this",
        "isError": true
      },
      {
        "testClass": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
        "testMethod": "testSrcMainJava",
        "failureName": "spoon.support.SpoonClassNotFoundException",
        "detail": "cannot load class: spoon.pattern.PatternParameterConfigurator$Result",
        "isError": true
      },
      {
        "testClass": "spoon.test.query_function.VariableReferencesTest",
        "testMethod": "testCheckModelConsistency",
        "failureName": "java.lang.IndexOutOfBoundsException",
        "detail": "Index: 0, Size: 0",
        "isError": true
      }
    ]
  },
  "reproductionBuggyBuild": {
    "reproductionDateBeginning": "Jul 18, 2018 3:21:45 PM",
    "reproductionDateEnd": "Jul 18, 2018 3:43:56 PM",
    "totalDuration": 1325,
    "processDurations": {
      "cloning": {
        "nbSteps": 1,
        "totalDuration": 15,
        "stepNames": [
          "CloneRepository"
        ],
        "stepDurations": [
          15
        ]
      },
      "building": {
        "nbSteps": 2,
        "totalDuration": 92,
        "stepNames": [
          "CheckoutBuggyBuild",
          "BuildProject"
        ],
        "stepDurations": [
          8,
          84
        ]
      },
      "testing": {
        "nbSteps": 1,
        "totalDuration": 920,
        "stepNames": [
          "TestProject"
        ],
        "stepDurations": [
          920
        ]
      }
    },
    "projectRootPomPath": "./workspace/INRIA/spoon/405344762/pom.xml"
  },
  "patchDiff": {
    "files": {
      "numberAdded": 0,
      "numberChanged": 0,
      "numberDeleted": 0
    },
    "lines": {
      "numberAdded": 0,
      "numberDeleted": 0
    }
  },
  "type": "only_fail"
}