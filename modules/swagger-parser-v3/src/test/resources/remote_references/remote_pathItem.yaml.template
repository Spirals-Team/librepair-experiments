paths:
  "/pet":
    summary: summary
    description: description
    post:
      externalDocs:
        description: Find out more
        url: http://swagger.io
      tags:
      - pet
      summary: Add a new pet to the store
      description: ''
      operationId: addPet
      parameters: []
      responses:
        '405':
          description: Invalid input
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                title: header schema
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      requestBody:
        description: user to add to the system
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Test'
            examples:
              user:
                summary: User Example
                externalValue: 'http://foo.bar/examples/user-example.json'
          'application/xml':
            schema:
              $ref: '#/components/schemas/User'
            examples:
              user:
                summary: User Example in XML
                externalValue: 'http://foo.bar/examples/user-example.xml'
          'text/plain':
            examples:
              user:
                summary: User example in text plain format
                externalValue: 'http://foo.bar/examples/user-example.txt'
          '*/*':
            examples:
              user:
                summary: User example in other format
                externalValue: 'http://foo.bar/examples/user-example.whatever'
    servers:
    - url: http://petstore.swagger.io/v2
    parameters:
    - name: status
      in: query
      description: Status values that need to be considered for filter
      required: true
    - "$ref": "#/components/parameters/skipParam"
      in: query
components:
  schemas:
    Test:
      type: integer
      format: int32
    RemoteSchema:
      "$ref": "http://localhost:${dynamicPort}/remote/schema#/components/schemas/RemoteSchema"
    VeryComplexType:
      type: integer
      format: int32
    Order:
      type: object
      not:
        type: integer
        format: int32
      additionalProperties:
        type: integer
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    OrderRef:
      type: object
      not:
        type: integer
        format: int32
        "$ref": "#/components/schemas/Category"
      additionalProperties:
        type: integer
        "$ref": "http://localhost:${dynamicPort}/remote/schema#/components/schemas/User"
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      type: object
      required:
      - name
      - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          "$ref": "#/components/schemas/Category"
        user:
          type: string
          example: doggie
          "$ref": "http://localhost:${dynamicPort}/remote/schema#/components/schemas/User"
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            "$ref": "http://localhost:${dynamicPort}/remote/schema#/components/schemas/ExampleSchema"
        status:
          type: string
          description: pet status in the store
          enum:
          - available
          - pending
          - sold
      xml:
        name: Pet
    ApiResponse:
      type: object
      required:
      - name
      - photoUrls
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  responses:
    Found:
      description: Entity not found.
      "$ref": "http://localhost:${dynamicPort}/remote/response#/responses/RemoteResponse"
    NotFound:
      description: Entity not found.
    IllegalInput:
      description: Illegal input for operation.
      headers:
        X-Ref-Limit-Limit:
          "$ref": "#/components/headers/X-Rate-Limit-Reset"
      links:
        address:
          "$ref": "#/components/links/unsubscribe"
    GeneralError:
      description: General Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ExtendedErrorModel'
  parameters:
    contentParameter:
      in: query
      name: coordinates
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ExtendedErrorModel'
      examples:
        cat:
          summary: An example of a cat
          value:
            name: Fluffy
            petType: Cat
            color: White
            gender: male
            breed: Persian
    refParam:
      "$ref": "#/components/parameters/limitParam"
    remoteParameter:
      "$ref": "http://localhost:${dynamicPort}/remote/parameter"
    newParam:
      name: skip
      in: query
      description: number of items to skip
      required: true
      schema:
        type: integer
        format: int32
        "$ref": "#/components/schemas/Tag"
    skipParam:
      name: skip
      in: query
      description: number of items to skip
      required: true
      schema:
        type: integer
        format: int32
    limitParam:
      name: limit
      in: query
      description: max records to return
      required: true
      schema:
        type: integer
        format: int32
  examples:
    referenceCat:
      "$ref": "http://localhost:${dynamicPort}/remote/example"
    cat:
      summary: An example of a cat
      value:
        name: Fluffy
        petType: Cat
        color: White
        gender: male
        breed: Persian
    dog:
      summary: An example of a dog with a cat's name
      value:
        name: Puma
        petType: Dog
        color: Black
        gender: Female
        breed: Mixed
    frog:
      $ref: "#/components/examples/cat"
  requestBodies:
    reference:
      "$ref": "http://localhost:${dynamicPort}/remote/requestBody#/requestBodies/remote_requestBody"
    requestBody1:
      description: request body in components
      content:
        application/json:
          description: Pet object that needs to be added to the store
          schema:
            "$ref": "#/components/schemas/Pet"
        application/xml:
          description: Pet object that needs to be added to the store
          schema:
            "$ref": "#/components/schemas/Pet"
    requestBody2:
      content:
        application/json:
          description: List of user object
          schema:
            type: array
            items:
              "$ref": "#/components/schemas/User"
    requestBody3:
      "$ref": "#/components/requestBodies/requestBody2"
