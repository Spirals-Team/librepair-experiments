/*
 *    Copyright 2017 OICR
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/*
 * GA4GH Tool Discovery API
 * Proposed API for GA4GH (Global Alliance for Genomics & Health) tool repositories. A tool consists of a set of container images that are paired with a set of documents. Examples of documents include CWL (Common Workflow Language) or WDL (Workflow Description Language) or NFL (Nextflow) that describe how to use those images and a set of specifications for those images (examples are Dockerfiles or Singularity recipes) that describe how to reproduce those images in the future. We use the following terminology, a \"container image\" describes a container as stored at rest on a filesystem, a \"tool\" describes one of the triples as described above. In practice, examples of \"tools\" include CWL CommandLineTools, CWL Workflows, WDL workflows, and Nextflow workflows that reference containers in formats such as Docker or Singularity.
 *
 * OpenAPI spec version: 2.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import javax.validation.constraints.NotNull;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * A tool version describes a particular iteration of a tool as described by a reference to a specific image and/or documents.
 */
@ApiModel(description = "A tool version describes a particular iteration of a tool as described by a reference to a specific image and/or documents.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2018-03-05T20:18:38.928Z")
public class ToolVersion {
    @JsonProperty("name")
    private String name = null;

    @JsonProperty("url")
    private String url = null;

    @JsonProperty("id")
    private String id = null;

    @JsonProperty("image")
    private String image = null;

    @JsonProperty("registry_url")
    private String registryUrl = null;

    @JsonProperty("image_name")
    private String imageName = null;

    @JsonProperty("descriptor_type")
    private List<DescriptorType> descriptorType = null;

    @JsonProperty("containerfile")
    private Boolean containerfile = null;

    @JsonProperty("meta_version")
    private String metaVersion = null;

    @JsonProperty("verified")
    private Boolean verified = null;

    @JsonProperty("verified_source")
    private String verifiedSource = null;

    public ToolVersion name(String name) {
        this.name = name;
        return this;
    }

    /**
     * The name of the version.
     *
     * @return name
     **/
    @JsonProperty("name")
    @ApiModelProperty(value = "The name of the version.")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public ToolVersion url(String url) {
        this.url = url;
        return this;
    }

    /**
     * The URL for this tool in this registry
     *
     * @return url
     **/
    @JsonProperty("url")
    @ApiModelProperty(example = "http://agora.broadinstitute.org/tools/123456/1", required = true, value = "The URL for this tool in this registry")
    @NotNull
    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public ToolVersion id(String id) {
        this.id = id;
        return this;
    }

    /**
     * An identifier of the version of this tool for this particular tool registry
     *
     * @return id
     **/
    @JsonProperty("id")
    @ApiModelProperty(example = "v1", required = true, value = "An identifier of the version of this tool for this particular tool registry")
    @NotNull
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public ToolVersion image(String image) {
        this.image = image;
        return this;
    }

    /**
     * The docker path to the image (and version) for this tool
     *
     * @return image
     **/
    @JsonProperty("image")
    @ApiModelProperty(example = "quay.io/seqware/seqware_full/1.1", value = "The docker path to the image (and version) for this tool")
    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public ToolVersion registryUrl(String registryUrl) {
        this.registryUrl = registryUrl;
        return this;
    }

    /**
     * A URL to a Singularity registry is provided when a specific type of image does not use ids in the Docker format. Used along with image_name to locate a specific image.
     *
     * @return registryUrl
     **/
    @JsonProperty("registry_url")
    @ApiModelProperty(value = "A URL to a Singularity registry is provided when a specific type of image does not use ids in the Docker format. Used along with image_name to locate a specific image.")
    public String getRegistryUrl() {
        return registryUrl;
    }

    public void setRegistryUrl(String registryUrl) {
        this.registryUrl = registryUrl;
    }

    public ToolVersion imageName(String imageName) {
        this.imageName = imageName;
        return this;
    }

    /**
     * Used in conjunction with a registry_url if provided to locate images
     *
     * @return imageName
     **/
    @JsonProperty("image_name")
    @ApiModelProperty(value = "Used in conjunction with a registry_url if provided to locate images")
    public String getImageName() {
        return imageName;
    }

    public void setImageName(String imageName) {
        this.imageName = imageName;
    }

    public ToolVersion descriptorType(List<DescriptorType> descriptorType) {
        this.descriptorType = descriptorType;
        return this;
    }

    public ToolVersion addDescriptorTypeItem(DescriptorType descriptorTypeItem) {
        if (this.descriptorType == null) {
            this.descriptorType = new ArrayList<DescriptorType>();
        }
        this.descriptorType.add(descriptorTypeItem);
        return this;
    }

    /**
     * The type (or types) of descriptors available.
     *
     * @return descriptorType
     **/
    @JsonProperty("descriptor_type")
    @ApiModelProperty(value = "The type (or types) of descriptors available.")
    public List<DescriptorType> getDescriptorType() {
        return descriptorType;
    }

    public void setDescriptorType(List<DescriptorType> descriptorType) {
        this.descriptorType = descriptorType;
    }

    public ToolVersion containerfile(Boolean containerfile) {
        this.containerfile = containerfile;
        return this;
    }

    /**
     * Reports if this tool has a containerfile available.
     *
     * @return containerfile
     **/
    @JsonProperty("containerfile")
    @ApiModelProperty(value = "Reports if this tool has a containerfile available.")
    public Boolean getContainerfile() {
        return containerfile;
    }

    public void setContainerfile(Boolean containerfile) {
        this.containerfile = containerfile;
    }

    public ToolVersion metaVersion(String metaVersion) {
        this.metaVersion = metaVersion;
        return this;
    }

    /**
     * The version of this tool version in the registry. Iterates when fields like the description, author, etc. are updated.
     *
     * @return metaVersion
     **/
    @JsonProperty("meta_version")
    @ApiModelProperty(required = true, value = "The version of this tool version in the registry. Iterates when fields like the description, author, etc. are updated.")
    @NotNull
    public String getMetaVersion() {
        return metaVersion;
    }

    public void setMetaVersion(String metaVersion) {
        this.metaVersion = metaVersion;
    }

    public ToolVersion verified(Boolean verified) {
        this.verified = verified;
        return this;
    }

    /**
     * Reports whether this tool has been verified by a specific organization or individual
     *
     * @return verified
     **/
    @JsonProperty("verified")
    @ApiModelProperty(value = "Reports whether this tool has been verified by a specific organization or individual")
    public Boolean getVerified() {
        return verified;
    }

    public void setVerified(Boolean verified) {
        this.verified = verified;
    }

    public ToolVersion verifiedSource(String verifiedSource) {
        this.verifiedSource = verifiedSource;
        return this;
    }

    /**
     * Source of metadata that can support a verified tool, such as an email or URL
     *
     * @return verifiedSource
     **/
    @JsonProperty("verified_source")
    @ApiModelProperty(value = "Source of metadata that can support a verified tool, such as an email or URL")
    public String getVerifiedSource() {
        return verifiedSource;
    }

    public void setVerifiedSource(String verifiedSource) {
        this.verifiedSource = verifiedSource;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ToolVersion toolVersion = (ToolVersion)o;
        return Objects.equals(this.name, toolVersion.name) && Objects.equals(this.url, toolVersion.url) && Objects
            .equals(this.id, toolVersion.id) && Objects.equals(this.image, toolVersion.image) && Objects
            .equals(this.registryUrl, toolVersion.registryUrl) && Objects.equals(this.imageName, toolVersion.imageName) && Objects
            .equals(this.descriptorType, toolVersion.descriptorType) && Objects.equals(this.containerfile, toolVersion.containerfile)
            && Objects.equals(this.metaVersion, toolVersion.metaVersion) && Objects.equals(this.verified, toolVersion.verified) && Objects
            .equals(this.verifiedSource, toolVersion.verifiedSource);
    }

    @Override
    public int hashCode() {
        return Objects
            .hash(name, url, id, image, registryUrl, imageName, descriptorType, containerfile, metaVersion, verified, verifiedSource);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ToolVersion {\n");

        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    image: ").append(toIndentedString(image)).append("\n");
        sb.append("    registryUrl: ").append(toIndentedString(registryUrl)).append("\n");
        sb.append("    imageName: ").append(toIndentedString(imageName)).append("\n");
        sb.append("    descriptorType: ").append(toIndentedString(descriptorType)).append("\n");
        sb.append("    containerfile: ").append(toIndentedString(containerfile)).append("\n");
        sb.append("    metaVersion: ").append(toIndentedString(metaVersion)).append("\n");
        sb.append("    verified: ").append(toIndentedString(verified)).append("\n");
        sb.append("    verifiedSource: ").append(toIndentedString(verifiedSource)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

