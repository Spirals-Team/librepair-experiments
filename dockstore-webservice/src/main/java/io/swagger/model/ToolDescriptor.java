/*
 *    Copyright 2017 OICR
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/*
 * GA4GH Tool Discovery API
 * Proposed API for GA4GH (Global Alliance for Genomics & Health) tool repositories. A tool consists of a set of container images that are paired with a set of documents. Examples of documents include CWL (Common Workflow Language) or WDL (Workflow Description Language) or NFL (Nextflow) that describe how to use those images and a set of specifications for those images (examples are Dockerfiles or Singularity recipes) that describe how to reproduce those images in the future. We use the following terminology, a \"container image\" describes a container as stored at rest on a filesystem, a \"tool\" describes one of the triples as described above. In practice, examples of \"tools\" include CWL CommandLineTools, CWL Workflows, WDL workflows, and Nextflow workflows that reference containers in formats such as Docker or Singularity.
 *
 * OpenAPI spec version: 2.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.model;

import java.util.Objects;

import javax.validation.constraints.NotNull;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * A tool descriptor is a metadata document that describes one or more tools.
 */
@ApiModel(description = "A tool descriptor is a metadata document that describes one or more tools.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2018-03-05T20:18:38.928Z")
public class ToolDescriptor {
    @JsonProperty("type")
    private DescriptorType type = null;

    @JsonProperty("descriptor")
    private String descriptor = null;

    @JsonProperty("url")
    private String url = null;

    public ToolDescriptor type(DescriptorType type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     *
     * @return type
     **/
    @JsonProperty("type")
    @ApiModelProperty(required = true, value = "")
    @NotNull
    public DescriptorType getType() {
        return type;
    }

    public void setType(DescriptorType type) {
        this.type = type;
    }

    public ToolDescriptor descriptor(String descriptor) {
        this.descriptor = descriptor;
        return this;
    }

    /**
     * The descriptor that represents this version of the tool.
     *
     * @return descriptor
     **/
    @JsonProperty("descriptor")
    @ApiModelProperty(value = "The descriptor that represents this version of the tool.")
    public String getDescriptor() {
        return descriptor;
    }

    public void setDescriptor(String descriptor) {
        this.descriptor = descriptor;
    }

    public ToolDescriptor url(String url) {
        this.url = url;
        return this;
    }

    /**
     * Optional url to the underlying tool descriptor, should include version information, and can include a git hash
     *
     * @return url
     **/
    @JsonProperty("url")
    @ApiModelProperty(example = "https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/pcawg_delly_workflow/ea2a5db69bd20a42976838790bc29294df3af02b/delly_docker/Delly.cwl", value = "Optional url to the underlying tool descriptor, should include version information, and can include a git hash")
    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ToolDescriptor toolDescriptor = (ToolDescriptor)o;
        return Objects.equals(this.type, toolDescriptor.type) && Objects.equals(this.descriptor, toolDescriptor.descriptor) && Objects
            .equals(this.url, toolDescriptor.url);
    }

    @Override
    public int hashCode() {
        return Objects.hash(type, descriptor, url);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ToolDescriptor {\n");

        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    descriptor: ").append(toIndentedString(descriptor)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

