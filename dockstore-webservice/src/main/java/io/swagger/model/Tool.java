/*
 *    Copyright 2017 OICR
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/*
 * GA4GH Tool Discovery API
 * Proposed API for GA4GH (Global Alliance for Genomics & Health) tool repositories. A tool consists of a set of container images that are paired with a set of documents. Examples of documents include CWL (Common Workflow Language) or WDL (Workflow Description Language) or NFL (Nextflow) that describe how to use those images and a set of specifications for those images (examples are Dockerfiles or Singularity recipes) that describe how to reproduce those images in the future. We use the following terminology, a \"container image\" describes a container as stored at rest on a filesystem, a \"tool\" describes one of the triples as described above. In practice, examples of \"tools\" include CWL CommandLineTools, CWL Workflows, WDL workflows, and Nextflow workflows that reference containers in formats such as Docker or Singularity.
 *
 * OpenAPI spec version: 2.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import javax.validation.constraints.NotNull;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * A tool (or described tool) is defined as a tuple of a descriptor file (which potentially consists of multiple files), a set of container images, and a set of instructions for creating those images.
 */
@ApiModel(description = "A tool (or described tool) is defined as a tuple of a descriptor file (which potentially consists of multiple files), a set of container images, and a set of instructions for creating those images.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2018-03-05T20:18:38.928Z")
public class Tool {
    @JsonProperty("url")
    private String url = null;

    @JsonProperty("id")
    private String id = null;

    @JsonProperty("organization")
    private String organization = null;

    @JsonProperty("toolname")
    private String toolname = null;

    @JsonProperty("toolclass")
    private ToolClass toolclass = null;

    @JsonProperty("description")
    private String description = null;

    @JsonProperty("author")
    private String author = null;

    @JsonProperty("meta_version")
    private String metaVersion = null;

    @JsonProperty("contains")
    private List<String> contains = null;

    @JsonProperty("verified")
    private Boolean verified = null;

    @JsonProperty("verified_source")
    private String verifiedSource = null;

    @JsonProperty("signed")
    private Boolean signed = null;

    @JsonProperty("versions")
    private List<ToolVersion> versions = new ArrayList<ToolVersion>();

    public Tool url(String url) {
        this.url = url;
        return this;
    }

    /**
     * The URL for this tool in this registry
     *
     * @return url
     **/
    @JsonProperty("url")
    @ApiModelProperty(example = "http://agora.broadinstitute.org/tools/123456", required = true, value = "The URL for this tool in this registry")
    @NotNull
    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public Tool id(String id) {
        this.id = id;
        return this;
    }

    /**
     * A unique identifier of the tool, scoped to this registry
     *
     * @return id
     **/
    @JsonProperty("id")
    @ApiModelProperty(example = "123456", required = true, value = "A unique identifier of the tool, scoped to this registry")
    @NotNull
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public Tool organization(String organization) {
        this.organization = organization;
        return this;
    }

    /**
     * The organization that published the image.
     *
     * @return organization
     **/
    @JsonProperty("organization")
    @ApiModelProperty(required = true, value = "The organization that published the image.")
    @NotNull
    public String getOrganization() {
        return organization;
    }

    public void setOrganization(String organization) {
        this.organization = organization;
    }

    public Tool toolname(String toolname) {
        this.toolname = toolname;
        return this;
    }

    /**
     * The name of the tool.
     *
     * @return toolname
     **/
    @JsonProperty("toolname")
    @ApiModelProperty(value = "The name of the tool.")
    public String getToolname() {
        return toolname;
    }

    public void setToolname(String toolname) {
        this.toolname = toolname;
    }

    public Tool toolclass(ToolClass toolclass) {
        this.toolclass = toolclass;
        return this;
    }

    /**
     * Get toolclass
     *
     * @return toolclass
     **/
    @JsonProperty("toolclass")
    @ApiModelProperty(required = true, value = "")
    @NotNull
    public ToolClass getToolclass() {
        return toolclass;
    }

    public void setToolclass(ToolClass toolclass) {
        this.toolclass = toolclass;
    }

    public Tool description(String description) {
        this.description = description;
        return this;
    }

    /**
     * The description of the tool.
     *
     * @return description
     **/
    @JsonProperty("description")
    @ApiModelProperty(value = "The description of the tool.")
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Tool author(String author) {
        this.author = author;
        return this;
    }

    /**
     * Contact information for the author of this tool entry in the registry. (More complex authorship information is handled by the descriptor)
     *
     * @return author
     **/
    @JsonProperty("author")
    @ApiModelProperty(required = true, value = "Contact information for the author of this tool entry in the registry. (More complex authorship information is handled by the descriptor)")
    @NotNull
    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public Tool metaVersion(String metaVersion) {
        this.metaVersion = metaVersion;
        return this;
    }

    /**
     * The version of this tool in the registry. Iterates when fields like the description, author, etc. are updated.
     *
     * @return metaVersion
     **/
    @JsonProperty("meta_version")
    @ApiModelProperty(required = true, value = "The version of this tool in the registry. Iterates when fields like the description, author, etc. are updated.")
    @NotNull
    public String getMetaVersion() {
        return metaVersion;
    }

    public void setMetaVersion(String metaVersion) {
        this.metaVersion = metaVersion;
    }

    public Tool contains(List<String> contains) {
        this.contains = contains;
        return this;
    }

    public Tool addContainsItem(String containsItem) {
        if (this.contains == null) {
            this.contains = new ArrayList<String>();
        }
        this.contains.add(containsItem);
        return this;
    }

    /**
     * An array of IDs for the applications that are stored inside this tool
     *
     * @return contains
     **/
    @JsonProperty("contains")
    @ApiModelProperty(example = "\"https://bio.tools/tool/mytum.de/SNAP2/1\"", value = "An array of IDs for the applications that are stored inside this tool")
    public List<String> getContains() {
        return contains;
    }

    public void setContains(List<String> contains) {
        this.contains = contains;
    }

    public Tool verified(Boolean verified) {
        this.verified = verified;
        return this;
    }

    /**
     * Reports whether this tool has been verified by a specific organization or individual
     *
     * @return verified
     **/
    @JsonProperty("verified")
    @ApiModelProperty(value = "Reports whether this tool has been verified by a specific organization or individual")
    public Boolean getVerified() {
        return verified;
    }

    public void setVerified(Boolean verified) {
        this.verified = verified;
    }

    public Tool verifiedSource(String verifiedSource) {
        this.verifiedSource = verifiedSource;
        return this;
    }

    /**
     * Source of metadata that can support a verified tool, such as an email or URL
     *
     * @return verifiedSource
     **/
    @JsonProperty("verified_source")
    @ApiModelProperty(value = "Source of metadata that can support a verified tool, such as an email or URL")
    public String getVerifiedSource() {
        return verifiedSource;
    }

    public void setVerifiedSource(String verifiedSource) {
        this.verifiedSource = verifiedSource;
    }

    public Tool signed(Boolean signed) {
        this.signed = signed;
        return this;
    }

    /**
     * Reports whether this tool has been signed.
     *
     * @return signed
     **/
    @JsonProperty("signed")
    @ApiModelProperty(value = "Reports whether this tool has been signed.")
    public Boolean getSigned() {
        return signed;
    }

    public void setSigned(Boolean signed) {
        this.signed = signed;
    }

    public Tool versions(List<ToolVersion> versions) {
        this.versions = versions;
        return this;
    }

    public Tool addVersionsItem(ToolVersion versionsItem) {
        this.versions.add(versionsItem);
        return this;
    }

    /**
     * A list of versions for this tool
     *
     * @return versions
     **/
    @JsonProperty("versions")
    @ApiModelProperty(required = true, value = "A list of versions for this tool")
    @NotNull
    public List<ToolVersion> getVersions() {
        return versions;
    }

    public void setVersions(List<ToolVersion> versions) {
        this.versions = versions;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Tool tool = (Tool)o;
        return Objects.equals(this.url, tool.url) && Objects.equals(this.id, tool.id) && Objects
            .equals(this.organization, tool.organization) && Objects.equals(this.toolname, tool.toolname) && Objects
            .equals(this.toolclass, tool.toolclass) && Objects.equals(this.description, tool.description) && Objects
            .equals(this.author, tool.author) && Objects.equals(this.metaVersion, tool.metaVersion) && Objects
            .equals(this.contains, tool.contains) && Objects.equals(this.verified, tool.verified) && Objects
            .equals(this.verifiedSource, tool.verifiedSource) && Objects.equals(this.signed, tool.signed) && Objects
            .equals(this.versions, tool.versions);
    }

    @Override
    public int hashCode() {
        return Objects
            .hash(url, id, organization, toolname, toolclass, description, author, metaVersion, contains, verified, verifiedSource, signed,
                versions);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Tool {\n");

        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
        sb.append("    toolname: ").append(toIndentedString(toolname)).append("\n");
        sb.append("    toolclass: ").append(toIndentedString(toolclass)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    author: ").append(toIndentedString(author)).append("\n");
        sb.append("    metaVersion: ").append(toIndentedString(metaVersion)).append("\n");
        sb.append("    contains: ").append(toIndentedString(contains)).append("\n");
        sb.append("    verified: ").append(toIndentedString(verified)).append("\n");
        sb.append("    verifiedSource: ").append(toIndentedString(verifiedSource)).append("\n");
        sb.append("    signed: ").append(toIndentedString(signed)).append("\n");
        sb.append("    versions: ").append(toIndentedString(versions)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

