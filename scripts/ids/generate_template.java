package {package_name};

import javax.annotation.concurrent.Immutable;
import net.tridentsdk.util.Int2ReferenceOpenHashMap;

/**
 * Represents the type of a block or an item.
 *
 * GENERATED BY /scripts/ids/generate.py
 *
 * @author TridentSDK
 * @since 0.3-alpha-DP
 */
@Immutable
public enum {class_name} {{

    // BEGIN BLOCKS

{blocks}
    // BEGIN ITEMS

{items}
{fields}
{methods}
    /**
     * The constructor for all {class_name}s.
     */
{constructor}
{is_item_method}

    @Override
    public String toString() {{
        return this.stringId;
    }}

    /**
     * Mapping of ID values to their respective substance,
     * substances can contain 400+ entries and that is not
     * worth using O(n) iteration.
     */
    private static final Int2ReferenceOpenHashMap<{class_name}> SUBSTANCE_MAP = new Int2ReferenceOpenHashMap<>();
    static {{
        for ({class_name} s : values()) {{
            SUBSTANCE_MAP.put(s.id, s);
        }}
        SUBSTANCE_MAP.trim();
    }}

    /**
     * Obtains the substance that is represented by the
     * given ID value.
     *
     * @param id the ID value of the substance to find
     * @return the substance
     */
    public static {class_name} of(int id) {{
        {class_name} substance = SUBSTANCE_MAP.get(id);
        if (substance == null) {{
            throw new IndexOutOfBoundsException("Provided {class_name} ID (" + id + ") is out of bounds");
        }}
        return substance;
    }}

}}