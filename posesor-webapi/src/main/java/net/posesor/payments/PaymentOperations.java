package net.posesor.payments;

import lombok.val;
import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;

import javax.validation.constraints.NotNull;
import java.util.List;
import java.util.function.Function;

/**
 * Exposes CRUD operations related to Payments.
 */
public final class PaymentOperations {

    private final MongoOperations provider;

    private final String principalName;

    private final String collectionName;

    // criteria about document's principal.
    private final Criteria principalIs;

    // criteria about document's _id
    private final Function<String, Criteria> idIs;

    /**
     * Creates a new instance of {@link PaymentOperations}.
     *
     * @param provider mongo operations provider.
     * @param principalName name of the currently logged user.
     */

    public PaymentOperations(MongoOperations provider, String principalName) {
        this(provider, principalName, provider.getCollectionName(PaymentDbModel.class));
    }

    /**
     * This constructor is created  mainly for testing purposes, in production code
     * use {@link PaymentOperations(MongoOperations, String)}.
     *
     * @param provider mongo operations provider.
     * @param principalName name of the currently logged user.
     * @param collectionName name of mongo collection where Charges document are collected.
     */
    public PaymentOperations(MongoOperations provider, String principalName, String collectionName) {
        this.provider = provider;
        this.principalName = principalName;
        this.collectionName = collectionName;
        this.principalIs = Criteria.where("principalName").is(principalName);
        this.idIs = id -> Criteria.where("_id").is(id);
    }

    /**
     * Stores given model in the storage.
     * <p>
     * Inserted model is changed by updating {@link PaymentDbModel#principalName} with name of the current user.
     * {@link PaymentDbModel#paymentId} to unique value generated by operations and
     * {@link PaymentDbModel#principalName} to name of principal provided in {@link PaymentOperations} constructor.
     *
     * @param dbModel Payment model which need to be stored.
     */
    public void insert(PaymentDbModel dbModel) {
        dbModel.setPrincipalName(principalName);
        provider.insert(dbModel);
    }

    /**
     * Finds a payments with given documentId.
     *
     * @param paymentId id of the required charges.
     * @return payment with the given documentId or null if does not exist.
     */
    public PaymentDbModel get(String paymentId) {
        val query = Query.query(Criteria.where("paymentId").is(paymentId).andOperator(principalIs));
        return provider.findOne(query, PaymentDbModel.class);
    }

    /**
     * Finds all payments for current principal.
     * <p>
     * Methods is used by Autocomplete endpoints
     *
     * @return all payments for current user
     */
    public List<PaymentDbModel> getAll() {
        val query = Query.query(Criteria.where("principalName").is(principalName));
        return provider.find(query, PaymentDbModel.class);
    }

    /**
     * Finds all payments with provided title, created by current user.
     *
     * @param paymentTitle payment title from {@link PaymentDbModel.PaymentEntry}
     * @return all payments for current user with provided payment title
     */
    public List<PaymentDbModel> getByPaymentTitle(String paymentTitle) {
        val query = Query.query(Criteria.where("entries.paymentTitle").is(paymentTitle).andOperator(principalIs));
        return provider.find(query, PaymentDbModel.class);
    }

    /**
     * Removes {@link PaymentDbModel} from storage.
     * <p>
     * if documentId is not valid, method does nothing
     *
     * @param paymentId if of the document.
     */
    public void remove(String paymentId) {
        val query = Query.query(idIs.apply(paymentId).andOperator(principalIs));
        provider.remove(query, collectionName);
    }

    /**
     * Updates in storage model to properties provided with updated parameter.
     * <p>
     * Update operation is available only if already stored model has same principal as the PaymentOperations.
     *
     * @param dbModel new data for updated model.
     */
    public void update(PaymentDbModel dbModel) {
        val query = Query.query(idIs.apply(dbModel.getPaymentId()).andOperator(principalIs));
        if (!provider.exists(query, collectionName)) return;

        dbModel.setPrincipalName(principalName);
        provider.save(dbModel);
    }

    /**
     * Returns latest models inserted into storage.
     * <p>
     * Returned scope should be intuitive accepted by end user, so initially will start with 'get all' implementation.
     *
     * @return set of models or empty list if none found.
     */
    @NotNull
    public List<PaymentDbModel> getLatests() {
        val query = Query.query(principalIs);
        return provider.find(query, PaymentDbModel.class);
    }
}
