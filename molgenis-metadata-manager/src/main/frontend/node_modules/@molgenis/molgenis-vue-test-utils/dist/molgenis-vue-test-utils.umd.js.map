{"version":3,"file":null,"sources":["../src/molgenis-vue-test-utils.js"],"sourcesContent":["import { expect } from 'chai'\n\n/**\n * A utility function to help you in testing Vuex actions\n *\n * @example <caption>Example of how to call the testAction function</caption>\n *\n *  ---------actions.js-----------\n *\n *  import api from 'whatever-you-use-as-api'\n *\n *  export const GET_A_NICE_RESPONSE = '__GET_A_NICE_RESPONSE__'\n *\n *  export default {\n *    [GET_A_NICE_RESPONSE] ({commit}, id) {\n *      api.get('/api/response/' + id).then(response => {\n *        commit(SET_RESPONSE, response)\n *      }\n *    }\n *  }\n *\n *  -------actions.spec.js--------\n *\n *  import td from 'testdouble'\n *  import api from 'whatever-you-use-as-api'\n *  import { testAction } from '@molgenis/molgenis-js-test-utils'\n *  import actions from 'store/actions'\n *\n *  it('call an api, and call a mutation with the response', done => {\n *     const response = 'got a nice response'\n *\n *     const get = td.function('api.get')\n *     td.when(get('/api/response/my_id')).thenResolve(response)\n *     td.replace(api, 'get', get)\n *\n *     const options = {\n *       payload: 'my_id',\n *       expectedMutations: [\n *         {type: SET_RESPONSE, payload: response}\n *       ]\n *     }\n *\n *     testAction(actions.__GET_NICE_RESPONSE__, options, done)\n *  })\n *\n * @param action the action you want to test\n *\n * @param options an options object containing parameters that can be used in testing this action\n * @param options.payload the payload included in the action dispatch\n * @param options.state the state used in this specific action\n * @param options.expectedMutations an array of objects describing the mutations that are expected to be committed by this action\n * @param options.expectedActions an array of objects describing the actions that are expected to be dispatched by this action\n *\n * @param done used to call done() which closes the Promise from calling an asynchronous api\n */\nconst testAction = (action, options, done) => {\n  const payload = options.payload ? options.payload : null\n  const state = options.state ? options.state : {}\n  const expectedMutations = options.expectedMutations ? options.expectedMutations : []\n  const expectedActions = options.expectedActions ? options.expectedActions : []\n\n  let mutationCount = 0\n  let actionCount = 0\n\n  const commit = (type, payload) => {\n    const mutation = expectedMutations[mutationCount]\n\n    try {\n      expect(mutation.type).to.equal(type)\n      if (payload) {\n        expect(mutation.payload).to.deep.equal(payload)\n      }\n\n      mutationCount++\n      if (mutationCount >= expectedMutations.length && actionCount >= expectedActions.length) {\n        done()\n      }\n    } catch (error) {\n      done(error)\n    }\n  }\n\n  const dispatch = (type, payload) => {\n    const action = expectedActions[actionCount]\n\n    try {\n      expect(action.type).to.equal(type)\n      if (payload) {\n        expect(action.payload).to.deep.equal(payload)\n      }\n\n      actionCount++\n      if (actionCount >= expectedActions.length && mutationCount >= expectedMutations.length) {\n        done()\n      }\n    } catch (error) {\n      done(error)\n    }\n  }\n\n  action({commit, dispatch, state}, payload)\n\n  if (expectedMutations.length === 0 && expectedActions.length === 0) {\n    expect(mutationCount).to.equal(0)\n    expect(actionCount).to.equal(0)\n    done()\n  }\n}\n\nexport default {testAction}\n"],"names":["testAction","action","options","done","payload","state","expectedMutations","expectedActions","mutationCount","actionCount","commit","type","mutation","to","equal","deep","length","error","dispatch"],"mappings":";;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA,IAAMA,aAAa,SAAbA,UAAa,CAACC,MAAD,EAASC,OAAT,EAAkBC,IAAlB,EAA2B;MACtCC,UAAUF,QAAQE,OAAR,GAAkBF,QAAQE,OAA1B,GAAoC,IAApD;MACMC,QAAQH,QAAQG,KAAR,GAAgBH,QAAQG,KAAxB,GAAgC,EAA9C;MACMC,oBAAoBJ,QAAQI,iBAAR,GAA4BJ,QAAQI,iBAApC,GAAwD,EAAlF;MACMC,kBAAkBL,QAAQK,eAAR,GAA0BL,QAAQK,eAAlC,GAAoD,EAA5E;;MAEIC,gBAAgB,CAApB;MACIC,cAAc,CAAlB;;MAEMC,SAAS,SAATA,MAAS,CAACC,IAAD,EAAOP,OAAP,EAAmB;QAC1BQ,WAAWN,kBAAkBE,aAAlB,CAAjB;;QAEI;kBACKI,SAASD,IAAhB,EAAsBE,EAAtB,CAAyBC,KAAzB,CAA+BH,IAA/B;UACIP,OAAJ,EAAa;oBACJQ,SAASR,OAAhB,EAAyBS,EAAzB,CAA4BE,IAA5B,CAAiCD,KAAjC,CAAuCV,OAAvC;;;;UAIEI,iBAAiBF,kBAAkBU,MAAnC,IAA6CP,eAAeF,gBAAgBS,MAAhF,EAAwF;;;KAP1F,CAUE,OAAOC,KAAP,EAAc;WACTA,KAAL;;GAdJ;;MAkBMC,WAAW,SAAXA,QAAW,CAACP,IAAD,EAAOP,OAAP,EAAmB;QAC5BH,SAASM,gBAAgBE,WAAhB,CAAf;;QAEI;kBACKR,OAAOU,IAAd,EAAoBE,EAApB,CAAuBC,KAAvB,CAA6BH,IAA7B;UACIP,OAAJ,EAAa;oBACJH,OAAOG,OAAd,EAAuBS,EAAvB,CAA0BE,IAA1B,CAA+BD,KAA/B,CAAqCV,OAArC;;;;UAIEK,eAAeF,gBAAgBS,MAA/B,IAAyCR,iBAAiBF,kBAAkBU,MAAhF,EAAwF;;;KAP1F,CAUE,OAAOC,KAAP,EAAc;WACTA,KAAL;;GAdJ;;SAkBO,EAACP,cAAD,EAASQ,kBAAT,EAAmBb,YAAnB,EAAP,EAAkCD,OAAlC;;MAEIE,kBAAkBU,MAAlB,KAA6B,CAA7B,IAAkCT,gBAAgBS,MAAhB,KAA2B,CAAjE,EAAoE;gBAC3DR,aAAP,EAAsBK,EAAtB,CAAyBC,KAAzB,CAA+B,CAA/B;gBACOL,WAAP,EAAoBI,EAApB,CAAuBC,KAAvB,CAA6B,CAA7B;;;CAjDJ;;AAsDA,2BAAe,EAACd,sBAAD,EAAf;;;;"}