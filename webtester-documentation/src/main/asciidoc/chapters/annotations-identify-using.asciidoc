=== @IdentifyUsing

This annotation is used to tell the framework how the fragment(s) should be
resolved when a page fragment returning method is invoked. The annotation
provides all necessary information to identify the corresponding element(s) in
the DOM of the displayed page:

* `how`: Which `ByProducer` to use. I.e. `CssSelector`, `Id`, `XPath` etc.
Defaults to `CssSelector`.
* `value`: The value to be used by the mechanism.

Methods annotated with `@IdentifyUsing` must not have arguments and can only
return:

* Subclass of `PageFragment`
* `List` of subclass of `PageFragment`
* `Set` of subclass of `PageFragment`
* `Stream` of subclass of `PageFragment`

*Examples*

[source, java]
----
public interface FooPage extends Page {

    // using the default CSS Selector and an ID
    @IdentifyUsing("#foo")
    TextField fooField();

    // using an explicit ID selector
    @IdentifyUsing(value = "#bar", how = Id.class)
    TextField barField();

    // all text fields as a stream identified by their common class 'text-field'
    @IdentifyUsing(".text-field")
    Stream<TextField> allTextFields();

}

public interface SearchWidget extends PageFragment {

    @IdentifyUsing("#query")
    SearchField query();

    @IdentifyUsing("#submit")
    Button submit();

}
----
