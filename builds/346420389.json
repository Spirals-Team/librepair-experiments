{
  "@type": "build",
  "@href": "/v3/build/346420389",
  "@representation": "standard",
  "@permissions": {
    "read": true,
    "cancel": false,
    "restart": false
  },
  "id": 346420389,
  "number": "7696",
  "state": "failed",
  "duration": 2839,
  "event_type": "pull_request",
  "previous_state": "passed",
  "pull_request_title": "Support updatable metrics during realtime consumption.",
  "pull_request_number": 2537,
  "started_at": "2018-02-26T18:57:38.000Z",
  "finished_at": "2018-02-26T19:14:20.000Z",
  "private": false,
  "repository": {
    "@type": "repository",
    "@href": "/v3/repo/5035983",
    "@representation": "minimal",
    "id": 5035983,
    "name": "incubator-pinot",
    "slug": "apache/incubator-pinot"
  },
  "branch": {
    "@type": "branch",
    "@href": "/v3/repo/5035983/branch/master",
    "@representation": "minimal",
    "name": "master"
  },
  "tag": null,
  "commit": {
    "@type": "commit",
    "@representation": "minimal",
    "id": 103041584,
    "sha": "18ed918b49c21a389966dd91f17eefc97cd5974b",
    "ref": "refs/pull/2537/merge",
    "message": "Support updatable metrics during realtime consumption.\n\nOne of the reasons that serving latency of realtime nodes may be worse\nthan the offline counterparts is that data can (and almost always is)\naggregated in the offline pipeline, reducing the number of rows to be\nprocessed.\n\nFor cases with high Kafka event rate and with duplicate dimension\nvalues, this performance delta can be huge, impacting the overall\nlatency.\n\nThis PR addresses this problem by allowing for updating of metrics for\nrows with same dimension values. The implementation is as follows:\n\n1. We maintain an off-heap HashMap with FixedIntArray (containing\ndictIds of dimension columns) as key, and docId as the value.\n\n2. When a new row comes in, we check if the dimension values are present\nin the map:\n   If yes, then we fetch the docId from the map, and update the metric\ncolumns.\n   - If not, then we index the new row.\n   This features requires metric columns to use no-dictionary indexing.\nThe reason being updating of metrics may leave unsused values in\ndictionary that need to be cleaned up before segment flush. Using\nno-dictionary indexing eliminates the problem completely.\n   Also, this feature is only supported for LLC consumer.\n\n3. The feature is off-by-default and can be enabled with a config\n   - TableConfig.IndexingConfg.updateMetrics\n\n4. Added unit tests for the new feature.\n\n5. Performance gains measured by this feature using real production\ndata:\n   - An average of 4x reduction in numRows. Although, more common\n     dimension combinations (that are also frequently queried) see upto\n1000x reduction in number of rows.\n   - Realtime nodes now perform almost at par with offline nodes for\n     query serving.",
    "compare_url": "https://github.com/linkedin/pinot/pull/2537",
    "committed_at": "2018-02-26T18:30:23.000Z"
  },
  "jobs": [
    {
      "@type": "job",
      "@href": "/v3/job/346420390",
      "@representation": "minimal",
      "id": 346420390
    },
    {
      "@type": "job",
      "@href": "/v3/job/346420391",
      "@representation": "minimal",
      "id": 346420391
    },
    {
      "@type": "job",
      "@href": "/v3/job/346420392",
      "@representation": "minimal",
      "id": 346420392
    },
    {
      "@type": "job",
      "@href": "/v3/job/346420393",
      "@representation": "minimal",
      "id": 346420393
    }
  ],
  "stages": [

  ],
  "created_by": {
    "@type": "user",
    "@href": "/v3/user/374486",
    "@representation": "minimal",
    "id": 374486,
    "login": "mayankshriv"
  },
  "updated_at": "2019-04-12T02:28:05.519Z"
}