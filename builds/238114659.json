{
  "@type": "build",
  "@href": "/v3/build/238114659",
  "@representation": "standard",
  "@permissions": {
    "read": true,
    "cancel": false,
    "restart": false
  },
  "id": 238114659,
  "number": "1451",
  "state": "failed",
  "duration": 4116,
  "event_type": "pull_request",
  "previous_state": "passed",
  "pull_request_title": "GCR: ignore exceptions when building images",
  "pull_request_number": 773,
  "started_at": "2017-05-31T21:52:30.000Z",
  "finished_at": "2017-05-31T22:12:29.000Z",
  "private": false,
  "repository": {
    "@type": "repository",
    "@href": "/v3/repo/2462965",
    "@representation": "minimal",
    "id": 2462965,
    "name": "docker-client",
    "slug": "spotify/docker-client"
  },
  "branch": {
    "@type": "branch",
    "@href": "/v3/repo/2462965/branch/master",
    "@representation": "minimal",
    "name": "master"
  },
  "tag": null,
  "commit": {
    "@type": "commit",
    "@representation": "minimal",
    "id": 69013912,
    "sha": "b7d6f59350f4dd8af033333ba9c2e03105617e8a",
    "ref": "refs/pull/773/merge",
    "message": "GCR: ignore exceptions when building images\n\nIgnore exceptions refreshing the accessToken in\nContainerRegistryAuthSupplier when building the image or getting the\nRegistryAuth to be used for swarm.\n\nSince `authForBuild()` has no arguments, we currently try to return an\nAccessToken to use _in case_ the image being built needs to pull from\ngcr.io, but we should ignore failures in the case that the image being\nbuilt does not need to pull anything from gcr.io.\n\nThis way someone using ContainerRegistryAuthSupplier with credentials\nthat do not actually have access to GCR do not get exceptions when\nbuilding non-GCR images.\n\nIf the accessToken can't be fetched in `authForBuild` for a gcr.io\nimage, then the build will still fail but at a later point when the\ndocker daemon tries to pull the FROM image and throws an error about how\nthe image is \"missing or access is denied\".",
    "compare_url": "https://github.com/spotify/docker-client/pull/773",
    "committed_at": "2017-05-31T21:44:28.000Z"
  },
  "jobs": [
    {
      "@type": "job",
      "@href": "/v3/job/238114661",
      "@representation": "minimal",
      "id": 238114661
    },
    {
      "@type": "job",
      "@href": "/v3/job/238114662",
      "@representation": "minimal",
      "id": 238114662
    },
    {
      "@type": "job",
      "@href": "/v3/job/238114663",
      "@representation": "minimal",
      "id": 238114663
    },
    {
      "@type": "job",
      "@href": "/v3/job/238114664",
      "@representation": "minimal",
      "id": 238114664
    },
    {
      "@type": "job",
      "@href": "/v3/job/238114665",
      "@representation": "minimal",
      "id": 238114665
    },
    {
      "@type": "job",
      "@href": "/v3/job/238114666",
      "@representation": "minimal",
      "id": 238114666
    },
    {
      "@type": "job",
      "@href": "/v3/job/238114667",
      "@representation": "minimal",
      "id": 238114667
    }
  ],
  "stages": [

  ],
  "created_by": {
    "@type": "user",
    "@href": "/v3/user/126238",
    "@representation": "minimal",
    "id": 126238,
    "login": "mattnworb"
  },
  "updated_at": "2019-04-11T07:45:40.492Z"
}