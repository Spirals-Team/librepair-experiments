{
  "@type": "build",
  "@href": "/v3/build/342473743",
  "@representation": "standard",
  "@permissions": {
    "read": true,
    "cancel": false,
    "restart": false
  },
  "id": 342473743,
  "number": "40",
  "state": "failed",
  "duration": 103,
  "event_type": "push",
  "previous_state": "passed",
  "pull_request_title": null,
  "pull_request_number": null,
  "started_at": "2018-02-16T18:39:03.000Z",
  "finished_at": "2018-02-16T18:39:59.000Z",
  "private": false,
  "repository": {
    "@type": "repository",
    "@href": "/v3/repo/8801730",
    "@representation": "minimal",
    "id": 8801730,
    "name": "ian",
    "slug": "rjwut/ian"
  },
  "branch": {
    "@type": "branch",
    "@href": "/v3/repo/8801730/branch/3.2.0",
    "@representation": "minimal",
    "name": "3.2.0"
  },
  "tag": null,
  "commit": {
    "@type": "commit",
    "@representation": "minimal",
    "id": 101841330,
    "sha": "a37fb16ab6ea59ee549d8c1fbc44096d9c4459c0",
    "ref": "refs/heads/3.2.0",
    "message": "* All parsed Strings are now instances of the new NullTerminatedString class, and all API methods that may have referenced a parsed string now use the CharSequence interface, which is implemented by both String and NullTerminatedString. This will not cause problems for most code, but if you're doing an equals() comparison between a String an a string value that was parsed from a packet, it will fail because Strings and NullTerminatedStrings can be equal. The best approach is to call .toString() on NullTerminatedString and compare that against your String. This was done to improve packet read/write symmetry.\n* Support for new packets: DockedPacket, ExplosionPacket, KlaxonPacket, CloakDecloakPacket, ActivateUpgradePacket.\n* PlayerShipDamagePacket now exposes the shipIndex and duration properties.\n* ObjectUpdatePacket supports mixed ObjectType payloads, as used by some custom software. Stock Artemis clients appear to handle this fine. However, if you wish to ensure that you generate packets how the Artemis server does, ObjectUpdatePacket now has a static method called segregate() which accepts a Collection of ArtemisObjects and generates a List of corresponding ObjectUpdatePackets where each has payloads with homogeneous ObjectTypes. ArtemisPlayer has a split() method that will break it into several objects, with the appropriate properties set for each ObjectType. It also has multiple update methods to only update the properties for a particular ObjectType.\n* Util now has caratToNewline() and newlineToCarat() methods to perform the newline escapes that Artemis does. However, you shouldn't typically need to call this as the API should perform this conversion for you automagically.\n* Fixed incorrect parsing due to the v2.4.0 valueInt subtype shuffle.\n* Fixed some places where a float color was incorrectly being parsed as an int.\n* Fixed incorrect nebula parsing.\n* Internal changes to ArtemisPlayer to store upgrade and system statuses in separate objects.\n* The AllShipSettingsPacket.Ship class was extracted to its own top-level class, and is now used by the SetShipSettingsPacket.\n* Most to \"fighters\" were changed to \"single-seat craft,\" since a fighter is only one kind of single-seat craft.\n* A new example package contains some sample client and proxy code. The example code in README.md was replaced with a mention of the new package.\n* ToggleShieldsPacket was renamed to SetShieldsPacket and its functionality expanded to handle raising and lower shields as well as toggling them.\n* Torpedoes now have their own object class (ArtemisTorpedo) instead of using ArtemisGenericObject.\n* BitFields now correctly compute their widths when the number of bits is divisible by 8. (Artemis allocates an extra byte in that scenario.) Packets with \"fake\" extra properties to deal with the extra byte were updated accordingly.\n* ValueIntPacket no longer needs the subtype passed into the constructor when passing in a PacketReader; it will just read the subtype from the stream.\n* Classes which don't conform to the ValueIntPacket payload structure were refactored to no longer descend from that class.\n* PacketWriter now requires you to pass in the ObjectType of an object to ensure that the correct packet is written (since ArtemisPlayer can be of four different types).\n* IAN now confirms that objects which have methods with the Listener annotation are public.\n* Target selection packets have been renamed for consistency and clarity (e.g. CaptainSelectPacket -> CaptainTargetPacket).\n* Removed PacketWriter.writeObjByte(), which was no longer used.\n* Some tweaks were made so that JavaDoc generation can succeed, and pom.xml was modified to be able to generate the JavaDoc.\n* README.md was reorganized to simplify individual sections.",
    "compare_url": "https://github.com/rjwut/ian/compare/209198d43060...a37fb16ab6ea",
    "committed_at": "2018-02-16T18:38:51.000Z"
  },
  "jobs": [
    {
      "@type": "job",
      "@href": "/v3/job/342473744",
      "@representation": "minimal",
      "id": 342473744
    },
    {
      "@type": "job",
      "@href": "/v3/job/342473745",
      "@representation": "minimal",
      "id": 342473745
    }
  ],
  "stages": [

  ],
  "created_by": {
    "@type": "user",
    "@href": "/v3/user/84775",
    "@representation": "minimal",
    "id": 84775,
    "login": "rjwut"
  },
  "updated_at": "2019-04-13T06:03:00.157Z"
}