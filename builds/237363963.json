{
  "@type": "build",
  "@href": "/v3/build/237363963",
  "@representation": "standard",
  "@permissions": {
    "read": true,
    "cancel": false,
    "restart": false
  },
  "id": 237363963,
  "number": "1624",
  "state": "failed",
  "duration": 11903,
  "event_type": "pull_request",
  "previous_state": "errored",
  "pull_request_title": "Fix double-free bug in example code.",
  "pull_request_number": 1892,
  "started_at": "2017-05-30T02:59:13.000Z",
  "finished_at": "2017-05-30T04:05:40.000Z",
  "private": false,
  "repository": {
    "@type": "repository",
    "@href": "/v3/repo/2821020",
    "@representation": "minimal",
    "id": 2821020,
    "name": "antlr4",
    "slug": "antlr/antlr4"
  },
  "branch": {
    "@type": "branch",
    "@href": "/v3/repo/2821020/branch/master",
    "@representation": "minimal",
    "name": "master"
  },
  "tag": null,
  "commit": {
    "@type": "commit",
    "@representation": "minimal",
    "id": 68788525,
    "sha": "52e7a4f717f0b9fd88624539d439f9c394fcb9c1",
    "ref": "refs/pull/1892/merge",
    "message": "Fix double-free bug in example code.\n\nMyGrammarParser owns the pointer returned by parser.key(). That pointer is\nultimately deallocated by Parser::~Parser() via that method's call to\n_tracker.reset(). Taking ownership via Ref<tree::ParseTree> would lead to\na double-free bug.",
    "compare_url": "https://github.com/antlr/antlr4/pull/1892",
    "committed_at": "2017-05-30T02:39:20.000Z"
  },
  "jobs": [
    {
      "@type": "job",
      "@href": "/v3/job/237363964",
      "@representation": "minimal",
      "id": 237363964
    },
    {
      "@type": "job",
      "@href": "/v3/job/237363965",
      "@representation": "minimal",
      "id": 237363965
    },
    {
      "@type": "job",
      "@href": "/v3/job/237363966",
      "@representation": "minimal",
      "id": 237363966
    },
    {
      "@type": "job",
      "@href": "/v3/job/237363967",
      "@representation": "minimal",
      "id": 237363967
    },
    {
      "@type": "job",
      "@href": "/v3/job/237363968",
      "@representation": "minimal",
      "id": 237363968
    },
    {
      "@type": "job",
      "@href": "/v3/job/237363969",
      "@representation": "minimal",
      "id": 237363969
    },
    {
      "@type": "job",
      "@href": "/v3/job/237363970",
      "@representation": "minimal",
      "id": 237363970
    },
    {
      "@type": "job",
      "@href": "/v3/job/237363971",
      "@representation": "minimal",
      "id": 237363971
    },
    {
      "@type": "job",
      "@href": "/v3/job/237363972",
      "@representation": "minimal",
      "id": 237363972
    },
    {
      "@type": "job",
      "@href": "/v3/job/237363973",
      "@representation": "minimal",
      "id": 237363973
    },
    {
      "@type": "job",
      "@href": "/v3/job/237363974",
      "@representation": "minimal",
      "id": 237363974
    },
    {
      "@type": "job",
      "@href": "/v3/job/237363975",
      "@representation": "minimal",
      "id": 237363975
    }
  ],
  "stages": [

  ],
  "created_by": {
    "@type": "user",
    "@href": "/v3/user/622399",
    "@representation": "minimal",
    "id": 622399,
    "login": "kosak"
  },
  "updated_at": "2019-04-11T11:04:53.340Z"
}