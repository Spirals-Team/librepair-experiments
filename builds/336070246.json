{
  "@type": "build",
  "@href": "/v3/build/336070246",
  "@representation": "standard",
  "@permissions": {
    "read": true,
    "cancel": false,
    "restart": false
  },
  "id": 336070246,
  "number": "671",
  "state": "failed",
  "duration": 22057,
  "event_type": "push",
  "previous_state": "passed",
  "pull_request_title": null,
  "pull_request_number": null,
  "started_at": "2018-02-01T13:07:58.000Z",
  "finished_at": "2018-02-01T14:41:25.000Z",
  "private": false,
  "repository": {
    "@type": "repository",
    "@href": "/v3/repo/8288739",
    "@representation": "minimal",
    "id": 8288739,
    "name": "flink",
    "slug": "tzulitai/flink"
  },
  "branch": {
    "@type": "branch",
    "@href": "/v3/repo/8288739/branch/master",
    "@representation": "minimal",
    "name": "master"
  },
  "tag": null,
  "commit": {
    "@type": "commit",
    "@representation": "minimal",
    "id": 99897597,
    "sha": "6b99382753a980b6a853faaef8ac473d63568799",
    "ref": "refs/heads/master",
    "message": "[hotfix] [kinesis] Use ArrayList for faster shard state updates\n\nPreviously, the Kinesis Consumer uses LinkedLists as the underlying\nimplementation for subscribedShardsState. This list is accessed on every\nrecord, updating a shard's state using a shard state index (i.e., the\norder of the shard state in the list). With LinkedLists, this access has\nlinear time complexity, and since this operation happens per record, can\nhave a big performance hit on executions with a huge number of Kinesis\nshards.\n\nThis commit changes the list implementation to be an ArrayList for\nconstant-time shard state access. The downside is that when new shards\nare discovered, there will be a costly array re-size. However, since\nresharding is not expected to happen so often, this is acceptable.",
    "compare_url": "https://github.com/tzulitai/flink/compare/66557755bf7a...6b99382753a9",
    "committed_at": "2018-02-01T12:05:56.000Z"
  },
  "jobs": [
    {
      "@type": "job",
      "@href": "/v3/job/336070247",
      "@representation": "minimal",
      "id": 336070247
    },
    {
      "@type": "job",
      "@href": "/v3/job/336070248",
      "@representation": "minimal",
      "id": 336070248
    },
    {
      "@type": "job",
      "@href": "/v3/job/336070249",
      "@representation": "minimal",
      "id": 336070249
    },
    {
      "@type": "job",
      "@href": "/v3/job/336070250",
      "@representation": "minimal",
      "id": 336070250
    },
    {
      "@type": "job",
      "@href": "/v3/job/336070251",
      "@representation": "minimal",
      "id": 336070251
    },
    {
      "@type": "job",
      "@href": "/v3/job/336070252",
      "@representation": "minimal",
      "id": 336070252
    },
    {
      "@type": "job",
      "@href": "/v3/job/336070253",
      "@representation": "minimal",
      "id": 336070253
    },
    {
      "@type": "job",
      "@href": "/v3/job/336070254",
      "@representation": "minimal",
      "id": 336070254
    },
    {
      "@type": "job",
      "@href": "/v3/job/336070255",
      "@representation": "minimal",
      "id": 336070255
    },
    {
      "@type": "job",
      "@href": "/v3/job/336070256",
      "@representation": "minimal",
      "id": 336070256
    },
    {
      "@type": "job",
      "@href": "/v3/job/336070257",
      "@representation": "minimal",
      "id": 336070257
    },
    {
      "@type": "job",
      "@href": "/v3/job/336070258",
      "@representation": "minimal",
      "id": 336070258
    }
  ],
  "stages": [

  ],
  "created_by": {
    "@type": "user",
    "@href": "/v3/user/293667",
    "@representation": "minimal",
    "id": 293667,
    "login": "tzulitai"
  },
  "updated_at": "2019-04-13T02:27:16.697Z"
}