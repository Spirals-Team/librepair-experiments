{
  "@type": "build",
  "@href": "/v3/build/247476004",
  "@representation": "standard",
  "@permissions": {
    "read": true,
    "cancel": false,
    "restart": false
  },
  "id": 247476004,
  "number": "23733",
  "state": "failed",
  "duration": 15170,
  "event_type": "pull_request",
  "previous_state": "failed",
  "pull_request_title": "Replace ScalarQueryUtil with QueryCardinalityUtil",
  "pull_request_number": 8350,
  "started_at": "2017-06-27T11:21:20Z",
  "finished_at": "2017-06-27T11:55:40Z",
  "private": false,
  "repository": {
    "@type": "repository",
    "@href": "/v3/repo/1504827",
    "@representation": "minimal",
    "id": 1504827,
    "name": "presto",
    "slug": "prestodb/presto"
  },
  "branch": {
    "@type": "branch",
    "@href": "/v3/repo/1504827/branch/master",
    "@representation": "minimal",
    "name": "master"
  },
  "tag": null,
  "commit": {
    "@type": "commit",
    "@representation": "minimal",
    "id": 71850648,
    "sha": "7a3879e1b78ab17d381d830e37f3babc6f399d39",
    "ref": "refs/pull/8350/merge",
    "message": "Replace ScalarQueryUtil with QueryCardinalityUtil\n\nScalarQueryUtil was wrong. Its goal semantic was to tell if given query\nis scalar (always return a row), but it was returning true for queries\nwrapped with FilterNode for which it is not known how many rows will be\nreturned.\n\nQueryCardinalityUtil solves that as it returns a cardinality range,\nwhere for scalar queries range is <1,1>.",
    "compare_url": "https://github.com/prestodb/presto/pull/8350",
    "committed_at": "2017-06-27T11:19:18Z"
  },
  "jobs": [
    {
      "@type": "job",
      "@href": "/v3/job/247476005",
      "@representation": "minimal",
      "id": 247476005
    },
    {
      "@type": "job",
      "@href": "/v3/job/247476006",
      "@representation": "minimal",
      "id": 247476006
    },
    {
      "@type": "job",
      "@href": "/v3/job/247476007",
      "@representation": "minimal",
      "id": 247476007
    },
    {
      "@type": "job",
      "@href": "/v3/job/247476008",
      "@representation": "minimal",
      "id": 247476008
    },
    {
      "@type": "job",
      "@href": "/v3/job/247476009",
      "@representation": "minimal",
      "id": 247476009
    },
    {
      "@type": "job",
      "@href": "/v3/job/247476010",
      "@representation": "minimal",
      "id": 247476010
    },
    {
      "@type": "job",
      "@href": "/v3/job/247476011",
      "@representation": "minimal",
      "id": 247476011
    },
    {
      "@type": "job",
      "@href": "/v3/job/247476012",
      "@representation": "minimal",
      "id": 247476012
    },
    {
      "@type": "job",
      "@href": "/v3/job/247476013",
      "@representation": "minimal",
      "id": 247476013
    },
    {
      "@type": "job",
      "@href": "/v3/job/247476014",
      "@representation": "minimal",
      "id": 247476014
    },
    {
      "@type": "job",
      "@href": "/v3/job/247476015",
      "@representation": "minimal",
      "id": 247476015
    }
  ],
  "stages": [

  ],
  "created_by": {
    "@type": "user",
    "@href": "/v3/user/215645",
    "@representation": "minimal",
    "id": 215645,
    "login": "kokosing"
  },
  "updated_at": "2019-04-10T22:49:10.457Z"
}