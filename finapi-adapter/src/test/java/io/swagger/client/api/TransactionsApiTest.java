/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.46.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.BadCredentialsError;
import java.math.BigDecimal;
import io.swagger.client.model.ErrorMessage;
import io.swagger.client.model.IdentifierList;
import io.swagger.client.model.PageableTransactionList;
import io.swagger.client.model.SplitTransactionsParams;
import io.swagger.client.model.Transaction;
import io.swagger.client.model.TransactionList;
import io.swagger.client.model.TriggerCategorizationParams;
import io.swagger.client.model.UpdateMultipleTransactionsParams;
import io.swagger.client.model.UpdateTransactionsParams;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionsApi
 */
@Ignore
public class TransactionsApiTest {

    private final TransactionsApi api = new TransactionsApi();

    
    /**
     * Delete all transactions
     *
     * Delete all deletable transactions of the currently authorized user. &lt;br/&gt;A transaction is deletable if at least one of the following holds true:&lt;br/&gt; &amp;bull; The transaction belongs to a demo account &lt;br/&gt; &amp;bull; The transaction&#39;s &#39;potentialDuplicate&#39; flag is set to TRUE&lt;br/&gt; &amp;bull; The transaction is an adjusting entry (&#39;Zwischensaldo&#39; transaction) that was added by finAPI
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAllTransactionsTest() throws ApiException {
        IdentifierList response = api.deleteAllTransactions();

        // TODO: test validations
    }
    
    /**
     * Delete a transaction
     *
     * Delete a single transaction of the user that is authorized by the access_token.  A transaction can only get deleted if at least one of the following holds true:&lt;br/&gt; &amp;bull; The transaction belongs to a demo account &lt;br/&gt; &amp;bull; The transaction&#39;s &#39;potentialDuplicate&#39; flag is set to TRUE&lt;br/&gt; &amp;bull; The transaction is an adjusting entry (&#39;Zwischensaldo&#39; transaction) that was added by finAPI
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTransactionTest() throws ApiException {
        Long id = null;
        api.deleteTransaction(id);

        // TODO: test validations
    }
    
    /**
     * Edit multiple transactions
     *
     * Edit one or multiple transactions. You can edit the following fields: &#39;isNew&#x3D;true|false&#39; and/or &#39;isPotentialDuplicate&#x3D;false&#39; and/or &#39;categoryId&#x3D;&lt;id&gt;&#39; and/or &#39;labelIds&#x3D;[&lt;ids&gt;]&#39;. To clear the category of the given transactions (so that they are no longer categorized), pass the value &#39;0&#39; as the categoryId. To clear the labels of the given transactions, pass an empty array of label identifiers: &#39;[]&#39;. The parameters &#39;categoryId&#39; and &#39;labelIds&#39; are forbidden if &#39;ids&#39; is NOT set (i.e. you cannot update the category or labels for ALL transactions). The result is a list of identifiers of only those transactions that have changed as a result of this service call.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void editMultipleTransactionsTest() throws ApiException {
        UpdateMultipleTransactionsParams body = null;
        IdentifierList response = api.editMultipleTransactions(body);

        // TODO: test validations
    }
    
    /**
     * Edit multiple transactions (DEPRECATED)
     *
     * Change the fields of multiple transactions. You can change the following fields: &#39;isNew&#x3D;true|false&#39; and/or &#39;isPotentialDuplicate&#x3D;false&#39; and/or &#39;categoryId&#x3D;&lt;id&gt;&#39; and/or &#39;labelIds&#x3D;[&lt;ids&gt;]&#39;. The max number of input identifiers is limited to 100. To clear the category of the given transactions (so that they are no longer categorized), pass the value &#39;0&#39; as the categoryId. To clear the labels of the given transactions, pass an empty array of label identifiers: &#39;[]&#39;. The result is a list of identifiers of only those transactions that have changed as a result of this service call. WARNING: This service is deprecated and will be removed at some point. If you want to edit multiple transactions, please instead use the service &#39;Edit multiple transactions&#39;, where you can pass a comma-separated list of identifiers .
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void editMultipleTransactionsDeprecatedTest() throws ApiException {
        List<Long> ids = null;
        UpdateTransactionsParams body = null;
        IdentifierList response = api.editMultipleTransactionsDeprecated(ids, body);

        // TODO: test validations
    }
    
    /**
     * Edit a transaction
     *
     * Change a transaction&#39;s fields. You can change the following fields: &#39;isNew&#x3D;true|false&#39; and/or &#39;isPotentialDuplicate&#x3D;false&#39; and/or &#39;categoryId&#x3D;&lt;id&gt;&#39; and/or &#39;labelIds&#x3D;[&lt;ids&gt;]&#39;. To clear a transaction&#39;s category (so that it is no longer categorized), pass the value &#39;0&#39; as the categoryId. To clear the labels of the given transaction, pass an empty array of label identifiers: &#39;[]&#39;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void editTransactionTest() throws ApiException {
        Long id = null;
        UpdateTransactionsParams body = null;
        Transaction response = api.editTransaction(id, body);

        // TODO: test validations
    }
    
    /**
     * Get and search all transactions
     *
     * Get transactions of the user that is authorized by the access_token. Must pass the user&#39;s access_token. You can set optional search criteria to get only those transactions that you are interested in. If you do not specify any search criteria, then this service functions as a &#39;get all&#39; service.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAndSearchAllTransactionsTest() throws ApiException {
        String view = null;
        List<Long> ids = null;
        String search = null;
        String counterpart = null;
        List<Long> accountIds = null;
        String minBankBookingDate = null;
        String maxBankBookingDate = null;
        String minFinapiBookingDate = null;
        String maxFinapiBookingDate = null;
        BigDecimal minAmount = null;
        BigDecimal maxAmount = null;
        String direction = null;
        List<Long> labelIds = null;
        List<Long> categoryIds = null;
        Boolean includeChildCategories = null;
        Boolean isNew = null;
        Boolean isPotentialDuplicate = null;
        Boolean isAdjustingEntry = null;
        String minImportDate = null;
        String maxImportDate = null;
        Integer page = null;
        Integer perPage = null;
        List<String> order = null;
        PageableTransactionList response = api.getAndSearchAllTransactions(view, ids, search, counterpart, accountIds, minBankBookingDate, maxBankBookingDate, minFinapiBookingDate, maxFinapiBookingDate, minAmount, maxAmount, direction, labelIds, categoryIds, includeChildCategories, isNew, isPotentialDuplicate, isAdjustingEntry, minImportDate, maxImportDate, page, perPage, order);

        // TODO: test validations
    }
    
    /**
     * Get multiple transactions
     *
     * Get a list of multiple transactions of the user that is authorized by the access_token. Must pass the transactions&#39; identifiers and the user&#39;s access_token. Transactions whose identifiers do not exist or do not relate to the authorized user will not be contained in the result (If this applies to all of the given identifiers, then the result will be an empty list). WARNING: This service is deprecated and will be removed at some point. If you want to get multiple transactions, please instead use the service &#39;Get and search all transactions&#39;, where you can pass a comma-separated list of identifiers .
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMultipleTransactionsTest() throws ApiException {
        List<Long> ids = null;
        TransactionList response = api.getMultipleTransactions(ids);

        // TODO: test validations
    }
    
    /**
     * Get a transaction
     *
     * Get a single transaction of the user that is authorized by the access_token. Must pass the transaction&#39;s identifier and the user&#39;s access_token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionTest() throws ApiException {
        Long id = null;
        Transaction response = api.getTransaction(id);

        // TODO: test validations
    }
    
    /**
     * Restore a transaction
     *
     * Restore a previously split transaction. Removes all of its sub-transactions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restoreTransactionTest() throws ApiException {
        Long id = null;
        Transaction response = api.restoreTransaction(id);

        // TODO: test validations
    }
    
    /**
     * Split a transaction
     *
     * Split a transaction into several logical sub-transactions. If the given transaction is split already, all its current sub-transactions will get deleted before the new sub-transactions will get created.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitTransactionTest() throws ApiException {
        Long id = null;
        SplitTransactionsParams body = null;
        Transaction response = api.splitTransaction(id, body);

        // TODO: test validations
    }
    
    /**
     * Trigger categorization
     *
     * Triggers finAPI&#39;s background categorization process for all uncategorized transactions of the given bank connection(s) (or of all of the user&#39;s bank connections, if no bank connection identifiers are passed). The service returns as soon as the categorizations are scheduled. At this point, the bank connections will have their &#39;categorizationStatus&#39; set to &#39;PENDING&#39;. Use the service \&quot;Get a bank connection\&quot; or \&quot;Get all bank connections\&quot; to check when the categorization has finished (this is the case when the categorizationStatus has switched to &#39;READY&#39;).&lt;br/&gt;&lt;br/&gt;Note that if at least one of the target bank connections is currently locked at the time when you call this service (i.e. the bank connection is currently being updated, or another categorization is already scheduled for it), then no categorization will be triggered at all and the service will respond with HTTP code 422.&lt;br/&gt;&lt;br/&gt;Please also note:&lt;br/&gt;&amp;bull; finAPI&#39;s background categorization process is executed automatically whenever you import or update a bank connection (though in case of update, it will categorize only the new transactions, and not re-run categorization for previously imported transactions). This means that in general you do not have to call this service after an import or update. Use this service only when you wish to re-run the categorization of all existing uncategorized transactions.&lt;br/&gt;&amp;bull; if you wish to just manually assign categories to transactions, please use the service \&quot;Edit a transaction\&quot; or \&quot;Edit multiple transactions\&quot; instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void triggerCategorizationTest() throws ApiException {
        TriggerCategorizationParams body = null;
        api.triggerCategorization(body);

        // TODO: test validations
    }
    
}
