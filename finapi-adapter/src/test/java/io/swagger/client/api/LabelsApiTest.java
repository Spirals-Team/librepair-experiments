/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.46.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.BadCredentialsError;
import io.swagger.client.model.ErrorMessage;
import io.swagger.client.model.IdentifierList;
import io.swagger.client.model.Label;
import io.swagger.client.model.LabelList;
import io.swagger.client.model.LabelParams;
import io.swagger.client.model.PageableLabelList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LabelsApi
 */
@Ignore
public class LabelsApiTest {

    private final LabelsApi api = new LabelsApi();

    
    /**
     * Create a new label
     *
     * Create a new label for a specific user. Must pass the new label&#39;s name and the user&#39;s access_token.&lt;br/&gt;&lt;br/&gt;Users can create labels to flag transactions (see method PATCH /transactions), with the goal of collecting and getting an overview of all transactions of a certain &#39;type&#39;. In this sense, labels are similar to transaction categories. However, labels are supposed to depict more of an implicit meaning of a transaction. For instance, a user might want to assign a flag to a transaction that reminds him that he can offset it against tax. At the same time, the category of the transactions might be something like &#39;insurance&#39;, which is a more &#39;fact-based&#39;, or &#39;objective&#39; way of typing the transaction. Despite this semantic difference between categories and labels, there is also the difference that a transaction can be assigned multiple labels at the same time (while in contrast it can have just a single category).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLabelTest() throws ApiException {
        LabelParams body = null;
        Label response = api.createLabel(body);

        // TODO: test validations
    }
    
    /**
     * Delete all labels
     *
     * Delete all labels of the user that is authorized by the access_token. Must pass the user&#39;s access_token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAllLabelsTest() throws ApiException {
        IdentifierList response = api.deleteAllLabels();

        // TODO: test validations
    }
    
    /**
     * Delete a label
     *
     * Delete a single label of the user that is authorized by the access_token. Must pass the label&#39;s identifier and the user&#39;s access_token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLabelTest() throws ApiException {
        Long id = null;
        api.deleteLabel(id);

        // TODO: test validations
    }
    
    /**
     * Edit a label
     *
     * Change the name of a label of the user that is authorized by the access_token. Must pass the label&#39;s identifier, the label&#39;s new name and the user&#39;s access_token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void editLabelTest() throws ApiException {
        Long id = null;
        LabelParams body = null;
        Label response = api.editLabel(id, body);

        // TODO: test validations
    }
    
    /**
     * Get and search all labels
     *
     * Get labels of the user that is authorized by the access_token. Must pass the user&#39;s access_token. You can set optional search criteria to get only those labels that you are interested in. If you do not specify any search criteria, then this service functions as a &#39;get all&#39; service.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAndSearchAllLabelsTest() throws ApiException {
        List<Long> ids = null;
        String search = null;
        Integer page = null;
        Integer perPage = null;
        List<String> order = null;
        PageableLabelList response = api.getAndSearchAllLabels(ids, search, page, perPage, order);

        // TODO: test validations
    }
    
    /**
     * Get a label
     *
     * Get a single label of the user that is authorized by the access_token. Must pass the label&#39;s identifier and the user&#39;s access_token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLabelTest() throws ApiException {
        Long id = null;
        Label response = api.getLabel(id);

        // TODO: test validations
    }
    
    /**
     * Get multiple labels
     *
     * Get a list of multiple labels of the user that is authorized by the access_token.Must pass the labels&#39; identifiers and the user&#39;s access_token. Identifiers that do not exist or do not relate to the authorized user will not be contained in the result (If this applies to all of the given identifiers, then the result will be an empty list). WARNING: This service is deprecated and will be removed at some point. If you want to get multiple labels, please instead use the service &#39;Get all labels&#39; and pass a comma-separated list of identifiers as a parameter &#39;ids&#39;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMultipleLabelsTest() throws ApiException {
        List<Long> ids = null;
        LabelList response = api.getMultipleLabels(ids);

        // TODO: test validations
    }
    
}
