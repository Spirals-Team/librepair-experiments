/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.46.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Account;
import io.swagger.client.model.AccountList;
import io.swagger.client.model.AccountParams;
import io.swagger.client.model.BadCredentialsError;
import io.swagger.client.model.BankResponse;
import java.math.BigDecimal;
import io.swagger.client.model.DailyBalanceList;
import io.swagger.client.model.DirectDebitOrderingResponse;
import io.swagger.client.model.ErrorMessage;
import io.swagger.client.model.ExecuteSepaDirectDebitParams;
import io.swagger.client.model.ExecuteSepaMoneyTransferParams;
import io.swagger.client.model.IdentifierList;
import io.swagger.client.model.MoneyTransferOrderingResponse;
import io.swagger.client.model.RequestSepaDirectDebitParams;
import io.swagger.client.model.RequestSepaMoneyTransferParams;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountsApi
 */
@Ignore
public class AccountsApiTest {

    private final AccountsApi api = new AccountsApi();

    
    /**
     * Delete an account
     *
     * Delete a single bank account of the user that is authorized by the access_token, including its transactions and balance data. Must pass the account&#39;s identifier and the user&#39;s access_token.&lt;br/&gt;&lt;br/&gt;Notes: &lt;br/&gt;- You cannot delete an account while the bank connection that it relates to is currently in the process of import, update, or transactions categorization. &lt;br/&gt;- When the last remaining account of a bank connection gets deleted, then the bank connection itself will get deleted as well! &lt;br/&gt;- All notification rules that are connected to the account will get adjusted so that they no longer have this account listed. Notification rules that are connected to just this account (and no other accounts) will get deleted altogether.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAccountTest() throws ApiException {
        Long id = null;
        api.deleteAccount(id);

        // TODO: test validations
    }
    
    /**
     * Delete all accounts
     *
     * Delete all accounts of the user that is authorized by the access_token, including all transactions and balance data. Must pass the user&#39;s access_token.&lt;br/&gt;&lt;br/&gt;Notes: &lt;br/&gt;- Deleting all of the user&#39;s accounts also deletes all of his bank connections. &lt;br/&gt;- All notification rules that are connected to any specific accounts will get deleted as well. &lt;br/&gt;- If at least one of the user&#39;s bank connections in currently in the process of import, update, or transactions categorization, then this service will perform no action at all.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAllAccountsTest() throws ApiException {
        IdentifierList response = api.deleteAllAccounts();

        // TODO: test validations
    }
    
    /**
     * Edit an account
     *
     * Change the name and/or the type and/or the &#39;isNew&#39; flag of a single bank account of the user that is authorized by the access_token. Must pass the account&#39;s identifier, the account&#39;s new name and/or type and/or &#39;isNew&#39; flag, and the user&#39;s access_token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void editAccountTest() throws ApiException {
        Long id = null;
        AccountParams body = null;
        Account response = api.editAccount(id, body);

        // TODO: test validations
    }
    
    /**
     * Execute SEPA Direct Debit
     *
     * Execute a SEPA direct debit order that has been previously submitted by the use of the /requestSepaDirectDebit service. Note that this service cannot be used for the demo account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void executeSepaDirectDebitTest() throws ApiException {
        ExecuteSepaDirectDebitParams body = null;
        BankResponse response = api.executeSepaDirectDebit(body);

        // TODO: test validations
    }
    
    /**
     * Execute SEPA Money Transfer
     *
     * Execute a SEPA money transfer order that has been previously submitted by the use of the /requestSepaMoneyTransfer service. Note that this service cannot be used for the demo account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void executeSepaMoneyTransferTest() throws ApiException {
        ExecuteSepaMoneyTransferParams body = null;
        BankResponse response = api.executeSepaMoneyTransfer(body);

        // TODO: test validations
    }
    
    /**
     * Get an account
     *
     * Get a single bank account of the user that is authorized by the access_token. Must pass the account&#39;s identifier and the user&#39;s access_token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountTest() throws ApiException {
        Long id = null;
        Account response = api.getAccount(id);

        // TODO: test validations
    }
    
    /**
     * Get and search all accounts
     *
     * Get bank accounts of the user that is authorized by the access_token. Must pass the user&#39;s access_token. You can set optional search criteria to get only those bank accounts that you are interested in. If you do not specify any search criteria, then this service functions as a &#39;get all&#39; service.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAndSearchAllAccountsTest() throws ApiException {
        List<Long> ids = null;
        String search = null;
        List<Long> accountTypeIds = null;
        List<Long> bankConnectionIds = null;
        String minLastSuccessfulUpdate = null;
        String maxLastSuccessfulUpdate = null;
        BigDecimal minBalance = null;
        BigDecimal maxBalance = null;
        AccountList response = api.getAndSearchAllAccounts(ids, search, accountTypeIds, bankConnectionIds, minLastSuccessfulUpdate, maxLastSuccessfulUpdate, minBalance, maxBalance);

        // TODO: test validations
    }
    
    /**
     * Get daily balances
     *
     * Returns the daily balances for the given accounts and the given period. The balances are calculated by finAPI and are based on each account&#39;s latest balance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDailyBalancesTest() throws ApiException {
        List<Long> accountIds = null;
        String startDate = null;
        String endDate = null;
        Boolean withProjection = null;
        Integer page = null;
        Integer perPage = null;
        List<String> order = null;
        DailyBalanceList response = api.getDailyBalances(accountIds, startDate, endDate, withProjection, page, perPage, order);

        // TODO: test validations
    }
    
    /**
     * Get multiple accounts
     *
     * Get a list of multiple bank accounts of the user that is authorized by the access_token. Must pass the accounts&#39; identifiers and the user&#39;s access_token. Accounts whose identifiers do not exist or do not relate to the authorized user will not be contained in the result (If this applies to all of the given identifiers, then the result will be an empty list). WARNING: This service is deprecated and will be removed at some point. If you want to get multiple accounts, please instead use the service &#39;Get and search all accounts&#39; and pass a comma-separated list of identifiers as a parameter &#39;ids&#39;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMultipleAccountsTest() throws ApiException {
        List<Long> ids = null;
        AccountList response = api.getMultipleAccounts(ids);

        // TODO: test validations
    }
    
    /**
     * Request SEPA Direct Debit
     *
     * Submit a SEPA direct debit order for one or multiple direct debits. Returns an instruction from the bank server that can be displayed to the user (e.g. \&quot;Enter TAN\&quot;), typically in the language of the bank&#39;s country. The order remains valid for execution for only a couple of minutes (the exact validity period depends on the bank). For executing the order, use the /executeSepaDirectDebit service after calling this service. Note that when the order is not executed within the validity period, the bank might take note of that and - if happening too often - ultimately lock the user&#39;s online banking access. If there already exists a previously submitted but not yet executed SEPA order for this account (either another direct debit order, or a money transfer order), then that order will be discarded and replaced with the new order that is being created with this service call.&lt;br/&gt;&lt;br/&gt;Notes:&lt;br/&gt;&amp;bull; This service cannot be used for the demo account.&lt;br/&gt;&amp;bull; When using a two-step-procedure with flag &#39;implicitExecute&#39; &#x3D; true, then this service will immediately execute the direct debit. The response will not contain any challenge message and you won&#39;t be required to make a subsequent call to /executeSepaDirectDebit.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestSepaDirectDebitTest() throws ApiException {
        RequestSepaDirectDebitParams body = null;
        DirectDebitOrderingResponse response = api.requestSepaDirectDebit(body);

        // TODO: test validations
    }
    
    /**
     * Request SEPA Money Transfer
     *
     * Submit a SEPA money transfer order for either a single or a collective money transfer. Returns an instruction from the bank server that can be displayed to the user (e.g. \&quot;Enter TAN\&quot;), typically in the language of the bank&#39;s country. The order remains valid for execution for only a couple of minutes (the exact validity period depends on the bank). For executing the order, use the /executeSepaMoneyTransfer service after calling this service. Note that when the order is not executed within the validity period, the bank might take note of that and - if happening too often - ultimately lock the user&#39;s online banking access. If there already exists a previously submitted but not yet executed SEPA order for this account (either another money transfer order, or a direct debit order), then that order will be discarded and replaced with the new order that is being created with this service call.&lt;br/&gt;&lt;br/&gt;Notes:&lt;br/&gt;&amp;bull; This service cannot be used for the demo account.&lt;br/&gt;&amp;bull; Some banks may require a multi-step authentication, in which case the service will respond with HTTP code 510 and an error message containing a challenge for the user from the bank. You must display the challenge message to the user, and then retry the service call, passing the user&#39;s answer to the bank&#39;s challenge in the &#39;challengeResponse&#39; field.&lt;br/&gt;&amp;bull; When using a two-step-procedure with flag &#39;implicitExecute&#39; &#x3D; true, then this service will immediately execute the money transfer. The response will not contain any challenge message and you won&#39;t be required to make a subsequent call to /executeSepaMoneyTransfer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestSepaMoneyTransferTest() throws ApiException {
        RequestSepaMoneyTransferParams body = null;
        MoneyTransferOrderingResponse response = api.requestSepaMoneyTransfer(body);

        // TODO: test validations
    }
    
}
