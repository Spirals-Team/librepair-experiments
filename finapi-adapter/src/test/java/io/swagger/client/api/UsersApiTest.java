/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.46.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.BadCredentialsError;
import io.swagger.client.model.ErrorMessage;
import io.swagger.client.model.ExecutePasswordChangeParams;
import io.swagger.client.model.PasswordChangingResource;
import io.swagger.client.model.RequestPasswordChangeParameters;
import io.swagger.client.model.User;
import io.swagger.client.model.UserCreateParamsImpl;
import io.swagger.client.model.UserUpdateParamsImpl;
import io.swagger.client.model.VerificationStatusResource;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Ignore
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    
    /**
     * Create a new user
     *
     * &lt;p&gt;Create a new user. Must pass your global (i.e. client) access_token. &lt;/p&gt;&lt;p&gt;This service returns the user&#39;s password as plain text. &lt;/p&gt;&lt;p&gt;The automatic update of the user&#39;s bank connections is disabled by default for any new user. User identifiers are regarded case-insensitive by finAPI.&lt;/p&gt;&lt;p&gt;Please note that finAPI generally has a restricted set of allowed characters for input fields. You can find the allowed characters &lt;a href &#x3D; \&quot;https://finapi.zendesk.com/hc/en-us/articles/222013148-What-symbols-are-allowed-in-finAPI-\&quot;&gt;here&lt;/a&gt;. If a field does not explicitly specify a set of allowed characters, then these are the characters that are allowed for the field. Some fields may specify a different set of characters, in which case this will be documented for the field (like for the &#39;id&#39; field in this service).&lt;/p&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        UserCreateParamsImpl body = null;
        User response = api.createUser(body);

        // TODO: test validations
    }
    
    /**
     * Delete the authorized user
     *
     * Delete the authorized user. Must pass the user&#39;s access_token. ATTENTION: This deletes the user including all of his bank connections, accounts, balance data and transactions! THIS PROCESS CANNOT BE UNDONE! Note that a user cannot get deleted while any of his bank connections are currently busy (in the process of import, update, or transactions categorization). &lt;p&gt;Note: finAPI will send a notification about the deletion of the user to each of your clients that has a user synchronization callback URL set in its configuration. This also includes the client that is performing this request.&lt;/p&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAuthorizedUserTest() throws ApiException {
        api.deleteAuthorizedUser();

        // TODO: test validations
    }
    
    /**
     * Delete an unverified user
     *
     * Delete an unverified user. Must pass your global (i.e. client) access_token.&lt;br/&gt;&lt;br/&gt;Notes:&lt;br/&gt;&amp;bull; Unverified users can only exist if the field &#39;isUserAutoVerificationEnabled&#39; (see Client Configuration Resource) is set to &#39;false&#39; (or had been false at some point in the past).&lt;br/&gt;&amp;bull; finAPI will send a notification about the deletion of the user to each of your clients that has a user synchronization callback URL set in its configuration. This also includes the client that is performing this request.&lt;br/&gt;&amp;bull; finAPI regards user identifiers case-insensitive.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUnverifiedUserTest() throws ApiException {
        String userId = null;
        api.deleteUnverifiedUser(userId);

        // TODO: test validations
    }
    
    /**
     * Edit the authorized user
     *
     * Edit the authorized user&#39;s data and settings. Must pass the user&#39;s access_token. Pass an empty string (but not null) to unset either the email or phone number. At least one field must have a non-null value in the request body. This service returns the user&#39;s password as &#39;XXXXX&#39;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void editAuthorizedUserTest() throws ApiException {
        UserUpdateParamsImpl body = null;
        User response = api.editAuthorizedUser(body);

        // TODO: test validations
    }
    
    /**
     * Execute password change
     *
     * Change the password of a user. Must pass your global (i.e. client) access_token.&lt;br/&gt;&lt;br/&gt;Note: When changing the password of a user, all tokens that have been handed out for that user (for whatever client) will be revoked! Also note that finAPI regards user identifiers case-insensitive.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void executePasswordChangeTest() throws ApiException {
        ExecutePasswordChangeParams body = null;
        api.executePasswordChange(body);

        // TODO: test validations
    }
    
    /**
     * Get the authorized user
     *
     * Get the authorized user&#39;s data. Must pass the user&#39;s access_token. Only the authorized user can get his data, i.e. his access_token must be used. This service returns the user&#39;s password as &#39;XXXXX&#39;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAuthorizedUserTest() throws ApiException {
        User response = api.getAuthorizedUser();

        // TODO: test validations
    }
    
    /**
     * Get a user&#39;s verification status
     *
     * Get the verification status of the requested user. Must pass your global (i.e. client) access_token. Note that finAPI regards user identifiers case-insensitive.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVerificationStatusTest() throws ApiException {
        String userId = null;
        VerificationStatusResource response = api.getVerificationStatus(userId);

        // TODO: test validations
    }
    
    /**
     * Request password change
     *
     * Request password change for a user. Must pass your global (i.e. client) access_token. Note that finAPI regards user identifiers case-insensitive.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestPasswordChangeTest() throws ApiException {
        RequestPasswordChangeParameters body = null;
        PasswordChangingResource response = api.requestPasswordChange(body);

        // TODO: test validations
    }
    
    /**
     * Verify a user
     *
     * Verify a user. User verification is only required when your client does not have auto-verification enabled (see field &#39;isUserAutoVerificationEnabled&#39; in Client Configuration Resource). Must pass your global (i.e. client) access_token. Note that finAPI regards user identifiers case-insensitive.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void verifyUserTest() throws ApiException {
        String userId = null;
        api.verifyUser(userId);

        // TODO: test validations
    }
    
}
