/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.46.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.MockAccountData;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Data for a mock bank connection update
 */
@ApiModel(description = "Data for a mock bank connection update")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-05-14T19:12:52.919Z")
public class MockBankConnectionUpdate {
  @SerializedName("bankConnectionId")
  private Long bankConnectionId = null;

  @SerializedName("simulateBankLoginError")
  private Boolean simulateBankLoginError = false;

  @SerializedName("mockAccountsData")
  private List<MockAccountData> mockAccountsData = null;

  public MockBankConnectionUpdate bankConnectionId(Long bankConnectionId) {
    this.bankConnectionId = bankConnectionId;
    return this;
  }

   /**
   * Bank connection identifier
   * @return bankConnectionId
  **/
  @ApiModelProperty(required = true, value = "Bank connection identifier")
  public Long getBankConnectionId() {
    return bankConnectionId;
  }

  public void setBankConnectionId(Long bankConnectionId) {
    this.bankConnectionId = bankConnectionId;
  }

  public MockBankConnectionUpdate simulateBankLoginError(Boolean simulateBankLoginError) {
    this.simulateBankLoginError = simulateBankLoginError;
    return this;
  }

   /**
   * Whether to simulate the case that the update fails due to incorrect banking credentials. Note that there is no real communication to any bank server involved, so you won&#39;t lock your accounts when enabling this flag. Default value is &#39;false&#39;.
   * @return simulateBankLoginError
  **/
  @ApiModelProperty(value = "Whether to simulate the case that the update fails due to incorrect banking credentials. Note that there is no real communication to any bank server involved, so you won't lock your accounts when enabling this flag. Default value is 'false'.")
  public Boolean isSimulateBankLoginError() {
    return simulateBankLoginError;
  }

  public void setSimulateBankLoginError(Boolean simulateBankLoginError) {
    this.simulateBankLoginError = simulateBankLoginError;
  }

  public MockBankConnectionUpdate mockAccountsData(List<MockAccountData> mockAccountsData) {
    this.mockAccountsData = mockAccountsData;
    return this;
  }

  public MockBankConnectionUpdate addMockAccountsDataItem(MockAccountData mockAccountsDataItem) {
    if (this.mockAccountsData == null) {
      this.mockAccountsData = new ArrayList<MockAccountData>();
    }
    this.mockAccountsData.add(mockAccountsDataItem);
    return this;
  }

   /**
   * Mock accounts data. Note that for accounts that exist in a bank connection but that you do not specify in this list, the service will act like those accounts are not received by the bank servers. This means that any accounts that you do not specify here will be marked as deprecated. If you do not specify this list at all, all accounts in the bank connection will be marked as deprecated.
   * @return mockAccountsData
  **/
  @ApiModelProperty(value = "Mock accounts data. Note that for accounts that exist in a bank connection but that you do not specify in this list, the service will act like those accounts are not received by the bank servers. This means that any accounts that you do not specify here will be marked as deprecated. If you do not specify this list at all, all accounts in the bank connection will be marked as deprecated.")
  public List<MockAccountData> getMockAccountsData() {
    return mockAccountsData;
  }

  public void setMockAccountsData(List<MockAccountData> mockAccountsData) {
    this.mockAccountsData = mockAccountsData;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MockBankConnectionUpdate mockBankConnectionUpdate = (MockBankConnectionUpdate) o;
    return Objects.equals(this.bankConnectionId, mockBankConnectionUpdate.bankConnectionId) &&
        Objects.equals(this.simulateBankLoginError, mockBankConnectionUpdate.simulateBankLoginError) &&
        Objects.equals(this.mockAccountsData, mockBankConnectionUpdate.mockAccountsData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bankConnectionId, simulateBankLoginError, mockAccountsData);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MockBankConnectionUpdate {\n");
    
    sb.append("    bankConnectionId: ").append(toIndentedString(bankConnectionId)).append("\n");
    sb.append("    simulateBankLoginError: ").append(toIndentedString(simulateBankLoginError)).append("\n");
    sb.append("    mockAccountsData: ").append(toIndentedString(mockAccountsData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

