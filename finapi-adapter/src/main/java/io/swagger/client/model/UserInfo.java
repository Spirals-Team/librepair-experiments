/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.46.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.MonthlyUserStats;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Container for user information
 */
@ApiModel(description = "Container for user information")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-05-14T19:12:52.919Z")
public class UserInfo {
  @SerializedName("userId")
  private String userId = null;

  @SerializedName("registrationDate")
  private String registrationDate = null;

  @SerializedName("deletionDate")
  private String deletionDate = null;

  @SerializedName("lastActiveDate")
  private String lastActiveDate = null;

  @SerializedName("bankConnectionCount")
  private Integer bankConnectionCount = null;

  @SerializedName("latestBankConnectionImportDate")
  private String latestBankConnectionImportDate = null;

  @SerializedName("latestBankConnectionDeletionDate")
  private String latestBankConnectionDeletionDate = null;

  @SerializedName("monthlyStats")
  private List<MonthlyUserStats> monthlyStats = null;

  public UserInfo userId(String userId) {
    this.userId = userId;
    return this;
  }

   /**
   * User&#39;s identifier
   * @return userId
  **/
  @ApiModelProperty(required = true, value = "User's identifier")
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }

  public UserInfo registrationDate(String registrationDate) {
    this.registrationDate = registrationDate;
    return this;
  }

   /**
   * User&#39;s registration date, in the format &#39;yyyy-MM-dd&#39;
   * @return registrationDate
  **/
  @ApiModelProperty(required = true, value = "User's registration date, in the format 'yyyy-MM-dd'")
  public String getRegistrationDate() {
    return registrationDate;
  }

  public void setRegistrationDate(String registrationDate) {
    this.registrationDate = registrationDate;
  }

  public UserInfo deletionDate(String deletionDate) {
    this.deletionDate = deletionDate;
    return this;
  }

   /**
   * User&#39;s deletion date, in the format &#39;yyyy-MM-dd&#39;. May be null if the user has not been deleted.
   * @return deletionDate
  **/
  @ApiModelProperty(value = "User's deletion date, in the format 'yyyy-MM-dd'. May be null if the user has not been deleted.")
  public String getDeletionDate() {
    return deletionDate;
  }

  public void setDeletionDate(String deletionDate) {
    this.deletionDate = deletionDate;
  }

  public UserInfo lastActiveDate(String lastActiveDate) {
    this.lastActiveDate = lastActiveDate;
    return this;
  }

   /**
   * User&#39;s last active date, in the format &#39;yyyy-MM-dd&#39;. May be null if the user has not yet logged in.
   * @return lastActiveDate
  **/
  @ApiModelProperty(value = "User's last active date, in the format 'yyyy-MM-dd'. May be null if the user has not yet logged in.")
  public String getLastActiveDate() {
    return lastActiveDate;
  }

  public void setLastActiveDate(String lastActiveDate) {
    this.lastActiveDate = lastActiveDate;
  }

  public UserInfo bankConnectionCount(Integer bankConnectionCount) {
    this.bankConnectionCount = bankConnectionCount;
    return this;
  }

   /**
   * Number of bank connections that currently exist for this user.
   * @return bankConnectionCount
  **/
  @ApiModelProperty(required = true, value = "Number of bank connections that currently exist for this user.")
  public Integer getBankConnectionCount() {
    return bankConnectionCount;
  }

  public void setBankConnectionCount(Integer bankConnectionCount) {
    this.bankConnectionCount = bankConnectionCount;
  }

  public UserInfo latestBankConnectionImportDate(String latestBankConnectionImportDate) {
    this.latestBankConnectionImportDate = latestBankConnectionImportDate;
    return this;
  }

   /**
   * Latest date of when a bank connection was imported for this user, in the format &#39;yyyy-MM-dd&#39;. This field is null when there has never been a bank connection import.
   * @return latestBankConnectionImportDate
  **/
  @ApiModelProperty(value = "Latest date of when a bank connection was imported for this user, in the format 'yyyy-MM-dd'. This field is null when there has never been a bank connection import.")
  public String getLatestBankConnectionImportDate() {
    return latestBankConnectionImportDate;
  }

  public void setLatestBankConnectionImportDate(String latestBankConnectionImportDate) {
    this.latestBankConnectionImportDate = latestBankConnectionImportDate;
  }

  public UserInfo latestBankConnectionDeletionDate(String latestBankConnectionDeletionDate) {
    this.latestBankConnectionDeletionDate = latestBankConnectionDeletionDate;
    return this;
  }

   /**
   * Latest date of when a bank connection was deleted for this user, in the format &#39;yyyy-MM-dd&#39;. This field is null when there has never been a bank connection deletion.
   * @return latestBankConnectionDeletionDate
  **/
  @ApiModelProperty(value = "Latest date of when a bank connection was deleted for this user, in the format 'yyyy-MM-dd'. This field is null when there has never been a bank connection deletion.")
  public String getLatestBankConnectionDeletionDate() {
    return latestBankConnectionDeletionDate;
  }

  public void setLatestBankConnectionDeletionDate(String latestBankConnectionDeletionDate) {
    this.latestBankConnectionDeletionDate = latestBankConnectionDeletionDate;
  }

  public UserInfo monthlyStats(List<MonthlyUserStats> monthlyStats) {
    this.monthlyStats = monthlyStats;
    return this;
  }

  public UserInfo addMonthlyStatsItem(MonthlyUserStats monthlyStatsItem) {
    if (this.monthlyStats == null) {
      this.monthlyStats = new ArrayList<MonthlyUserStats>();
    }
    this.monthlyStats.add(monthlyStatsItem);
    return this;
  }

   /**
   * Additional information about the user&#39;s data or activities, broken down in months. The list will by default contain an entry for each month starting with the month of when the user was registered, up to the current month. The date range may vary when you have limited it in the request. &lt;br/&gt;&lt;br/&gt;Please note:&lt;br/&gt;&amp;bull; this field is only set when &#39;includeMonthlyStats&#39; &#x3D; true, otherwise it will be null.&lt;br/&gt;&amp;bull; the list is always ordered from the latest month first, to the oldest month last.&lt;br/&gt;&amp;bull; the list will never contain an entry for a month that was prior to the month of when the user was registered, or after the month of when the user was deleted, even when you have explicitly set a respective date range. This means that the list may be empty if you are requesting a date range where the user didn&#39;t exist yet, or didn&#39;t exist any longer.
   * @return monthlyStats
  **/
  @ApiModelProperty(value = "Additional information about the user's data or activities, broken down in months. The list will by default contain an entry for each month starting with the month of when the user was registered, up to the current month. The date range may vary when you have limited it in the request. <br/><br/>Please note:<br/>&bull; this field is only set when 'includeMonthlyStats' = true, otherwise it will be null.<br/>&bull; the list is always ordered from the latest month first, to the oldest month last.<br/>&bull; the list will never contain an entry for a month that was prior to the month of when the user was registered, or after the month of when the user was deleted, even when you have explicitly set a respective date range. This means that the list may be empty if you are requesting a date range where the user didn't exist yet, or didn't exist any longer.")
  public List<MonthlyUserStats> getMonthlyStats() {
    return monthlyStats;
  }

  public void setMonthlyStats(List<MonthlyUserStats> monthlyStats) {
    this.monthlyStats = monthlyStats;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserInfo userInfo = (UserInfo) o;
    return Objects.equals(this.userId, userInfo.userId) &&
        Objects.equals(this.registrationDate, userInfo.registrationDate) &&
        Objects.equals(this.deletionDate, userInfo.deletionDate) &&
        Objects.equals(this.lastActiveDate, userInfo.lastActiveDate) &&
        Objects.equals(this.bankConnectionCount, userInfo.bankConnectionCount) &&
        Objects.equals(this.latestBankConnectionImportDate, userInfo.latestBankConnectionImportDate) &&
        Objects.equals(this.latestBankConnectionDeletionDate, userInfo.latestBankConnectionDeletionDate) &&
        Objects.equals(this.monthlyStats, userInfo.monthlyStats);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userId, registrationDate, deletionDate, lastActiveDate, bankConnectionCount, latestBankConnectionImportDate, latestBankConnectionDeletionDate, monthlyStats);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserInfo {\n");
    
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    registrationDate: ").append(toIndentedString(registrationDate)).append("\n");
    sb.append("    deletionDate: ").append(toIndentedString(deletionDate)).append("\n");
    sb.append("    lastActiveDate: ").append(toIndentedString(lastActiveDate)).append("\n");
    sb.append("    bankConnectionCount: ").append(toIndentedString(bankConnectionCount)).append("\n");
    sb.append("    latestBankConnectionImportDate: ").append(toIndentedString(latestBankConnectionImportDate)).append("\n");
    sb.append("    latestBankConnectionDeletionDate: ").append(toIndentedString(latestBankConnectionDeletionDate)).append("\n");
    sb.append("    monthlyStats: ").append(toIndentedString(monthlyStats)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

