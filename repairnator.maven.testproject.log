[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for fr.inria.gforge.spoon:spoon-core:jar:7.1.0-SNAPSHOT
[WARNING] 'build.plugins.plugin.version' for org.pitest:pitest-maven is missing. @ line 526, column 15
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
[INFO] Inspecting build with total of 1 modules...
[INFO] Installing Nexus Staging features:
[INFO]   ... total of 1 executions of maven-deploy-plugin replaced with nexus-staging-maven-plugin
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Spoon Core 7.1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-enforcer-plugin:1.0:enforce (enforce-maven) @ spoon-core ---
[INFO] Skipping Rule Enforcement.
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.1:prepare-agent (default) @ spoon-core ---
[INFO] argLine set to -javaagent:/root/./workspace/INRIA/spoon/422224671/.m2/org/jacoco/org.jacoco.agent/0.8.1/org.jacoco.agent-0.8.1-runtime.jar=destfile=/root/workspace/INRIA/spoon/422224671/target/jacoco.exec
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ spoon-core ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 3 resources
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:compile (default-compile) @ spoon-core ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ spoon-core ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 177 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:testCompile (default-testCompile) @ spoon-core ---
[INFO] Compiling 2 source files to /root/workspace/INRIA/spoon/422224671/target/test-classes
[INFO] 
[INFO] --- maven-surefire-plugin:2.21.0:test (default-test) @ spoon-core ---
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.21.0/surefire-junit4-2.21.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.21.0/surefire-junit4-2.21.0.pom (4 KB at 5.2 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.21.0/surefire-providers-2.21.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.21.0/surefire-providers-2.21.0.pom (3 KB at 68.2 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.21.0/surefire-junit4-2.21.0.jar
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.21.0/surefire-junit4-2.21.0.jar (83 KB at 1215.6 KB/sec)
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running spoon.support.compiler.jdt.ExtendedStringLiteralTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.57 s - in spoon.support.compiler.jdt.ExtendedStringLiteralTest
[INFO] Running spoon.support.compiler.jdt.JDTBuilderTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in spoon.support.compiler.jdt.JDTBuilderTest
[INFO] Running spoon.support.compiler.jdt.JDTBatchCompilerTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.251 s - in spoon.support.compiler.jdt.JDTBatchCompilerTest
[INFO] Running spoon.support.compiler.jdt.JDTBasedSpoonCompilerTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 14.1 s - in spoon.support.compiler.jdt.JDTBasedSpoonCompilerTest
[INFO] Running spoon.support.compiler.classpath.ComputeClasspathTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.022 s - in spoon.support.compiler.classpath.ComputeClasspathTest
[INFO] Running spoon.support.visitor.java.JavaReflectionTreeBuilderTest
[ERROR] Tests run: 18, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 12.95 s <<< FAILURE! - in spoon.support.visitor.java.JavaReflectionTreeBuilderTest
[ERROR] testShadowModelEqualsNormalModel(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)  Time elapsed: 12.107 s  <<< FAILURE!
java.lang.AssertionError: 
Found 1729 problems:
Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=6]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtConditional<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtConditional<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtConditional<T>

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtConditional<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtConditional<T>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtConditional<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtProvidedService

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtProvidedService

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtProvidedService

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtProvidedService

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtProvidedService

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtProvidedService

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAbstractInvocation<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAbstractInvocation<T>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAbstractInvocation<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=15]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=14]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtParameter<T>

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=14]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtVariable<T>

Diff on path: #typeMember[index=14]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtShadowable

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtVariable<T>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtParameter<T>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtBodyHolder

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtWhile

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtWhile

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=23]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=22]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=28]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=28]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=23]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtTypeReference<T>

Diff on path: #typeMember[index=23]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=29]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=29]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtShadowable

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=22]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtTypeReference<T>

Diff on path: #typeMember[index=22]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Difference on path: #typeMember[index=7]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=8]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtTypeReference<T>

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtTypeReference<T>

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtLabelledFlowBreak

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=0]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #interface[name=CtAssignment]#typeArgument[index=1]#boundingType
Shadow: 
Normal: T

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=15]#type#typeArgument[index=0]#boundingType
Shadow: 
Normal: T

Difference on path: #typeMember[index=6]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=8]#typeParameter[index=0]#superType#typeArgument[index=1]#boundingType
Shadow: 
Normal: T

Difference on path: #typeMember[index=8]#type#boundingType#typeArgument
Shadow: []
Normal: [T, A]

Difference on path: #typeMember[index=3]#type#typeArgument[index=0]#boundingType
Shadow: 
Normal: T

Difference on path: #typeMember[index=2]#typeParameter[index=0]#superType#typeArgument[index=0]#boundingType
Shadow: 
Normal: T

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=2]#parameter[index=0]#type#typeArgument[index=0]#boundingType
Shadow: 
Normal: T

Difference on path: #typeMember[index=9]#type#typeArgument[index=1]#boundingType
Shadow: 
Normal: T

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<T>

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAssignment<T, A>

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtRHSReceiver<A>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [T, A]

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAssignment<T, A>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=6]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtBinaryOperator<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtBinaryOperator<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtBinaryOperator<T>

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtBinaryOperator<T>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtBinaryOperator<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtBinaryOperator<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Missing shadow typeMember: setParent(spoon.reflect.declaration.CtElement)
Difference on path: #typeMember
Shadow: null
Normal: @java.lang.Override
public <E extends spoon.reflect.declaration.CtElement> E setParent(E parent) {
    this.parent = parent;
    return ((E) (this));
}

Unexpected shadow typeMember: setParent(java.lang.Object)
Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=28]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=28]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=19]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=19]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=18]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=18]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=45]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=45]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=45]#parameter[index=0]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=45]#parameter[index=0]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=40]#type#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=40]#type#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=40]#parameter[index=0]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=40]#parameter[index=0]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=26]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=26]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=37]#parameter[index=0]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=37]#parameter[index=0]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=23]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=23]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=3]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=41]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=41]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=41]#parameter[index=0]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=41]#parameter[index=0]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=11]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=11]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=11]#parameter[index=0]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=11]#parameter[index=0]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#parameter[index=0]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=1]#parameter[index=0]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=12]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=12]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=25]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=25]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=32]#parameter[index=0]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=32]#parameter[index=0]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=44]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=44]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=44]#parameter[index=0]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=44]#parameter[index=0]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Missing shadow typeMember: setParent(spoon.reflect.declaration.CtElement)
Difference on path: #typeMember
Shadow: null
Normal: /**
 * Manually sets the parent element of the current element.
 *
 * @param parent
 * 		parent reference.
 */
<E extends spoon.reflect.declaration.CtElement> E setParent(E parent);

Unexpected shadow typeMember: setParent(java.lang.Object)
Diff on path: #typeMember[index=9]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=9]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=9]#parameter[index=0]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=9]#parameter[index=0]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=11]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=11]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=26]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=26]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=17]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=17]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=23]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=23]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=16]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=16]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=39]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=39]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=39]#parameter[index=0]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=39]#parameter[index=0]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=34]#type#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=34]#type#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=34]#parameter[index=0]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=34]#parameter[index=0]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=24]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=24]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=32]#parameter[index=0]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=32]#parameter[index=0]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=21]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=21]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=1]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=35]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=35]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=35]#parameter[index=0]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=35]#parameter[index=0]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=30]#parameter[index=0]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=30]#parameter[index=0]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=37]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=37]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=37]#parameter[index=0]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=37]#parameter[index=0]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=0]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtRHSReceiver<T>

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModuleRequirement

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModuleRequirement

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModuleRequirement

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModuleRequirement

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtForEach

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtForEach

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtForEach

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtForEach

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtFormalTypeDeclarer

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=12]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=12]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtNamedElement

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=16]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=16]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtFormalTypeDeclarer

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=11]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=11]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtShadowable

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtNamedElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=0]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtRHSReceiver<A>

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T, spoon.reflect.code.CtExpression<?>]

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtTargetedExpression<T, spoon.reflect.code.CtExpression<?>>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #interface[name=CtTargetedExpression]#typeArgument[index=1]#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [?]

Missing shadow typeMember: setTarget(spoon.reflect.code.CtExpression)
Difference on path: #typeMember
Shadow: null
Normal: @java.lang.Override
public <C extends spoon.reflect.code.CtTargetedExpression<E, T>> C setTarget(T target) {
    if (target != null) {
        target.setParent(this);
    }
    getFactory().getEnvironment().getModelChangeListener().onObjectUpdate(this, spoon.reflect.path.CtRole.TARGET, target, this.target);
    this.target = target;
    return ((C) (this));
}

Difference on path: #typeMember[index=1]#type#typeArgument[index=1]#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [?]

Unexpected shadow typeMember: setTarget(java.lang.Object)
Diff on path: #interface[name=CtTargetedExpression]#typeArgument[index=1]#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<?>

Diff on path: #interface[name=CtTargetedExpression]#typeArgument[index=1]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<?>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#typeArgument[index=1]#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<?>

Diff on path: #typeMember[index=1]#type#typeArgument[index=1]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<?>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T, E]

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtTargetedExpression<T, E>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtNamedElement

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtNamedElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=14]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=14]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=17]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=17]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtNamedElement

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=11]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=11]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=12]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=12]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Void]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Void]

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Void]

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Void]

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<java.lang.Void>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<java.lang.Void>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<java.lang.Void>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtNamedElement

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<java.lang.Void>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtComment

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtComment

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtComment

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtComment

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T, spoon.reflect.code.CtExpression<?>]

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtTargetedExpression<T, spoon.reflect.code.CtExpression<?>>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtReference

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtReference

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDoc

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDoc

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDoc

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDoc

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDoc

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDoc

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDoc

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDoc

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDoc

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDoc

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=11]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=11]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=16]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=16]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=14]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=14]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=14]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=14]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=12]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=12]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #superType#typeArgument[index=1]#boundingType
Shadow: 
Normal: T

Difference on path: #interface[name=CtOperatorAssignment]#typeArgument[index=1]#boundingType
Shadow: 
Normal: T

Difference on path: #typeMember[index=2]#typeParameter[index=0]#superType#typeArgument[index=1]#boundingType
Shadow: 
Normal: T

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T, A]

Difference on path: #typeMember[index=3]#type#typeArgument[index=1]#boundingType
Shadow: 
Normal: T

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtOperatorAssignment<T, A>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [T, A]

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtOperatorAssignment<T, A>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=9]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=6]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotationMethod<T>

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtFormalTypeDeclarer

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<T>

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtBodyHolder

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<T>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtFormalTypeDeclarer

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotationMethod<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<T>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtBodyHolder

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<T>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtLabelledFlowBreak

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=17]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=14]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=19]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=15]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=17]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtClass<T>

Diff on path: #typeMember[index=17]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=14]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtClass<T>

Diff on path: #typeMember[index=14]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=12]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=12]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=19]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtClass<T>

Diff on path: #typeMember[index=19]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtCodeElement

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtClass<T>

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=11]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=11]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=7]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtClass<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtClass<T>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtClass<T>

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtClass<T>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=14]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=14]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #superType#typeArgument[index=1]#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #interface[name=CtArrayAccess]#typeArgument[index=1]#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #typeMember[index=2]#typeParameter[index=0]#superType#typeArgument[index=1]#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T, V]

Difference on path: #typeMember[index=3]#type#typeArgument[index=1]#boundingType#typeArgument
Shadow: []
Normal: [?]

Diff on path: #superType#typeArgument[index=1]#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<?>

Diff on path: #superType#typeArgument[index=1]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #interface[name=CtArrayAccess]#typeArgument[index=1]#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<?>

Diff on path: #interface[name=CtArrayAccess]#typeArgument[index=1]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#typeParameter[index=0]#superType#typeArgument[index=1]#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<?>

Diff on path: #typeMember[index=2]#typeParameter[index=0]#superType#typeArgument[index=1]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtArrayAccess<T, V>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#typeArgument[index=1]#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<?>

Diff on path: #typeMember[index=3]#type#typeArgument[index=1]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [T, E]

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtArrayAccess<T, E>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtCodeSnippet

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Difference on path: #typeMember[index=22]#type#boundingType#typeArgument
Shadow: []
Normal: [?]

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtPackage

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtPackage

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=22]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<?>

Diff on path: #typeMember[index=22]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=11]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtPackage

Diff on path: #typeMember[index=11]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtShadowable

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtPackage

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=15]#type#boundingType#typeArgument
Shadow: []
Normal: [?]

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<?>

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtPackage

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtPackage

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtPackage

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtPackage

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtTryWithResource

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtTryWithResource

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtTryWithResource

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtTryWithResource

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAssert<T>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAssert<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAssert<T>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAssert<T>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtVariableReference<T>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Difference on path: #typeMember[index=0]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtVariableReference<T>

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Difference on path: #typeMember[index=6]#type#boundingType#typeArgument
Shadow: []
Normal: [S]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [S]

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [S]

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtSwitch<S>

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtSwitch<S>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtSwitch<S>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [S]

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [S]

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [S]

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtSwitch<S>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtSwitch<S>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtSwitch<S>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtTry

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtTry

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtTry

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtBodyHolder

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtTry

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtTry

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtTry

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtSynchronized

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtSynchronized

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtSynchronized

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtSynchronized

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtImport

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtImport

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=12]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtTypeParameterReference

Diff on path: #typeMember[index=12]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtTypeParameterReference

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=19]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtTypeParameterReference

Diff on path: #typeMember[index=19]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=16]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtTypeParameterReference

Diff on path: #typeMember[index=16]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtTypeParameterReference

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtTypeParameterReference

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtTypeParameterReference

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtTypeParameterReference

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Difference on path: #typeMember[index=12]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=20]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=13]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=15]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=16]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=16]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=12]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAbstractInvocation<T>

Diff on path: #typeMember[index=12]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=20]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAbstractInvocation<T>

Diff on path: #typeMember[index=20]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAbstractInvocation<T>

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAbstractInvocation<T>

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=11]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=11]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=14]#typeMember[index=2]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=14]#typeMember[index=2]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=14]#typeMember[index=2]#parameter[index=0]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=14]#typeMember[index=2]#parameter[index=0]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtCodeSnippet

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<T>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<T>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtUnaryOperator

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtUnaryOperator

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtUnaryOperator

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtUnaryOperator

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=15]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=13]#type#typeArgument[index=0]#boundingType
Shadow: 
Normal: T

Difference on path: #typeMember[index=7]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtExecutableReference<T>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtExecutableReference<T>

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtExecutableReference<T>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtExecutableReference<T>

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Difference on path: #typeMember[index=9]#type#typeArgument[index=0]#boundingType
Shadow: 
Normal: T

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=0]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=10]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtExecutableReference<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtExecutableReference<T>

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtExecutableReference<T>

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtExecutableReference<T>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtFor

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtFor

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtFor

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtFor

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtFor

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtFor

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtFor

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtFor

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtFor

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtFor

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=19]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=6]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=7]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=21]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=11]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=17]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=15]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=9]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=18]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=14]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=34]#type#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Diff on path: #typeMember[index=19]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=19]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=21]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=21]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=11]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=11]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=42]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=42]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=37]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtFormalTypeDeclarer

Diff on path: #typeMember[index=37]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=17]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=17]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=39]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=39]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=18]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=18]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=14]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=14]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=41]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=41]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=34]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<?>

Diff on path: #typeMember[index=34]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=40]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=40]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=8]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=9]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=6]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=7]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=11]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtFormalTypeDeclarer

Diff on path: #typeMember[index=11]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=12]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=12]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtFormalTypeDeclarer

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtFormalTypeDeclarer

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtMultiTypedElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtMultiTypedElement

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=15]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=17]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtRHSReceiver<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtVariable<T>

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtNamedElement

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=11]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=11]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=14]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=14]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=17]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtLocalVariable<T>

Diff on path: #typeMember[index=17]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtLocalVariable<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtRHSReceiver<T>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtIf

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtIf

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtIf

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtIf

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtIf

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtIf

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=10]#type#boundingType#typeArgument
Shadow: []
Normal: [R]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [R]

Difference on path: #typeMember[index=9]#type#boundingType#typeArgument
Shadow: []
Normal: [R]

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [R]

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<R>

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<R>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<R>

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=12]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtBodyHolder

Diff on path: #typeMember[index=12]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<R>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=7]#type#boundingType#typeArgument
Shadow: []
Normal: [R]

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [R]

Difference on path: #typeMember[index=6]#type#boundingType#typeArgument
Shadow: []
Normal: [R]

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [R]

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<R>

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<R>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<R>

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<R>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Missing shadow typeMember: setParent(spoon.reflect.declaration.CtElement)
Difference on path: #typeMember
Shadow: null
Normal: @java.lang.Override
@spoon.support.DerivedProperty
public <T extends spoon.reflect.declaration.CtElement> T setParent(T parent) {
    return ((T) (this));
}

Unexpected shadow typeMember: setParent(java.lang.Object)
Diff on path: #typeMember[index=31]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=31]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=29]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=29]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=21]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=21]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=24]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=24]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=22]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=22]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=28]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=28]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=12]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=12]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=18]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=18]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=27]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=27]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=17]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=17]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=19]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=19]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=16]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=16]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=30]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=30]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=14]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=14]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=20]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=20]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=25]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=25]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=26]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=26]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=23]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=23]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=30]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=30]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=28]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=28]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=20]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=20]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=23]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=23]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=12]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=12]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=21]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=21]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=27]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=27]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=11]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=11]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=17]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=17]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=14]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=14]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=26]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=26]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=16]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=16]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=18]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=18]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=29]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=29]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=19]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=19]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=24]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=24]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=25]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=25]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=22]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=22]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtPackageExport

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtPackageExport

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtPackageExport

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtPackageExport

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtPackageExport

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtPackageExport

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtPackageExport

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtPackageExport

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=26]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=23]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=7]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=8]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=28]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=12]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=25]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=19]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=21]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=10]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=22]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=18]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=6]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=46]#type#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=26]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=26]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=23]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=23]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=28]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=28]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=12]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=12]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=55]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=55]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=58]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=58]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=25]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=25]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=49]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtFormalTypeDeclarer

Diff on path: #typeMember[index=49]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=19]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=19]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=21]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=21]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=52]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=52]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=22]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=22]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtShadowable

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=18]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=18]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=50]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtFormalTypeDeclarer

Diff on path: #typeMember[index=50]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=54]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=54]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=46]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<?>

Diff on path: #typeMember[index=46]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=53]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=53]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=23]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=20]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=6]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=25]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=10]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=31]#type#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=22]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=16]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=18]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=8]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=19]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=15]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=23]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=23]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=20]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=20]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=25]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=25]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=31]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<?>

Diff on path: #typeMember[index=31]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=22]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=22]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=16]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=16]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=18]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=18]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=19]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=19]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=13]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=20]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=12]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=15]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=16]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=16]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAbstractInvocation<T>

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=20]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAbstractInvocation<T>

Diff on path: #typeMember[index=20]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=12]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAbstractInvocation<T>

Diff on path: #typeMember[index=12]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAbstractInvocation<T>

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=11]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=11]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Difference on path: #typeMember[index=17]#type#boundingType#typeArgument
Shadow: []
Normal: [E]

Diff on path: #typeMember[index=14]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=14]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=17]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtCase<E>

Diff on path: #typeMember[index=17]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [S]

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtCase<S>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtVariable<T>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtCatch

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtBodyHolder

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtCatch

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtReference

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtArrayTypeReference<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtArrayTypeReference<T>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtReference

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtFormalTypeDeclarer

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=14]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=14]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=18]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=18]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtMethod<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtFormalTypeDeclarer

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=12]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=12]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtShadowable

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtMethod<T>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=9]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=8]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=13]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<T>

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<T>

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=11]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtBodyHolder

Diff on path: #typeMember[index=11]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<T>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtNamedElement

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtLambda<T>

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=0]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtLambda<T>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<T>

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtShadowable

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=6]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=8]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtNewArray<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtNewArray<T>

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtNewArray<T>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtNewArray<T>

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=7]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtNewArray<T>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtNewArray<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtNewArray<T>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtNewArray<T>

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtUsedService

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtUsedService

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtIntersectionTypeReference

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtIntersectionTypeReference

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtIntersectionTypeReference

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtIntersectionTypeReference

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtThrow

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtThrow

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtCodeElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtCodeElement

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtLiteral<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtLiteral<T>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [R]

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtReturn<R>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [R]

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtReturn<R>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtReference

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtReference

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDocTag

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDocTag

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDocTag

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDocTag

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDocTag

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDocTag

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDocTag

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDocTag

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=6]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=18]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtRHSReceiver<T>

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=18]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtVariable<T>

Diff on path: #typeMember[index=18]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=17]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=17]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=14]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=14]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=11]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=11]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=12]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=12]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtShadowable

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtRHSReceiver<T>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtTypeAccess<A>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtTypeAccess<A>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtCodeSnippet

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtDo

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtDo

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtVariableAccess<T>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtVariableAccess<T>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=10]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=19]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=15]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=18]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=20]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=16]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=11]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=22]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=17]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=21]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Diff on path: #superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #superType#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #interface[name=CtAnnotation]#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #interface[name=CtAnnotation]#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=30]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression

Diff on path: #typeMember[index=30]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=35]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=35]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=10]#typeParameter[index=0]#superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=10]#typeParameter[index=0]#superType#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<A>

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=19]#typeParameter[index=0]#superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=19]#typeParameter[index=0]#superType#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=19]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=19]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=15]#typeParameter[index=0]#superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=15]#typeParameter[index=0]#superType#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=18]#typeParameter[index=0]#superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=18]#typeParameter[index=0]#superType#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=18]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=18]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=33]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression

Diff on path: #typeMember[index=33]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=20]#typeParameter[index=0]#superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=20]#typeParameter[index=0]#superType#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=20]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=20]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=38]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=38]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=16]#typeParameter[index=0]#superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=16]#typeParameter[index=0]#superType#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=16]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=16]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=11]#typeParameter[index=0]#superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=11]#typeParameter[index=0]#superType#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=11]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=11]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=22]#typeParameter[index=0]#superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=22]#typeParameter[index=0]#superType#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=22]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=22]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtShadowable

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=17]#typeParameter[index=0]#superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=17]#typeParameter[index=0]#superType#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=17]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=17]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=31]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=31]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=21]#typeParameter[index=0]#superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=21]#typeParameter[index=0]#superType#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=21]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=21]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=6]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=7]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=9]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=8]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=18]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression

Diff on path: #typeMember[index=18]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=20]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression

Diff on path: #typeMember[index=20]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<A>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<T>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<T>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<T>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtLabelledFlowBreak

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=9]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=7]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtFieldReference<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtFieldReference<T>

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtFieldReference<T>

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=7]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtFieldReference<T>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtFieldReference<T>

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtFieldReference<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Difference on path: #superType#typeArgument[index=0]#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #interface[name=CtEnum]#typeArgument[index=0]#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #typeMember[index=25]#type#typeArgument[index=0]#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #typeMember[index=24]#type#typeArgument[index=0]#type#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #typeMember[index=13]#typeParameter[index=0]#superType#typeArgument[index=0]#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #typeMember[index=13]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=4]#typeParameter[index=0]#superType#typeArgument[index=0]#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=11]#typeParameter[index=0]#superType#typeArgument[index=0]#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #typeMember[index=11]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=14]#type#typeArgument[index=0]#boundingType#typeArgument
Shadow: []
Normal: [?]

Diff on path: #superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.Enum<?>

Diff on path: #interface[name=CtEnum]#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.Enum<?>

Diff on path: #typeMember[index=25]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.Enum<?>

Diff on path: #typeMember[index=24]#type#typeArgument[index=0]#type#[name]
Shadow: 
Normal: java.lang.Enum<?>

Diff on path: #typeMember[index=13]#typeParameter[index=0]#superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.Enum<?>

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtEnum<T>

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtFormalTypeDeclarer

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#typeParameter[index=0]#superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.Enum<?>

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=11]#typeParameter[index=0]#superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.Enum<?>

Diff on path: #typeMember[index=11]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtEnum<T>

Diff on path: #typeMember[index=11]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=14]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.Enum<?>

Difference on path: #typeMember[index=6]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=0]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtFormalTypeDeclarer

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtEnum<T>

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtEnum<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtBodyHolder

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtNewClass

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtNewClass

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #superType#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #interface[name=CtAnnotationType]#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #interface[name=CtAnnotationType]#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtFormalTypeDeclarer

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#typeParameter[index=0]#superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=3]#typeParameter[index=0]#superType#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#typeParameter[index=1]#superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=2]#typeParameter[index=1]#superType#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#typeParameter[index=0]#superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=4]#typeParameter[index=0]#superType#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=9]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=9]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtFormalTypeDeclarer

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=14]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=14]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtVariable<T>

Diff on path: #typeMember[index=14]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtMultiTypedElement

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtNamedElement

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=12]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=12]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=16]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtMultiTypedElement

Diff on path: #typeMember[index=16]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtVariable<T>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #superType#typeArgument[index=1]#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #interface[name=CtExecutableReferenceExpression]#typeArgument[index=1]#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #typeMember[index=4]#typeParameter[index=0]#superType#typeArgument[index=1]#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T, E]

Difference on path: #typeMember[index=2]#type#typeArgument[index=1]#boundingType#typeArgument
Shadow: []
Normal: [?]

Diff on path: #superType#typeArgument[index=1]#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<?>

Diff on path: #superType#typeArgument[index=1]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #interface[name=CtExecutableReferenceExpression]#typeArgument[index=1]#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<?>

Diff on path: #interface[name=CtExecutableReferenceExpression]#typeArgument[index=1]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#typeParameter[index=0]#superType#typeArgument[index=1]#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<?>

Diff on path: #typeMember[index=4]#typeParameter[index=0]#superType#typeArgument[index=1]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExecutableReferenceExpression<T, E>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#typeArgument[index=1]#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<?>

Diff on path: #typeMember[index=2]#type#typeArgument[index=1]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T, E]

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExecutableReferenceExpression<T, E>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

	at spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testShadowModelEqualsNormalModel(JavaReflectionTreeBuilderTest.java:191)

[ERROR] testSuperOfActualTypeArgumentsOfReturnTypeOfMethod(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)  Time elapsed: 0.174 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[T]> but was:<[Object]>
	at spoon.support.visitor.java.JavaReflectionTreeBuilderTest.lambda$testSuperOfActualTypeArgumentsOfReturnTypeOfMethod$1(JavaReflectionTreeBuilderTest.java:520)
	at spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testSuperOfActualTypeArgumentsOfReturnTypeOfMethod(JavaReflectionTreeBuilderTest.java:550)

[INFO] Running spoon.testing.CtPackageAssertTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in spoon.testing.CtPackageAssertTest
[INFO] Running spoon.testing.CtElementAssertTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.554 s - in spoon.testing.CtElementAssertTest
[INFO] Running spoon.testing.FileAssertTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.471 s - in spoon.testing.FileAssertTest
[INFO] Running spoon.testing.AbstractAssertTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.947 s - in spoon.testing.AbstractAssertTest
[INFO] Running spoon.processing.CtGenerationTest
2018-08-29 22:05:33,096 INFO spoon.Launcher - spoon.support.JavaOutputProcessor
2018-08-29 22:05:36,814 INFO spoon.Launcher - end of processing: 
2018-08-29 22:05:36,814 INFO spoon.Launcher - no errors, no warnings
[ERROR] Tests run: 4, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 98.785 s <<< FAILURE! - in spoon.processing.CtGenerationTest
[ERROR] testGenerateRoleHandler(spoon.processing.CtGenerationTest)  Time elapsed: 30.898 s  <<< FAILURE!
org.junit.ComparisonFailure: 
ModelRoleHandlers different expected:<...
    static class Ct[TargetedExpression_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtTargetedExpression, spoon.reflect.code.CtExpression<?>> {
        private CtTargetedExpression_TARGET_RoleHandler() {
            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtTargetedExpression.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTarget(castValue(value));
        }
    }

    static class CtLabelledFlowBreak_TARGET_LABEL_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLabelledFlowBreak, java.lang.String> {
        private CtLabelledFlowBreak_TARGET_LABEL_RoleHandler() {
            super(spoon.reflect.path.CtRole.TARGET_LABEL, spoon.reflect.code.CtLabelledFlowBreak.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTargetLabel())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTargetLabel(castValue(value));
        }
    }

    static class CtConditional_THEN_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression<?>> {
        private CtConditional_THEN_RoleHandler() {
            super(spoon.reflect.path.CtRole.THEN, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThenExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThenExpression(castValue(value));
        }
    }

    static class CtIf_THEN_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtIf, spoon.reflect.code.CtStatement> {
        private CtIf_THEN_RoleHandler() {
            super(spoon.reflect.path.CtRole.THEN, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThenStatement())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThenStatement(castValue(value));
        }
    }

    static class CtExecutable_THROWN_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtExecutable, spoon.reflect.reference.CtTypeReference<? extends java.lang.Throwable>> {
        private CtExecutable_THROWN_RoleHandler() {
            super(spoon.reflect.path.CtRole.THROWN, spoon.reflect.declaration.CtExecutable.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThrownTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThrownTypes(castValue(value));
        }
    }

    static class CtTryWithResource_TRY_RESOURCE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtTryWithResource, spoon.reflect.code.CtLocalVariable<? extends java.lang.Object>> {
        private CtTryWithResource_TRY_RESOURCE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TRY_RESOURCE, spoon.reflect.code.CtTryWithResource.class, spoon.reflect.code.CtLocalVariable.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getResources())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setResources(castValue(value));
        }
    }

    static class CtArrayTypeReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtArrayTypeReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtArrayTypeReference_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.reference.CtArrayTypeReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getComponentType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setComponentType(castValue(value));
        }
    }

    static class CtExecutableReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtExecutableReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtExecutableReference_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.reference.CtExecutableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtTypedElement_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtTypedElement, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypedElement_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.declaration.CtTypedElement.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtVariableReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtVariableReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtVariableReference_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.reference.CtVariableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.reference.CtActualTypeContainer, spoon.reflect.reference.CtTypeReference<?>> {
        private CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE_ARGUMENT, spoon.reflect.reference.CtActualTypeContainer.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getActualTypeArguments())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setActualTypeArguments(castValue(value));
        }
    }

    static class CtType_TYPE_MEMBER_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtTypeMember> {
        private CtType_TYPE_MEMBER_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE_MEMBER, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtTypeMember.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTypeMembers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTypeMembers(castValue(value));
        }
    }

    static class CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtFormalTypeDeclarer, spoon.reflect.declaration.CtTypeParameter> {
        private CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE_PARAMETER, spoon.reflect.declaration.CtFormalTypeDeclarer.class, spoon.reflect.declaration.CtTypeParameter.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getFormalCtTypeParameters())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFormalCtTypeParameters(castValue(value));
        }
    }

    static class CtAnnotation_VALUE_RoleHandler extends spoon.reflect.meta.impl.MapHandler<spoon.reflect.declaration.CtAnnotation, spoon.reflect.code.CtExpression> {
        private CtAnnotation_VALUE_RoleHandler() {
            super(spoon.reflect.path.CtRole.VALUE, spoon.reflect.declaration.CtAnnotation.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getValues())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setValues(castValue(value));
        }
    }

    static class CtEnum_VALUE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtEnum, spoon.reflect.declaration.CtEnumValue<? extends java.lang.Object>> {
        private CtEnum_VALUE_RoleHandler() {
            super(spoon.reflect.path.CtRole.VALUE, spoon.reflect.declaration.CtEnum.class, spoon.reflect.declaration.CtEnumValue.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getEnumValues())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setEnumValues(castValue(value));
        }
    }

    static class CtLiteral_VALUE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLiteral, java.lang.Object> {
        private CtLiteral_VALUE_RoleHandler() {
            super(spoon.reflect.path.CtRole.VALUE, spoon.reflect.code.CtLiteral.class, java.lang.Object.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getValue())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setValue(castValue(value));
        }
    }

    static class CtVariableAccess_VARIABLE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtVariableAccess, spoon.reflect.reference.CtVariableReference<?>> {
        private CtVariableAccess_VARIABLE_RoleHandler() {
            super(spoon.reflect.path.CtRole.VARIABLE, spoon.reflect.code.CtVariableAccess.class, spoon.reflect.reference.CtVariableReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getVariable())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setVariable(castValue(value));
        }
    }

    private ModelRoleHandlers() {
    }

    static final spoon.reflect.meta.RoleHandler[] roleHandlers = new spoon.reflect.meta.RoleHandler[]{ new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeAccess_ACCESSED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtClass_ANNONYMOUS_EXECUTABLE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_ANNOTATION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotation_ANNOTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAbstractInvocation_ARGUMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_ARGUMENT_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssignment_ASSIGNED_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtRHSReceiver_ASSIGNMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBodyHolder_BODY_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSynchronized_BODY_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIntersectionTypeReference_BOUND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeParameterReference_BOUNDING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSwitch_CASE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExpression_CAST_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTry_CATCH_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_COMMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtComment_COMMENT_CONTENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_COMMENT_CONTENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDoc_COMMENT_TAG_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtComment_COMMENT_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssert_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtClass_CONSTRUCTOR_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackage_CONTAINED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtVariable_DEFAULT_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNewArray_DIMENSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_ELSE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_ELSE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAbstractInvocation_EXECUTABLE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_EXPORTED_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtArrayAccess_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssert_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtCase_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtDo_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtForEach_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtLambda_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNewArray_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtReturn_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSwitch_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSynchronized_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtThrow_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtUnaryOperator_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtWhile_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_FIELD_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTry_FINALIZER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtForEach_FOREACH_VARIABLE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_FOR_INIT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_FOR_UPDATE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtImport_IMPORT_REFERENCE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_INTERFACE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_INTERFACE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtMethod_IS_DEFAULT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_IS_FINAL_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_IS_IMPLICIT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtLocalVariable_IS_INFERRED_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtShadowable_IS_SHADOW_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_IS_STATIC_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_IS_STATIC_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeParameterReference_IS_UPPER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtParameter_IS_VARARGS_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtStatement_LABEL_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_LEFT_OPERAND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_METHOD_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModifiable_MODIFIER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_MODIFIER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModuleRequirement_MODIFIER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_MODIFIER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_MODULE_DIRECTIVE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModuleRequirement_MODULE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_MODULE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtMultiTypedElement_MULTI_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNamedElement_NAME_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtReference_NAME_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNewClass_NESTED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_NESTED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_OPENED_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_OPENED_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_OPERATOR_KIND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtOperatorAssignment_OPERATOR_KIND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtUnaryOperator_OPERATOR_KIND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_PACKAGE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeReference_PACKAGE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtCatch_PARAMETER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutable_PARAMETER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_POSITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_PROVIDED_SERVICE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_REQUIRED_MODULE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_RIGHT_OPERAND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_SERVICE_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtProvidedService_SERVICE_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtUsedService_SERVICE_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtCodeSnippet_SNIPPET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtStatementList_STATEMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_SUB_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackage_SUB_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_SUPER_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_SUPER_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTargetedExpression]_TARGET_RoleHandler(...> but was:<...
    static class Ct[AnnotationFieldAccess_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtAnnotationFieldAccess, spoon.reflect.code.CtExpression<?>> {
        private CtAnnotationFieldAccess_TARGET_RoleHandler() {
            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtAnnotationFieldAccess.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTarget(castValue(value));
        }
    }

    static class CtArrayRead_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtArrayRead, spoon.reflect.code.CtExpression<?>> {
        private CtArrayRead_TARGET_RoleHandler() {
            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtArrayRead.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTarget(castValue(value));
        }
    }

    static class CtArrayWrite_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtArrayWrite, spoon.reflect.code.CtExpression<?>> {
        private CtArrayWrite_TARGET_RoleHandler() {
            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtArrayWrite.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTarget(castValue(value));
        }
    }

    static class CtConstructorCall_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtConstructorCall, spoon.reflect.code.CtExpression<?>> {
        private CtConstructorCall_TARGET_RoleHandler() {
            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtConstructorCall.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTarget(castValue(value));
        }
    }

    static class CtFieldAccess_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtFieldAccess, spoon.reflect.code.CtExpression<?>> {
        private CtFieldAccess_TARGET_RoleHandler() {
            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtFieldAccess.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTarget(castValue(value));
        }
    }

    static class CtInvocation_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtInvocation, spoon.reflect.code.CtExpression<?>> {
        private CtInvocation_TARGET_RoleHandler() {
            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtInvocation.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTarget(castValue(value));
        }
    }

    static class CtSuperAccess_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtSuperAccess, spoon.reflect.code.CtExpression<?>> {
        private CtSuperAccess_TARGET_RoleHandler() {
            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtSuperAccess.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTarget(castValue(value));
        }
    }

    static class CtTargetedExpression_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtTargetedExpression, java.lang.Object> {
        private CtTargetedExpression_TARGET_RoleHandler() {
            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtTargetedExpression.class, java.lang.Object.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTarget(castValue(value));
        }
    }

    static class CtThisAccess_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtThisAccess, spoon.reflect.code.CtExpression<?>> {
        private CtThisAccess_TARGET_RoleHandler() {
            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtThisAccess.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTarget(castValue(value));
        }
    }

    static class CtLabelledFlowBreak_TARGET_LABEL_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLabelledFlowBreak, java.lang.String> {
        private CtLabelledFlowBreak_TARGET_LABEL_RoleHandler() {
            super(spoon.reflect.path.CtRole.TARGET_LABEL, spoon.reflect.code.CtLabelledFlowBreak.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTargetLabel())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTargetLabel(castValue(value));
        }
    }

    static class CtConditional_THEN_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression<?>> {
        private CtConditional_THEN_RoleHandler() {
            super(spoon.reflect.path.CtRole.THEN, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThenExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThenExpression(castValue(value));
        }
    }

    static class CtIf_THEN_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtIf, spoon.reflect.code.CtStatement> {
        private CtIf_THEN_RoleHandler() {
            super(spoon.reflect.path.CtRole.THEN, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThenStatement())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThenStatement(castValue(value));
        }
    }

    static class CtExecutable_THROWN_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtExecutable, spoon.reflect.reference.CtTypeReference<? extends java.lang.Throwable>> {
        private CtExecutable_THROWN_RoleHandler() {
            super(spoon.reflect.path.CtRole.THROWN, spoon.reflect.declaration.CtExecutable.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThrownTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThrownTypes(castValue(value));
        }
    }

    static class CtTryWithResource_TRY_RESOURCE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtTryWithResource, spoon.reflect.code.CtLocalVariable<? extends java.lang.Object>> {
        private CtTryWithResource_TRY_RESOURCE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TRY_RESOURCE, spoon.reflect.code.CtTryWithResource.class, spoon.reflect.code.CtLocalVariable.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getResources())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setResources(castValue(value));
        }
    }

    static class CtArrayTypeReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtArrayTypeReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtArrayTypeReference_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.reference.CtArrayTypeReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getComponentType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setComponentType(castValue(value));
        }
    }

    static class CtExecutableReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtExecutableReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtExecutableReference_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.reference.CtExecutableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtTypedElement_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtTypedElement, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypedElement_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.declaration.CtTypedElement.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtVariableReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtVariableReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtVariableReference_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.reference.CtVariableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.reference.CtActualTypeContainer, spoon.reflect.reference.CtTypeReference<?>> {
        private CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE_ARGUMENT, spoon.reflect.reference.CtActualTypeContainer.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getActualTypeArguments())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setActualTypeArguments(castValue(value));
        }
    }

    static class CtType_TYPE_MEMBER_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtTypeMember> {
        private CtType_TYPE_MEMBER_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE_MEMBER, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtTypeMember.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTypeMembers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTypeMembers(castValue(value));
        }
    }

    static class CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtFormalTypeDeclarer, spoon.reflect.declaration.CtTypeParameter> {
        private CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE_PARAMETER, spoon.reflect.declaration.CtFormalTypeDeclarer.class, spoon.reflect.declaration.CtTypeParameter.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getFormalCtTypeParameters())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFormalCtTypeParameters(castValue(value));
        }
    }

    static class CtAnnotation_VALUE_RoleHandler extends spoon.reflect.meta.impl.MapHandler<spoon.reflect.declaration.CtAnnotation, spoon.reflect.code.CtExpression> {
        private CtAnnotation_VALUE_RoleHandler() {
            super(spoon.reflect.path.CtRole.VALUE, spoon.reflect.declaration.CtAnnotation.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getValues())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setValues(castValue(value));
        }
    }

    static class CtEnum_VALUE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtEnum, spoon.reflect.declaration.CtEnumValue<? extends java.lang.Object>> {
        private CtEnum_VALUE_RoleHandler() {
            super(spoon.reflect.path.CtRole.VALUE, spoon.reflect.declaration.CtEnum.class, spoon.reflect.declaration.CtEnumValue.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getEnumValues())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setEnumValues(castValue(value));
        }
    }

    static class CtLiteral_VALUE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLiteral, java.lang.Object> {
        private CtLiteral_VALUE_RoleHandler() {
            super(spoon.reflect.path.CtRole.VALUE, spoon.reflect.code.CtLiteral.class, java.lang.Object.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getValue())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setValue(castValue(value));
        }
    }

    static class CtVariableAccess_VARIABLE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtVariableAccess, spoon.reflect.reference.CtVariableReference<?>> {
        private CtVariableAccess_VARIABLE_RoleHandler() {
            super(spoon.reflect.path.CtRole.VARIABLE, spoon.reflect.code.CtVariableAccess.class, spoon.reflect.reference.CtVariableReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getVariable())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setVariable(castValue(value));
        }
    }

    private ModelRoleHandlers() {
    }

    static final spoon.reflect.meta.RoleHandler[] roleHandlers = new spoon.reflect.meta.RoleHandler[]{ new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeAccess_ACCESSED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtClass_ANNONYMOUS_EXECUTABLE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_ANNOTATION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotation_ANNOTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAbstractInvocation_ARGUMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_ARGUMENT_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssignment_ASSIGNED_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtRHSReceiver_ASSIGNMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBodyHolder_BODY_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSynchronized_BODY_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIntersectionTypeReference_BOUND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeParameterReference_BOUNDING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSwitch_CASE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExpression_CAST_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTry_CATCH_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_COMMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtComment_COMMENT_CONTENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_COMMENT_CONTENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDoc_COMMENT_TAG_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtComment_COMMENT_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssert_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtClass_CONSTRUCTOR_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackage_CONTAINED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtVariable_DEFAULT_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNewArray_DIMENSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_ELSE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_ELSE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAbstractInvocation_EXECUTABLE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_EXPORTED_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtArrayAccess_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssert_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtCase_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtDo_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtForEach_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtLambda_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNewArray_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtReturn_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSwitch_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSynchronized_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtThrow_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtUnaryOperator_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtWhile_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_FIELD_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTry_FINALIZER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtForEach_FOREACH_VARIABLE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_FOR_INIT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_FOR_UPDATE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtImport_IMPORT_REFERENCE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_INTERFACE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_INTERFACE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtMethod_IS_DEFAULT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_IS_FINAL_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_IS_IMPLICIT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtLocalVariable_IS_INFERRED_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtShadowable_IS_SHADOW_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_IS_STATIC_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_IS_STATIC_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeParameterReference_IS_UPPER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtParameter_IS_VARARGS_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtStatement_LABEL_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_LEFT_OPERAND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_METHOD_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModifiable_MODIFIER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_MODIFIER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModuleRequirement_MODIFIER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_MODIFIER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_MODULE_DIRECTIVE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModuleRequirement_MODULE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_MODULE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtMultiTypedElement_MULTI_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNamedElement_NAME_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtReference_NAME_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNewClass_NESTED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_NESTED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_OPENED_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_OPENED_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_OPERATOR_KIND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtOperatorAssignment_OPERATOR_KIND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtUnaryOperator_OPERATOR_KIND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_PACKAGE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeReference_PACKAGE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtCatch_PARAMETER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutable_PARAMETER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_POSITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_PROVIDED_SERVICE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_REQUIRED_MODULE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_RIGHT_OPERAND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_SERVICE_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtProvidedService_SERVICE_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtUsedService_SERVICE_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtCodeSnippet_SNIPPET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtStatementList_STATEMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_SUB_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackage_SUB_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_SUPER_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_SUPER_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotationFieldAccess_TARGET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtArrayRead_TARGET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtArrayWrite_TARGET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtConstructorCall_TARGET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldAccess_TARGET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtInvocation_TARGET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSuperAccess_TARGET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTargetedExpression_TARGET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtThisAccess]_TARGET_RoleHandler(...>
	at spoon.processing.CtGenerationTest.testGenerateRoleHandler(CtGenerationTest.java:194)

[INFO] Running spoon.processing.ProcessingTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.19 s - in spoon.processing.ProcessingTest
[INFO] Running spoon.MavenLauncherTest
[WARNING] Tests run: 7, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 176.958 s - in spoon.MavenLauncherTest
[INFO] Running spoon.reflect.visitor.CtInheritanceScannerMethodsTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.039 s - in spoon.reflect.visitor.CtInheritanceScannerMethodsTest
[INFO] Running spoon.reflect.visitor.CtVisitorTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.834 s - in spoon.reflect.visitor.CtVisitorTest
[INFO] Running spoon.reflect.visitor.CtIteratorTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.545 s - in spoon.reflect.visitor.CtIteratorTest
[INFO] Running spoon.reflect.visitor.CtInheritanceScannerTest
[INFO] Tests run: 82, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.056 s - in spoon.reflect.visitor.CtInheritanceScannerTest
[INFO] Running spoon.reflect.visitor.CtScannerTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 24.062 s - in spoon.reflect.visitor.CtScannerTest
[INFO] Running spoon.reflect.ast.AstCheckerTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 20.406 s - in spoon.reflect.ast.AstCheckerTest
[INFO] Running spoon.reflect.ast.CloneTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 22.105 s - in spoon.reflect.ast.CloneTest
[INFO] Running spoon.reflect.declaration.UnknownDeclarationTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.362 s - in spoon.reflect.declaration.UnknownDeclarationTest
[INFO] Running spoon.reflect.declaration.CtTypeInformationTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.746 s - in spoon.reflect.declaration.CtTypeInformationTest
[INFO] Running spoon.test.enums.EnumsTypeTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.414 s - in spoon.test.enums.EnumsTypeTest
[INFO] Running spoon.test.enums.EnumsTest
[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.304 s - in spoon.test.enums.EnumsTest
[INFO] Running spoon.test.visibility.VisibilityTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.933 s - in spoon.test.visibility.VisibilityTest
[INFO] Running spoon.test.condition.ConditionalTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.589 s - in spoon.test.condition.ConditionalTest
[INFO] Running spoon.test.comment.CommentTest
[INFO] Tests run: 20, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 36.814 s - in spoon.test.comment.CommentTest
[INFO] Running spoon.test.path.PathTest
[INFO] Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.241 s - in spoon.test.path.PathTest
[INFO] Running spoon.test.sourcePosition.SourcePositionTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.387 s - in spoon.test.sourcePosition.SourcePositionTest
[INFO] Running spoon.test.generics.GenericsTest
[ERROR] Tests run: 45, Failures: 3, Errors: 0, Skipped: 0, Time elapsed: 8.067 s <<< FAILURE! - in spoon.test.generics.GenericsTest
[ERROR] testIsSameSignatureWithReferencedGenerics(spoon.test.generics.GenericsTest)  Time elapsed: 0.101 s  <<< FAILURE!
java.lang.AssertionError
	at spoon.test.generics.GenericsTest.testIsSameSignatureWithReferencedGenerics(GenericsTest.java:1368)

[ERROR] testGetExecDeclarationOfEnumSetOf(spoon.test.generics.GenericsTest)  Time elapsed: 0.064 s  <<< FAILURE!
java.lang.AssertionError: 
expected:<public static <E extends java.lang.Enum<E>> java.util.EnumSet<E> of(E arg0) {
}> but was:<null>
	at spoon.test.generics.GenericsTest.testGetExecDeclarationOfEnumSetOf(GenericsTest.java:1352)

[ERROR] testIsSameSignatureWithGenerics(spoon.test.generics.GenericsTest)  Time elapsed: 0.072 s  <<< FAILURE!
java.lang.AssertionError
	at spoon.test.generics.GenericsTest.testIsSameSignatureWithGenerics(GenericsTest.java:1301)

[INFO] Running spoon.test.exceptions.ExceptionTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.691 s - in spoon.test.exceptions.ExceptionTest
[INFO] Running spoon.test.filters.CUFilterTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.37 s - in spoon.test.filters.CUFilterTest
[INFO] Running spoon.test.filters.FilterTest
2018-08-29 22:11:58,296 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-29 22:11:58,303 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-29 22:11:58,306 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-29 22:11:58,307 INFO spoon.Launcher - running Spoon...
2018-08-29 22:11:58,307 INFO spoon.Launcher - start processing...
2018-08-29 22:11:58,812 INFO spoon.Launcher - end of processing: 
2018-08-29 22:11:58,813 INFO spoon.Launcher - no errors, no warnings
2018-08-29 22:11:59,124 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-29 22:11:59,125 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-29 22:11:59,126 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-29 22:11:59,127 INFO spoon.Launcher - running Spoon...
2018-08-29 22:11:59,127 INFO spoon.Launcher - start processing...
2018-08-29 22:11:59,208 INFO spoon.Launcher - end of processing: 
2018-08-29 22:11:59,209 INFO spoon.Launcher - no errors, no warnings
2018-08-29 22:11:59,498 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-29 22:11:59,499 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-29 22:11:59,512 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-29 22:11:59,513 INFO spoon.Launcher - running Spoon...
2018-08-29 22:11:59,513 INFO spoon.Launcher - start processing...
2018-08-29 22:11:59,586 INFO spoon.Launcher - end of processing: 
2018-08-29 22:11:59,587 INFO spoon.Launcher - no errors, no warnings
2018-08-29 22:12:00,044 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-29 22:12:00,045 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-29 22:12:00,046 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-29 22:12:00,047 INFO spoon.Launcher - running Spoon...
2018-08-29 22:12:00,047 INFO spoon.Launcher - start processing...
2018-08-29 22:12:00,129 INFO spoon.Launcher - end of processing: 
2018-08-29 22:12:00,129 INFO spoon.Launcher - no errors, no warnings
2018-08-29 22:12:00,320 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-29 22:12:00,322 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-29 22:12:00,324 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-29 22:12:00,325 INFO spoon.Launcher - running Spoon...
2018-08-29 22:12:00,325 INFO spoon.Launcher - start processing...
2018-08-29 22:12:00,409 INFO spoon.Launcher - end of processing: 
2018-08-29 22:12:00,410 INFO spoon.Launcher - no errors, no warnings
2018-08-29 22:12:01,161 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-29 22:12:01,161 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-29 22:12:01,163 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-29 22:12:01,163 INFO spoon.Launcher - running Spoon...
2018-08-29 22:12:01,163 INFO spoon.Launcher - start processing...
2018-08-29 22:12:01,248 INFO spoon.Launcher - end of processing: 
2018-08-29 22:12:01,249 INFO spoon.Launcher - no errors, no warnings
2018-08-29 22:12:01,314 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-29 22:12:01,314 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-29 22:12:01,701 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-29 22:12:01,701 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-29 22:12:01,703 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-29 22:12:01,703 INFO spoon.Launcher - running Spoon...
2018-08-29 22:12:01,703 INFO spoon.Launcher - start processing...
2018-08-29 22:12:01,778 INFO spoon.Launcher - end of processing: 
2018-08-29 22:12:01,778 INFO spoon.Launcher - no errors, no warnings
2018-08-29 22:12:02,115 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-29 22:12:02,116 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-29 22:12:02,117 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-29 22:12:02,118 INFO spoon.Launcher - running Spoon...
2018-08-29 22:12:02,119 INFO spoon.Launcher - start processing...
2018-08-29 22:12:02,193 INFO spoon.Launcher - end of processing: 
2018-08-29 22:12:02,194 INFO spoon.Launcher - no errors, no warnings
2018-08-29 22:12:02,255 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-29 22:12:02,255 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-29 22:12:02,257 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-29 22:12:02,257 INFO spoon.Launcher - running Spoon...
2018-08-29 22:12:02,257 INFO spoon.Launcher - start processing...
2018-08-29 22:12:02,363 INFO spoon.Launcher - end of processing: 
2018-08-29 22:12:02,363 INFO spoon.Launcher - no errors, no warnings
2018-08-29 22:12:02,547 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-29 22:12:02,548 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-29 22:12:02,549 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-29 22:12:02,550 INFO spoon.Launcher - running Spoon...
2018-08-29 22:12:02,550 INFO spoon.Launcher - start processing...
2018-08-29 22:12:02,627 INFO spoon.Launcher - end of processing: 
2018-08-29 22:12:02,857 INFO spoon.Launcher - no errors, no warnings
2018-08-29 22:12:03,142 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-29 22:12:04,010 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-29 22:12:04,011 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-29 22:12:04,011 INFO spoon.Launcher - running Spoon...
2018-08-29 22:12:04,011 INFO spoon.Launcher - start processing...
2018-08-29 22:12:04,142 INFO spoon.Launcher - end of processing: 
2018-08-29 22:12:04,142 INFO spoon.Launcher - no errors, no warnings
2018-08-29 22:12:04,228 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-29 22:12:04,228 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-29 22:12:04,231 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-29 22:12:04,231 INFO spoon.Launcher - running Spoon...
2018-08-29 22:12:04,232 INFO spoon.Launcher - start processing...
2018-08-29 22:12:04,337 INFO spoon.Launcher - end of processing: 
2018-08-29 22:12:04,340 INFO spoon.Launcher - no errors, no warnings
2018-08-29 22:12:04,993 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-29 22:12:04,993 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-29 22:12:04,994 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-29 22:12:04,994 INFO spoon.Launcher - running Spoon...
2018-08-29 22:12:04,994 INFO spoon.Launcher - start processing...
2018-08-29 22:12:05,072 INFO spoon.Launcher - end of processing: 
2018-08-29 22:12:05,072 INFO spoon.Launcher - no errors, no warnings
2018-08-29 22:12:05,148 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-29 22:12:05,148 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-29 22:12:05,149 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-29 22:12:05,149 INFO spoon.Launcher - running Spoon...
2018-08-29 22:12:05,149 INFO spoon.Launcher - start processing...
2018-08-29 22:12:05,227 INFO spoon.Launcher - end of processing: 
2018-08-29 22:12:05,228 INFO spoon.Launcher - no errors, no warnings
2018-08-29 22:12:05,714 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-29 22:12:05,714 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-29 22:12:05,715 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-29 22:12:05,715 INFO spoon.Launcher - running Spoon...
2018-08-29 22:12:05,715 INFO spoon.Launcher - start processing...
2018-08-29 22:12:05,799 INFO spoon.Launcher - end of processing: 
2018-08-29 22:12:05,799 INFO spoon.Launcher - no errors, no warnings
2018-08-29 22:12:05,806 INFO spoon.Launcher - Step filter CtClass only) spoon.reflect.CtModelImpl$CtRootPackage cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtRootPackage: unnamed package
2018-08-29 22:12:05,806 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtPackageImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageImpl: spoon
2018-08-29 22:12:05,806 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtPackageImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageImpl: spoon.test
2018-08-29 22:12:05,807 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtPackageImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageImpl: spoon.test.filters
2018-08-29 22:12:05,807 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtPackageImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageImpl: spoon.test.filters.testclasses
2018-08-29 22:12:05,808 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-08-29 22:12:05,808 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:05,808 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: AbstractTostada() {
}
2018-08-29 22:12:05,808 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-29 22:12:05,808 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-08-29 22:12:05,809 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.lang.Object()
2018-08-29 22:12:05,809 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-08-29 22:12:05,809 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,809 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-08-29 22:12:05,810 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,810 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}
2018-08-29 22:12:05,810 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-29 22:12:05,810 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-29 22:12:05,811 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,811 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-29 22:12:05,811 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,811 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-08-29 22:12:05,812 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:05,812 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}
2018-08-29 22:12:05,812 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}
2018-08-29 22:12:05,813 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtNewClassImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtNewClassImpl: new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}
2018-08-29 22:12:05,813 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.AbstractTostada$1()
2018-08-29 22:12:05,814 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada.1
2018-08-29 22:12:05,815 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-08-29 22:12:05,815 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:05,815 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-29 22:12:05,815 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:05,816 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-29 22:12:05,816 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:05,816 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: 1() {
}
2018-08-29 22:12:05,816 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-29 22:12:05,816 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-08-29 22:12:05,817 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.Tostada()
2018-08-29 22:12:05,817 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-29 22:12:05,817 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:05,817 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-29 22:12:05,818 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:05,818 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
    super.prepare();
}
2018-08-29 22:12:05,818 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-29 22:12:05,818 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-29 22:12:05,818 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,819 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-29 22:12:05,819 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,819 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:05,819 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    super.prepare();
}
2018-08-29 22:12:05,820 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.prepare()
2018-08-29 22:12:05,820 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-08-29 22:12:05,820 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-08-29 22:12:05,820 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-29 22:12:05,820 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:05,822 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: prepare()
2018-08-29 22:12:05,822 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-29 22:12:05,822 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:05,822 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:05,823 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}
2018-08-29 22:12:05,823 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-29 22:12:05,823 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-29 22:12:05,823 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,823 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-29 22:12:05,824 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,824 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-08-29 22:12:05,824 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:05,824 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return super.make();
}
2018-08-29 22:12:05,825 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return super.make()
2018-08-29 22:12:05,825 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.make()
2018-08-29 22:12:05,825 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-08-29 22:12:05,825 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-08-29 22:12:05,825 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-29 22:12:05,826 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:05,826 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: make()
2018-08-29 22:12:05,826 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-29 22:12:05,826 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:05,827 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-08-29 22:12:05,827 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:05,827 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public abstract void prepare();
2018-08-29 22:12:05,827 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:05,827 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void honey() {
}
2018-08-29 22:12:05,828 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:05,828 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-29 22:12:05,828 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: /**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
2018-08-29 22:12:05,829 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-08-29 22:12:05,829 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:05,829 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: Antojito() {
}
2018-08-29 22:12:05,829 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-29 22:12:05,829 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-08-29 22:12:05,830 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.AbstractTostada()
2018-08-29 22:12:05,830 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-08-29 22:12:05,830 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:05,830 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-08-29 22:12:05,831 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:05,831 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}
2018-08-29 22:12:05,831 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-29 22:12:05,831 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-29 22:12:05,832 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,832 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-29 22:12:05,832 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,832 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:05,833 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    java.lang.System.out.println("Antojito");
}
2018-08-29 22:12:05,833 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println("Antojito")
2018-08-29 22:12:05,833 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-08-29 22:12:05,834 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-08-29 22:12:05,834 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-29 22:12:05,834 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,834 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-08-29 22:12:05,834 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-29 22:12:05,835 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,835 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-29 22:12:05,835 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-29 22:12:05,835 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(java.lang.String)
2018-08-29 22:12:05,835 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-29 22:12:05,836 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-29 22:12:05,836 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:05,836 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-29 22:12:05,836 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,838 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "Antojito"
2018-08-29 22:12:05,838 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-29 22:12:05,838 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,838 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void prepare(java.lang.String ingredient) {
}
2018-08-29 22:12:05,839 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:05,839 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtParameterImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtParameterImpl: java.lang.String ingredient
2018-08-29 22:12:05,839 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-29 22:12:05,839 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,839 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-29 22:12:05,840 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: /**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
2018-08-29 22:12:05,840 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-08-29 22:12:05,840 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-29 22:12:05,841 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtFieldImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldImpl: private int myfield = 0;
2018-08-29 22:12:05,841 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,841 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 0
2018-08-29 22:12:05,841 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,841 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: FieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}
2018-08-29 22:12:05,842 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    super();
    this.myfield = 0;
}
2018-08-29 22:12:05,842 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-08-29 22:12:05,842 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.util.ArrayList()
2018-08-29 22:12:05,842 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-08-29 22:12:05,843 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-29 22:12:05,843 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-08-29 22:12:05,843 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-29 22:12:05,843 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtAssignmentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAssignmentImpl: this.myfield = 0
2018-08-29 22:12:05,844 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,844 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldWriteImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldWriteImpl: this.myfield
2018-08-29 22:12:05,845 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThisAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThisAccessImpl: this
2018-08-29 22:12:05,845 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-29 22:12:05,845 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:05,845 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-29 22:12:05,846 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-29 22:12:05,846 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:05,846 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: myfield
2018-08-29 22:12:05,846 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-29 22:12:05,846 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:05,847 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,847 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 0
2018-08-29 22:12:05,847 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,848 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}
2018-08-29 22:12:05,848 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:05,849 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}
2018-08-29 22:12:05,849 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtAssignmentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAssignmentImpl: myfield = super.size()
2018-08-29 22:12:05,849 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,850 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldWriteImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldWriteImpl: myfield
2018-08-29 22:12:05,850 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThisAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThisAccessImpl: 
2018-08-29 22:12:05,850 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-29 22:12:05,850 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:05,851 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-29 22:12:05,851 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-29 22:12:05,851 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:05,851 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: myfield
2018-08-29 22:12:05,851 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-29 22:12:05,852 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:05,852 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,852 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.size()
2018-08-29 22:12:05,863 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-08-29 22:12:05,864 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-08-29 22:12:05,864 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-08-29 22:12:05,864 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-29 22:12:05,864 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: size()
2018-08-29 22:12:05,865 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-08-29 22:12:05,865 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-29 22:12:05,865 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,865 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: java.lang.Object o = super.get(myfield)
2018-08-29 22:12:05,866 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-08-29 22:12:05,866 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,866 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.get(myfield)
2018-08-29 22:12:05,866 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-08-29 22:12:05,866 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-08-29 22:12:05,867 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-08-29 22:12:05,867 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-29 22:12:05,867 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: get(int)
2018-08-29 22:12:05,867 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-08-29 22:12:05,867 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-29 22:12:05,868 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-08-29 22:12:05,868 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,868 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,868 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: myfield
2018-08-29 22:12:05,868 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThisAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThisAccessImpl: 
2018-08-29 22:12:05,870 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-29 22:12:05,870 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:05,870 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-29 22:12:05,870 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-29 22:12:05,870 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:05,871 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: myfield
2018-08-29 22:12:05,871 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-29 22:12:05,871 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:05,871 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,871 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: /**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
2018-08-29 22:12:05,872 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.SuppressWarnings("bar")
2018-08-29 22:12:05,872 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.SuppressWarnings
2018-08-29 22:12:05,872 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,872 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.SuppressWarnings
2018-08-29 22:12:05,873 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,873 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "bar"
2018-08-29 22:12:05,873 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-29 22:12:05,873 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,873 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: Foo() {
}
2018-08-29 22:12:05,873 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-29 22:12:05,874 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-08-29 22:12:05,874 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.lang.Object()
2018-08-29 22:12:05,874 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-08-29 22:12:05,874 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,874 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-08-29 22:12:05,886 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,886 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtFieldImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldImpl: int i;
2018-08-29 22:12:05,886 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,887 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: void foo() {
    int x = 3;
    int z;
    z = x + (i);
    java.lang.System.out.println(z);
}
2018-08-29 22:12:05,887 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:05,887 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    int x = 3;
    int z;
    z = x + (i);
    java.lang.System.out.println(z);
}
2018-08-29 22:12:05,888 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: int x = 3
2018-08-29 22:12:05,888 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,888 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 3
2018-08-29 22:12:05,888 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,888 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: int z
2018-08-29 22:12:05,888 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,889 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtAssignmentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAssignmentImpl: z = x + (i)
2018-08-29 22:12:05,889 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,889 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableWriteImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableWriteImpl: z
2018-08-29 22:12:05,889 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: z
2018-08-29 22:12:05,889 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,890 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBinaryOperatorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBinaryOperatorImpl: x + (i)
2018-08-29 22:12:05,890 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,890 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: x
2018-08-29 22:12:05,890 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: x
2018-08-29 22:12:05,890 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,891 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: (i)
2018-08-29 22:12:05,891 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThisAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThisAccessImpl: 
2018-08-29 22:12:05,891 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Foo
2018-08-29 22:12:05,891 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:05,891 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.Foo
2018-08-29 22:12:05,892 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Foo
2018-08-29 22:12:05,892 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:05,892 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: i
2018-08-29 22:12:05,892 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Foo
2018-08-29 22:12:05,892 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:05,892 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,893 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println(z)
2018-08-29 22:12:05,893 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-08-29 22:12:05,893 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-08-29 22:12:05,893 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-29 22:12:05,894 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,894 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-08-29 22:12:05,894 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-29 22:12:05,894 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,894 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-29 22:12:05,894 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-29 22:12:05,895 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(int)
2018-08-29 22:12:05,895 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-29 22:12:05,895 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-29 22:12:05,895 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:05,895 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,896 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: z
2018-08-29 22:12:05,896 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: z
2018-08-29 22:12:05,896 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,896 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.SuppressWarnings("foo")
int bar() {
    if (0 == 1) {
        throw new java.lang.RuntimeException();
    }
    return i;
}
2018-08-29 22:12:05,897 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.SuppressWarnings("foo")
2018-08-29 22:12:05,897 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.SuppressWarnings
2018-08-29 22:12:05,897 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,897 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.SuppressWarnings
2018-08-29 22:12:05,897 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,897 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "foo"
2018-08-29 22:12:05,898 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-29 22:12:05,898 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,898 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,898 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    if (0 == 1) {
        throw new java.lang.RuntimeException();
    }
    return i;
}
2018-08-29 22:12:05,899 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtIfImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtIfImpl: if (0 == 1) {
    throw new java.lang.RuntimeException();
}
2018-08-29 22:12:05,899 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBinaryOperatorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBinaryOperatorImpl: 0 == 1
2018-08-29 22:12:05,899 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: boolean
2018-08-29 22:12:05,899 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 0
2018-08-29 22:12:05,899 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,899 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 1
2018-08-29 22:12:05,900 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,900 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    throw new java.lang.RuntimeException();
}
2018-08-29 22:12:05,900 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThrowImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThrowImpl: throw new java.lang.RuntimeException()
2018-08-29 22:12:05,900 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtConstructorCallImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorCallImpl: new java.lang.RuntimeException()
2018-08-29 22:12:05,900 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.lang.RuntimeException()
2018-08-29 22:12:05,911 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.RuntimeException
2018-08-29 22:12:05,911 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,912 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.RuntimeException
2018-08-29 22:12:05,912 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,912 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return i
2018-08-29 22:12:05,913 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: i
2018-08-29 22:12:05,913 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThisAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThisAccessImpl: 
2018-08-29 22:12:05,913 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Foo
2018-08-29 22:12:05,913 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:05,913 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.Foo
2018-08-29 22:12:05,914 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Foo
2018-08-29 22:12:05,914 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:05,914 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: i
2018-08-29 22:12:05,914 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Foo
2018-08-29 22:12:05,914 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:05,914 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,915 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: FooLine() {
}
2018-08-29 22:12:05,915 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-29 22:12:05,915 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-08-29 22:12:05,915 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.lang.Object()
2018-08-29 22:12:05,915 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-08-29 22:12:05,916 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,916 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-08-29 22:12:05,916 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,916 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: void simple() {
    int x = 3;
    int z = 0;
    java.lang.System.out.println(z);
}
2018-08-29 22:12:05,925 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:05,925 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    int x = 3;
    int z = 0;
    java.lang.System.out.println(z);
}
2018-08-29 22:12:05,925 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: int x = 3
2018-08-29 22:12:05,926 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,926 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 3
2018-08-29 22:12:05,926 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,926 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: int z = 0
2018-08-29 22:12:05,926 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,926 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 0
2018-08-29 22:12:05,927 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,927 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println(z)
2018-08-29 22:12:05,927 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-08-29 22:12:05,927 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-08-29 22:12:05,928 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-29 22:12:05,928 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,928 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-08-29 22:12:05,928 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-29 22:12:05,928 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,930 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-29 22:12:05,930 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-29 22:12:05,930 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(int)
2018-08-29 22:12:05,930 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-29 22:12:05,930 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-29 22:12:05,930 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:05,931 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,931 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: z
2018-08-29 22:12:05,931 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: z
2018-08-29 22:12:05,931 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,932 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: void loopBlock() {
    for (int i = 0; i < 10; i++) {
        java.lang.System.out.println(i);
    }
}
2018-08-29 22:12:05,932 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:05,932 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    for (int i = 0; i < 10; i++) {
        java.lang.System.out.println(i);
    }
}
2018-08-29 22:12:05,933 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtForImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtForImpl: for (int i = 0; i < 10; i++) {
    java.lang.System.out.println(i);
}
2018-08-29 22:12:05,933 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: int i = 0
2018-08-29 22:12:05,933 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,933 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 0
2018-08-29 22:12:05,933 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,933 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBinaryOperatorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBinaryOperatorImpl: i < 10
2018-08-29 22:12:05,934 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: boolean
2018-08-29 22:12:05,934 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: i
2018-08-29 22:12:05,934 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: i
2018-08-29 22:12:05,934 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,934 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 10
2018-08-29 22:12:05,934 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,935 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtUnaryOperatorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtUnaryOperatorImpl: i++
2018-08-29 22:12:05,935 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,935 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableWriteImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableWriteImpl: i
2018-08-29 22:12:05,935 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: i
2018-08-29 22:12:05,935 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,936 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    java.lang.System.out.println(i);
}
2018-08-29 22:12:05,936 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println(i)
2018-08-29 22:12:05,936 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-08-29 22:12:05,936 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-08-29 22:12:05,936 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-29 22:12:05,937 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,937 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-08-29 22:12:05,937 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-29 22:12:05,937 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,937 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-29 22:12:05,938 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-29 22:12:05,938 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(int)
2018-08-29 22:12:05,938 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-29 22:12:05,938 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-29 22:12:05,938 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:05,938 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,939 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: i
2018-08-29 22:12:05,939 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: i
2018-08-29 22:12:05,939 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,939 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: void loopNoBlock() {
    for (int i = 0; i < 10; i++)
        java.lang.System.out.println(i);

}
2018-08-29 22:12:05,939 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:05,940 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    for (int i = 0; i < 10; i++)
        java.lang.System.out.println(i);

}
2018-08-29 22:12:05,940 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtForImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtForImpl: for (int i = 0; i < 10; i++)
    java.lang.System.out.println(i);

2018-08-29 22:12:05,940 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: int i = 0
2018-08-29 22:12:05,940 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,956 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 0
2018-08-29 22:12:05,957 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,957 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBinaryOperatorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBinaryOperatorImpl: i < 10
2018-08-29 22:12:05,957 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: boolean
2018-08-29 22:12:05,957 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: i
2018-08-29 22:12:05,957 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: i
2018-08-29 22:12:05,958 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,958 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 10
2018-08-29 22:12:05,958 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,958 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtUnaryOperatorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtUnaryOperatorImpl: i++
2018-08-29 22:12:05,958 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,958 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableWriteImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableWriteImpl: i
2018-08-29 22:12:05,959 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: i
2018-08-29 22:12:05,959 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,959 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: java.lang.System.out.println(i);

2018-08-29 22:12:05,959 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println(i)
2018-08-29 22:12:05,960 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-08-29 22:12:05,960 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-08-29 22:12:05,960 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-29 22:12:05,960 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,963 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-08-29 22:12:05,963 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-29 22:12:05,963 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,964 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-29 22:12:05,964 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-29 22:12:05,964 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(int)
2018-08-29 22:12:05,964 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-29 22:12:05,964 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-29 22:12:05,964 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:05,965 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,965 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: i
2018-08-29 22:12:05,965 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: i
2018-08-29 22:12:05,965 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,965 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: void loopNoBody() {
    for (int i = 0; i < 10; i++);
}
2018-08-29 22:12:05,966 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:05,966 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    for (int i = 0; i < 10; i++);
}
2018-08-29 22:12:05,966 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtForImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtForImpl: for (int i = 0; i < 10; i++);
2018-08-29 22:12:05,966 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: int i = 0
2018-08-29 22:12:05,966 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,966 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 0
2018-08-29 22:12:05,967 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,967 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBinaryOperatorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBinaryOperatorImpl: i < 10
2018-08-29 22:12:05,967 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: boolean
2018-08-29 22:12:05,967 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: i
2018-08-29 22:12:05,967 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: i
2018-08-29 22:12:05,967 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,968 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 10
2018-08-29 22:12:05,968 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,968 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtUnaryOperatorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtUnaryOperatorImpl: i++
2018-08-29 22:12:05,968 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,968 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableWriteImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableWriteImpl: i
2018-08-29 22:12:05,968 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: i
2018-08-29 22:12:05,969 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,969 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: void ifBlock() {
    if (3 < 4) {
        java.lang.System.out.println("if");
    }
}
2018-08-29 22:12:05,969 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:05,969 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    if (3 < 4) {
        java.lang.System.out.println("if");
    }
}
2018-08-29 22:12:05,970 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtIfImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtIfImpl: if (3 < 4) {
    java.lang.System.out.println("if");
}
2018-08-29 22:12:05,970 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBinaryOperatorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBinaryOperatorImpl: 3 < 4
2018-08-29 22:12:05,970 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: boolean
2018-08-29 22:12:05,970 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 3
2018-08-29 22:12:05,970 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,971 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 4
2018-08-29 22:12:05,971 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,971 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    java.lang.System.out.println("if");
}
2018-08-29 22:12:05,971 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println("if")
2018-08-29 22:12:05,972 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-08-29 22:12:05,972 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-08-29 22:12:05,972 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-29 22:12:05,972 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,972 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-08-29 22:12:05,990 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-29 22:12:05,990 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,990 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-29 22:12:05,990 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-29 22:12:05,991 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(java.lang.String)
2018-08-29 22:12:05,991 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-29 22:12:05,991 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-29 22:12:05,991 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:05,991 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-29 22:12:05,991 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,992 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "if"
2018-08-29 22:12:05,992 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-29 22:12:05,992 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,992 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: void ifNoBlock() {
    if (3 < 4)
        java.lang.System.out.println("if");

}
2018-08-29 22:12:05,993 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:05,993 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    if (3 < 4)
        java.lang.System.out.println("if");

}
2018-08-29 22:12:05,993 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtIfImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtIfImpl: if (3 < 4)
    java.lang.System.out.println("if");

2018-08-29 22:12:05,993 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBinaryOperatorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBinaryOperatorImpl: 3 < 4
2018-08-29 22:12:05,994 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: boolean
2018-08-29 22:12:05,994 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 3
2018-08-29 22:12:05,994 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,994 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 4
2018-08-29 22:12:05,994 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:05,995 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: java.lang.System.out.println("if");

2018-08-29 22:12:05,995 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println("if")
2018-08-29 22:12:05,995 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-08-29 22:12:05,995 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-08-29 22:12:05,995 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-29 22:12:05,996 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,996 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-08-29 22:12:05,996 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-29 22:12:05,996 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,996 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-29 22:12:05,996 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-29 22:12:05,997 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(java.lang.String)
2018-08-29 22:12:05,997 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-29 22:12:05,997 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-29 22:12:05,997 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:05,997 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-29 22:12:05,997 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,998 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "if"
2018-08-29 22:12:05,998 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-29 22:12:05,998 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:05,998 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: void switchBlock() {
    switch ("test") {
        case "test" :
            break;
        default :
            java.lang.System.out.println("switch");
    }
}
2018-08-29 22:12:05,998 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:05,999 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    switch ("test") {
        case "test" :
            break;
        default :
            java.lang.System.out.println("switch");
    }
}
2018-08-29 22:12:05,999 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSwitchImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSwitchImpl: switch ("test") {
    case "test" :
        break;
    default :
        java.lang.System.out.println("switch");
}
2018-08-29 22:12:05,999 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "test"
2018-08-29 22:12:05,999 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-29 22:12:06,000 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:06,000 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCaseImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCaseImpl: case "test" :
    break;
2018-08-29 22:12:06,000 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "test"
2018-08-29 22:12:06,000 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-29 22:12:06,000 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:06,000 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBreakImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBreakImpl: break
2018-08-29 22:12:06,009 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCaseImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCaseImpl: default :
    java.lang.System.out.println("switch");
2018-08-29 22:12:06,009 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println("switch")
2018-08-29 22:12:06,010 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-08-29 22:12:06,010 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-08-29 22:12:06,010 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-29 22:12:06,010 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:06,010 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-08-29 22:12:06,010 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-29 22:12:06,011 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:06,011 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-29 22:12:06,011 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-29 22:12:06,011 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(java.lang.String)
2018-08-29 22:12:06,011 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-29 22:12:06,012 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-29 22:12:06,017 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:06,017 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-29 22:12:06,017 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:06,018 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "switch"
2018-08-29 22:12:06,018 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-29 22:12:06,018 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:06,018 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtInterfaceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInterfaceImpl: interface Honey {
    void honey();
}
2018-08-29 22:12:06,018 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: void honey();
2018-08-29 22:12:06,018 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:06,019 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtInterfaceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInterfaceImpl: interface IFoo {}
2018-08-29 22:12:06,019 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtInterfaceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInterfaceImpl: public interface ITostada extends spoon.test.filters.testclasses.IFoo {
    spoon.test.filters.testclasses.ITostada make();
}
2018-08-29 22:12:06,019 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.IFoo
2018-08-29 22:12:06,019 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:06,019 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: spoon.test.filters.testclasses.ITostada make();
2018-08-29 22:12:06,019 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-08-29 22:12:06,020 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:06,020 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: /**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
2018-08-29 22:12:06,020 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-29 22:12:06,020 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:06,020 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: SubTostada() {
}
2018-08-29 22:12:06,025 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-29 22:12:06,025 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-08-29 22:12:06,025 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.Tostada()
2018-08-29 22:12:06,026 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-29 22:12:06,026 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:06,026 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-29 22:12:06,026 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:06,026 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}
2018-08-29 22:12:06,027 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-29 22:12:06,027 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-29 22:12:06,027 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:06,027 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-29 22:12:06,027 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:06,027 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:06,028 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}
2018-08-29 22:12:06,028 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println("SubTostada")
2018-08-29 22:12:06,028 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-08-29 22:12:06,028 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-08-29 22:12:06,029 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-29 22:12:06,029 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:06,029 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-08-29 22:12:06,029 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-29 22:12:06,029 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:06,029 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-29 22:12:06,030 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-29 22:12:06,030 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(java.lang.String)
2018-08-29 22:12:06,030 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-29 22:12:06,030 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-29 22:12:06,030 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:06,030 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-29 22:12:06,030 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:06,031 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "SubTostada"
2018-08-29 22:12:06,031 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-29 22:12:06,031 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:06,031 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.prepare()
2018-08-29 22:12:06,031 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-08-29 22:12:06,031 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-08-29 22:12:06,032 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-29 22:12:06,032 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:06,032 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: prepare()
2018-08-29 22:12:06,032 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-29 22:12:06,032 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:06,033 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:06,033 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: /**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
2018-08-29 22:12:06,033 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-08-29 22:12:06,033 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:06,033 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: Tacos() {
}
2018-08-29 22:12:06,034 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-29 22:12:06,034 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-08-29 22:12:06,034 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.lang.Object()
2018-08-29 22:12:06,034 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-08-29 22:12:06,034 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:06,034 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-08-29 22:12:06,034 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:06,035 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}
2018-08-29 22:12:06,035 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-29 22:12:06,035 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-29 22:12:06,035 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:06,035 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-29 22:12:06,035 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:06,036 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-08-29 22:12:06,036 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:06,036 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return null;
}
2018-08-29 22:12:06,036 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return null
2018-08-29 22:12:06,036 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: null
2018-08-29 22:12:06,036 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: <nulltype>
2018-08-29 22:12:06,041 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}
2018-08-29 22:12:06,041 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:06,041 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}
2018-08-29 22:12:06,042 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()
2018-08-29 22:12:06,042 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList<java.lang.String>
2018-08-29 22:12:06,042 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-29 22:12:06,042 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-29 22:12:06,042 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:06,042 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtConstructorCallImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorCallImpl: new java.util.ArrayList<java.lang.String>()
2018-08-29 22:12:06,042 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.util.ArrayList()
2018-08-29 22:12:06,043 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-08-29 22:12:06,043 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-29 22:12:06,043 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList<java.lang.String>
2018-08-29 22:12:06,043 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-29 22:12:06,043 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-29 22:12:06,043 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:06,043 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: strings.size()
2018-08-29 22:12:06,044 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: strings
2018-08-29 22:12:06,044 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: strings
2018-08-29 22:12:06,044 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList<java.lang.String>
2018-08-29 22:12:06,044 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-29 22:12:06,044 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-29 22:12:06,044 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:06,044 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: size()
2018-08-29 22:12:06,045 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-08-29 22:12:06,045 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-29 22:12:06,045 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:06,045 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: /**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
2018-08-29 22:12:06,045 INFO spoon.Launcher - Step 6) Skipped element, because CtFunction#accept(input) returned false
Parameter 1) CtMethodImpl: void honey();
2018-08-29 22:12:06,045 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-08-29 22:12:06,046 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:06,046 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Honey
2018-08-29 22:12:06,046 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:06,046 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: Tostada() {
}
2018-08-29 22:12:06,046 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-29 22:12:06,046 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-08-29 22:12:06,047 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.AbstractTostada()
2018-08-29 22:12:06,047 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-08-29 22:12:06,047 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:06,047 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-08-29 22:12:06,047 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:06,048 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}
2018-08-29 22:12:06,048 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-29 22:12:06,048 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-29 22:12:06,048 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:06,048 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-29 22:12:06,048 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:06,048 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-08-29 22:12:06,049 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:06,049 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}
2018-08-29 22:12:06,049 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}
2018-08-29 22:12:06,049 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtNewClassImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtNewClassImpl: new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}
2018-08-29 22:12:06,050 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.Tostada$1()
2018-08-29 22:12:06,050 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada.1
2018-08-29 22:12:06,051 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-29 22:12:06,051 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:06,051 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-29 22:12:06,051 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:06,051 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-29 22:12:06,051 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:06,052 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: 1() {
}
2018-08-29 22:12:06,052 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-29 22:12:06,052 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-08-29 22:12:06,052 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.Tostada()
2018-08-29 22:12:06,052 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-29 22:12:06,052 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:06,054 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-29 22:12:06,054 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:06,054 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}
2018-08-29 22:12:06,054 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-29 22:12:06,054 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-29 22:12:06,055 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:06,055 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-29 22:12:06,055 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:06,055 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:06,055 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    int a = 3;
    super.prepare();
}
2018-08-29 22:12:06,055 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: int a = 3
2018-08-29 22:12:06,055 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:06,056 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 3
2018-08-29 22:12:06,056 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-29 22:12:06,056 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.prepare()
2018-08-29 22:12:06,056 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-08-29 22:12:06,056 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-08-29 22:12:06,056 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-29 22:12:06,057 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:06,057 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: prepare()
2018-08-29 22:12:06,057 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-29 22:12:06,057 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-29 22:12:06,057 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:06,057 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
}
2018-08-29 22:12:06,057 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-29 22:12:06,058 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-29 22:12:06,058 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:06,058 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-29 22:12:06,058 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:06,058 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:06,058 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-29 22:12:06,058 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public java.lang.String toString() {
    return "";
}
2018-08-29 22:12:06,059 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-29 22:12:06,059 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-29 22:12:06,059 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:06,059 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-29 22:12:06,059 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:06,059 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-29 22:12:06,060 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:06,060 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return "";
}
2018-08-29 22:12:06,060 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return ""
2018-08-29 22:12:06,060 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: ""
2018-08-29 22:12:06,060 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-29 22:12:06,060 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:06,061 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void honey() {
}
2018-08-29 22:12:06,061 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-29 22:12:06,062 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-29 22:12:06,062 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:06,062 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-29 22:12:06,062 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-29 22:12:06,064 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:06,064 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-29 22:12:06,065 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void foo() {
}
2018-08-29 22:12:06,065 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-29 22:12:06,065 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-29 22:12:06,065 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: /**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
[INFO] Tests run: 43, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 8.199 s - in spoon.test.filters.FilterTest
[INFO] Running spoon.test.visitor.VisitorTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.199 s - in spoon.test.visitor.VisitorTest
[INFO] Running spoon.test.visitor.AssignmentsEqualsTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.139 s - in spoon.test.visitor.AssignmentsEqualsTest
[INFO] Running spoon.test.field.FieldTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.495 s - in spoon.test.field.FieldTest
[INFO] Running spoon.test.jdtimportbuilder.ImportBuilderTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.112 s - in spoon.test.jdtimportbuilder.ImportBuilderTest
[INFO] Running spoon.test.parent.NullParentTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.544 s - in spoon.test.parent.NullParentTest
[INFO] Running spoon.test.parent.ParentTest
[WARNING] Tests run: 11, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 1.629 s - in spoon.test.parent.ParentTest
[INFO] Running spoon.test.parent.TopLevelTypeTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.062 s - in spoon.test.parent.TopLevelTypeTest
[INFO] Running spoon.test.parent.SetParentTest
[INFO] Tests run: 67, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.152 s - in spoon.test.parent.SetParentTest
[INFO] Running spoon.test.parent.ContractOnSettersParametrizedTest
[INFO] Tests run: 67, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.122 s - in spoon.test.parent.ContractOnSettersParametrizedTest
[INFO] Running spoon.test.modifiers.TestModifiers
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.731 s - in spoon.test.modifiers.TestModifiers
[INFO] Running spoon.test.support.ResourceTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.44 s - in spoon.test.support.ResourceTest
[INFO] Running spoon.test.invocations.InvocationTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.455 s - in spoon.test.invocations.InvocationTest
[INFO] Running spoon.test.main.MainTest
[ERROR] Tests run: 14, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 335.165 s <<< FAILURE! - in spoon.test.main.MainTest
[ERROR] testMain_checkShadow(spoon.test.main.MainTest)  Time elapsed: 16.393 s  <<< FAILURE!
java.lang.AssertionError: cannot find decl for of(java.lang.Enum)
	at spoon.test.main.MainTest.checkShadow(MainTest.java:278)
	at spoon.test.main.MainTest.testMain_checkShadow(MainTest.java:121)

[INFO] Running spoon.test.executable.ExecutableTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.275 s - in spoon.test.executable.ExecutableTest
[INFO] Running spoon.test.executable.ExecutableRefTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.49 s - in spoon.test.executable.ExecutableRefTest
[INFO] Running spoon.test.serializable.SerializableTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.517 s - in spoon.test.serializable.SerializableTest
[INFO] Running spoon.test.serializable.SourcePositionTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.099 s - in spoon.test.serializable.SourcePositionTest
[INFO] Running spoon.test.serializable.ModelStreamerTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.371 s - in spoon.test.serializable.ModelStreamerTest
[INFO] Running spoon.test.labels.TestLabels
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.063 s - in spoon.test.labels.TestLabels
[INFO] Running spoon.test.casts.CastTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.301 s - in spoon.test.casts.CastTest
[INFO] Running spoon.test.initializers.InitializerTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.139 s - in spoon.test.initializers.InitializerTest
[INFO] Running spoon.test.staticFieldAccess.StaticAccessTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.235 s - in spoon.test.staticFieldAccess.StaticAccessTest
[INFO] Running spoon.test.reference.VariableAccessTest
2018-08-29 22:17:55,936 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable e at (/root/workspace/INRIA/spoon/422224671/src/test/resources/noclasspath/org/elasticsearch/indices/analysis/HunspellService.java:100)
[INFO] Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.936 s - in spoon.test.reference.VariableAccessTest
[INFO] Running spoon.test.reference.TypeReferenceTest
[INFO] Tests run: 28, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.407 s - in spoon.test.reference.TypeReferenceTest
[INFO] Running spoon.test.reference.ExecutableReferenceTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.914 s - in spoon.test.reference.ExecutableReferenceTest
[INFO] Running spoon.test.reference.CloneReferenceTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.137 s - in spoon.test.reference.CloneReferenceTest
[INFO] Running spoon.test.reference.ElasticsearchStackoverflowTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.198 s - in spoon.test.reference.ElasticsearchStackoverflowTest
[INFO] Running spoon.test.reference.ExecutableReferenceGenericTest
[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.776 s - in spoon.test.reference.ExecutableReferenceGenericTest
[INFO] Running spoon.test.reference.AnnotationFieldReferenceTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.058 s - in spoon.test.reference.AnnotationFieldReferenceTest
[INFO] Running spoon.test.trycatch.TryCatchTest
[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.301 s - in spoon.test.trycatch.TryCatchTest
[INFO] Running spoon.test.processing.ProcessingTest
[INFO] Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.916 s - in spoon.test.processing.ProcessingTest
[INFO] Running spoon.test.ctClass.CtClassTest
2018-08-29 22:18:04,484 ERROR spoon.Launcher - cannot load class: daikon.Runtime
spoon.support.SpoonClassNotFoundException: cannot load class: daikon.Runtime
	at spoon.support.reflect.reference.CtTypeReferenceImpl.findClass(CtTypeReferenceImpl.java:158)
	at spoon.support.reflect.reference.CtTypeReferenceImpl.getActualClass(CtTypeReferenceImpl.java:140)
	at spoon.support.reflect.reference.CtFieldReferenceImpl.getActualField(CtFieldReferenceImpl.java:63)
	at spoon.support.reflect.reference.CtFieldReferenceImpl.getModifiers(CtFieldReferenceImpl.java:227)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.isInitializeStaticFinalField(DefaultJavaPrettyPrinter.java:904)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.printCtFieldAccess(DefaultJavaPrettyPrinter.java:851)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.visitCtFieldWrite(DefaultJavaPrettyPrinter.java:810)
	at spoon.support.reflect.code.CtFieldWriteImpl.accept(CtFieldWriteImpl.java:27)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.scan(DefaultJavaPrettyPrinter.java:371)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.visitCtAssignment(DefaultJavaPrettyPrinter.java:519)
	at spoon.support.reflect.code.CtAssignmentImpl.accept(CtAssignmentImpl.java:54)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.scan(DefaultJavaPrettyPrinter.java:371)
	at spoon.reflect.visitor.ElementPrinterHelper.writeStatement(ElementPrinterHelper.java:177)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.visitCtBlock(DefaultJavaPrettyPrinter.java:552)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:68)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.scan(DefaultJavaPrettyPrinter.java:371)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.visitCtAnonymousExecutable(DefaultJavaPrettyPrinter.java:470)
	at spoon.support.reflect.declaration.CtAnonymousExecutableImpl.accept(CtAnonymousExecutableImpl.java:46)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.scan(DefaultJavaPrettyPrinter.java:371)
	at spoon.reflect.visitor.ElementPrinterHelper.writeElementList(ElementPrinterHelper.java:187)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.visitCtClass(DefaultJavaPrettyPrinter.java:646)
	at spoon.support.reflect.declaration.CtClassImpl.accept(CtClassImpl.java:67)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.scan(DefaultJavaPrettyPrinter.java:371)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.calculate(DefaultJavaPrettyPrinter.java:1983)
	at spoon.support.JavaOutputProcessor.createJavaFile(JavaOutputProcessor.java:120)
	at spoon.support.JavaOutputProcessor.process(JavaOutputProcessor.java:156)
	at spoon.support.JavaOutputProcessor.process(JavaOutputProcessor.java:46)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:74)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:173)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:147)
	at spoon.reflect.visitor.CtScanner.visitCtPackage(CtScanner.java:649)
	at spoon.support.reflect.declaration.CtPackageImpl.accept(CtPackageImpl.java:101)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:181)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:173)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:147)
	at spoon.reflect.visitor.CtScanner.visitCtPackage(CtScanner.java:648)
	at spoon.support.reflect.declaration.CtPackageImpl.accept(CtPackageImpl.java:101)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:181)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:173)
	at spoon.reflect.visitor.CtScanner.visitCtModule(CtScanner.java:924)
	at spoon.reflect.factory.ModuleFactory$CtUnnamedModule.accept(ModuleFactory.java:105)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:181)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.support.QueueProcessingManager.process(QueueProcessingManager.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.generateProcessedSourceFilesUsingTypes(JDTBasedSpoonCompiler.java:507)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.generateProcessedSourceFiles(JDTBasedSpoonCompiler.java:202)
	at spoon.Launcher.prettyprint(Launcher.java:785)
	at spoon.Launcher.run(Launcher.java:723)
	at spoon.test.ctClass.CtClassTest.testParentOfTheEnclosingClassOfStaticClass(CtClassTest.java:100)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
Caused by: java.lang.ClassNotFoundException: daikon.Runtime
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at spoon.support.reflect.reference.CtTypeReferenceImpl.findClass(CtTypeReferenceImpl.java:156)
	... 75 more
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 6.266 s - in spoon.test.ctClass.CtClassTest
[INFO] Running spoon.test.ctBlock.TestCtBlock
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.217 s - in spoon.test.ctBlock.TestCtBlock
[INFO] Running spoon.test.change.ChangeCollectorTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.057 s - in spoon.test.change.ChangeCollectorTest
[INFO] Running spoon.test.variable.InferredVariableTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.264 s - in spoon.test.variable.InferredVariableTest
[INFO] Running spoon.test.variable.AccessTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.724 s - in spoon.test.variable.AccessTest
[INFO] Running spoon.test.variable.AccessFullyQualifiedFieldTest
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.148 s - in spoon.test.variable.AccessFullyQualifiedFieldTest
[INFO] Running spoon.test.jar.JarTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.435 s - in spoon.test.jar.JarTest
[INFO] Running spoon.test.position.PositionTest
2018-08-29 22:18:12,458 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c2 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/422224671/src/test/java/spoon/test/position/testclasses/Expressions.java:14)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionClass(PositionTest.java:83)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-29 22:18:12,470 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c5 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/422224671/src/test/java/spoon/test/position/testclasses/Expressions.java:17)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionClass(PositionTest.java:83)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-29 22:18:12,470 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c6 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/422224671/src/test/java/spoon/test/position/testclasses/Expressions.java:18)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionClass(PositionTest.java:83)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-29 22:18:12,474 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c7 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/422224671/src/test/java/spoon/test/position/testclasses/Expressions.java:19)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionClass(PositionTest.java:83)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-29 22:18:13,117 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c2 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/422224671/src/test/java/spoon/test/position/testclasses/Expressions.java:14)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionInterface(PositionTest.java:201)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-29 22:18:13,118 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c5 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/422224671/src/test/java/spoon/test/position/testclasses/Expressions.java:17)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionInterface(PositionTest.java:201)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-29 22:18:13,118 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c6 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/422224671/src/test/java/spoon/test/position/testclasses/Expressions.java:18)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionInterface(PositionTest.java:201)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-29 22:18:13,119 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c7 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/422224671/src/test/java/spoon/test/position/testclasses/Expressions.java:19)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionInterface(PositionTest.java:201)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-29 22:18:13,444 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c2 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/422224671/src/test/java/spoon/test/position/testclasses/Expressions.java:14)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionClassWithComments(PositionTest.java:116)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-29 22:18:13,445 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c5 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/422224671/src/test/java/spoon/test/position/testclasses/Expressions.java:17)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionClassWithComments(PositionTest.java:116)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-29 22:18:13,445 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c6 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/422224671/src/test/java/spoon/test/position/testclasses/Expressions.java:18)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionClassWithComments(PositionTest.java:116)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-29 22:18:13,446 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c7 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/422224671/src/test/java/spoon/test/position/testclasses/Expressions.java:19)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionClassWithComments(PositionTest.java:116)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-29 22:18:14,054 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c2 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/422224671/src/test/java/spoon/test/position/testclasses/Expressions.java:14)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionAnnotation(PositionTest.java:235)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-29 22:18:14,055 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c5 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/422224671/src/test/java/spoon/test/position/testclasses/Expressions.java:17)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionAnnotation(PositionTest.java:235)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-29 22:18:14,056 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c6 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/422224671/src/test/java/spoon/test/position/testclasses/Expressions.java:18)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionAnnotation(PositionTest.java:235)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-29 22:18:14,056 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c7 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/422224671/src/test/java/spoon/test/position/testclasses/Expressions.java:19)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionAnnotation(PositionTest.java:235)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
[INFO] Tests run: 28, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.144 s - in spoon.test.position.PositionTest
[INFO] Running spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest
[INFO] Tests run: 16, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.167 s - in spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest
[INFO] Running spoon.test.role.TestCtRole
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 s - in spoon.test.role.TestCtRole
[INFO] Running spoon.test.secondaryclasses.ClassesTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.368 s - in spoon.test.secondaryclasses.ClassesTest
[INFO] Running spoon.test.annotation.AnnotationValuesTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.334 s - in spoon.test.annotation.AnnotationValuesTest
[INFO] Running spoon.test.annotation.AnnotationTest
[INFO] Tests run: 52, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.348 s - in spoon.test.annotation.AnnotationTest
[INFO] Running spoon.test.annotation.AnnotationLoopTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.057 s - in spoon.test.annotation.AnnotationLoopTest
[INFO] Running spoon.test.query_function.testclasses.VariableReferencesModelTest
[INFO] Tests run: 15, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.01 s - in spoon.test.query_function.testclasses.VariableReferencesModelTest
[INFO] Running spoon.test.query_function.VariableReferencesTest
2018-08-29 22:18:22,540 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-29 22:18:22,542 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-29 22:18:22,543 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-29 22:18:22,543 INFO spoon.Launcher - running Spoon...
2018-08-29 22:18:22,543 INFO spoon.Launcher - start processing...
2018-08-29 22:18:22,636 INFO spoon.Launcher - end of processing: 
2018-08-29 22:18:22,636 INFO spoon.Launcher - no errors, no warnings
2018-08-29 22:18:22,683 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-29 22:18:22,683 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-29 22:18:22,684 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-29 22:18:22,684 INFO spoon.Launcher - running Spoon...
2018-08-29 22:18:22,684 INFO spoon.Launcher - start processing...
2018-08-29 22:18:22,760 INFO spoon.Launcher - end of processing: 
2018-08-29 22:18:22,761 INFO spoon.Launcher - no errors, no warnings
2018-08-29 22:18:22,800 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-29 22:18:22,800 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-29 22:18:22,801 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-29 22:18:22,801 INFO spoon.Launcher - running Spoon...
2018-08-29 22:18:22,801 INFO spoon.Launcher - start processing...
2018-08-29 22:18:22,884 INFO spoon.Launcher - end of processing: 
2018-08-29 22:18:22,884 INFO spoon.Launcher - no errors, no warnings
2018-08-29 22:18:22,890 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-29 22:18:22,890 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-29 22:18:22,891 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-29 22:18:22,891 INFO spoon.Launcher - running Spoon...
2018-08-29 22:18:22,892 INFO spoon.Launcher - start processing...
2018-08-29 22:18:22,988 INFO spoon.Launcher - end of processing: 
2018-08-29 22:18:22,989 INFO spoon.Launcher - no errors, no warnings
2018-08-29 22:18:23,030 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-29 22:18:23,031 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-29 22:18:23,031 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-29 22:18:23,031 INFO spoon.Launcher - running Spoon...
2018-08-29 22:18:23,032 INFO spoon.Launcher - start processing...
2018-08-29 22:18:23,118 INFO spoon.Launcher - end of processing: 
2018-08-29 22:18:23,118 INFO spoon.Launcher - no errors, no warnings
2018-08-29 22:18:23,137 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-29 22:18:23,137 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-29 22:18:23,138 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-29 22:18:23,138 INFO spoon.Launcher - running Spoon...
2018-08-29 22:18:23,138 INFO spoon.Launcher - start processing...
2018-08-29 22:18:23,232 INFO spoon.Launcher - end of processing: 
2018-08-29 22:18:23,249 INFO spoon.Launcher - no errors, no warnings
2018-08-29 22:18:23,258 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-29 22:18:23,258 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-29 22:18:23,258 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-29 22:18:23,259 INFO spoon.Launcher - running Spoon...
2018-08-29 22:18:23,259 INFO spoon.Launcher - start processing...
2018-08-29 22:18:23,337 INFO spoon.Launcher - end of processing: 
2018-08-29 22:18:23,337 INFO spoon.Launcher - no errors, no warnings
2018-08-29 22:18:23,407 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-29 22:18:23,408 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-29 22:18:23,408 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-29 22:18:23,408 INFO spoon.Launcher - running Spoon...
2018-08-29 22:18:23,408 INFO spoon.Launcher - start processing...
2018-08-29 22:18:23,490 INFO spoon.Launcher - end of processing: 
2018-08-29 22:18:23,490 INFO spoon.Launcher - no errors, no warnings
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.037 s - in spoon.test.query_function.VariableReferencesTest
[INFO] Running spoon.test.replace.ReplaceParametrizedTest
[INFO] Tests run: 80, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.298 s - in spoon.test.replace.ReplaceParametrizedTest
[INFO] Running spoon.test.replace.ReplaceTest
[INFO] Tests run: 17, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.428 s - in spoon.test.replace.ReplaceTest
[INFO] Running spoon.test.javadoc.JavaDocTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.124 s - in spoon.test.javadoc.JavaDocTest
[INFO] Running spoon.test.strings.StringTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.053 s - in spoon.test.strings.StringTest
[INFO] Running spoon.test.strings.StringLiteralTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.047 s - in spoon.test.strings.StringLiteralTest
[INFO] Running spoon.test.constructorcallnewclass.ConstructorCallTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.536 s - in spoon.test.constructorcallnewclass.ConstructorCallTest
[INFO] Running spoon.test.constructorcallnewclass.NewClassTest
[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.93 s - in spoon.test.constructorcallnewclass.NewClassTest
[INFO] Running spoon.test.factory.CodeFactoryTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.test.factory.CodeFactoryTest
[INFO] Running spoon.test.factory.FactoryTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.27 s - in spoon.test.factory.FactoryTest
[INFO] Running spoon.test.factory.TypeFactoryTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.626 s - in spoon.test.factory.TypeFactoryTest
[INFO] Running spoon.test.factory.FieldFactoryTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.315 s - in spoon.test.factory.FieldFactoryTest
[INFO] Running spoon.test.factory.ConstructorFactoryTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.test.factory.ConstructorFactoryTest
[INFO] Running spoon.test.factory.ExecutableFactoryTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.test.factory.ExecutableFactoryTest
[INFO] Running spoon.test.factory.ClassFactoryTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.test.factory.ClassFactoryTest
[INFO] Running spoon.test.factory.AnnotationFactoryTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.test.factory.AnnotationFactoryTest
[INFO] Running spoon.test.lambda.LambdaTest
2018-08-29 22:18:32,075 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable Strings at (/root/workspace/INRIA/spoon/422224671/src/test/resources/noclasspath/lambdas/TypeAccessInLambda.java:6)
[INFO] Tests run: 23, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.963 s - in spoon.test.lambda.LambdaTest
[INFO] Running spoon.test.reflect.visitor.ReferenceQueryTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.06 s - in spoon.test.reflect.visitor.ReferenceQueryTest
[INFO] Running spoon.test.interfaces.InterfaceTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.393 s - in spoon.test.interfaces.InterfaceTest
[INFO] Running spoon.test.interfaces.TestInterfaceWithoutSetup
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.257 s - in spoon.test.interfaces.TestInterfaceWithoutSetup
[INFO] Running spoon.test.compilation.CompilationTest
>> Hello: Bar <<
>> Hello: FooEx <<
>> Hello: IBar <<
>> Hello: SimpleProcessor <<
[INFO] Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 14.411 s - in spoon.test.compilation.CompilationTest
[INFO] Running spoon.test.literal.LiteralTest
2018-08-29 22:18:48,703 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable Longs at (/root/workspace/INRIA/spoon/422224671/src/test/resources/noclasspath/SecondaryIndexManager.java:611)
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.613 s - in spoon.test.literal.LiteralTest
[INFO] Running spoon.test.limits.utils.InternalTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.13 s - in spoon.test.limits.utils.InternalTest
[INFO] Running spoon.test.constructor.ConstructorTest
[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.915 s - in spoon.test.constructor.ConstructorTest
[INFO] Running spoon.test.model.AnonymousExecutableTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.1 s - in spoon.test.model.AnonymousExecutableTest
[INFO] Running spoon.test.model.TypeTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.533 s - in spoon.test.model.TypeTest
[INFO] Running spoon.test.model.SwitchCaseTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.169 s - in spoon.test.model.SwitchCaseTest
[INFO] Running spoon.test.model.IncrementalLauncherTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 7.253 s - in spoon.test.model.IncrementalLauncherTest
[INFO] Running spoon.test.model.BlockTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.113 s - in spoon.test.model.BlockTest
[INFO] Running spoon.test.OutputTypeTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in spoon.test.OutputTypeTest
[INFO] Running spoon.test.parameters.ParameterTest
2018-08-29 22:18:59,270 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable typeRatingFilters at (/root/workspace/INRIA/spoon/422224671/src/test/resources/noclasspath/Tacos.java:4)
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.353 s - in spoon.test.parameters.ParameterTest
[INFO] Running spoon.test.comparison.EqualTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.363 s - in spoon.test.comparison.EqualTest
[INFO] Running spoon.test.properties.PropertiesTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.065 s - in spoon.test.properties.PropertiesTest
[INFO] Running spoon.test.control.ControlTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.117 s - in spoon.test.control.ControlTest
[INFO] Running spoon.test.imports.ImportAndExtendWithPackageNameTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.162 s - in spoon.test.imports.ImportAndExtendWithPackageNameTest
[INFO] Running spoon.test.imports.ImportTest
[INFO] Tests run: 44, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 8.477 s - in spoon.test.imports.ImportTest
[INFO] Running spoon.test.imports.ImportScannerTest
2018-08-29 22:19:38,716 WARN spoon.Launcher - ImportScannerTest: Import scanner imports 583 unused imports and misses 0 imports
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 30.637 s - in spoon.test.imports.ImportScannerTest
[INFO] Running spoon.test.snippets.SnippetTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.626 s - in spoon.test.snippets.SnippetTest
[INFO] Running spoon.test.ctBodyHolder.CtBodyHolderTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.747 s - in spoon.test.ctBodyHolder.CtBodyHolderTest
[INFO] Running spoon.test.eval.EvalTest
[INFO] Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.916 s - in spoon.test.eval.EvalTest
[INFO] Running spoon.test.method.MethodTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.444 s - in spoon.test.method.MethodTest
[INFO] Running spoon.test.ctCase.SwitchCaseTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.118 s - in spoon.test.ctCase.SwitchCaseTest
[INFO] Running spoon.test.api.APITest
./target/nooutput_e798705c-4ed7-4b70-8679-a432d3ccb2b6
[INFO] Tests run: 23, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 19.39 s - in spoon.test.api.APITest
[INFO] Running spoon.test.api.NoClasspathTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.491 s - in spoon.test.api.NoClasspathTest
[INFO] Running spoon.test.api.FileSystemFolderTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in spoon.test.api.FileSystemFolderTest
[INFO] Running spoon.test.api.MetamodelTest
[INFO] Tests run: 14, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 6.072 s - in spoon.test.api.MetamodelTest
[INFO] Running spoon.test.loop.LoopTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.268 s - in spoon.test.loop.LoopTest
[INFO] Running spoon.test.ctElement.MetadataTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.test.ctElement.MetadataTest
[INFO] Running spoon.test.ctElement.ElementTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.test.ctElement.ElementTest
[INFO] Running spoon.test.delete.DeleteTest
[INFO] Tests run: 14, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.809 s - in spoon.test.delete.DeleteTest
[INFO] Running spoon.test.ctType.CtTypeParameterTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.143 s - in spoon.test.ctType.CtTypeParameterTest
[INFO] Running spoon.test.ctType.CtTypeTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.547 s - in spoon.test.ctType.CtTypeTest
[INFO] Running spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest
[INFO] Tests run: 117, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.507 s - in spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest
[INFO] Running spoon.test.intercession.insertBefore.InsertMethodsTest
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.162 s - in spoon.test.intercession.insertBefore.InsertMethodsTest
[INFO] Running spoon.test.intercession.IntercessionTest
[WARNING] Tests run: 8, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 6.631 s - in spoon.test.intercession.IntercessionTest
[INFO] Running spoon.test.intercession.RemoveTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.061 s - in spoon.test.intercession.RemoveTest
[INFO] Running spoon.test.type.TypeTest
[INFO] Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.446 s - in spoon.test.type.TypeTest
[INFO] Running spoon.test.fieldaccesses.FieldAccessTest
[INFO] Tests run: 16, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.33 s - in spoon.test.fieldaccesses.FieldAccessTest
[INFO] Running spoon.test.module.TestModule
[WARNING] Tests run: 8, Failures: 0, Errors: 0, Skipped: 2, Time elapsed: 0.353 s - in spoon.test.module.TestModule
[INFO] Running spoon.test.methodreference.MethodReferenceTest
[ERROR] Tests run: 13, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 4.176 s <<< FAILURE! - in spoon.test.methodreference.MethodReferenceTest
[ERROR] testGetGenericExecutableReference(spoon.test.methodreference.MethodReferenceTest)  Time elapsed: 0.28 s  <<< FAILURE!
java.lang.AssertionError: expected: spoon.support.reflect.reference.CtTypeParameterReferenceImpl<T> but was: spoon.support.reflect.reference.CtTypeParameterReferenceImpl<T>
	at spoon.test.methodreference.MethodReferenceTest.testGetGenericExecutableReference(MethodReferenceTest.java:256)

[INFO] Running spoon.test.arrays.ArraysTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.692 s - in spoon.test.arrays.ArraysTest
[INFO] Running spoon.test.prettyprinter.PrinterTest
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.217 s - in spoon.test.prettyprinter.PrinterTest
[INFO] Running spoon.test.prettyprinter.QualifiedThisRefTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.243 s - in spoon.test.prettyprinter.QualifiedThisRefTest
[INFO] Running spoon.test.prettyprinter.LinesTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.582 s - in spoon.test.prettyprinter.LinesTest
[INFO] Running spoon.test.prettyprinter.DefaultPrettyPrinterTest
[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.236 s - in spoon.test.prettyprinter.DefaultPrettyPrinterTest
[INFO] Running spoon.test.varargs.VarArgsTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.055 s - in spoon.test.varargs.VarArgsTest
[INFO] Running spoon.test.targeted.TargetedExpressionTest
[INFO] Tests run: 17, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.206 s - in spoon.test.targeted.TargetedExpressionTest
[INFO] Running spoon.test.logging.LogTest
2018-08-29 22:20:34,225 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-29 22:20:34,225 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-29 22:20:34,225 DEBUG spoon.Launcher - destination: /root/workspace/INRIA/spoon/422224671/spooned-classes
2018-08-29 22:20:34,225 DEBUG spoon.Launcher - source classpath: null
2018-08-29 22:20:34,225 DEBUG spoon.Launcher - template classpath: []
2018-08-29 22:20:34,226 INFO spoon.Launcher - Log info
2018-08-29 22:20:34,226 WARN spoon.Launcher - Log warn
2018-08-29 22:20:34,227 ERROR spoon.Launcher - Log error
2018-08-29 22:20:34,227 DEBUG spoon.Launcher - Log debug
2018-08-29 22:20:34,228 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-29 22:20:34,228 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-29 22:20:34,228 DEBUG spoon.Launcher - destination: /root/workspace/INRIA/spoon/422224671/spooned-classes
2018-08-29 22:20:34,228 DEBUG spoon.Launcher - source classpath: null
2018-08-29 22:20:34,228 DEBUG spoon.Launcher - template classpath: []
2018-08-29 22:20:34,229 INFO spoon.Launcher - Log info
2018-08-29 22:20:34,229 WARN spoon.Launcher - Log warn
2018-08-29 22:20:34,229 ERROR spoon.Launcher - Log error
2018-08-29 22:20:34,229 DEBUG spoon.Launcher - Log debug
2018-08-29 22:20:34,230 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-29 22:20:34,230 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-29 22:20:34,230 INFO spoon.Launcher - Log info
2018-08-29 22:20:34,231 WARN spoon.Launcher - Log warn
2018-08-29 22:20:34,231 ERROR spoon.Launcher - Log error
2018-08-29 22:20:34,231 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-29 22:20:34,231 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-29 22:20:34,232 WARN spoon.Launcher - Log warn
2018-08-29 22:20:34,232 ERROR spoon.Launcher - Log error
2018-08-29 22:20:34,233 ERROR spoon.Launcher - Log error
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.013 s - in spoon.test.logging.LogTest
[INFO] Running spoon.test.architecture.SpoonArchitectureEnforcerTest
2018-08-29 22:21:07,514 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c2 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/422224671/src/test/java/spoon/test/position/testclasses/Expressions.java:14)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.Launcher.buildModel(Launcher.java:768)
	at spoon.test.architecture.SpoonArchitectureEnforcerTest.testGoodTestClassNames(SpoonArchitectureEnforcerTest.java:225)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-29 22:21:07,515 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c5 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/422224671/src/test/java/spoon/test/position/testclasses/Expressions.java:17)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.Launcher.buildModel(Launcher.java:768)
	at spoon.test.architecture.SpoonArchitectureEnforcerTest.testGoodTestClassNames(SpoonArchitectureEnforcerTest.java:225)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-29 22:21:07,516 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c6 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/422224671/src/test/java/spoon/test/position/testclasses/Expressions.java:18)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.Launcher.buildModel(Launcher.java:768)
	at spoon.test.architecture.SpoonArchitectureEnforcerTest.testGoodTestClassNames(SpoonArchitectureEnforcerTest.java:225)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-29 22:21:07,517 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c7 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/422224671/src/test/java/spoon/test/position/testclasses/Expressions.java:19)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.Launcher.buildModel(Launcher.java:768)
	at spoon.test.architecture.SpoonArchitectureEnforcerTest.testGoodTestClassNames(SpoonArchitectureEnforcerTest.java:225)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
[ERROR] Tests run: 8, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 45.898 s <<< FAILURE! - in spoon.test.architecture.SpoonArchitectureEnforcerTest
[ERROR] testSrcMainJava(spoon.test.architecture.SpoonArchitectureEnforcerTest)  Time elapsed: 14.902 s  <<< FAILURE!
java.lang.AssertionError: 
37 public methods should be documented with proper API documentation: 
spoon.processing.AbstractAnnotationProcessor#process(spoon.reflect.declaration.CtElement)
spoon.reflect.visitor.chain.CtQueryImpl#select(spoon.reflect.visitor.Filter)
spoon.reflect.visitor.CtBiScannerDefault#visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)
spoon.reflect.visitor.CtBiScannerDefault#visitCtAnnotationType(spoon.reflect.declaration.CtAnnotationType)
spoon.reflect.visitor.CtBiScannerDefault#visitCtAssignment(spoon.reflect.code.CtAssignment)
spoon.reflect.visitor.CtBiScannerDefault#visitCtEnum(spoon.reflect.declaration.CtEnum)
spoon.reflect.visitor.CtBiScannerDefault#visitCtExecutableReferenceExpression(spoon.reflect.code.CtExecutableReferenceExpression)
spoon.reflect.visitor.CtBiScannerDefault#visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)
spoon.reflect.visitor.CtInheritanceScanner#visitCtAnnotationType(spoon.reflect.declaration.CtAnnotationType)
spoon.reflect.visitor.CtScanner#visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)
spoon.reflect.visitor.CtScanner#visitCtAssignment(spoon.reflect.code.CtAssignment)
spoon.reflect.visitor.CtScanner#visitCtEnum(spoon.reflect.declaration.CtEnum)
spoon.reflect.visitor.CtScanner#visitCtExecutableReferenceExpression(spoon.reflect.code.CtExecutableReferenceExpression)
spoon.reflect.visitor.CtScanner#visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)
spoon.reflect.visitor.DefaultJavaPrettyPrinter#visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)
spoon.reflect.visitor.DefaultJavaPrettyPrinter#visitCtEnum(spoon.reflect.declaration.CtEnum)
spoon.reflect.visitor.DefaultJavaPrettyPrinter#visitCtExecutableReferenceExpression(spoon.reflect.code.CtExecutableReferenceExpression)
spoon.reflect.visitor.DefaultJavaPrettyPrinter#visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)
spoon.support.compiler.jdt.ParentExiter#visitCtAssignment(spoon.reflect.code.CtAssignment)
spoon.support.reflect.declaration.CtTypeImpl$1NestedTypeScanner#visitCtEnum(spoon.reflect.declaration.CtEnum)
spoon.support.reflect.eval.VisitorPartialEvaluator#evaluate(spoon.reflect.declaration.CtElement)
spoon.support.visitor.clone.CloneVisitor#visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)
spoon.support.visitor.clone.CloneVisitor#visitCtAnnotationType(spoon.reflect.declaration.CtAnnotationType)
spoon.support.visitor.clone.CloneVisitor#visitCtAssignment(spoon.reflect.code.CtAssignment)
spoon.support.visitor.clone.CloneVisitor#visitCtEnum(spoon.reflect.declaration.CtEnum)
spoon.support.visitor.clone.CloneVisitor#visitCtExecutableReferenceExpression(spoon.reflect.code.CtExecutableReferenceExpression)
spoon.support.visitor.clone.CloneVisitor#visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)
spoon.support.visitor.equals.EqualsChecker#visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)
spoon.support.visitor.java.JavaReflectionTreeBuilder#visitAnnotationClass(java.lang.Class)
spoon.support.visitor.java.JavaReflectionTreeBuilder#visitTypeParameter(java.lang.reflect.TypeVariable)
spoon.support.visitor.java.JavaReflectionTreeBuilder#visitTypeParameterReference(spoon.reflect.path.CtRole,java.lang.reflect.TypeVariable)
spoon.support.visitor.java.JavaReflectionVisitorImpl#visitAnnotationClass(java.lang.Class)
spoon.support.visitor.replace.ReplacementVisitor#visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)
spoon.support.visitor.replace.ReplacementVisitor#visitCtAssignment(spoon.reflect.code.CtAssignment)
spoon.support.visitor.replace.ReplacementVisitor#visitCtEnum(spoon.reflect.declaration.CtEnum)
spoon.support.visitor.replace.ReplacementVisitor#visitCtExecutableReferenceExpression(spoon.reflect.code.CtExecutableReferenceExpression)
spoon.support.visitor.replace.ReplacementVisitor#visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)
	at spoon.test.architecture.SpoonArchitectureEnforcerTest.testSrcMainJava(SpoonArchitectureEnforcerTest.java:175)

[INFO] Running spoon.test.signature.SignatureTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.86 s - in spoon.test.signature.SignatureTest
[INFO] Running spoon.test.compilationunit.TestCompilationUnit
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.378 s - in spoon.test.compilationunit.TestCompilationUnit
[INFO] Running spoon.test.compilationunit.GetBinaryFilesTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.625 s - in spoon.test.compilationunit.GetBinaryFilesTest
[INFO] Running spoon.test.refactoring.RefactoringTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.662 s - in spoon.test.refactoring.RefactoringTest
[INFO] Running spoon.test.refactoring.CtRenameLocalVariableRefactoringTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 26.852 s - in spoon.test.refactoring.CtRenameLocalVariableRefactoringTest
[INFO] Running spoon.test.refactoring.MethodsRefactoringTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.974 s - in spoon.test.refactoring.MethodsRefactoringTest
[INFO] Running spoon.test.template.TemplateArrayAccessTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.149 s - in spoon.test.template.TemplateArrayAccessTest
[INFO] Running spoon.test.template.core.ParameterInfoTest
[INFO] Tests run: 21, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.021 s - in spoon.test.template.core.ParameterInfoTest
[INFO] Running spoon.test.template.TemplateEnumAccessTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.149 s - in spoon.test.template.TemplateEnumAccessTest
[INFO] Running spoon.test.template.PatternTest
[INFO] Tests run: 31, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.692 s - in spoon.test.template.PatternTest
[INFO] Running spoon.test.template.TemplateReplaceReturnTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.271 s - in spoon.test.template.TemplateReplaceReturnTest
[INFO] Running spoon.test.template.TemplateTest
0
[INFO] Tests run: 24, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.847 s - in spoon.test.template.TemplateTest
[INFO] Running spoon.test.template.TemplateClassAccessTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.09 s - in spoon.test.template.TemplateClassAccessTest
[INFO] Running spoon.test.template.TemplateInvocationSubstitutionTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.322 s - in spoon.test.template.TemplateInvocationSubstitutionTest
[INFO] Running spoon.test.pkg.PackageTest
[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.006 s - in spoon.test.pkg.PackageTest
[INFO] Running spoon.test.method_overriding.MethodOverriddingTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.198 s - in spoon.test.method_overriding.MethodOverriddingTest
[INFO] Running spoon.LauncherTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.377 s - in spoon.LauncherTest
[INFO] 
[INFO] Results:
[INFO] 
[ERROR] Failures: 
[ERROR]   CtGenerationTest.testGenerateRoleHandler:194 ModelRoleHandlers different expected:<...
    static class Ct[TargetedExpression_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtTargetedExpression, spoon.reflect.code.CtExpression<?>> {
        private CtTargetedExpression_TARGET_RoleHandler() {
            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtTargetedExpression.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTarget(castValue(value));
        }
    }

    static class CtLabelledFlowBreak_TARGET_LABEL_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLabelledFlowBreak, java.lang.String> {
        private CtLabelledFlowBreak_TARGET_LABEL_RoleHandler() {
            super(spoon.reflect.path.CtRole.TARGET_LABEL, spoon.reflect.code.CtLabelledFlowBreak.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTargetLabel())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTargetLabel(castValue(value));
        }
    }

    static class CtConditional_THEN_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression<?>> {
        private CtConditional_THEN_RoleHandler() {
            super(spoon.reflect.path.CtRole.THEN, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThenExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThenExpression(castValue(value));
        }
    }

    static class CtIf_THEN_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtIf, spoon.reflect.code.CtStatement> {
        private CtIf_THEN_RoleHandler() {
            super(spoon.reflect.path.CtRole.THEN, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThenStatement())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThenStatement(castValue(value));
        }
    }

    static class CtExecutable_THROWN_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtExecutable, spoon.reflect.reference.CtTypeReference<? extends java.lang.Throwable>> {
        private CtExecutable_THROWN_RoleHandler() {
            super(spoon.reflect.path.CtRole.THROWN, spoon.reflect.declaration.CtExecutable.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThrownTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThrownTypes(castValue(value));
        }
    }

    static class CtTryWithResource_TRY_RESOURCE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtTryWithResource, spoon.reflect.code.CtLocalVariable<? extends java.lang.Object>> {
        private CtTryWithResource_TRY_RESOURCE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TRY_RESOURCE, spoon.reflect.code.CtTryWithResource.class, spoon.reflect.code.CtLocalVariable.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getResources())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setResources(castValue(value));
        }
    }

    static class CtArrayTypeReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtArrayTypeReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtArrayTypeReference_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.reference.CtArrayTypeReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getComponentType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setComponentType(castValue(value));
        }
    }

    static class CtExecutableReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtExecutableReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtExecutableReference_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.reference.CtExecutableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtTypedElement_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtTypedElement, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypedElement_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.declaration.CtTypedElement.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtVariableReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtVariableReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtVariableReference_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.reference.CtVariableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.reference.CtActualTypeContainer, spoon.reflect.reference.CtTypeReference<?>> {
        private CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE_ARGUMENT, spoon.reflect.reference.CtActualTypeContainer.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getActualTypeArguments())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setActualTypeArguments(castValue(value));
        }
    }

    static class CtType_TYPE_MEMBER_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtTypeMember> {
        private CtType_TYPE_MEMBER_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE_MEMBER, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtTypeMember.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTypeMembers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTypeMembers(castValue(value));
        }
    }

    static class CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtFormalTypeDeclarer, spoon.reflect.declaration.CtTypeParameter> {
        private CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE_PARAMETER, spoon.reflect.declaration.CtFormalTypeDeclarer.class, spoon.reflect.declaration.CtTypeParameter.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getFormalCtTypeParameters())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFormalCtTypeParameters(castValue(value));
        }
    }

    static class CtAnnotation_VALUE_RoleHandler extends spoon.reflect.meta.impl.MapHandler<spoon.reflect.declaration.CtAnnotation, spoon.reflect.code.CtExpression> {
        private CtAnnotation_VALUE_RoleHandler() {
            super(spoon.reflect.path.CtRole.VALUE, spoon.reflect.declaration.CtAnnotation.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getValues())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setValues(castValue(value));
        }
    }

    static class CtEnum_VALUE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtEnum, spoon.reflect.declaration.CtEnumValue<? extends java.lang.Object>> {
        private CtEnum_VALUE_RoleHandler() {
            super(spoon.reflect.path.CtRole.VALUE, spoon.reflect.declaration.CtEnum.class, spoon.reflect.declaration.CtEnumValue.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getEnumValues())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setEnumValues(castValue(value));
        }
    }

    static class CtLiteral_VALUE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLiteral, java.lang.Object> {
        private CtLiteral_VALUE_RoleHandler() {
            super(spoon.reflect.path.CtRole.VALUE, spoon.reflect.code.CtLiteral.class, java.lang.Object.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getValue())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setValue(castValue(value));
        }
    }

    static class CtVariableAccess_VARIABLE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtVariableAccess, spoon.reflect.reference.CtVariableReference<?>> {
        private CtVariableAccess_VARIABLE_RoleHandler() {
            super(spoon.reflect.path.CtRole.VARIABLE, spoon.reflect.code.CtVariableAccess.class, spoon.reflect.reference.CtVariableReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getVariable())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setVariable(castValue(value));
        }
    }

    private ModelRoleHandlers() {
    }

    static final spoon.reflect.meta.RoleHandler[] roleHandlers = new spoon.reflect.meta.RoleHandler[]{ new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeAccess_ACCESSED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtClass_ANNONYMOUS_EXECUTABLE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_ANNOTATION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotation_ANNOTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAbstractInvocation_ARGUMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_ARGUMENT_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssignment_ASSIGNED_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtRHSReceiver_ASSIGNMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBodyHolder_BODY_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSynchronized_BODY_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIntersectionTypeReference_BOUND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeParameterReference_BOUNDING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSwitch_CASE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExpression_CAST_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTry_CATCH_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_COMMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtComment_COMMENT_CONTENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_COMMENT_CONTENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDoc_COMMENT_TAG_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtComment_COMMENT_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssert_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtClass_CONSTRUCTOR_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackage_CONTAINED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtVariable_DEFAULT_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNewArray_DIMENSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_ELSE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_ELSE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAbstractInvocation_EXECUTABLE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_EXPORTED_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtArrayAccess_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssert_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtCase_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtDo_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtForEach_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtLambda_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNewArray_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtReturn_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSwitch_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSynchronized_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtThrow_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtUnaryOperator_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtWhile_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_FIELD_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTry_FINALIZER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtForEach_FOREACH_VARIABLE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_FOR_INIT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_FOR_UPDATE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtImport_IMPORT_REFERENCE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_INTERFACE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_INTERFACE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtMethod_IS_DEFAULT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_IS_FINAL_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_IS_IMPLICIT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtLocalVariable_IS_INFERRED_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtShadowable_IS_SHADOW_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_IS_STATIC_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_IS_STATIC_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeParameterReference_IS_UPPER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtParameter_IS_VARARGS_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtStatement_LABEL_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_LEFT_OPERAND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_METHOD_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModifiable_MODIFIER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_MODIFIER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModuleRequirement_MODIFIER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_MODIFIER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_MODULE_DIRECTIVE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModuleRequirement_MODULE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_MODULE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtMultiTypedElement_MULTI_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNamedElement_NAME_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtReference_NAME_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNewClass_NESTED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_NESTED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_OPENED_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_OPENED_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_OPERATOR_KIND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtOperatorAssignment_OPERATOR_KIND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtUnaryOperator_OPERATOR_KIND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_PACKAGE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeReference_PACKAGE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtCatch_PARAMETER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutable_PARAMETER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_POSITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_PROVIDED_SERVICE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_REQUIRED_MODULE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_RIGHT_OPERAND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_SERVICE_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtProvidedService_SERVICE_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtUsedService_SERVICE_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtCodeSnippet_SNIPPET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtStatementList_STATEMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_SUB_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackage_SUB_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_SUPER_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_SUPER_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTargetedExpression]_TARGET_RoleHandler(...> but was:<...
    static class Ct[AnnotationFieldAccess_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtAnnotationFieldAccess, spoon.reflect.code.CtExpression<?>> {
        private CtAnnotationFieldAccess_TARGET_RoleHandler() {
            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtAnnotationFieldAccess.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTarget(castValue(value));
        }
    }

    static class CtArrayRead_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtArrayRead, spoon.reflect.code.CtExpression<?>> {
        private CtArrayRead_TARGET_RoleHandler() {
            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtArrayRead.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTarget(castValue(value));
        }
    }

    static class CtArrayWrite_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtArrayWrite, spoon.reflect.code.CtExpression<?>> {
        private CtArrayWrite_TARGET_RoleHandler() {
            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtArrayWrite.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTarget(castValue(value));
        }
    }

    static class CtConstructorCall_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtConstructorCall, spoon.reflect.code.CtExpression<?>> {
        private CtConstructorCall_TARGET_RoleHandler() {
            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtConstructorCall.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTarget(castValue(value));
        }
    }

    static class CtFieldAccess_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtFieldAccess, spoon.reflect.code.CtExpression<?>> {
        private CtFieldAccess_TARGET_RoleHandler() {
            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtFieldAccess.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTarget(castValue(value));
        }
    }

    static class CtInvocation_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtInvocation, spoon.reflect.code.CtExpression<?>> {
        private CtInvocation_TARGET_RoleHandler() {
            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtInvocation.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTarget(castValue(value));
        }
    }

    static class CtSuperAccess_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtSuperAccess, spoon.reflect.code.CtExpression<?>> {
        private CtSuperAccess_TARGET_RoleHandler() {
            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtSuperAccess.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTarget(castValue(value));
        }
    }

    static class CtTargetedExpression_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtTargetedExpression, java.lang.Object> {
        private CtTargetedExpression_TARGET_RoleHandler() {
            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtTargetedExpression.class, java.lang.Object.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTarget(castValue(value));
        }
    }

    static class CtThisAccess_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtThisAccess, spoon.reflect.code.CtExpression<?>> {
        private CtThisAccess_TARGET_RoleHandler() {
            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtThisAccess.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTarget(castValue(value));
        }
    }

    static class CtLabelledFlowBreak_TARGET_LABEL_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLabelledFlowBreak, java.lang.String> {
        private CtLabelledFlowBreak_TARGET_LABEL_RoleHandler() {
            super(spoon.reflect.path.CtRole.TARGET_LABEL, spoon.reflect.code.CtLabelledFlowBreak.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTargetLabel())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTargetLabel(castValue(value));
        }
    }

    static class CtConditional_THEN_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression<?>> {
        private CtConditional_THEN_RoleHandler() {
            super(spoon.reflect.path.CtRole.THEN, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThenExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThenExpression(castValue(value));
        }
    }

    static class CtIf_THEN_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtIf, spoon.reflect.code.CtStatement> {
        private CtIf_THEN_RoleHandler() {
            super(spoon.reflect.path.CtRole.THEN, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThenStatement())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThenStatement(castValue(value));
        }
    }

    static class CtExecutable_THROWN_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtExecutable, spoon.reflect.reference.CtTypeReference<? extends java.lang.Throwable>> {
        private CtExecutable_THROWN_RoleHandler() {
            super(spoon.reflect.path.CtRole.THROWN, spoon.reflect.declaration.CtExecutable.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThrownTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThrownTypes(castValue(value));
        }
    }

    static class CtTryWithResource_TRY_RESOURCE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtTryWithResource, spoon.reflect.code.CtLocalVariable<? extends java.lang.Object>> {
        private CtTryWithResource_TRY_RESOURCE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TRY_RESOURCE, spoon.reflect.code.CtTryWithResource.class, spoon.reflect.code.CtLocalVariable.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getResources())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setResources(castValue(value));
        }
    }

    static class CtArrayTypeReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtArrayTypeReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtArrayTypeReference_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.reference.CtArrayTypeReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getComponentType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setComponentType(castValue(value));
        }
    }

    static class CtExecutableReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtExecutableReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtExecutableReference_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.reference.CtExecutableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtTypedElement_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtTypedElement, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypedElement_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.declaration.CtTypedElement.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtVariableReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtVariableReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtVariableReference_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.reference.CtVariableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.reference.CtActualTypeContainer, spoon.reflect.reference.CtTypeReference<?>> {
        private CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE_ARGUMENT, spoon.reflect.reference.CtActualTypeContainer.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getActualTypeArguments())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setActualTypeArguments(castValue(value));
        }
    }

    static class CtType_TYPE_MEMBER_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtTypeMember> {
        private CtType_TYPE_MEMBER_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE_MEMBER, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtTypeMember.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTypeMembers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTypeMembers(castValue(value));
        }
    }

    static class CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtFormalTypeDeclarer, spoon.reflect.declaration.CtTypeParameter> {
        private CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE_PARAMETER, spoon.reflect.declaration.CtFormalTypeDeclarer.class, spoon.reflect.declaration.CtTypeParameter.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getFormalCtTypeParameters())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFormalCtTypeParameters(castValue(value));
        }
    }

    static class CtAnnotation_VALUE_RoleHandler extends spoon.reflect.meta.impl.MapHandler<spoon.reflect.declaration.CtAnnotation, spoon.reflect.code.CtExpression> {
        private CtAnnotation_VALUE_RoleHandler() {
            super(spoon.reflect.path.CtRole.VALUE, spoon.reflect.declaration.CtAnnotation.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getValues())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setValues(castValue(value));
        }
    }

    static class CtEnum_VALUE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtEnum, spoon.reflect.declaration.CtEnumValue<? extends java.lang.Object>> {
        private CtEnum_VALUE_RoleHandler() {
            super(spoon.reflect.path.CtRole.VALUE, spoon.reflect.declaration.CtEnum.class, spoon.reflect.declaration.CtEnumValue.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getEnumValues())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setEnumValues(castValue(value));
        }
    }

    static class CtLiteral_VALUE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLiteral, java.lang.Object> {
        private CtLiteral_VALUE_RoleHandler() {
            super(spoon.reflect.path.CtRole.VALUE, spoon.reflect.code.CtLiteral.class, java.lang.Object.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getValue())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setValue(castValue(value));
        }
    }

    static class CtVariableAccess_VARIABLE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtVariableAccess, spoon.reflect.reference.CtVariableReference<?>> {
        private CtVariableAccess_VARIABLE_RoleHandler() {
            super(spoon.reflect.path.CtRole.VARIABLE, spoon.reflect.code.CtVariableAccess.class, spoon.reflect.reference.CtVariableReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getVariable())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setVariable(castValue(value));
        }
    }

    private ModelRoleHandlers() {
    }

    static final spoon.reflect.meta.RoleHandler[] roleHandlers = new spoon.reflect.meta.RoleHandler[]{ new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeAccess_ACCESSED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtClass_ANNONYMOUS_EXECUTABLE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_ANNOTATION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotation_ANNOTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAbstractInvocation_ARGUMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_ARGUMENT_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssignment_ASSIGNED_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtRHSReceiver_ASSIGNMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBodyHolder_BODY_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSynchronized_BODY_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIntersectionTypeReference_BOUND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeParameterReference_BOUNDING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSwitch_CASE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExpression_CAST_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTry_CATCH_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_COMMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtComment_COMMENT_CONTENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_COMMENT_CONTENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDoc_COMMENT_TAG_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtComment_COMMENT_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssert_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtClass_CONSTRUCTOR_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackage_CONTAINED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtVariable_DEFAULT_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNewArray_DIMENSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_ELSE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_ELSE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAbstractInvocation_EXECUTABLE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_EXPORTED_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtArrayAccess_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssert_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtCase_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtDo_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtForEach_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtLambda_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNewArray_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtReturn_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSwitch_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSynchronized_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtThrow_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtUnaryOperator_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtWhile_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_FIELD_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTry_FINALIZER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtForEach_FOREACH_VARIABLE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_FOR_INIT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_FOR_UPDATE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtImport_IMPORT_REFERENCE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_INTERFACE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_INTERFACE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtMethod_IS_DEFAULT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_IS_FINAL_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_IS_IMPLICIT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtLocalVariable_IS_INFERRED_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtShadowable_IS_SHADOW_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_IS_STATIC_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_IS_STATIC_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeParameterReference_IS_UPPER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtParameter_IS_VARARGS_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtStatement_LABEL_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_LEFT_OPERAND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_METHOD_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModifiable_MODIFIER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_MODIFIER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModuleRequirement_MODIFIER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_MODIFIER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_MODULE_DIRECTIVE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModuleRequirement_MODULE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_MODULE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtMultiTypedElement_MULTI_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNamedElement_NAME_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtReference_NAME_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNewClass_NESTED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_NESTED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_OPENED_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_OPENED_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_OPERATOR_KIND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtOperatorAssignment_OPERATOR_KIND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtUnaryOperator_OPERATOR_KIND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_PACKAGE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeReference_PACKAGE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtCatch_PARAMETER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutable_PARAMETER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_POSITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_PROVIDED_SERVICE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_REQUIRED_MODULE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_RIGHT_OPERAND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_SERVICE_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtProvidedService_SERVICE_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtUsedService_SERVICE_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtCodeSnippet_SNIPPET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtStatementList_STATEMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_SUB_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackage_SUB_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_SUPER_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_SUPER_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotationFieldAccess_TARGET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtArrayRead_TARGET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtArrayWrite_TARGET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtConstructorCall_TARGET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldAccess_TARGET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtInvocation_TARGET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSuperAccess_TARGET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTargetedExpression_TARGET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtThisAccess]_TARGET_RoleHandler(...>
[ERROR]   JavaReflectionTreeBuilderTest.testShadowModelEqualsNormalModel:191 Found 1729 problems:
Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=6]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtConditional<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtConditional<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtConditional<T>

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtConditional<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtConditional<T>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtConditional<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtProvidedService

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtProvidedService

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtProvidedService

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtProvidedService

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtProvidedService

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtProvidedService

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAbstractInvocation<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAbstractInvocation<T>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAbstractInvocation<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=15]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=14]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtParameter<T>

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=14]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtVariable<T>

Diff on path: #typeMember[index=14]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtShadowable

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtVariable<T>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtParameter<T>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtBodyHolder

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtWhile

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtWhile

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=23]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=22]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=28]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=28]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=23]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtTypeReference<T>

Diff on path: #typeMember[index=23]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=29]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=29]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtShadowable

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=22]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtTypeReference<T>

Diff on path: #typeMember[index=22]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Difference on path: #typeMember[index=7]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=8]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtTypeReference<T>

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtTypeReference<T>

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtLabelledFlowBreak

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=0]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #interface[name=CtAssignment]#typeArgument[index=1]#boundingType
Shadow: 
Normal: T

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=15]#type#typeArgument[index=0]#boundingType
Shadow: 
Normal: T

Difference on path: #typeMember[index=6]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=8]#typeParameter[index=0]#superType#typeArgument[index=1]#boundingType
Shadow: 
Normal: T

Difference on path: #typeMember[index=8]#type#boundingType#typeArgument
Shadow: []
Normal: [T, A]

Difference on path: #typeMember[index=3]#type#typeArgument[index=0]#boundingType
Shadow: 
Normal: T

Difference on path: #typeMember[index=2]#typeParameter[index=0]#superType#typeArgument[index=0]#boundingType
Shadow: 
Normal: T

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=2]#parameter[index=0]#type#typeArgument[index=0]#boundingType
Shadow: 
Normal: T

Difference on path: #typeMember[index=9]#type#typeArgument[index=1]#boundingType
Shadow: 
Normal: T

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<T>

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAssignment<T, A>

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtRHSReceiver<A>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [T, A]

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAssignment<T, A>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=6]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtBinaryOperator<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtBinaryOperator<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtBinaryOperator<T>

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtBinaryOperator<T>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtBinaryOperator<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtBinaryOperator<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Missing shadow typeMember: setParent(spoon.reflect.declaration.CtElement)
Difference on path: #typeMember
Shadow: null
Normal: @java.lang.Override
public <E extends spoon.reflect.declaration.CtElement> E setParent(E parent) {
    this.parent = parent;
    return ((E) (this));
}

Unexpected shadow typeMember: setParent(java.lang.Object)
Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=28]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=28]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=19]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=19]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=18]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=18]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=45]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=45]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=45]#parameter[index=0]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=45]#parameter[index=0]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=40]#type#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=40]#type#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=40]#parameter[index=0]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=40]#parameter[index=0]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=26]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=26]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=37]#parameter[index=0]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=37]#parameter[index=0]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=23]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=23]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=3]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=41]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=41]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=41]#parameter[index=0]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=41]#parameter[index=0]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=11]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=11]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=11]#parameter[index=0]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=11]#parameter[index=0]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#parameter[index=0]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=1]#parameter[index=0]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=12]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=12]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=25]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=25]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=32]#parameter[index=0]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=32]#parameter[index=0]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=44]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=44]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=44]#parameter[index=0]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=44]#parameter[index=0]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Missing shadow typeMember: setParent(spoon.reflect.declaration.CtElement)
Difference on path: #typeMember
Shadow: null
Normal: /**
 * Manually sets the parent element of the current element.
 *
 * @param parent
 * 		parent reference.
 */
<E extends spoon.reflect.declaration.CtElement> E setParent(E parent);

Unexpected shadow typeMember: setParent(java.lang.Object)
Diff on path: #typeMember[index=9]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=9]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=9]#parameter[index=0]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=9]#parameter[index=0]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=11]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=11]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=26]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=26]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=17]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=17]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=23]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=23]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=16]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=16]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=39]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=39]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=39]#parameter[index=0]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=39]#parameter[index=0]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=34]#type#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=34]#type#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=34]#parameter[index=0]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=34]#parameter[index=0]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=24]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=24]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=32]#parameter[index=0]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=32]#parameter[index=0]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=21]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=21]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=1]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=35]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=35]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=35]#parameter[index=0]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=35]#parameter[index=0]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=30]#parameter[index=0]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=30]#parameter[index=0]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=37]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=37]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=37]#parameter[index=0]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=37]#parameter[index=0]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=0]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtRHSReceiver<T>

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModuleRequirement

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModuleRequirement

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModuleRequirement

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModuleRequirement

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtForEach

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtForEach

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtForEach

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtForEach

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtFormalTypeDeclarer

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=12]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=12]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtNamedElement

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=16]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=16]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtFormalTypeDeclarer

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=11]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=11]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtShadowable

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtNamedElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=0]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtRHSReceiver<A>

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T, spoon.reflect.code.CtExpression<?>]

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtTargetedExpression<T, spoon.reflect.code.CtExpression<?>>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #interface[name=CtTargetedExpression]#typeArgument[index=1]#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [?]

Missing shadow typeMember: setTarget(spoon.reflect.code.CtExpression)
Difference on path: #typeMember
Shadow: null
Normal: @java.lang.Override
public <C extends spoon.reflect.code.CtTargetedExpression<E, T>> C setTarget(T target) {
    if (target != null) {
        target.setParent(this);
    }
    getFactory().getEnvironment().getModelChangeListener().onObjectUpdate(this, spoon.reflect.path.CtRole.TARGET, target, this.target);
    this.target = target;
    return ((C) (this));
}

Difference on path: #typeMember[index=1]#type#typeArgument[index=1]#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [?]

Unexpected shadow typeMember: setTarget(java.lang.Object)
Diff on path: #interface[name=CtTargetedExpression]#typeArgument[index=1]#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<?>

Diff on path: #interface[name=CtTargetedExpression]#typeArgument[index=1]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<?>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#typeArgument[index=1]#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<?>

Diff on path: #typeMember[index=1]#type#typeArgument[index=1]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<?>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T, E]

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtTargetedExpression<T, E>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtNamedElement

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtNamedElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=14]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=14]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=17]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=17]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtNamedElement

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=11]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=11]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=12]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=12]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Void]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Void]

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Void]

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Void]

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<java.lang.Void>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<java.lang.Void>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<java.lang.Void>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtNamedElement

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<java.lang.Void>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtComment

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtComment

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtComment

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtComment

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T, spoon.reflect.code.CtExpression<?>]

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtTargetedExpression<T, spoon.reflect.code.CtExpression<?>>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtReference

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtReference

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDoc

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDoc

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDoc

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDoc

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDoc

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDoc

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDoc

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDoc

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDoc

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDoc

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=11]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=11]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=16]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=16]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=14]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=14]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=14]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=14]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=12]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=12]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #superType#typeArgument[index=1]#boundingType
Shadow: 
Normal: T

Difference on path: #interface[name=CtOperatorAssignment]#typeArgument[index=1]#boundingType
Shadow: 
Normal: T

Difference on path: #typeMember[index=2]#typeParameter[index=0]#superType#typeArgument[index=1]#boundingType
Shadow: 
Normal: T

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T, A]

Difference on path: #typeMember[index=3]#type#typeArgument[index=1]#boundingType
Shadow: 
Normal: T

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtOperatorAssignment<T, A>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [T, A]

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtOperatorAssignment<T, A>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=9]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=6]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotationMethod<T>

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtFormalTypeDeclarer

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<T>

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtBodyHolder

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<T>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtFormalTypeDeclarer

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotationMethod<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<T>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtBodyHolder

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<T>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtLabelledFlowBreak

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=17]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=14]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=19]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=15]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=17]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtClass<T>

Diff on path: #typeMember[index=17]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=14]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtClass<T>

Diff on path: #typeMember[index=14]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=12]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=12]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=19]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtClass<T>

Diff on path: #typeMember[index=19]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtCodeElement

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtClass<T>

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=11]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=11]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=7]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtClass<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtClass<T>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtClass<T>

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtClass<T>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=14]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=14]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #superType#typeArgument[index=1]#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #interface[name=CtArrayAccess]#typeArgument[index=1]#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #typeMember[index=2]#typeParameter[index=0]#superType#typeArgument[index=1]#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T, V]

Difference on path: #typeMember[index=3]#type#typeArgument[index=1]#boundingType#typeArgument
Shadow: []
Normal: [?]

Diff on path: #superType#typeArgument[index=1]#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<?>

Diff on path: #superType#typeArgument[index=1]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #interface[name=CtArrayAccess]#typeArgument[index=1]#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<?>

Diff on path: #interface[name=CtArrayAccess]#typeArgument[index=1]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#typeParameter[index=0]#superType#typeArgument[index=1]#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<?>

Diff on path: #typeMember[index=2]#typeParameter[index=0]#superType#typeArgument[index=1]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtArrayAccess<T, V>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#typeArgument[index=1]#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<?>

Diff on path: #typeMember[index=3]#type#typeArgument[index=1]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [T, E]

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtArrayAccess<T, E>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtCodeSnippet

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Difference on path: #typeMember[index=22]#type#boundingType#typeArgument
Shadow: []
Normal: [?]

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtPackage

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtPackage

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=22]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<?>

Diff on path: #typeMember[index=22]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=11]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtPackage

Diff on path: #typeMember[index=11]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtShadowable

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtPackage

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=15]#type#boundingType#typeArgument
Shadow: []
Normal: [?]

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<?>

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtPackage

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtPackage

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtPackage

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtPackage

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtTryWithResource

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtTryWithResource

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtTryWithResource

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtTryWithResource

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAssert<T>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAssert<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAssert<T>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAssert<T>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtVariableReference<T>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Difference on path: #typeMember[index=0]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtVariableReference<T>

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Difference on path: #typeMember[index=6]#type#boundingType#typeArgument
Shadow: []
Normal: [S]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [S]

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [S]

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtSwitch<S>

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtSwitch<S>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtSwitch<S>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [S]

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [S]

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [S]

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtSwitch<S>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtSwitch<S>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtSwitch<S>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtTry

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtTry

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtTry

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtBodyHolder

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtTry

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtTry

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtTry

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtSynchronized

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtSynchronized

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtSynchronized

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtSynchronized

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtImport

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtImport

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=12]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtTypeParameterReference

Diff on path: #typeMember[index=12]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtTypeParameterReference

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=19]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtTypeParameterReference

Diff on path: #typeMember[index=19]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=16]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtTypeParameterReference

Diff on path: #typeMember[index=16]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtTypeParameterReference

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtTypeParameterReference

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtTypeParameterReference

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtTypeParameterReference

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Difference on path: #typeMember[index=12]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=20]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=13]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=15]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=16]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=16]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=12]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAbstractInvocation<T>

Diff on path: #typeMember[index=12]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=20]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAbstractInvocation<T>

Diff on path: #typeMember[index=20]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAbstractInvocation<T>

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAbstractInvocation<T>

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=11]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=11]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=14]#typeMember[index=2]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=14]#typeMember[index=2]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=14]#typeMember[index=2]#parameter[index=0]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=14]#typeMember[index=2]#parameter[index=0]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtCodeSnippet

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<T>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<T>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtUnaryOperator

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtUnaryOperator

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtUnaryOperator

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtUnaryOperator

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=15]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=13]#type#typeArgument[index=0]#boundingType
Shadow: 
Normal: T

Difference on path: #typeMember[index=7]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtExecutableReference<T>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtExecutableReference<T>

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtExecutableReference<T>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtExecutableReference<T>

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Difference on path: #typeMember[index=9]#type#typeArgument[index=0]#boundingType
Shadow: 
Normal: T

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=0]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=10]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtExecutableReference<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtExecutableReference<T>

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtExecutableReference<T>

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtExecutableReference<T>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtFor

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtFor

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtFor

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtFor

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtFor

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtFor

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtFor

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtFor

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtFor

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtFor

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=19]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=6]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=7]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=21]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=11]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=17]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=15]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=9]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=18]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=14]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=34]#type#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Diff on path: #typeMember[index=19]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=19]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=21]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=21]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=11]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=11]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=42]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=42]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=37]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtFormalTypeDeclarer

Diff on path: #typeMember[index=37]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=17]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=17]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=39]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=39]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=18]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=18]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=14]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=14]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=41]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=41]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=34]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<?>

Diff on path: #typeMember[index=34]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=40]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=40]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=8]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=9]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=6]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=7]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [java.lang.Object]

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=11]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtFormalTypeDeclarer

Diff on path: #typeMember[index=11]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=12]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=12]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<java.lang.Object>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtFormalTypeDeclarer

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtFormalTypeDeclarer

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtMultiTypedElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtMultiTypedElement

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=15]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=17]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtRHSReceiver<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtVariable<T>

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtNamedElement

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=11]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=11]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=14]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=14]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=17]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtLocalVariable<T>

Diff on path: #typeMember[index=17]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtLocalVariable<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtRHSReceiver<T>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtIf

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtIf

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtIf

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtIf

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtIf

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtIf

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=10]#type#boundingType#typeArgument
Shadow: []
Normal: [R]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [R]

Difference on path: #typeMember[index=9]#type#boundingType#typeArgument
Shadow: []
Normal: [R]

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [R]

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<R>

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<R>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<R>

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=12]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtBodyHolder

Diff on path: #typeMember[index=12]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<R>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=7]#type#boundingType#typeArgument
Shadow: []
Normal: [R]

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [R]

Difference on path: #typeMember[index=6]#type#boundingType#typeArgument
Shadow: []
Normal: [R]

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [R]

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<R>

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<R>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<R>

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<R>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Missing shadow typeMember: setParent(spoon.reflect.declaration.CtElement)
Difference on path: #typeMember
Shadow: null
Normal: @java.lang.Override
@spoon.support.DerivedProperty
public <T extends spoon.reflect.declaration.CtElement> T setParent(T parent) {
    return ((T) (this));
}

Unexpected shadow typeMember: setParent(java.lang.Object)
Diff on path: #typeMember[index=31]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=31]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=29]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=29]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=21]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=21]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=24]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=24]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=22]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=22]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=28]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=28]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=12]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=12]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=18]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=18]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=27]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=27]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=17]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=17]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=19]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=19]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=16]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=16]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=30]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=30]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=14]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=14]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=20]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=20]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=25]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=25]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=26]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=26]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=23]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=23]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=30]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=30]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=28]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=28]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=20]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=20]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=23]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=23]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=12]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=12]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=21]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=21]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=27]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=27]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=11]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=11]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=17]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=17]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=14]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=14]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=26]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=26]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=16]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=16]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=18]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=18]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=29]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=29]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=19]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=19]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=24]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=24]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=25]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=25]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=22]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModule

Diff on path: #typeMember[index=22]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtPackageExport

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtPackageExport

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtPackageExport

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtPackageExport

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtPackageExport

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtPackageExport

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtPackageExport

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtPackageExport

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=26]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=23]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=7]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=8]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=28]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=12]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=25]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=19]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=21]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=10]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=22]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=18]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=6]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=46]#type#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=26]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=26]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=23]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=23]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=28]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=28]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=12]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=12]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=55]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=55]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=58]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=58]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=25]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=25]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=49]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtFormalTypeDeclarer

Diff on path: #typeMember[index=49]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=19]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=19]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=21]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=21]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=52]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=52]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=22]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=22]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtShadowable

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=18]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=18]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=50]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtFormalTypeDeclarer

Diff on path: #typeMember[index=50]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=54]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=54]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=46]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<?>

Diff on path: #typeMember[index=46]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=53]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=53]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=23]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=20]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=6]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=25]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=10]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=31]#type#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=22]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=16]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=18]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=8]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=19]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=15]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=23]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=23]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=20]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=20]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=25]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=25]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=31]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<?>

Diff on path: #typeMember[index=31]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=22]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=22]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=16]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=16]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=18]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=18]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=19]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=19]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=13]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=20]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=12]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=15]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=16]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=16]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAbstractInvocation<T>

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=20]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAbstractInvocation<T>

Diff on path: #typeMember[index=20]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=12]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAbstractInvocation<T>

Diff on path: #typeMember[index=12]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtAbstractInvocation<T>

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=11]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=11]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Difference on path: #typeMember[index=17]#type#boundingType#typeArgument
Shadow: []
Normal: [E]

Diff on path: #typeMember[index=14]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=14]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=17]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtCase<E>

Diff on path: #typeMember[index=17]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatementList

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [S]

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtCase<S>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtVariable<T>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtCatch

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtBodyHolder

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtCatch

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtReference

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtArrayTypeReference<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtArrayTypeReference<T>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtReference

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtFormalTypeDeclarer

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=14]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=14]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=18]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=18]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtMethod<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtFormalTypeDeclarer

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=12]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=12]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtShadowable

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtMethod<T>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=9]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=8]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=13]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<T>

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<T>

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=11]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtBodyHolder

Diff on path: #typeMember[index=11]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<T>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtNamedElement

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtLambda<T>

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=0]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtLambda<T>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtExecutable<T>

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtShadowable

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=6]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=8]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtNewArray<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtNewArray<T>

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtNewArray<T>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtNewArray<T>

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=7]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtNewArray<T>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtNewArray<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtNewArray<T>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtNewArray<T>

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtUsedService

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtUsedService

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtIntersectionTypeReference

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtIntersectionTypeReference

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtIntersectionTypeReference

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtIntersectionTypeReference

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtThrow

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtThrow

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtCodeElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtCodeElement

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtLiteral<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtLiteral<T>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [R]

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtReturn<R>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [R]

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtReturn<R>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtReference

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtElement

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtReference

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDocTag

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDocTag

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDocTag

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDocTag

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDocTag

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDocTag

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDocTag

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtJavaDocTag

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=6]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=18]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtRHSReceiver<T>

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=18]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtVariable<T>

Diff on path: #typeMember[index=18]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=17]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=17]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=14]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=14]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=11]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=11]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=12]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=12]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtShadowable

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtRHSReceiver<T>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtTypeAccess<A>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtTypeAccess<A>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtCodeSnippet

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtStatement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtDo

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtDo

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtVariableAccess<T>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtVariableAccess<T>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=10]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=19]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=15]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=18]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=20]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=16]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=11]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=22]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=17]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=21]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Diff on path: #superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #superType#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #interface[name=CtAnnotation]#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #interface[name=CtAnnotation]#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=30]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression

Diff on path: #typeMember[index=30]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=35]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=35]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=10]#typeParameter[index=0]#superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=10]#typeParameter[index=0]#superType#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=10]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<A>

Diff on path: #typeMember[index=10]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=19]#typeParameter[index=0]#superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=19]#typeParameter[index=0]#superType#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=19]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=19]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=15]#typeParameter[index=0]#superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=15]#typeParameter[index=0]#superType#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=18]#typeParameter[index=0]#superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=18]#typeParameter[index=0]#superType#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=18]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=18]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=33]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression

Diff on path: #typeMember[index=33]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=20]#typeParameter[index=0]#superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=20]#typeParameter[index=0]#superType#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=20]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=20]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=38]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=38]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=16]#typeParameter[index=0]#superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=16]#typeParameter[index=0]#superType#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=16]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=16]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=11]#typeParameter[index=0]#superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=11]#typeParameter[index=0]#superType#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=11]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=11]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=22]#typeParameter[index=0]#superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=22]#typeParameter[index=0]#superType#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=22]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=22]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtShadowable

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=17]#typeParameter[index=0]#superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=17]#typeParameter[index=0]#superType#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=17]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=17]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=31]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=31]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=21]#typeParameter[index=0]#superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=21]#typeParameter[index=0]#superType#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=21]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=21]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=6]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=7]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=9]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Difference on path: #typeMember[index=8]#type#boundingType#typeArgument
Shadow: []
Normal: [A]

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=18]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression

Diff on path: #typeMember[index=18]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=20]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression

Diff on path: #typeMember[index=20]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<A>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtAnnotation<A>

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<T>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<T>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<T>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtLabelledFlowBreak

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=9]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=7]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtFieldReference<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtFieldReference<T>

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtFieldReference<T>

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=7]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=5]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtFieldReference<T>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtFieldReference<T>

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtFieldReference<T>

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Difference on path: #superType#typeArgument[index=0]#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #interface[name=CtEnum]#typeArgument[index=0]#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #typeMember[index=25]#type#typeArgument[index=0]#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #typeMember[index=24]#type#typeArgument[index=0]#type#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #typeMember[index=13]#typeParameter[index=0]#superType#typeArgument[index=0]#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #typeMember[index=13]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=4]#typeParameter[index=0]#superType#typeArgument[index=0]#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=11]#typeParameter[index=0]#superType#typeArgument[index=0]#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #typeMember[index=11]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=14]#type#typeArgument[index=0]#boundingType#typeArgument
Shadow: []
Normal: [?]

Diff on path: #superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.Enum<?>

Diff on path: #interface[name=CtEnum]#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.Enum<?>

Diff on path: #typeMember[index=25]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.Enum<?>

Diff on path: #typeMember[index=24]#type#typeArgument[index=0]#type#[name]
Shadow: 
Normal: java.lang.Enum<?>

Diff on path: #typeMember[index=13]#typeParameter[index=0]#superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.Enum<?>

Diff on path: #typeMember[index=13]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtEnum<T>

Diff on path: #typeMember[index=13]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtFormalTypeDeclarer

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#typeParameter[index=0]#superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.Enum<?>

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=11]#typeParameter[index=0]#superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.Enum<?>

Diff on path: #typeMember[index=11]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtEnum<T>

Diff on path: #typeMember[index=11]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=14]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.Enum<?>

Difference on path: #typeMember[index=6]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=0]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtFormalTypeDeclarer

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtEnum<T>

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtEnum<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtBodyHolder

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtNewClass

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.reference.CtActualTypeContainer

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.reference

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtNewClass

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #superType#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #interface[name=CtAnnotationType]#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #interface[name=CtAnnotationType]#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtFormalTypeDeclarer

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#typeParameter[index=0]#superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=3]#typeParameter[index=0]#superType#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#typeParameter[index=1]#superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=2]#typeParameter[index=1]#superType#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#typeParameter[index=0]#superType#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=4]#typeParameter[index=0]#superType#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=9]#type#typeArgument[index=0]#[name]
Shadow: 
Normal: java.lang.annotation.Annotation

Diff on path: #typeMember[index=9]#type#typeArgument[index=0]#boundingType#[name]
Shadow: java.lang
Normal: java.lang.annotation

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=3]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Difference on path: #typeMember[index=1]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=5]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtFormalTypeDeclarer

Diff on path: #typeMember[index=5]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=3]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=3]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtType<T>

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=14]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=8]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=8]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=1]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=1]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=14]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtVariable<T>

Diff on path: #typeMember[index=14]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=15]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtMultiTypedElement

Diff on path: #typeMember[index=15]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtNamedElement

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=9]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=9]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=12]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=12]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=6]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=6]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=7]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtModifiable

Diff on path: #typeMember[index=7]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=16]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtMultiTypedElement

Diff on path: #typeMember[index=16]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T]

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtVariable<T>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Diff on path: #typeMember[index=0]#type#[name]
Shadow: 
Normal: spoon.reflect.declaration.CtTypedElement

Diff on path: #typeMember[index=0]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.declaration

Difference on path: #superType#typeArgument[index=1]#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #interface[name=CtExecutableReferenceExpression]#typeArgument[index=1]#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #typeMember[index=4]#typeParameter[index=0]#superType#typeArgument[index=1]#boundingType#typeArgument
Shadow: []
Normal: [?]

Difference on path: #typeMember[index=4]#type#boundingType#typeArgument
Shadow: []
Normal: [T, E]

Difference on path: #typeMember[index=2]#type#typeArgument[index=1]#boundingType#typeArgument
Shadow: []
Normal: [?]

Diff on path: #superType#typeArgument[index=1]#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<?>

Diff on path: #superType#typeArgument[index=1]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #interface[name=CtExecutableReferenceExpression]#typeArgument[index=1]#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<?>

Diff on path: #interface[name=CtExecutableReferenceExpression]#typeArgument[index=1]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#typeParameter[index=0]#superType#typeArgument[index=1]#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<?>

Diff on path: #typeMember[index=4]#typeParameter[index=0]#superType#typeArgument[index=1]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=4]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExecutableReferenceExpression<T, E>

Diff on path: #typeMember[index=4]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Diff on path: #typeMember[index=2]#type#typeArgument[index=1]#[name]
Shadow: 
Normal: spoon.reflect.code.CtExpression<?>

Diff on path: #typeMember[index=2]#type#typeArgument[index=1]#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

Difference on path: #typeMember[index=2]#type#boundingType#typeArgument
Shadow: []
Normal: [T, E]

Diff on path: #typeMember[index=2]#type#[name]
Shadow: 
Normal: spoon.reflect.code.CtExecutableReferenceExpression<T, E>

Diff on path: #typeMember[index=2]#type#boundingType#[name]
Shadow: java.lang
Normal: spoon.reflect.code

[ERROR]   JavaReflectionTreeBuilderTest.testSuperOfActualTypeArgumentsOfReturnTypeOfMethod:550->lambda$testSuperOfActualTypeArgumentsOfReturnTypeOfMethod$1:520 expected:<[T]> but was:<[Object]>
[ERROR]   SpoonArchitectureEnforcerTest.testSrcMainJava:175 37 public methods should be documented with proper API documentation: 
spoon.processing.AbstractAnnotationProcessor#process(spoon.reflect.declaration.CtElement)
spoon.reflect.visitor.chain.CtQueryImpl#select(spoon.reflect.visitor.Filter)
spoon.reflect.visitor.CtBiScannerDefault#visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)
spoon.reflect.visitor.CtBiScannerDefault#visitCtAnnotationType(spoon.reflect.declaration.CtAnnotationType)
spoon.reflect.visitor.CtBiScannerDefault#visitCtAssignment(spoon.reflect.code.CtAssignment)
spoon.reflect.visitor.CtBiScannerDefault#visitCtEnum(spoon.reflect.declaration.CtEnum)
spoon.reflect.visitor.CtBiScannerDefault#visitCtExecutableReferenceExpression(spoon.reflect.code.CtExecutableReferenceExpression)
spoon.reflect.visitor.CtBiScannerDefault#visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)
spoon.reflect.visitor.CtInheritanceScanner#visitCtAnnotationType(spoon.reflect.declaration.CtAnnotationType)
spoon.reflect.visitor.CtScanner#visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)
spoon.reflect.visitor.CtScanner#visitCtAssignment(spoon.reflect.code.CtAssignment)
spoon.reflect.visitor.CtScanner#visitCtEnum(spoon.reflect.declaration.CtEnum)
spoon.reflect.visitor.CtScanner#visitCtExecutableReferenceExpression(spoon.reflect.code.CtExecutableReferenceExpression)
spoon.reflect.visitor.CtScanner#visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)
spoon.reflect.visitor.DefaultJavaPrettyPrinter#visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)
spoon.reflect.visitor.DefaultJavaPrettyPrinter#visitCtEnum(spoon.reflect.declaration.CtEnum)
spoon.reflect.visitor.DefaultJavaPrettyPrinter#visitCtExecutableReferenceExpression(spoon.reflect.code.CtExecutableReferenceExpression)
spoon.reflect.visitor.DefaultJavaPrettyPrinter#visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)
spoon.support.compiler.jdt.ParentExiter#visitCtAssignment(spoon.reflect.code.CtAssignment)
spoon.support.reflect.declaration.CtTypeImpl$1NestedTypeScanner#visitCtEnum(spoon.reflect.declaration.CtEnum)
spoon.support.reflect.eval.VisitorPartialEvaluator#evaluate(spoon.reflect.declaration.CtElement)
spoon.support.visitor.clone.CloneVisitor#visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)
spoon.support.visitor.clone.CloneVisitor#visitCtAnnotationType(spoon.reflect.declaration.CtAnnotationType)
spoon.support.visitor.clone.CloneVisitor#visitCtAssignment(spoon.reflect.code.CtAssignment)
spoon.support.visitor.clone.CloneVisitor#visitCtEnum(spoon.reflect.declaration.CtEnum)
spoon.support.visitor.clone.CloneVisitor#visitCtExecutableReferenceExpression(spoon.reflect.code.CtExecutableReferenceExpression)
spoon.support.visitor.clone.CloneVisitor#visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)
spoon.support.visitor.equals.EqualsChecker#visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)
spoon.support.visitor.java.JavaReflectionTreeBuilder#visitAnnotationClass(java.lang.Class)
spoon.support.visitor.java.JavaReflectionTreeBuilder#visitTypeParameter(java.lang.reflect.TypeVariable)
spoon.support.visitor.java.JavaReflectionTreeBuilder#visitTypeParameterReference(spoon.reflect.path.CtRole,java.lang.reflect.TypeVariable)
spoon.support.visitor.java.JavaReflectionVisitorImpl#visitAnnotationClass(java.lang.Class)
spoon.support.visitor.replace.ReplacementVisitor#visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)
spoon.support.visitor.replace.ReplacementVisitor#visitCtAssignment(spoon.reflect.code.CtAssignment)
spoon.support.visitor.replace.ReplacementVisitor#visitCtEnum(spoon.reflect.declaration.CtEnum)
spoon.support.visitor.replace.ReplacementVisitor#visitCtExecutableReferenceExpression(spoon.reflect.code.CtExecutableReferenceExpression)
spoon.support.visitor.replace.ReplacementVisitor#visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)
[ERROR]   GenericsTest.testGetExecDeclarationOfEnumSetOf:1352 expected:<public static <E extends java.lang.Enum<E>> java.util.EnumSet<E> of(E arg0) {
}> but was:<null>
[ERROR]   GenericsTest.testIsSameSignatureWithGenerics:1301
[ERROR]   GenericsTest.testIsSameSignatureWithReferencedGenerics:1368
[ERROR]   MainTest.testMain_checkShadow:121->checkShadow:278 cannot find decl for of(java.lang.Enum)
[ERROR]   MethodReferenceTest.testGetGenericExecutableReference:256 expected: spoon.support.reflect.reference.CtTypeParameterReferenceImpl<T> but was: spoon.support.reflect.reference.CtTypeParameterReferenceImpl<T>
[INFO] 
[ERROR] Tests run: 1541, Failures: 9, Errors: 0, Skipped: 5
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 17:39 min
[INFO] Finished at: 2018-08-29T22:22:01+02:00
[INFO] Final Memory: 30M/538M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.21.0:test (default-test) on project spoon-core: There are test failures.
[ERROR] 
[ERROR] Please refer to /root/workspace/INRIA/spoon/422224671/target/surefire-reports for the individual test results.
[ERROR] Please refer to dump files (if any exist) [date]-jvmRun[N].dump, [date].dumpstream and [date]-jvmRun[N].dumpstream.
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
