[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building torrentx 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-resources-plugin:2.7:resources (default-resources) @ torrentx ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 8 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.3:compile (default-compile) @ torrentx ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.7:testResources (default-testResources) @ torrentx ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 17 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.3:testCompile (default-testCompile) @ torrentx ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.16:test (default-test) @ torrentx ---
[INFO] Surefire report directory: /root/workspace/UniversityFinalProjects/TorrentX/378312924/target/surefire-reports
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.16/surefire-junit4-2.16.pom
3/3 KB   
3/3 KB   
         
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.16/surefire-junit4-2.16.pom (3 KB at 6.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.16/surefire-providers-2.16.pom
3/3 KB   
         
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.16/surefire-providers-2.16.pom (3 KB at 116.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.16/surefire-junit4-2.16.jar
3/63 KB   
5/63 KB   
8/63 KB   
11/63 KB   
13/63 KB   
16/63 KB   
19/63 KB   
21/63 KB   
24/63 KB   
27/63 KB   
29/63 KB   
32/63 KB   
36/63 KB   
40/63 KB   
44/63 KB   
48/63 KB   
52/63 KB   
56/63 KB   
60/63 KB   
63/63 KB   
           
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.16/surefire-junit4-2.16.jar (63 KB at 897.4 KB/sec)

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running com.runner.CucumberTest
Feature: allocate and free blocks from multiple threads

  Scenario Outline: we create a piece-message with valid parameters                        [90m# cucumber/BlocksAllocator.feature:3[0m
    [36mGiven [0m[36mallocator for "5" blocks with "17000" bytes each[0m
    [36mWhen [0m[36mwe create the following piece-messages from "5" threads for torrent: "<torrent>":[0m
    [36mThen [0m[36mwe created the following piece-messages for torrent: "<torrent>":[0m
    [36mThen [0m[36mthe allocator have "4" used blocks[0m
    [36mThen [0m[36mthe allocator have "1" free blocks[0m

    Examples: 
oldBlockOfPiece: BlockOfPiece{pieceIndex=0, from=0, length=1}
fixedBlockOfPiece: BlockOfPiece{pieceIndex=0, from=0, length=1}
------------
oldBlockOfPiece: BlockOfPiece{pieceIndex=1, from=30, length=2}
fixedBlockOfPiece: BlockOfPiece{pieceIndex=1, from=30, length=2}
------------
oldBlockOfPiece: BlockOfPiece{pieceIndex=-1, from=0, length=3}
fixedBlockOfPiece: BlockOfPiece{pieceIndex=3028, from=0, length=3}
------------
oldBlockOfPiece: BlockOfPiece{pieceIndex=-2, from=10, length=3}
fixedBlockOfPiece: BlockOfPiece{pieceIndex=3027, from=10, length=3}
------------
created the following pieceMessage: PieceMessage{index=3028, begin=0, allocatedBlock=AllocatedBlock{blockIndex=0, length=3}} PeerMessage{from=null, to=null, messageId=7}
created the following pieceMessage: PieceMessage{index=0, begin=0, allocatedBlock=AllocatedBlock{blockIndex=1, length=1}} PeerMessage{from=null, to=null, messageId=7}
created the following pieceMessage: PieceMessage{index=1, begin=30, allocatedBlock=AllocatedBlock{blockIndex=2, length=2}} PeerMessage{from=null, to=null, messageId=7}
created the following pieceMessage: PieceMessage{index=3027, begin=10, allocatedBlock=AllocatedBlock{blockIndex=3, length=3}} PeerMessage{from=null, to=null, messageId=7}

  Scenario Outline: we create a piece-message with valid parameters                                            [90m# cucumber/BlocksAllocator.feature:22[0m
    [32mGiven [0m[32mallocator for "[0m[32m[1m5[0m[32m" blocks with "[0m[32m[1m17000[0m[32m" bytes each[0m                                                     [90m# MyStepdefs.allocatorForBlocksWithBytesEach(int,int)[0m
    [32mWhen [0m[32mwe create the following piece-messages from "[0m[32m[1m5[0m[32m" threads for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m [90m# MyStepdefs.weCreateTheFollowingPieceMessagesFromThreadsForTorrent(int,String,BlockOfPiece>)[0m
    [32mThen [0m[32mwe created the following piece-messages for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m                 [90m# MyStepdefs.weCreatedTheFollowingPieceMessagesForTorrent(String,BlockOfPiece>)[0m
    [32mThen [0m[32mthe allocator have "[0m[32m[1m4[0m[32m" used blocks[0m                                                                    [90m# MyStepdefs.theAllocatorHaveUsedBlocks(int)[0m
    [32mThen [0m[32mthe allocator have "[0m[32m[1m1[0m[32m" free blocks[0m                                                                    [90m# MyStepdefs.theAllocatorHaveFreeBlocks(int)[0m

  Scenario Outline: we create a piece-message with invalid parameters                      [90m# cucumber/BlocksAllocator.feature:24[0m
    [36mGiven [0m[36mallocator for "9" blocks with "17000" bytes each[0m
    [36mWhen [0m[36mwe create the following piece-messages from "1" threads for torrent: "<torrent>":[0m
    [36mThen [0m[36mwe created the following piece-messages for torrent: "<torrent>":[0m
    [36mThen [0m[36mthe allocator have "9" used blocks[0m
    [36mThen [0m[36mthe allocator have "0" free blocks[0m

    Examples: 
oldBlockOfPiece: BlockOfPiece{pieceIndex=0, from=0, length=null}
fixedBlockOfPiece: BlockOfPiece{pieceIndex=0, from=0, length=524288}
------------
created the following pieceMessage: PieceMessage{index=0, begin=0, allocatedBlock=AllocatedBlock{blockIndex=0, length=17000}} PeerMessage{from=null, to=null, messageId=7}
oldBlockOfPiece: BlockOfPiece{pieceIndex=1, from=30, length=-1}
fixedBlockOfPiece: BlockOfPiece{pieceIndex=1, from=30, length=17000}
------------
created the following pieceMessage: PieceMessage{index=1, begin=30, allocatedBlock=AllocatedBlock{blockIndex=1, length=17000}} PeerMessage{from=null, to=null, messageId=7}
oldBlockOfPiece: BlockOfPiece{pieceIndex=2, from=null, length=3}
fixedBlockOfPiece: BlockOfPiece{pieceIndex=2, from=524287, length=3}
------------
created the following pieceMessage: PieceMessage{index=2, begin=524287, allocatedBlock=AllocatedBlock{blockIndex=2, length=1}} PeerMessage{from=null, to=null, messageId=7}
oldBlockOfPiece: BlockOfPiece{pieceIndex=-1, from=null, length=3}
fixedBlockOfPiece: BlockOfPiece{pieceIndex=3028, from=65535, length=3}
------------
created the following pieceMessage: PieceMessage{index=3028, begin=65535, allocatedBlock=AllocatedBlock{blockIndex=3, length=1}} PeerMessage{from=null, to=null, messageId=7}
oldBlockOfPiece: BlockOfPiece{pieceIndex=-2, from=-1, length=3}
fixedBlockOfPiece: BlockOfPiece{pieceIndex=3027, from=16999, length=3}
------------
created the following pieceMessage: PieceMessage{index=3027, begin=16999, allocatedBlock=AllocatedBlock{blockIndex=4, length=3}} PeerMessage{from=null, to=null, messageId=7}
oldBlockOfPiece: BlockOfPiece{pieceIndex=-3, from=null, length=null}
fixedBlockOfPiece: BlockOfPiece{pieceIndex=3026, from=524287, length=524288}
------------
created the following pieceMessage: PieceMessage{index=3026, begin=524287, allocatedBlock=AllocatedBlock{blockIndex=5, length=1}} PeerMessage{from=null, to=null, messageId=7}
oldBlockOfPiece: BlockOfPiece{pieceIndex=-4, from=-1, length=-1}
fixedBlockOfPiece: BlockOfPiece{pieceIndex=3025, from=16999, length=17000}
------------
created the following pieceMessage: PieceMessage{index=3025, begin=16999, allocatedBlock=AllocatedBlock{blockIndex=6, length=17000}} PeerMessage{from=null, to=null, messageId=7}
oldBlockOfPiece: BlockOfPiece{pieceIndex=-5, from=-1, length=null}
fixedBlockOfPiece: BlockOfPiece{pieceIndex=3024, from=16999, length=524288}
------------
created the following pieceMessage: PieceMessage{index=3024, begin=16999, allocatedBlock=AllocatedBlock{blockIndex=7, length=17000}} PeerMessage{from=null, to=null, messageId=7}
oldBlockOfPiece: BlockOfPiece{pieceIndex=-6, from=null, length=-1}
fixedBlockOfPiece: BlockOfPiece{pieceIndex=3023, from=524287, length=17000}
------------
created the following pieceMessage: PieceMessage{index=3023, begin=524287, allocatedBlock=AllocatedBlock{blockIndex=8, length=1}} PeerMessage{from=null, to=null, messageId=7}

  # don't replace this torrent. I'm counting on the piece length of each piece.
  Scenario Outline: we create a piece-message with invalid parameters                                          [90m# cucumber/BlocksAllocator.feature:57[0m
    [32mGiven [0m[32mallocator for "[0m[32m[1m9[0m[32m" blocks with "[0m[32m[1m17000[0m[32m" bytes each[0m                                                     [90m# MyStepdefs.allocatorForBlocksWithBytesEach(int,int)[0m
    [32mWhen [0m[32mwe create the following piece-messages from "[0m[32m[1m1[0m[32m" threads for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m [90m# MyStepdefs.weCreateTheFollowingPieceMessagesFromThreadsForTorrent(int,String,BlockOfPiece>)[0m
    [32mThen [0m[32mwe created the following piece-messages for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m                 [90m# MyStepdefs.weCreatedTheFollowingPieceMessagesForTorrent(String,BlockOfPiece>)[0m
    [32mThen [0m[32mthe allocator have "[0m[32m[1m9[0m[32m" used blocks[0m                                                                    [90m# MyStepdefs.theAllocatorHaveUsedBlocks(int)[0m
    [32mThen [0m[32mthe allocator have "[0m[32m[1m0[0m[32m" free blocks[0m                                                                    [90m# MyStepdefs.theAllocatorHaveFreeBlocks(int)[0m

  Scenario Outline: we create a piece-message with valid parameters while the allocated-block-length is bigger than the last piece [90m# cucumber/BlocksAllocator.feature:59[0m
    [36mGiven [0m[36mallocator for "1" blocks with allocated-block-length which is bigger than piece: "-1" for torrent: "<torrent>":[0m
    [36mWhen [0m[36mwe create the following piece-messages from "5" threads for torrent: "<torrent>":[0m
    [36mThen [0m[36mwe created the following piece-messages for torrent: "<torrent>":[0m
    [36mThen [0m[36mthe allocator have "1" used blocks[0m
    [36mThen [0m[36mthe allocator have "0" free blocks[0m

    Examples: 
oldBlockOfPiece: BlockOfPiece{pieceIndex=-1, from=0, length=3}
fixedBlockOfPiece: BlockOfPiece{pieceIndex=3028, from=0, length=3}
------------
created the following pieceMessage: PieceMessage{index=3028, begin=0, allocatedBlock=AllocatedBlock{blockIndex=0, length=3}} PeerMessage{from=null, to=null, messageId=7}

  Scenario Outline: we create a piece-message with valid parameters while the allocated-block-length is bigger than the last piece            [90m# cucumber/BlocksAllocator.feature:72[0m
    [32mGiven [0m[32mallocator for "[0m[32m[1m1[0m[32m" blocks with allocated-block-length which is bigger than piece: "[0m[32m[1m-1[0m[32m" for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m [90m# MyStepdefs.allocatorForBlocksWithAllocatedBlockLengthWhichIsBiggerThanPieceForTorrent(int,int,String)[0m
    [32mWhen [0m[32mwe create the following piece-messages from "[0m[32m[1m5[0m[32m" threads for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m                                [90m# MyStepdefs.weCreateTheFollowingPieceMessagesFromThreadsForTorrent(int,String,BlockOfPiece>)[0m
    [32mThen [0m[32mwe created the following piece-messages for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m                                                [90m# MyStepdefs.weCreatedTheFollowingPieceMessagesForTorrent(String,BlockOfPiece>)[0m
    [32mThen [0m[32mthe allocator have "[0m[32m[1m1[0m[32m" used blocks[0m                                                                                                   [90m# MyStepdefs.theAllocatorHaveUsedBlocks(int)[0m
    [32mThen [0m[32mthe allocator have "[0m[32m[1m0[0m[32m" free blocks[0m                                                                                                   [90m# MyStepdefs.theAllocatorHaveFreeBlocks(int)[0m

  Scenario Outline: we create a piece-message with valid parameters while the allocated-block-length is bigger than the first piece [90m# cucumber/BlocksAllocator.feature:74[0m
    # piece length = 524288 , last piece length = 65536
    [36mGiven [0m[36mallocator for "9" blocks with "524289" bytes each[0m
    # last piece length = 65536
    [36mWhen [0m[36mwe create the following piece-messages from "1" threads for torrent: "<torrent>":[0m
    [36mThen [0m[36mwe created the following piece-messages for torrent: "<torrent>":[0m
    [36mWhen [0m[36mwe create the following piece-messages from "1" threads for torrent: "<torrent>":[0m
    [36mThen [0m[36mwe created the following piece-messages for torrent: "<torrent>":[0m
    [36mWhen [0m[36mwe create the following piece-messages from "1" threads for torrent: "<torrent>":[0m
    [36mThen [0m[36mwe created the following piece-messages for torrent: "<torrent>":[0m
    [36mWhen [0m[36mwe create the following piece-messages from "1" threads for torrent: "<torrent>":[0m
    [36mThen [0m[36mwe created the following piece-messages for torrent: "<torrent>":[0m
    [36mWhen [0m[36mwe create the following piece-messages from "1" threads for torrent: "<torrent>":[0m
    [36mThen [0m[36mwe created the following piece-messages for torrent: "<torrent>":[0m
    [36mWhen [0m[36mwe create the following piece-messages from "1" threads for torrent: "<torrent>":[0m
    [36mThen [0m[36mwe created the following piece-messages for torrent: "<torrent>":[0m
    [36mWhen [0m[36mwe create the following piece-messages from "1" threads for torrent: "<torrent>":[0m
    [36mThen [0m[36mwe created the following piece-messages for torrent: "<torrent>":[0m
    [36mWhen [0m[36mwe create the following piece-messages from "1" threads for torrent: "<torrent>":[0m
    [36mThen [0m[36mwe created the following piece-messages for torrent: "<torrent>":[0m
    [36mWhen [0m[36mwe create the following piece-messages from "1" threads for torrent: "<torrent>":[0m
    [36mThen [0m[36mwe created the following piece-messages for torrent: "<torrent>":[0m
    [36mThen [0m[36mthe allocator have "9" used blocks[0m
    [36mThen [0m[36mthe allocator have "0" free blocks[0m

    Examples: 
oldBlockOfPiece: BlockOfPiece{pieceIndex=-1, from=524288, length=3}
fixedBlockOfPiece: BlockOfPiece{pieceIndex=3028, from=524288, length=3}
------------
created the following pieceMessage: PieceMessage{index=3028, begin=65535, allocatedBlock=AllocatedBlock{blockIndex=0, length=1}} PeerMessage{from=null, to=null, messageId=7}
oldBlockOfPiece: BlockOfPiece{pieceIndex=0, from=0, length=524288}
fixedBlockOfPiece: BlockOfPiece{pieceIndex=0, from=0, length=524288}
------------
created the following pieceMessage: PieceMessage{index=0, begin=0, allocatedBlock=AllocatedBlock{blockIndex=1, length=524288}} PeerMessage{from=null, to=null, messageId=7}
oldBlockOfPiece: BlockOfPiece{pieceIndex=1, from=30, length=524288}
fixedBlockOfPiece: BlockOfPiece{pieceIndex=1, from=30, length=524288}
------------
created the following pieceMessage: PieceMessage{index=1, begin=30, allocatedBlock=AllocatedBlock{blockIndex=2, length=524258}} PeerMessage{from=null, to=null, messageId=7}
oldBlockOfPiece: BlockOfPiece{pieceIndex=2, from=524288, length=3}
fixedBlockOfPiece: BlockOfPiece{pieceIndex=2, from=524288, length=3}
------------
created the following pieceMessage: PieceMessage{index=2, begin=524287, allocatedBlock=AllocatedBlock{blockIndex=3, length=1}} PeerMessage{from=null, to=null, messageId=7}
oldBlockOfPiece: BlockOfPiece{pieceIndex=-2, from=524289, length=3}
fixedBlockOfPiece: BlockOfPiece{pieceIndex=3027, from=524289, length=3}
------------
created the following pieceMessage: PieceMessage{index=3027, begin=524287, allocatedBlock=AllocatedBlock{blockIndex=4, length=1}} PeerMessage{from=null, to=null, messageId=7}
oldBlockOfPiece: BlockOfPiece{pieceIndex=-3, from=524288, length=524288}
fixedBlockOfPiece: BlockOfPiece{pieceIndex=3026, from=524288, length=524288}
------------
created the following pieceMessage: PieceMessage{index=3026, begin=524287, allocatedBlock=AllocatedBlock{blockIndex=5, length=1}} PeerMessage{from=null, to=null, messageId=7}
oldBlockOfPiece: BlockOfPiece{pieceIndex=-4, from=524289, length=524289}
fixedBlockOfPiece: BlockOfPiece{pieceIndex=3025, from=524289, length=524289}
------------
created the following pieceMessage: PieceMessage{index=3025, begin=524287, allocatedBlock=AllocatedBlock{blockIndex=6, length=1}} PeerMessage{from=null, to=null, messageId=7}
oldBlockOfPiece: BlockOfPiece{pieceIndex=-5, from=524289, length=524288}
fixedBlockOfPiece: BlockOfPiece{pieceIndex=3024, from=524289, length=524288}
------------
created the following pieceMessage: PieceMessage{index=3024, begin=524287, allocatedBlock=AllocatedBlock{blockIndex=7, length=1}} PeerMessage{from=null, to=null, messageId=7}
oldBlockOfPiece: BlockOfPiece{pieceIndex=-6, from=524288, length=524289}
fixedBlockOfPiece: BlockOfPiece{pieceIndex=3023, from=524288, length=524289}
------------
created the following pieceMessage: PieceMessage{index=3023, begin=524287, allocatedBlock=AllocatedBlock{blockIndex=8, length=1}} PeerMessage{from=null, to=null, messageId=7}

  Scenario Outline: we create a piece-message with valid parameters while the allocated-block-length is bigger than the first piece [90m# cucumber/BlocksAllocator.feature:147[0m
    # piece length = 524288 , last piece length = 65536
    [32mGiven [0m[32mallocator for "[0m[32m[1m9[0m[32m" blocks with "[0m[32m[1m524289[0m[32m" bytes each[0m                                                                         [90m# MyStepdefs.allocatorForBlocksWithBytesEach(int,int)[0m
    # last piece length = 65536
    [32mWhen [0m[32mwe create the following piece-messages from "[0m[32m[1m1[0m[32m" threads for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m                      [90m# MyStepdefs.weCreateTheFollowingPieceMessagesFromThreadsForTorrent(int,String,BlockOfPiece>)[0m
    [32mThen [0m[32mwe created the following piece-messages for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m                                      [90m# MyStepdefs.weCreatedTheFollowingPieceMessagesForTorrent(String,BlockOfPiece>)[0m
    [32mWhen [0m[32mwe create the following piece-messages from "[0m[32m[1m1[0m[32m" threads for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m                      [90m# MyStepdefs.weCreateTheFollowingPieceMessagesFromThreadsForTorrent(int,String,BlockOfPiece>)[0m
    [32mThen [0m[32mwe created the following piece-messages for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m                                      [90m# MyStepdefs.weCreatedTheFollowingPieceMessagesForTorrent(String,BlockOfPiece>)[0m
    [32mWhen [0m[32mwe create the following piece-messages from "[0m[32m[1m1[0m[32m" threads for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m                      [90m# MyStepdefs.weCreateTheFollowingPieceMessagesFromThreadsForTorrent(int,String,BlockOfPiece>)[0m
    [32mThen [0m[32mwe created the following piece-messages for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m                                      [90m# MyStepdefs.weCreatedTheFollowingPieceMessagesForTorrent(String,BlockOfPiece>)[0m
    [32mWhen [0m[32mwe create the following piece-messages from "[0m[32m[1m1[0m[32m" threads for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m                      [90m# MyStepdefs.weCreateTheFollowingPieceMessagesFromThreadsForTorrent(int,String,BlockOfPiece>)[0m
    [32mThen [0m[32mwe created the following piece-messages for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m                                      [90m# MyStepdefs.weCreatedTheFollowingPieceMessagesForTorrent(String,BlockOfPiece>)[0m
    [32mWhen [0m[32mwe create the following piece-messages from "[0m[32m[1m1[0m[32m" threads for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m                      [90m# MyStepdefs.weCreateTheFollowingPieceMessagesFromThreadsForTorrent(int,String,BlockOfPiece>)[0m
    [32mThen [0m[32mwe created the following piece-messages for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m                                      [90m# MyStepdefs.weCreatedTheFollowingPieceMessagesForTorrent(String,BlockOfPiece>)[0m
    [32mWhen [0m[32mwe create the following piece-messages from "[0m[32m[1m1[0m[32m" threads for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m                      [90m# MyStepdefs.weCreateTheFollowingPieceMessagesFromThreadsForTorrent(int,String,BlockOfPiece>)[0m
    [32mThen [0m[32mwe created the following piece-messages for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m                                      [90m# MyStepdefs.weCreatedTheFollowingPieceMessagesForTorrent(String,BlockOfPiece>)[0m
    [32mWhen [0m[32mwe create the following piece-messages from "[0m[32m[1m1[0m[32m" threads for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m                      [90m# MyStepdefs.weCreateTheFollowingPieceMessagesFromThreadsForTorrent(int,String,BlockOfPiece>)[0m
    [32mThen [0m[32mwe created the following piece-messages for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m                                      [90m# MyStepdefs.weCreatedTheFollowingPieceMessagesForTorrent(String,BlockOfPiece>)[0m
    [32mWhen [0m[32mwe create the following piece-messages from "[0m[32m[1m1[0m[32m" threads for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m                      [90m# MyStepdefs.weCreateTheFollowingPieceMessagesFromThreadsForTorrent(int,String,BlockOfPiece>)[0m
    [32mThen [0m[32mwe created the following piece-messages for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m                                      [90m# MyStepdefs.weCreatedTheFollowingPieceMessagesForTorrent(String,BlockOfPiece>)[0m
    [32mWhen [0m[32mwe create the following piece-messages from "[0m[32m[1m1[0m[32m" threads for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m                      [90m# MyStepdefs.weCreateTheFollowingPieceMessagesFromThreadsForTorrent(int,String,BlockOfPiece>)[0m
    [32mThen [0m[32mwe created the following piece-messages for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m                                      [90m# MyStepdefs.weCreatedTheFollowingPieceMessagesForTorrent(String,BlockOfPiece>)[0m
    [32mThen [0m[32mthe allocator have "[0m[32m[1m9[0m[32m" used blocks[0m                                                                                         [90m# MyStepdefs.theAllocatorHaveUsedBlocks(int)[0m
    [32mThen [0m[32mthe allocator have "[0m[32m[1m0[0m[32m" free blocks[0m                                                                                         [90m# MyStepdefs.theAllocatorHaveFreeBlocks(int)[0m

  Scenario Outline: we create a request-message with valid parameters                        [90m# cucumber/BlocksAllocator.feature:150[0m
    [36mGiven [0m[36mallocator for "5" blocks with "17000" bytes each[0m
    [36mWhen [0m[36mwe create the following request-messages from "5" threads for torrent: "<torrent>":[0m
    [36mThen [0m[36mwe created the following request-messages for torrent: "<torrent>":[0m
    [36mThen [0m[36mthe allocator have "0" used blocks[0m
    [36mThen [0m[36mthe allocator have "5" free blocks[0m

    Examples: 

  Scenario Outline: we create a request-message with valid parameters                                            [90m# cucumber/BlocksAllocator.feature:169[0m
    [32mGiven [0m[32mallocator for "[0m[32m[1m5[0m[32m" blocks with "[0m[32m[1m17000[0m[32m" bytes each[0m                                                       [90m# MyStepdefs.allocatorForBlocksWithBytesEach(int,int)[0m
    [32mWhen [0m[32mwe create the following request-messages from "[0m[32m[1m5[0m[32m" threads for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m [90m# MyStepdefs.weCreateTheFollowingRequestMessagesFromThreadsForTorrent(int,String,BlockOfPiece>)[0m
    [32mThen [0m[32mwe created the following request-messages for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m                 [90m# MyStepdefs.weCreatedTheFollowingRequestMessagesForTorrent(String,BlockOfPiece>)[0m
    [32mThen [0m[32mthe allocator have "[0m[32m[1m0[0m[32m" used blocks[0m                                                                      [90m# MyStepdefs.theAllocatorHaveUsedBlocks(int)[0m
    [32mThen [0m[32mthe allocator have "[0m[32m[1m5[0m[32m" free blocks[0m                                                                      [90m# MyStepdefs.theAllocatorHaveFreeBlocks(int)[0m

  Scenario Outline: we create a request-message with invalid parameters                      [90m# cucumber/BlocksAllocator.feature:171[0m
    [36mGiven [0m[36mallocator for "8" blocks with "17000" bytes each[0m
    [36mWhen [0m[36mwe create the following request-messages from "1" threads for torrent: "<torrent>":[0m
    [36mThen [0m[36mwe created the following request-messages for torrent: "<torrent>":[0m
    [36mThen [0m[36mthe allocator have "0" used blocks[0m
    [36mThen [0m[36mthe allocator have "8" free blocks[0m

    Examples: 

  Scenario Outline: we create a request-message with invalid parameters                                          [90m# cucumber/BlocksAllocator.feature:203[0m
    [32mGiven [0m[32mallocator for "[0m[32m[1m8[0m[32m" blocks with "[0m[32m[1m17000[0m[32m" bytes each[0m                                                       [90m# MyStepdefs.allocatorForBlocksWithBytesEach(int,int)[0m
    [32mWhen [0m[32mwe create the following request-messages from "[0m[32m[1m1[0m[32m" threads for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m [90m# MyStepdefs.weCreateTheFollowingRequestMessagesFromThreadsForTorrent(int,String,BlockOfPiece>)[0m
    [32mThen [0m[32mwe created the following request-messages for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m                 [90m# MyStepdefs.weCreatedTheFollowingRequestMessagesForTorrent(String,BlockOfPiece>)[0m
    [32mThen [0m[32mthe allocator have "[0m[32m[1m0[0m[32m" used blocks[0m                                                                      [90m# MyStepdefs.theAllocatorHaveUsedBlocks(int)[0m
    [32mThen [0m[32mthe allocator have "[0m[32m[1m8[0m[32m" free blocks[0m                                                                      [90m# MyStepdefs.theAllocatorHaveFreeBlocks(int)[0m

  Scenario Outline: we create a piece-message with valid parameters and free the allocations [90m# cucumber/BlocksAllocator.feature:205[0m
    [36mGiven [0m[36mallocator for "5" blocks with "17000" bytes each[0m
    [36mWhen [0m[36mwe create the following piece-messages from "5" threads for torrent: "<torrent>":[0m
    [36mThen [0m[36mthe allocator have "4" used blocks[0m
    [36mThen [0m[36mthe allocator have "1" free blocks[0m
    [36mWhen [0m[36mwe free the following piece-messages for torrent: "<torrent>":[0m
    [36mThen [0m[36mthe allocator have "2" used blocks[0m
    [36mThen [0m[36mthe allocator have "3" free blocks[0m

    Examples: 
oldBlockOfPiece: BlockOfPiece{pieceIndex=0, from=0, length=1}
fixedBlockOfPiece: BlockOfPiece{pieceIndex=0, from=0, length=1}
------------
oldBlockOfPiece: BlockOfPiece{pieceIndex=1, from=30, length=2}
fixedBlockOfPiece: BlockOfPiece{pieceIndex=1, from=30, length=2}
------------
oldBlockOfPiece: BlockOfPiece{pieceIndex=-1, from=0, length=3}
fixedBlockOfPiece: BlockOfPiece{pieceIndex=3028, from=0, length=3}
------------
created the following pieceMessage: PieceMessage{index=0, begin=0, allocatedBlock=AllocatedBlock{blockIndex=0, length=1}} PeerMessage{from=null, to=null, messageId=7}
oldBlockOfPiece: BlockOfPiece{pieceIndex=-2, from=10, length=3}
fixedBlockOfPiece: BlockOfPiece{pieceIndex=3027, from=10, length=3}
------------
created the following pieceMessage: PieceMessage{index=1, begin=30, allocatedBlock=AllocatedBlock{blockIndex=1, length=2}} PeerMessage{from=null, to=null, messageId=7}
created the following pieceMessage: PieceMessage{index=3028, begin=0, allocatedBlock=AllocatedBlock{blockIndex=2, length=3}} PeerMessage{from=null, to=null, messageId=7}
created the following pieceMessage: PieceMessage{index=3027, begin=10, allocatedBlock=AllocatedBlock{blockIndex=3, length=3}} PeerMessage{from=null, to=null, messageId=7}

  Scenario Outline: we create a piece-message with valid parameters and free the allocations                   [90m# cucumber/BlocksAllocator.feature:224[0m
    [32mGiven [0m[32mallocator for "[0m[32m[1m5[0m[32m" blocks with "[0m[32m[1m17000[0m[32m" bytes each[0m                                                     [90m# MyStepdefs.allocatorForBlocksWithBytesEach(int,int)[0m
    [32mWhen [0m[32mwe create the following piece-messages from "[0m[32m[1m5[0m[32m" threads for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m [90m# MyStepdefs.weCreateTheFollowingPieceMessagesFromThreadsForTorrent(int,String,BlockOfPiece>)[0m
    [32mThen [0m[32mthe allocator have "[0m[32m[1m4[0m[32m" used blocks[0m                                                                    [90m# MyStepdefs.theAllocatorHaveUsedBlocks(int)[0m
    [32mThen [0m[32mthe allocator have "[0m[32m[1m1[0m[32m" free blocks[0m                                                                    [90m# MyStepdefs.theAllocatorHaveFreeBlocks(int)[0m
    [32mWhen [0m[32mwe free the following piece-messages for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m                    [90m# MyStepdefs.weFreeTheFollowingPieceMessagesForTorrent(String,BlockOfPiece>)[0m
    [32mThen [0m[32mthe allocator have "[0m[32m[1m2[0m[32m" used blocks[0m                                                                    [90m# MyStepdefs.theAllocatorHaveUsedBlocks(int)[0m
    [32mThen [0m[32mthe allocator have "[0m[32m[1m3[0m[32m" free blocks[0m                                                                    [90m# MyStepdefs.theAllocatorHaveFreeBlocks(int)[0m

  Scenario Outline: we don't create any piece-message and free all the allocations         [90m# cucumber/BlocksAllocator.feature:226[0m
    [36mGiven [0m[36mallocator for "5" blocks with "17000" bytes each[0m
    [36mWhen [0m[36mwe create the following piece-messages from "5" threads for torrent: "<torrent>":[0m
    [36mThen [0m[36mthe allocator have "0" used blocks[0m
    [36mThen [0m[36mthe allocator have "5" free blocks[0m
    [36mWhen [0m[36mwe free all piece-messages for torrent: "<torrent>"[0m
    [36mThen [0m[36mthe allocator have "0" used blocks[0m
    [36mThen [0m[36mthe allocator have "5" free blocks[0m

    Examples: 

  Scenario Outline: we don't create any piece-message and free all the allocations                             [90m# cucumber/BlocksAllocator.feature:238[0m
    [32mGiven [0m[32mallocator for "[0m[32m[1m5[0m[32m" blocks with "[0m[32m[1m17000[0m[32m" bytes each[0m                                                     [90m# MyStepdefs.allocatorForBlocksWithBytesEach(int,int)[0m
    [32mWhen [0m[32mwe create the following piece-messages from "[0m[32m[1m5[0m[32m" threads for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m [90m# MyStepdefs.weCreateTheFollowingPieceMessagesFromThreadsForTorrent(int,String,BlockOfPiece>)[0m
    [32mThen [0m[32mthe allocator have "[0m[32m[1m0[0m[32m" used blocks[0m                                                                    [90m# MyStepdefs.theAllocatorHaveUsedBlocks(int)[0m
    [32mThen [0m[32mthe allocator have "[0m[32m[1m5[0m[32m" free blocks[0m                                                                    [90m# MyStepdefs.theAllocatorHaveFreeBlocks(int)[0m
    [32mWhen [0m[32mwe free all piece-messages for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m"[0m                               [90m# MyStepdefs.weFreeAllPieceMessagesForTorrent(String)[0m
    [32mThen [0m[32mthe allocator have "[0m[32m[1m0[0m[32m" used blocks[0m                                                                    [90m# MyStepdefs.theAllocatorHaveUsedBlocks(int)[0m
    [32mThen [0m[32mthe allocator have "[0m[32m[1m5[0m[32m" free blocks[0m                                                                    [90m# MyStepdefs.theAllocatorHaveFreeBlocks(int)[0m

  Scenario Outline: we create a piece-message with valid parameters and free all the allocations [90m# cucumber/BlocksAllocator.feature:240[0m
    [36mGiven [0m[36mallocator for "5" blocks with "17000" bytes each[0m
    [36mWhen [0m[36mwe create the following piece-messages from "5" threads for torrent: "<torrent>":[0m
    [36mThen [0m[36mthe allocator have "4" used blocks[0m
    [36mThen [0m[36mthe allocator have "1" free blocks[0m
    [36mWhen [0m[36mwe free all piece-messages for torrent: "<torrent>"[0m
    [36mThen [0m[36mthe allocator have "0" used blocks[0m
    [36mThen [0m[36mthe allocator have "5" free blocks[0m

    Examples: 
oldBlockOfPiece: BlockOfPiece{pieceIndex=0, from=0, length=1}
fixedBlockOfPiece: BlockOfPiece{pieceIndex=0, from=0, length=1}
------------
oldBlockOfPiece: BlockOfPiece{pieceIndex=1, from=30, length=2}
fixedBlockOfPiece: BlockOfPiece{pieceIndex=1, from=30, length=2}
------------
oldBlockOfPiece: BlockOfPiece{pieceIndex=-1, from=0, length=3}
fixedBlockOfPiece: BlockOfPiece{pieceIndex=3028, from=0, length=3}
------------
oldBlockOfPiece: BlockOfPiece{pieceIndex=-2, from=10, length=3}
created the following pieceMessage: PieceMessage{index=0, begin=0, allocatedBlock=AllocatedBlock{blockIndex=0, length=1}} PeerMessage{from=null, to=null, messageId=7}
fixedBlockOfPiece: BlockOfPiece{pieceIndex=3027, from=10, length=3}
------------
created the following pieceMessage: PieceMessage{index=1, begin=30, allocatedBlock=AllocatedBlock{blockIndex=1, length=2}} PeerMessage{from=null, to=null, messageId=7}
created the following pieceMessage: PieceMessage{index=3028, begin=0, allocatedBlock=AllocatedBlock{blockIndex=2, length=3}} PeerMessage{from=null, to=null, messageId=7}
created the following pieceMessage: PieceMessage{index=3027, begin=10, allocatedBlock=AllocatedBlock{blockIndex=3, length=3}} PeerMessage{from=null, to=null, messageId=7}

  Scenario Outline: we create a piece-message with valid parameters and free all the allocations               [90m# cucumber/BlocksAllocator.feature:256[0m
    [32mGiven [0m[32mallocator for "[0m[32m[1m5[0m[32m" blocks with "[0m[32m[1m17000[0m[32m" bytes each[0m                                                     [90m# MyStepdefs.allocatorForBlocksWithBytesEach(int,int)[0m
    [32mWhen [0m[32mwe create the following piece-messages from "[0m[32m[1m5[0m[32m" threads for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m [90m# MyStepdefs.weCreateTheFollowingPieceMessagesFromThreadsForTorrent(int,String,BlockOfPiece>)[0m
    [32mThen [0m[32mthe allocator have "[0m[32m[1m4[0m[32m" used blocks[0m                                                                    [90m# MyStepdefs.theAllocatorHaveUsedBlocks(int)[0m
    [32mThen [0m[32mthe allocator have "[0m[32m[1m1[0m[32m" free blocks[0m                                                                    [90m# MyStepdefs.theAllocatorHaveFreeBlocks(int)[0m
    [32mWhen [0m[32mwe free all piece-messages for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m"[0m                               [90m# MyStepdefs.weFreeAllPieceMessagesForTorrent(String)[0m
    [32mThen [0m[32mthe allocator have "[0m[32m[1m0[0m[32m" used blocks[0m                                                                    [90m# MyStepdefs.theAllocatorHaveUsedBlocks(int)[0m
    [32mThen [0m[32mthe allocator have "[0m[32m[1m5[0m[32m" free blocks[0m                                                                    [90m# MyStepdefs.theAllocatorHaveFreeBlocks(int)[0m
Feature: connect to choking fake-peers and map between them and their pieces
Feature: connect to a fake peers and communicate with them

  Scenario Outline: we send peer-messages and must receive the same peer-messages back                                                                   [90m# cucumber/CommunicateWithFakePeers.feature:3[0m
    #  1. the fake peers response with the same peer-message they received
    #  2. the second response will be delayed in 2 seconds
    #  3. the third response will cause the peer to shutdown the connection and not responding anything
    [36mThen [0m[36mapplication send to [peer ip: "localhost", peer port: "8983"] and receive the following messages for torrent: "<torrent>","<downloadLocation>":[0m

    #      | RequestMessage  | RequestMessage     |                 |
    #    Then application send to [peer ip: "localhost", peer port: "8980"] and receive the following messages for torrent: "<torrent>":
    #      | sendMessageType | receiveMessageType | errorSignalType |
    #      | BitFieldMessage | BitFieldMessage    |                 |
    #      | CancelMessage   | CancelMessage      |                 |
    #
    #    Then application send to [peer ip: "localhost", peer port: "8981"] and receive the following messages for torrent: "<torrent>":
    #      | sendMessageType   | receiveMessageType | errorSignalType |
    #      | HaveMessage       | HaveMessage        |                 |
    #      | InterestedMessage | InterestedMessage  |                 |
    #
    #    Then application send to [peer ip: "localhost", peer port: "8982"] and receive the following messages for torrent: "<torrent>":
    #      | sendMessageType      | receiveMessageType   | errorSignalType |
    #      | KeepAliveMessage     | KeepAliveMessage     |                 |
    #      | NotInterestedMessage | NotInterestedMessage |                 |
    #
    #    Then application send to [peer ip: "localhost", peer port: "8984"] and receive the following messages for torrent: "<torrent>":
    #      | sendMessageType | receiveMessageType | errorSignalType |
    #      | UnchokeMessage  | UnchokeMessage     |                 |
    #      | PortMessage     | PortMessage        |                 |
    #
    Examples: 

  Scenario Outline: we send peer-messages and must receive the same peer-messages back                                                                                              [90m# cucumber/CommunicateWithFakePeers.feature:35[0m
    #  1. the fake peers response with the same peer-message they received
    #  2. the second response will be delayed in 2 seconds
    #  3. the third response will cause the peer to shutdown the connection and not responding anything
    [31mThen [0m[31mapplication send to [peer ip: "[0m[31m[1mlocalhost[0m[31m", peer port: "[0m[31m[1m8983[0m[31m"] and receive the following messages for torrent: "[0m[31m[1mmultiple-active-seeders-torrent-1.torrent[0m[31m","[0m[31m[1mtorrents-test[0m[31m":[0m [90m# MyStepdefs.applicationSendToPeerIpPeerPortAndReceiveTheFollowingMessagesForTorrent(String,int,String,String,PeerFakeRequestResponse>)[0m
      [31mjava.lang.AssertionError: expectation "expectNextCount(1)" failed (expected: count = 1; actual: counted = 0; signal: onError(java.lang.Exception: FileSystemLinkImpl object not exist.))
      	at reactor.test.ErrorFormatter.assertionError(ErrorFormatter.java:105)
      	at reactor.test.ErrorFormatter.failPrefix(ErrorFormatter.java:94)
      	at reactor.test.ErrorFormatter.fail(ErrorFormatter.java:64)
      	at reactor.test.ErrorFormatter.failOptional(ErrorFormatter.java:79)
      	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.checkCountMismatch(DefaultStepVerifierBuilder.java:1223)
      	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onSignalCount(DefaultStepVerifierBuilder.java:1454)
      	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onExpectation(DefaultStepVerifierBuilder.java:1306)
      	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onError(DefaultStepVerifierBuilder.java:996)
      	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
      	at reactor.core.publisher.FluxTake$TakeFuseableSubscriber.onError(FluxTake.java:415)
      	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
      	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:193)
      	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
      	at reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onError(MonoCollectList.java:106)
      	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
      	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:782)
      	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:556)
      	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:536)
      	at reactor.core.publisher.FluxFlatMap$FlatMapMain.innerError(FluxFlatMap.java:803)
      	at reactor.core.publisher.FluxFlatMap$FlatMapInner.onError(FluxFlatMap.java:942)
      	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
      	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185)
      	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251)
      	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
      	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185)
      	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251)
      	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
      	at reactor.core.publisher.MonoSingle$SingleSubscriber.onError(MonoSingle.java:141)
      	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
      	at reactor.core.publisher.FluxTake$TakeFuseableSubscriber.onError(FluxTake.java:415)
      	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
      	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:782)
      	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:556)
      	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:536)
      	at reactor.core.publisher.FluxFlatMap$FlatMapMain.innerError(FluxFlatMap.java:803)
      	at reactor.core.publisher.FluxFlatMap$FlatMapInner.onError(FluxFlatMap.java:942)
      	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
      	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185)
      	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251)
      	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
      	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onError(FluxMapFuseable.java:134)
      	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
      	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185)
      	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251)
      	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
      	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:135)
      	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
      	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1219)
      	at reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onComplete(MonoCollectList.java:117)
      	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:388)
      	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:786)
      	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:556)
      	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:536)
      	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:422)
      	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:388)
      	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:265)
      	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:201)
      	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:463)
      	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332)
      	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:447)
      	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:139)
      	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:63)
      	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:164)
      	at reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97)
      	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:164)
      	at reactor.core.publisher.MonoCollectList.subscribe(MonoCollectList.java:59)
      	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
      	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
      	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
      	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
      	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
      	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1219)
      	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)
      	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
      	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1219)
      	at reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onComplete(MonoCollectList.java:117)
      	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:388)
      	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:786)
      	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:556)
      	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:536)
      	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:422)
      	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:388)
      	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:265)
      	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:201)
      	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:463)
      	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332)
      	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:447)
      	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:139)
      	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:63)
      	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:164)
      	at reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97)
      	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:164)
      	at reactor.core.publisher.MonoCollectList.subscribe(MonoCollectList.java:59)
      	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
      	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
      	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
      	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
      	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
      	at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)
      	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
      	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
      	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
      	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)
      	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
      	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)
      	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
      	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)
      	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
      	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1219)
      	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
      	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
      	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
      	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
      	at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:178)
      	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:50)
      	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:27)
      	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
      	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
      	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
      	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
      	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
      	at java.lang.Thread.run(Thread.java:745)
      	at ✽.Then application send to [peer ip: "localhost", peer port: "8983"] and receive the following messages for torrent: "multiple-active-seeders-torrent-1.torrent","torrents-test":(cucumber/CommunicateWithFakePeers.feature:8)
      	Suppressed: java.lang.Exception: FileSystemLinkImpl object not exist.
      		at main.file.system.FileSystemLinkImpl.lambda$deleteActiveTorrentOnlyMono$8(FileSystemLinkImpl.java:156)
      		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:118)
      		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
      		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1219)
      		at reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onComplete(MonoCollectList.java:117)
      		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:388)
      		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:786)
      		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:556)
      		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:536)
      		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:422)
      		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:388)
      		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:265)
      		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:201)
      		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:463)
      		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332)
      		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:447)
      		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:139)
      		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:63)
      		at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:164)
      		at reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97)
      		at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:164)
      		at reactor.core.publisher.MonoCollectList.subscribe(MonoCollectList.java:59)
      		at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
      		at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
      		at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
      		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
      		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
      		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1219)
      		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)
      		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
      		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1219)
      		at reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onComplete(MonoCollectList.java:117)
      		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:388)
      		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:786)
      		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:556)
      		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:536)
      		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:422)
      		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:388)
      		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:265)
      		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:201)
      		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:463)
      		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332)
      		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:447)
      		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:139)
      		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:63)
      		at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:164)
      		at reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97)
      		at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:164)
      		at reactor.core.publisher.MonoCollectList.subscribe(MonoCollectList.java:59)
      		at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
      		at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
      		at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
      		at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
      		at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
      		at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)
      		at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
      		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
      		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
      		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)
      		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
      		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)
      		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
      		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)
      		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
      		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1219)
      		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
      		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
      		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
      		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
      		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:178)
      		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:50)
      		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:27)
      		at java.util.concurrent.FutureTask.run(FutureTask.java:266)
      		at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
      		at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
      		at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
      		at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
      		at java.lang.Thread.run(Thread.java:745)
      		Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
      Assembly trace from producer [reactor.core.publisher.MonoFlatMap] :
      	reactor.core.publisher.Mono.flatMap(Mono.java:2158)
      	main.file.system.FileSystemLinkImpl.deleteActiveTorrentOnlyMono(FileSystemLinkImpl.java:151)
      	com.utils.Utils.lambda$null$18(Utils.java:348)
      	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:118)
      	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1219)
      	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)
      	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1219)
      	reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onComplete(MonoCollectList.java:117)
      	reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:786)
      	reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:556)
      	reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:536)
      	reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:422)
      	reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:265)
      	reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:201)
      	reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332)
      	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:139)
      	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:63)
      	reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97)
      	reactor.core.publisher.MonoCollectList.subscribe(MonoCollectList.java:59)
      	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
      	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
      	reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)
      	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
      	reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)
      	reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)
      	reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)
      	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1219)
      	reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
      	reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
      	reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:178)
      	reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:50)
      	reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:27)
      	java.util.concurrent.FutureTask.run(FutureTask.java:266)
      Error has been observed by the following operator(s):
      	|_	Mono.flatMap ⇢ main.file.system.FileSystemLinkImpl.deleteActiveTorrentOnlyMono(FileSystemLinkImpl.java:151)
      	|_	Mono.flatMap ⇢ com.utils.Utils.lambda$null$20(Utils.java:348)
      	|_	Mono.map ⇢ com.utils.Utils.lambda$null$20(Utils.java:349)
      	|_	Mono.flatMap ⇢ com.utils.Utils.lambda$null$21(Utils.java:347)
      	|_	Flux.flatMap ⇢ com.utils.Utils.lambda$null$22(Utils.java:346)
      	|_	Flux.take ⇢ com.utils.Utils.lambda$null$22(Utils.java:350)
      	|_	Flux.single ⇢ com.utils.Utils.lambda$null$22(Utils.java:351)
      	|_	Mono.flatMap ⇢ com.utils.Utils.lambda$createAndSendFakePieceMessage$23(Utils.java:330)
      	|_	Mono.flatMap ⇢ com.utils.Utils.createAndSendFakePieceMessage(Utils.java:326)
      	|_	Flux.flatMap ⇢ com.steps.MyStepdefs.applicationSendToPeerIpPeerPortAndReceiveTheFollowingMessagesForTorrent(MyStepdefs.java:206)
      	|_	Flux.collectList ⇢ com.steps.MyStepdefs.applicationSendToPeerIpPeerPortAndReceiveTheFollowingMessagesForTorrent(MyStepdefs.java:207)
      	|_	Mono.flatMapMany ⇢ com.steps.MyStepdefs.applicationSendToPeerIpPeerPortAndReceiveTheFollowingMessagesForTorrent(MyStepdefs.java:211)
      	|_	Flux.take ⇢ com.steps.MyStepdefs.applicationSendToPeerIpPeerPortAndReceiveTheFollowingMessagesForTorrent(MyStepdefs.java:212)
      
      [0m
Feature: connect to real peers and communicate with them

  #  Scenario Outline: we send request block of a piece and we receive it
  #    Given initial torrent-status for torrent: "<torrent>" in "<downloadLocation>" is:
  #      | START_DOWNLOAD        | false |
  #      | START_UPLOAD          | false |
  #      | PAUSE_DOWNLOAD        | false |
  #      | RESUME_DOWNLOAD       | false |
  #      | PAUSE_UPLOAD          | false |
  #      | RESUME_UPLOAD         | false |
  #      | COMPLETED_DOWNLOADING | false |
  #      | REMOVE_TORRENT        | false |
  #      | REMOVE_FILES          | false |
  #    Then application interested in all peers for torrent: "<torrent>"
  #    Then application request for a random block of a random piece from all peers in torrent: "<torrent>"
  #    Then application receive at list one random block of a random piece in torrent: "<torrent>"
  #
  #    Examples:
  #      | torrent     | downloadLocation |
  #      | multiple-active-seeders-torrent-1.torrent | torrents-test/   |
  #      | torrent-file-example3.torrent | torrents-test/   |
  Scenario: we connect to all peers and get their bitfield status                                                             [90m# cucumber/CommunicateWithRealPeers.feature:23[0m
    and then check that the list of peers we connected to is given
    to us by reactor

    [32mThen [0m[32mapplication connect to all peers and assert that we connected to them - for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m"[0m [90m# MyStepdefs.applicationConnectToAllPeersAndAssertThatWeConnectedToThemForTorrent(String)[0m
Feature: download blocks from fake-peer
Feature: create get and delete active torrents

  Scenario Outline: we create active torrent                                     [90m# cucumber/FileSystem.feature:3[0m
    [36mWhen [0m[36mapplication create active-torrent for: "<torrent>","<downloadLocation>"[0m
    [36mThen [0m[36mactive-torrent exist: "true" for torrent: "<torrent>"[0m
    [36mThen [0m[36mfiles of torrent: "<torrent>" exist: "true" in "<downloadLocation>"[0m

    Examples: 

  Scenario Outline: we create active torrent                                                    [90m# cucumber/FileSystem.feature:10[0m
    [32mWhen [0m[32mapplication create active-torrent for: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m","[0m[32m[1mtorrents-test[0m[32m"[0m [90m# MyStepdefs.applicationCreateActiveTorrentFor(String,String)[0m
    [32mThen [0m[32mactive-torrent exist: "[0m[32m[1mtrue[0m[32m" for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m"[0m              [90m# MyStepdefs.activeTorrentExistForTorrent(boolean,String)[0m
    [32mThen [0m[32mfiles of torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" exist: "[0m[32m[1mtrue[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m"[0m     [90m# MyStepdefs.torrentExistIn(String,boolean,String)[0m

  Scenario Outline: we create active torrent                                                    [90m# cucumber/FileSystem.feature:11[0m
    [32mWhen [0m[32mapplication create active-torrent for: "[0m[32m[1mtorrent-file-example2.torrent[0m[32m","[0m[32m[1mtorrents-test[0m[32m"[0m [90m# MyStepdefs.applicationCreateActiveTorrentFor(String,String)[0m
    [32mThen [0m[32mactive-torrent exist: "[0m[32m[1mtrue[0m[32m" for torrent: "[0m[32m[1mtorrent-file-example2.torrent[0m[32m"[0m              [90m# MyStepdefs.activeTorrentExistForTorrent(boolean,String)[0m
    [32mThen [0m[32mfiles of torrent: "[0m[32m[1mtorrent-file-example2.torrent[0m[32m" exist: "[0m[32m[1mtrue[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m"[0m     [90m# MyStepdefs.torrentExistIn(String,boolean,String)[0m

  Scenario Outline: we create active torrent                                                                [90m# cucumber/FileSystem.feature:12[0m
    [32mWhen [0m[32mapplication create active-torrent for: "[0m[32m[1mmultiple-active-seeders-torrent-1.torrent[0m[32m","[0m[32m[1mtorrents-test[0m[32m"[0m [90m# MyStepdefs.applicationCreateActiveTorrentFor(String,String)[0m
    [32mThen [0m[32mactive-torrent exist: "[0m[32m[1mtrue[0m[32m" for torrent: "[0m[32m[1mmultiple-active-seeders-torrent-1.torrent[0m[32m"[0m              [90m# MyStepdefs.activeTorrentExistForTorrent(boolean,String)[0m
    [32mThen [0m[32mfiles of torrent: "[0m[32m[1mmultiple-active-seeders-torrent-1.torrent[0m[32m" exist: "[0m[32m[1mtrue[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m"[0m     [90m# MyStepdefs.torrentExistIn(String,boolean,String)[0m

  Scenario Outline: we create active torrent                                                     [90m# cucumber/FileSystem.feature:13[0m
    [32mWhen [0m[32mapplication create active-torrent for: "[0m[32m[1mComplexFolderStructure.torrent[0m[32m","[0m[32m[1mtorrents-test[0m[32m"[0m [90m# MyStepdefs.applicationCreateActiveTorrentFor(String,String)[0m
    [32mThen [0m[32mactive-torrent exist: "[0m[32m[1mtrue[0m[32m" for torrent: "[0m[32m[1mComplexFolderStructure.torrent[0m[32m"[0m              [90m# MyStepdefs.activeTorrentExistForTorrent(boolean,String)[0m
    [32mThen [0m[32mfiles of torrent: "[0m[32m[1mComplexFolderStructure.torrent[0m[32m" exist: "[0m[32m[1mtrue[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m"[0m     [90m# MyStepdefs.torrentExistIn(String,boolean,String)[0m

  Scenario Outline: we delete torrent files only                                  [90m# cucumber/FileSystem.feature:15[0m
    [36mWhen [0m[36mapplication create active-torrent for: "<torrent>","<downloadLocation>"[0m
    [36mThen [0m[36mapplication delete active-torrent: "<torrent>": "false" and file: "true"[0m
    [36mThen [0m[36mfiles of torrent: "<torrent>" exist: "false" in "<downloadLocation>"[0m
    [36mThen [0m[36mactive-torrent exist: "true" for torrent: "<torrent>"[0m

    Examples: 

  Scenario Outline: we delete torrent files only                                                      [90m# cucumber/FileSystem.feature:23[0m
    [32mWhen [0m[32mapplication create active-torrent for: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m","[0m[32m[1mtorrents-test[0m[32m"[0m       [90m# MyStepdefs.applicationCreateActiveTorrentFor(String,String)[0m
    [32mThen [0m[32mapplication delete active-torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m": "[0m[32m[1mfalse[0m[32m" and file: "[0m[32m[1mtrue[0m[32m"[0m [90m# MyStepdefs.applicationDeleteActiveTorrentAndFile(String,boolean,boolean)[0m
    [32mThen [0m[32mfiles of torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" exist: "[0m[32m[1mfalse[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m"[0m          [90m# MyStepdefs.torrentExistIn(String,boolean,String)[0m
    [32mThen [0m[32mactive-torrent exist: "[0m[32m[1mtrue[0m[32m" for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m"[0m                    [90m# MyStepdefs.activeTorrentExistForTorrent(boolean,String)[0m

  Scenario Outline: we delete torrent files only                                                      [90m# cucumber/FileSystem.feature:24[0m
    [32mWhen [0m[32mapplication create active-torrent for: "[0m[32m[1mtorrent-file-example2.torrent[0m[32m","[0m[32m[1mtorrents-test[0m[32m"[0m       [90m# MyStepdefs.applicationCreateActiveTorrentFor(String,String)[0m
    [32mThen [0m[32mapplication delete active-torrent: "[0m[32m[1mtorrent-file-example2.torrent[0m[32m": "[0m[32m[1mfalse[0m[32m" and file: "[0m[32m[1mtrue[0m[32m"[0m [90m# MyStepdefs.applicationDeleteActiveTorrentAndFile(String,boolean,boolean)[0m
    [32mThen [0m[32mfiles of torrent: "[0m[32m[1mtorrent-file-example2.torrent[0m[32m" exist: "[0m[32m[1mfalse[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m"[0m          [90m# MyStepdefs.torrentExistIn(String,boolean,String)[0m
    [32mThen [0m[32mactive-torrent exist: "[0m[32m[1mtrue[0m[32m" for torrent: "[0m[32m[1mtorrent-file-example2.torrent[0m[32m"[0m                    [90m# MyStepdefs.activeTorrentExistForTorrent(boolean,String)[0m

  Scenario Outline: we delete torrent files only                                                                  [90m# cucumber/FileSystem.feature:25[0m
    [32mWhen [0m[32mapplication create active-torrent for: "[0m[32m[1mmultiple-active-seeders-torrent-1.torrent[0m[32m","[0m[32m[1mtorrents-test[0m[32m"[0m       [90m# MyStepdefs.applicationCreateActiveTorrentFor(String,String)[0m
    [32mThen [0m[32mapplication delete active-torrent: "[0m[32m[1mmultiple-active-seeders-torrent-1.torrent[0m[32m": "[0m[32m[1mfalse[0m[32m" and file: "[0m[32m[1mtrue[0m[32m"[0m [90m# MyStepdefs.applicationDeleteActiveTorrentAndFile(String,boolean,boolean)[0m
    [32mThen [0m[32mfiles of torrent: "[0m[32m[1mmultiple-active-seeders-torrent-1.torrent[0m[32m" exist: "[0m[32m[1mfalse[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m"[0m          [90m# MyStepdefs.torrentExistIn(String,boolean,String)[0m
    [32mThen [0m[32mactive-torrent exist: "[0m[32m[1mtrue[0m[32m" for torrent: "[0m[32m[1mmultiple-active-seeders-torrent-1.torrent[0m[32m"[0m                    [90m# MyStepdefs.activeTorrentExistForTorrent(boolean,String)[0m

  Scenario Outline: we delete torrent files only                                                       [90m# cucumber/FileSystem.feature:26[0m
    [32mWhen [0m[32mapplication create active-torrent for: "[0m[32m[1mComplexFolderStructure.torrent[0m[32m","[0m[32m[1mtorrents-test[0m[32m"[0m       [90m# MyStepdefs.applicationCreateActiveTorrentFor(String,String)[0m
    [32mThen [0m[32mapplication delete active-torrent: "[0m[32m[1mComplexFolderStructure.torrent[0m[32m": "[0m[32m[1mfalse[0m[32m" and file: "[0m[32m[1mtrue[0m[32m"[0m [90m# MyStepdefs.applicationDeleteActiveTorrentAndFile(String,boolean,boolean)[0m
    [32mThen [0m[32mfiles of torrent: "[0m[32m[1mComplexFolderStructure.torrent[0m[32m" exist: "[0m[32m[1mfalse[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m"[0m          [90m# MyStepdefs.torrentExistIn(String,boolean,String)[0m
    [32mThen [0m[32mactive-torrent exist: "[0m[32m[1mtrue[0m[32m" for torrent: "[0m[32m[1mComplexFolderStructure.torrent[0m[32m"[0m                    [90m# MyStepdefs.activeTorrentExistForTorrent(boolean,String)[0m

  Scenario Outline: we delete active torrent only                                 [90m# cucumber/FileSystem.feature:28[0m
    [36mWhen [0m[36mapplication create active-torrent for: "<torrent>","<downloadLocation>"[0m
    [36mThen [0m[36mapplication delete active-torrent: "<torrent>": "true" and file: "false"[0m
    [36mThen [0m[36mfiles of torrent: "<torrent>" exist: "true" in "<downloadLocation>"[0m
    [36mThen [0m[36mactive-torrent exist: "false" for torrent: "<torrent>"[0m

    Examples: 

  Scenario Outline: we delete active torrent only                                                     [90m# cucumber/FileSystem.feature:36[0m
    [32mWhen [0m[32mapplication create active-torrent for: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m","[0m[32m[1mtorrents-test[0m[32m"[0m       [90m# MyStepdefs.applicationCreateActiveTorrentFor(String,String)[0m
    [32mThen [0m[32mapplication delete active-torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m": "[0m[32m[1mtrue[0m[32m" and file: "[0m[32m[1mfalse[0m[32m"[0m [90m# MyStepdefs.applicationDeleteActiveTorrentAndFile(String,boolean,boolean)[0m
    [32mThen [0m[32mfiles of torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" exist: "[0m[32m[1mtrue[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m"[0m           [90m# MyStepdefs.torrentExistIn(String,boolean,String)[0m
    [32mThen [0m[32mactive-torrent exist: "[0m[32m[1mfalse[0m[32m" for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m"[0m                   [90m# MyStepdefs.activeTorrentExistForTorrent(boolean,String)[0m

  Scenario Outline: we delete active torrent only                                                     [90m# cucumber/FileSystem.feature:37[0m
    [32mWhen [0m[32mapplication create active-torrent for: "[0m[32m[1mtorrent-file-example2.torrent[0m[32m","[0m[32m[1mtorrents-test[0m[32m"[0m       [90m# MyStepdefs.applicationCreateActiveTorrentFor(String,String)[0m
    [32mThen [0m[32mapplication delete active-torrent: "[0m[32m[1mtorrent-file-example2.torrent[0m[32m": "[0m[32m[1mtrue[0m[32m" and file: "[0m[32m[1mfalse[0m[32m"[0m [90m# MyStepdefs.applicationDeleteActiveTorrentAndFile(String,boolean,boolean)[0m
    [32mThen [0m[32mfiles of torrent: "[0m[32m[1mtorrent-file-example2.torrent[0m[32m" exist: "[0m[32m[1mtrue[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m"[0m           [90m# MyStepdefs.torrentExistIn(String,boolean,String)[0m
    [32mThen [0m[32mactive-torrent exist: "[0m[32m[1mfalse[0m[32m" for torrent: "[0m[32m[1mtorrent-file-example2.torrent[0m[32m"[0m                   [90m# MyStepdefs.activeTorrentExistForTorrent(boolean,String)[0m

  Scenario Outline: we delete active torrent only                                                                 [90m# cucumber/FileSystem.feature:38[0m
    [32mWhen [0m[32mapplication create active-torrent for: "[0m[32m[1mmultiple-active-seeders-torrent-1.torrent[0m[32m","[0m[32m[1mtorrents-test[0m[32m"[0m       [90m# MyStepdefs.applicationCreateActiveTorrentFor(String,String)[0m
    [32mThen [0m[32mapplication delete active-torrent: "[0m[32m[1mmultiple-active-seeders-torrent-1.torrent[0m[32m": "[0m[32m[1mtrue[0m[32m" and file: "[0m[32m[1mfalse[0m[32m"[0m [90m# MyStepdefs.applicationDeleteActiveTorrentAndFile(String,boolean,boolean)[0m
    [32mThen [0m[32mfiles of torrent: "[0m[32m[1mmultiple-active-seeders-torrent-1.torrent[0m[32m" exist: "[0m[32m[1mtrue[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m"[0m           [90m# MyStepdefs.torrentExistIn(String,boolean,String)[0m
    [32mThen [0m[32mactive-torrent exist: "[0m[32m[1mfalse[0m[32m" for torrent: "[0m[32m[1mmultiple-active-seeders-torrent-1.torrent[0m[32m"[0m                   [90m# MyStepdefs.activeTorrentExistForTorrent(boolean,String)[0m

  Scenario Outline: we delete active torrent only                                                      [90m# cucumber/FileSystem.feature:39[0m
    [32mWhen [0m[32mapplication create active-torrent for: "[0m[32m[1mComplexFolderStructure.torrent[0m[32m","[0m[32m[1mtorrents-test[0m[32m"[0m       [90m# MyStepdefs.applicationCreateActiveTorrentFor(String,String)[0m
    [32mThen [0m[32mapplication delete active-torrent: "[0m[32m[1mComplexFolderStructure.torrent[0m[32m": "[0m[32m[1mtrue[0m[32m" and file: "[0m[32m[1mfalse[0m[32m"[0m [90m# MyStepdefs.applicationDeleteActiveTorrentAndFile(String,boolean,boolean)[0m
    [32mThen [0m[32mfiles of torrent: "[0m[32m[1mComplexFolderStructure.torrent[0m[32m" exist: "[0m[32m[1mtrue[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m"[0m           [90m# MyStepdefs.torrentExistIn(String,boolean,String)[0m
    [32mThen [0m[32mactive-torrent exist: "[0m[32m[1mfalse[0m[32m" for torrent: "[0m[32m[1mComplexFolderStructure.torrent[0m[32m"[0m                   [90m# MyStepdefs.activeTorrentExistForTorrent(boolean,String)[0m

  Scenario Outline: we delete active torrent and file                            [90m# cucumber/FileSystem.feature:41[0m
    [36mWhen [0m[36mapplication create active-torrent for: "<torrent>","<downloadLocation>"[0m
    [36mThen [0m[36mapplication delete active-torrent: "<torrent>": "true" and file: "true"[0m
    [36mThen [0m[36mactive-torrent exist: "false" for torrent: "<torrent>"[0m
    [36mThen [0m[36mfiles of torrent: "<torrent>" exist: "false" in "<downloadLocation>"[0m
    [36mThen [0m[36mactive-torrent exist: "false" for torrent: "<torrent>"[0m

    Examples: 

  Scenario Outline: we delete active torrent and file                                                [90m# cucumber/FileSystem.feature:50[0m
    [32mWhen [0m[32mapplication create active-torrent for: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m","[0m[32m[1mtorrents-test[0m[32m"[0m      [90m# MyStepdefs.applicationCreateActiveTorrentFor(String,String)[0m
    [32mThen [0m[32mapplication delete active-torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m": "[0m[32m[1mtrue[0m[32m" and file: "[0m[32m[1mtrue[0m[32m"[0m [90m# MyStepdefs.applicationDeleteActiveTorrentAndFile(String,boolean,boolean)[0m
    [32mThen [0m[32mactive-torrent exist: "[0m[32m[1mfalse[0m[32m" for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m"[0m                  [90m# MyStepdefs.activeTorrentExistForTorrent(boolean,String)[0m
    [32mThen [0m[32mfiles of torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" exist: "[0m[32m[1mfalse[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m"[0m         [90m# MyStepdefs.torrentExistIn(String,boolean,String)[0m
    [32mThen [0m[32mactive-torrent exist: "[0m[32m[1mfalse[0m[32m" for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m"[0m                  [90m# MyStepdefs.activeTorrentExistForTorrent(boolean,String)[0m

  Scenario Outline: we delete active torrent and file                                                [90m# cucumber/FileSystem.feature:51[0m
    [32mWhen [0m[32mapplication create active-torrent for: "[0m[32m[1mtorrent-file-example2.torrent[0m[32m","[0m[32m[1mtorrents-test[0m[32m"[0m      [90m# MyStepdefs.applicationCreateActiveTorrentFor(String,String)[0m
    [32mThen [0m[32mapplication delete active-torrent: "[0m[32m[1mtorrent-file-example2.torrent[0m[32m": "[0m[32m[1mtrue[0m[32m" and file: "[0m[32m[1mtrue[0m[32m"[0m [90m# MyStepdefs.applicationDeleteActiveTorrentAndFile(String,boolean,boolean)[0m
    [32mThen [0m[32mactive-torrent exist: "[0m[32m[1mfalse[0m[32m" for torrent: "[0m[32m[1mtorrent-file-example2.torrent[0m[32m"[0m                  [90m# MyStepdefs.activeTorrentExistForTorrent(boolean,String)[0m
    [32mThen [0m[32mfiles of torrent: "[0m[32m[1mtorrent-file-example2.torrent[0m[32m" exist: "[0m[32m[1mfalse[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m"[0m         [90m# MyStepdefs.torrentExistIn(String,boolean,String)[0m
    [32mThen [0m[32mactive-torrent exist: "[0m[32m[1mfalse[0m[32m" for torrent: "[0m[32m[1mtorrent-file-example2.torrent[0m[32m"[0m                  [90m# MyStepdefs.activeTorrentExistForTorrent(boolean,String)[0m

  Scenario Outline: we delete active torrent and file                                                            [90m# cucumber/FileSystem.feature:52[0m
    [32mWhen [0m[32mapplication create active-torrent for: "[0m[32m[1mmultiple-active-seeders-torrent-1.torrent[0m[32m","[0m[32m[1mtorrents-test[0m[32m"[0m      [90m# MyStepdefs.applicationCreateActiveTorrentFor(String,String)[0m
    [32mThen [0m[32mapplication delete active-torrent: "[0m[32m[1mmultiple-active-seeders-torrent-1.torrent[0m[32m": "[0m[32m[1mtrue[0m[32m" and file: "[0m[32m[1mtrue[0m[32m"[0m [90m# MyStepdefs.applicationDeleteActiveTorrentAndFile(String,boolean,boolean)[0m
    [32mThen [0m[32mactive-torrent exist: "[0m[32m[1mfalse[0m[32m" for torrent: "[0m[32m[1mmultiple-active-seeders-torrent-1.torrent[0m[32m"[0m                  [90m# MyStepdefs.activeTorrentExistForTorrent(boolean,String)[0m
    [32mThen [0m[32mfiles of torrent: "[0m[32m[1mmultiple-active-seeders-torrent-1.torrent[0m[32m" exist: "[0m[32m[1mfalse[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m"[0m         [90m# MyStepdefs.torrentExistIn(String,boolean,String)[0m
    [32mThen [0m[32mactive-torrent exist: "[0m[32m[1mfalse[0m[32m" for torrent: "[0m[32m[1mmultiple-active-seeders-torrent-1.torrent[0m[32m"[0m                  [90m# MyStepdefs.activeTorrentExistForTorrent(boolean,String)[0m

  Scenario Outline: we delete active torrent and file                                                 [90m# cucumber/FileSystem.feature:53[0m
    [32mWhen [0m[32mapplication create active-torrent for: "[0m[32m[1mComplexFolderStructure.torrent[0m[32m","[0m[32m[1mtorrents-test[0m[32m"[0m      [90m# MyStepdefs.applicationCreateActiveTorrentFor(String,String)[0m
    [32mThen [0m[32mapplication delete active-torrent: "[0m[32m[1mComplexFolderStructure.torrent[0m[32m": "[0m[32m[1mtrue[0m[32m" and file: "[0m[32m[1mtrue[0m[32m"[0m [90m# MyStepdefs.applicationDeleteActiveTorrentAndFile(String,boolean,boolean)[0m
    [32mThen [0m[32mactive-torrent exist: "[0m[32m[1mfalse[0m[32m" for torrent: "[0m[32m[1mComplexFolderStructure.torrent[0m[32m"[0m                  [90m# MyStepdefs.activeTorrentExistForTorrent(boolean,String)[0m
    [32mThen [0m[32mfiles of torrent: "[0m[32m[1mComplexFolderStructure.torrent[0m[32m" exist: "[0m[32m[1mfalse[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m"[0m         [90m# MyStepdefs.torrentExistIn(String,boolean,String)[0m
    [32mThen [0m[32mactive-torrent exist: "[0m[32m[1mfalse[0m[32m" for torrent: "[0m[32m[1mComplexFolderStructure.torrent[0m[32m"[0m                  [90m# MyStepdefs.activeTorrentExistForTorrent(boolean,String)[0m

  Scenario Outline: we save pieces of active torrent and read it                                            [90m# cucumber/FileSystem.feature:55[0m
    # we can't use "Then application create active-torrent for" because we don't have Flux<PieceMessage> to give yet.
    [36mWhen [0m[36mapplication save random blocks for torrent: "<torrent>" in "<downloadLocation>" and check it saved[0m
    [36mThen [0m[36mthe only completed pieces are - for torrent: "<torrent>":[0m

    Examples: 
start saving: BlockOfPiece{pieceIndex=1, from=0, length=1}
start saving: BlockOfPiece{pieceIndex=3, from=0, length=524288}
saved from: 0, length: 1
assert actualPieceFromFS: saved from: 0, length: 1 <----> generatedPieceMessage: saved from: 0, length: 1
start saving: BlockOfPiece{pieceIndex=4, from=100, length=100}
start saving: BlockOfPiece{pieceIndex=3028, from=100, length=100}
start saving: BlockOfPiece{pieceIndex=3027, from=0, length=524288}
saved from: 0, length: 524288
assert actualPieceFromFS: saved from: 0, length: 524288 <----> generatedPieceMessage: saved from: 0, length: 524288
saved from: 0, length: 524288
assert actualPieceFromFS: saved from: 0, length: 524288 <----> generatedPieceMessage: saved from: 0, length: 524288

  Scenario Outline: we save pieces of active torrent and read it                                                           [90m# cucumber/FileSystem.feature:70[0m
    # we can't use "Then application create active-torrent for" because we don't have Flux<PieceMessage> to give yet.
    [32mWhen [0m[32mapplication save random blocks for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m" and check it saved[0m [90m# MyStepdefs.applicationSaveARandomBlockInsideTorrentInAndCheckItSaved(String,String,BlockOfPiece>)[0m
    [32mThen [0m[32mthe only completed pieces are - for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m                                     [90m# MyStepdefs.completedPiecesAreForTorrent(String,Integer>)[0m
start saving: BlockOfPiece{pieceIndex=1, from=0, length=1}
start saving: BlockOfPiece{pieceIndex=3, from=0, length=2097152}
saved from: 0, length: 1
assert actualPieceFromFS: saved from: 0, length: 1 <----> generatedPieceMessage: saved from: 0, length: 1
saved from: 0, length: 1000000
assert actualPieceFromFS: saved from: 0, length: 1000000 <----> generatedPieceMessage: saved from: 0, length: 1000000
saved from: 1000000, length: 1000000
assert actualPieceFromFS: saved from: 1000000, length: 1000000 <----> generatedPieceMessage: saved from: 1000000, length: 1000000
start saving: BlockOfPiece{pieceIndex=4, from=100, length=100}
start saving: BlockOfPiece{pieceIndex=2640, from=100, length=100}
start saving: BlockOfPiece{pieceIndex=2639, from=0, length=2097152}
saved from: 2000000, length: 97152
assert actualPieceFromFS: saved from: 2000000, length: 97152 <----> generatedPieceMessage: saved from: 2000000, length: 97152
saved from: 0, length: 1000000
assert actualPieceFromFS: saved from: 0, length: 1000000 <----> generatedPieceMessage: saved from: 0, length: 1000000
saved from: 1000000, length: 1000000
assert actualPieceFromFS: saved from: 1000000, length: 1000000 <----> generatedPieceMessage: saved from: 1000000, length: 1000000
saved from: 2000000, length: 97152
assert actualPieceFromFS: saved from: 2000000, length: 97152 <----> generatedPieceMessage: saved from: 2000000, length: 97152

  Scenario Outline: we save pieces of active torrent and read it                                                           [90m# cucumber/FileSystem.feature:71[0m
    # we can't use "Then application create active-torrent for" because we don't have Flux<PieceMessage> to give yet.
    [32mWhen [0m[32mapplication save random blocks for torrent: "[0m[32m[1mtorrent-file-example2.torrent[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m" and check it saved[0m [90m# MyStepdefs.applicationSaveARandomBlockInsideTorrentInAndCheckItSaved(String,String,BlockOfPiece>)[0m
    [32mThen [0m[32mthe only completed pieces are - for torrent: "[0m[32m[1mtorrent-file-example2.torrent[0m[32m":[0m                                     [90m# MyStepdefs.completedPiecesAreForTorrent(String,Integer>)[0m
start saving: BlockOfPiece{pieceIndex=1, from=0, length=1}
start saving: BlockOfPiece{pieceIndex=3, from=0, length=2097152}
saved from: 0, length: 1
assert actualPieceFromFS: saved from: 0, length: 1 <----> generatedPieceMessage: saved from: 0, length: 1
saved from: 0, length: 1000000
assert actualPieceFromFS: saved from: 0, length: 1000000 <----> generatedPieceMessage: saved from: 0, length: 1000000
saved from: 1000000, length: 1000000
assert actualPieceFromFS: saved from: 1000000, length: 1000000 <----> generatedPieceMessage: saved from: 1000000, length: 1000000
start saving: BlockOfPiece{pieceIndex=4, from=100, length=100}
start saving: BlockOfPiece{pieceIndex=763, from=100, length=100}
start saving: BlockOfPiece{pieceIndex=762, from=0, length=2097152}
saved from: 2000000, length: 97152
assert actualPieceFromFS: saved from: 2000000, length: 97152 <----> generatedPieceMessage: saved from: 2000000, length: 97152
saved from: 0, length: 1000000
assert actualPieceFromFS: saved from: 0, length: 1000000 <----> generatedPieceMessage: saved from: 0, length: 1000000
saved from: 1000000, length: 1000000
assert actualPieceFromFS: saved from: 1000000, length: 1000000 <----> generatedPieceMessage: saved from: 1000000, length: 1000000
saved from: 2000000, length: 97152
assert actualPieceFromFS: saved from: 2000000, length: 97152 <----> generatedPieceMessage: saved from: 2000000, length: 97152

  Scenario Outline: we save pieces of active torrent and read it                                                                       [90m# cucumber/FileSystem.feature:72[0m
    # we can't use "Then application create active-torrent for" because we don't have Flux<PieceMessage> to give yet.
    [32mWhen [0m[32mapplication save random blocks for torrent: "[0m[32m[1mmultiple-active-seeders-torrent-1.torrent[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m" and check it saved[0m [90m# MyStepdefs.applicationSaveARandomBlockInsideTorrentInAndCheckItSaved(String,String,BlockOfPiece>)[0m
    [32mThen [0m[32mthe only completed pieces are - for torrent: "[0m[32m[1mmultiple-active-seeders-torrent-1.torrent[0m[32m":[0m                                     [90m# MyStepdefs.completedPiecesAreForTorrent(String,Integer>)[0m
start saving: BlockOfPiece{pieceIndex=1, from=0, length=1}
start saving: BlockOfPiece{pieceIndex=3, from=0, length=32768}
saved from: 0, length: 1
assert actualPieceFromFS: saved from: 0, length: 1 <----> generatedPieceMessage: saved from: 0, length: 1
start saving: BlockOfPiece{pieceIndex=4, from=100, length=100}
start saving: BlockOfPiece{pieceIndex=22, from=100, length=100}
start saving: BlockOfPiece{pieceIndex=21, from=0, length=32768}
saved from: 0, length: 32768
assert actualPieceFromFS: saved from: 0, length: 32768 <----> generatedPieceMessage: saved from: 0, length: 32768
saved from: 0, length: 32768
assert actualPieceFromFS: saved from: 0, length: 32768 <----> generatedPieceMessage: saved from: 0, length: 32768

  Scenario Outline: we save pieces of active torrent and read it                                                            [90m# cucumber/FileSystem.feature:73[0m
    # we can't use "Then application create active-torrent for" because we don't have Flux<PieceMessage> to give yet.
    [32mWhen [0m[32mapplication save random blocks for torrent: "[0m[32m[1mComplexFolderStructure.torrent[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m" and check it saved[0m [90m# MyStepdefs.applicationSaveARandomBlockInsideTorrentInAndCheckItSaved(String,String,BlockOfPiece>)[0m
    [32mThen [0m[32mthe only completed pieces are - for torrent: "[0m[32m[1mComplexFolderStructure.torrent[0m[32m":[0m                                     [90m# MyStepdefs.completedPiecesAreForTorrent(String,Integer>)[0m

  Scenario Outline: we save a block which is too large than the corresponding actual piece.                 [90m# cucumber/FileSystem.feature:75[0m
    # we expect that it will be as saving a piece when we don't specify "length".
    # we can't use "Then application create active-torrent for" because we don't have Flux<PieceMessage> to give yet.
    [36mWhen [0m[36mapplication save random blocks for torrent: "<torrent>" in "<downloadLocation>" and check it saved[0m
    [36mThen [0m[36mthe only completed pieces are - for torrent: "<torrent>":[0m

    Examples: 
start saving: BlockOfPiece{pieceIndex=3026, from=0, length=1000000000}
start saving: BlockOfPiece{pieceIndex=1, from=30, length=1000000000}
saved from: 0, length: 524288
assert actualPieceFromFS: saved from: 0, length: 524288 <----> generatedPieceMessage: saved from: 0, length: 524288
start saving: BlockOfPiece{pieceIndex=3, from=0, length=524288}
saved from: 30, length: 524228
assert actualPieceFromFS: saved from: 30, length: 524228 <----> generatedPieceMessage: saved from: 30, length: 524228
saved from: 0, length: 524288
assert actualPieceFromFS: saved from: 0, length: 524288 <----> generatedPieceMessage: saved from: 0, length: 524288

  Scenario Outline: we save a block which is too large than the corresponding actual piece.                                [90m# cucumber/FileSystem.feature:89[0m
    # we expect that it will be as saving a piece when we don't specify "length".
    # we can't use "Then application create active-torrent for" because we don't have Flux<PieceMessage> to give yet.
    [32mWhen [0m[32mapplication save random blocks for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m" and check it saved[0m [90m# MyStepdefs.applicationSaveARandomBlockInsideTorrentInAndCheckItSaved(String,String,BlockOfPiece>)[0m
    [32mThen [0m[32mthe only completed pieces are - for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m":[0m                                     [90m# MyStepdefs.completedPiecesAreForTorrent(String,Integer>)[0m
start saving: BlockOfPiece{pieceIndex=2638, from=0, length=1000000000}
saved from: 0, length: 1000000
assert actualPieceFromFS: saved from: 0, length: 1000000 <----> generatedPieceMessage: saved from: 0, length: 1000000
saved from: 1000000, length: 1000000
assert actualPieceFromFS: saved from: 1000000, length: 1000000 <----> generatedPieceMessage: saved from: 1000000, length: 1000000
start saving: BlockOfPiece{pieceIndex=1, from=30, length=1000000000}
saved from: 2000000, length: 97152
assert actualPieceFromFS: saved from: 2000000, length: 97152 <----> generatedPieceMessage: saved from: 2000000, length: 97152
saved from: 30, length: 1000000
assert actualPieceFromFS: saved from: 30, length: 1000000 <----> generatedPieceMessage: saved from: 30, length: 1000000
saved from: 1000030, length: 1000000
assert actualPieceFromFS: saved from: 1000030, length: 1000000 <----> generatedPieceMessage: saved from: 1000030, length: 1000000
start saving: BlockOfPiece{pieceIndex=3, from=0, length=2097152}
saved from: 2000030, length: 97092
assert actualPieceFromFS: saved from: 2000030, length: 97092 <----> generatedPieceMessage: saved from: 2000030, length: 97092
saved from: 0, length: 1000000
assert actualPieceFromFS: saved from: 0, length: 1000000 <----> generatedPieceMessage: saved from: 0, length: 1000000
saved from: 1000000, length: 1000000
assert actualPieceFromFS: saved from: 1000000, length: 1000000 <----> generatedPieceMessage: saved from: 1000000, length: 1000000
saved from: 2000000, length: 97152
assert actualPieceFromFS: saved from: 2000000, length: 97152 <----> generatedPieceMessage: saved from: 2000000, length: 97152

  Scenario Outline: we save a block which is too large than the corresponding actual piece.                                [90m# cucumber/FileSystem.feature:90[0m
    # we expect that it will be as saving a piece when we don't specify "length".
    # we can't use "Then application create active-torrent for" because we don't have Flux<PieceMessage> to give yet.
    [32mWhen [0m[32mapplication save random blocks for torrent: "[0m[32m[1mtorrent-file-example2.torrent[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m" and check it saved[0m [90m# MyStepdefs.applicationSaveARandomBlockInsideTorrentInAndCheckItSaved(String,String,BlockOfPiece>)[0m
    [32mThen [0m[32mthe only completed pieces are - for torrent: "[0m[32m[1mtorrent-file-example2.torrent[0m[32m":[0m                                     [90m# MyStepdefs.completedPiecesAreForTorrent(String,Integer>)[0m
start saving: BlockOfPiece{pieceIndex=761, from=0, length=1000000000}
saved from: 0, length: 1000000
assert actualPieceFromFS: saved from: 0, length: 1000000 <----> generatedPieceMessage: saved from: 0, length: 1000000
saved from: 1000000, length: 1000000
assert actualPieceFromFS: saved from: 1000000, length: 1000000 <----> generatedPieceMessage: saved from: 1000000, length: 1000000
start saving: BlockOfPiece{pieceIndex=1, from=30, length=1000000000}
saved from: 2000000, length: 97152
assert actualPieceFromFS: saved from: 2000000, length: 97152 <----> generatedPieceMessage: saved from: 2000000, length: 97152
saved from: 30, length: 1000000
assert actualPieceFromFS: saved from: 30, length: 1000000 <----> generatedPieceMessage: saved from: 30, length: 1000000
saved from: 1000030, length: 1000000
assert actualPieceFromFS: saved from: 1000030, length: 1000000 <----> generatedPieceMessage: saved from: 1000030, length: 1000000
start saving: BlockOfPiece{pieceIndex=3, from=0, length=2097152}
saved from: 2000030, length: 97092
assert actualPieceFromFS: saved from: 2000030, length: 97092 <----> generatedPieceMessage: saved from: 2000030, length: 97092
saved from: 0, length: 1000000
assert actualPieceFromFS: saved from: 0, length: 1000000 <----> generatedPieceMessage: saved from: 0, length: 1000000
saved from: 1000000, length: 1000000
assert actualPieceFromFS: saved from: 1000000, length: 1000000 <----> generatedPieceMessage: saved from: 1000000, length: 1000000
saved from: 2000000, length: 97152
assert actualPieceFromFS: saved from: 2000000, length: 97152 <----> generatedPieceMessage: saved from: 2000000, length: 97152

  Scenario Outline: we save a block which is too large than the corresponding actual piece.                                            [90m# cucumber/FileSystem.feature:91[0m
    # we expect that it will be as saving a piece when we don't specify "length".
    # we can't use "Then application create active-torrent for" because we don't have Flux<PieceMessage> to give yet.
    [32mWhen [0m[32mapplication save random blocks for torrent: "[0m[32m[1mmultiple-active-seeders-torrent-1.torrent[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m" and check it saved[0m [90m# MyStepdefs.applicationSaveARandomBlockInsideTorrentInAndCheckItSaved(String,String,BlockOfPiece>)[0m
    [32mThen [0m[32mthe only completed pieces are - for torrent: "[0m[32m[1mmultiple-active-seeders-torrent-1.torrent[0m[32m":[0m                                     [90m# MyStepdefs.completedPiecesAreForTorrent(String,Integer>)[0m
start saving: BlockOfPiece{pieceIndex=20, from=0, length=1000000000}
start saving: BlockOfPiece{pieceIndex=1, from=30, length=1000000000}
saved from: 0, length: 32768
assert actualPieceFromFS: saved from: 0, length: 32768 <----> generatedPieceMessage: saved from: 0, length: 32768
start saving: BlockOfPiece{pieceIndex=3, from=0, length=32768}
saved from: 30, length: 32708
assert actualPieceFromFS: saved from: 30, length: 32708 <----> generatedPieceMessage: saved from: 30, length: 32708
saved from: 0, length: 32768
assert actualPieceFromFS: saved from: 0, length: 32768 <----> generatedPieceMessage: saved from: 0, length: 32768

  Scenario Outline: we save a block which is too large than the corresponding actual piece.                                 [90m# cucumber/FileSystem.feature:92[0m
    # we expect that it will be as saving a piece when we don't specify "length".
    # we can't use "Then application create active-torrent for" because we don't have Flux<PieceMessage> to give yet.
    [32mWhen [0m[32mapplication save random blocks for torrent: "[0m[32m[1mComplexFolderStructure.torrent[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m" and check it saved[0m [90m# MyStepdefs.applicationSaveARandomBlockInsideTorrentInAndCheckItSaved(String,String,BlockOfPiece>)[0m
    [32mThen [0m[32mthe only completed pieces are - for torrent: "[0m[32m[1mComplexFolderStructure.torrent[0m[32m":[0m                                     [90m# MyStepdefs.completedPiecesAreForTorrent(String,Integer>)[0m

  Scenario Outline: we save all the pieces and expect to see that the fluxes are completed          [90m# cucumber/FileSystem.feature:94[0m
    [36mWhen [0m[36mapplication save the all the pieces of torrent: "<torrent>","<downloadLocation>"[0m
    [36mAnd [0m[36mthe saved-pieces-flux send complete signal - for torrent: "<torrent>","<downloadLocation>"[0m
    [36mAnd [0m[36mthe saved-blocks-flux send  complete signal - for torrent: "<torrent>","<downloadLocation>"[0m

    Examples: 
saving: 0,0,32768
saved piece index: 0
saving: 1,0,32768
saved piece index: 1
saving: 2,0,32768
saved piece index: 2
saving: 3,0,32768
saved piece index: 3
saving: 4,0,32768
saved piece index: 4
saving: 5,0,32768
saved piece index: 5
saving: 6,0,32768
saved piece index: 6
saving: 7,0,32768
saved piece index: 7
saving: 8,0,32768
saved piece index: 8
saving: 9,0,32768
saved piece index: 9
saving: 10,0,32768
saved piece index: 10
saving: 11,0,32768
saved piece index: 11
saving: 12,0,32768
saved piece index: 12
saving: 13,0,32768
saved piece index: 13
saving: 14,0,32768
saved piece index: 14
saving: 15,0,32768
saved piece index: 15
saving: 16,0,32768
saved piece index: 16
saving: 17,0,32768
saved piece index: 17
saving: 18,0,32768
saved piece index: 18
saving: 19,0,32768
saved piece index: 19
saving: 20,0,32768
saved piece index: 20
saving: 21,0,32768
saved piece index: 21
saving: 22,0,25384
saved piece index: 22

  Scenario Outline: we save all the pieces and expect to see that the fluxes are completed                          [90m# cucumber/FileSystem.feature:101[0m
    [32mWhen [0m[32mapplication save the all the pieces of torrent: "[0m[32m[1mComplexFolderStructure.torrent[0m[32m","[0m[32m[1mtorrents-test[0m[32m"[0m           [90m# MyStepdefs.applicationSaveTheAllThePiecesOfTorrent(String,String)[0m
    [32mAnd [0m[32mthe saved-pieces-flux send complete signal - for torrent: "[0m[32m[1mComplexFolderStructure.torrent[0m[32m","[0m[32m[1mtorrents-test[0m[32m"[0m  [90m# MyStepdefs.theSavedPiecesFluxSendCompleteSignalForTorrent(String,String)[0m
    [32mAnd [0m[32mthe saved-blocks-flux send  complete signal - for torrent: "[0m[32m[1mComplexFolderStructure.torrent[0m[32m","[0m[32m[1mtorrents-test[0m[32m"[0m [90m# MyStepdefs.theSavedBlocksFluxSendCompleteSignalForTorrent(String,String)[0m
Feature: download pieces from fake-peers
Feature: start/stop downloading/uploading

  Scenario Outline: start downloading & uploading                                     [90m# cucumber/TorrentStatus.feature:3[0m
    [36mGiven [0m[36minitial torrent-status for torrent: "<torrent>" in "<downloadLocation>" is:[0m
    [36mWhen [0m[36mtorrent-status for torrent "<torrent>" is trying to change to:[0m
    [36mThen [0m[36mtorrent-status for torrent "<torrent>" will be:[0m

    Examples: 

  Scenario Outline: start downloading & uploading                                                    [90m# cucumber/TorrentStatus.feature:27[0m
    [32mGiven [0m[32minitial torrent-status for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m" is:[0m [90m# MyStepdefs.activeTorrentForInWithTheFollowingStatus(String,String,StatusType,Boolean>)[0m
    [32mWhen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" is trying to change to:[0m          [90m# MyStepdefs.torrentStatusForIsTryingToChangeTo(String,StatusType>)[0m
    [32mThen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" will be:[0m                         [90m# MyStepdefs.torrentStatusForWillBe(String,StatusType>)[0m

  Scenario Outline: start downloading & uploading and then stop uploading             [90m# cucumber/TorrentStatus.feature:29[0m
    [36mGiven [0m[36minitial torrent-status for torrent: "<torrent>" in "<downloadLocation>" is:[0m
    [36mWhen [0m[36mtorrent-status for torrent "<torrent>" is trying to change to:[0m
    [36mThen [0m[36mtorrent-status for torrent "<torrent>" will be:[0m
    [36mWhen [0m[36mtorrent-status for torrent "<torrent>" is trying to change to:[0m
    [36mThen [0m[36mtorrent-status for torrent "<torrent>" will be:[0m

    Examples: 

  Scenario Outline: start downloading & uploading and then stop uploading                            [90m# cucumber/TorrentStatus.feature:60[0m
    [32mGiven [0m[32minitial torrent-status for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m" is:[0m [90m# MyStepdefs.activeTorrentForInWithTheFollowingStatus(String,String,StatusType,Boolean>)[0m
    [32mWhen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" is trying to change to:[0m          [90m# MyStepdefs.torrentStatusForIsTryingToChangeTo(String,StatusType>)[0m
    [32mThen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" will be:[0m                         [90m# MyStepdefs.torrentStatusForWillBe(String,StatusType>)[0m
    [32mWhen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" is trying to change to:[0m          [90m# MyStepdefs.torrentStatusForIsTryingToChangeTo(String,StatusType>)[0m
    [32mThen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" will be:[0m                         [90m# MyStepdefs.torrentStatusForWillBe(String,StatusType>)[0m

  Scenario Outline: torrent-status is in downloading & uploading state and then stop uploading [90m# cucumber/TorrentStatus.feature:62[0m
    [36mGiven [0m[36minitial torrent-status for torrent: "<torrent>" in "<downloadLocation>" is:[0m
    [36mWhen [0m[36mtorrent-status for torrent "<torrent>" is trying to change to:[0m
    [36mThen [0m[36mtorrent-status for torrent "<torrent>" will be:[0m

    Examples: 

  Scenario Outline: torrent-status is in downloading & uploading state and then stop uploading       [90m# cucumber/TorrentStatus.feature:85[0m
    [32mGiven [0m[32minitial torrent-status for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m" is:[0m [90m# MyStepdefs.activeTorrentForInWithTheFollowingStatus(String,String,StatusType,Boolean>)[0m
    [32mWhen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" is trying to change to:[0m          [90m# MyStepdefs.torrentStatusForIsTryingToChangeTo(String,StatusType>)[0m
    [32mThen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" will be:[0m                         [90m# MyStepdefs.torrentStatusForWillBe(String,StatusType>)[0m

  Scenario Outline: start downloading & uploading and then stop uploading and downloading [90m# cucumber/TorrentStatus.feature:87[0m
    [36mGiven [0m[36minitial torrent-status for torrent: "<torrent>" in "<downloadLocation>" is:[0m
    [36mWhen [0m[36mtorrent-status for torrent "<torrent>" is trying to change to:[0m
    [36mThen [0m[36mtorrent-status for torrent "<torrent>" will be:[0m

    Examples: 

  Scenario Outline: start downloading & uploading and then stop uploading and downloading            [90m# cucumber/TorrentStatus.feature:111[0m
    [32mGiven [0m[32minitial torrent-status for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m" is:[0m [90m# MyStepdefs.activeTorrentForInWithTheFollowingStatus(String,String,StatusType,Boolean>)[0m
    [32mWhen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" is trying to change to:[0m          [90m# MyStepdefs.torrentStatusForIsTryingToChangeTo(String,StatusType>)[0m
    [32mThen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" will be:[0m                         [90m# MyStepdefs.torrentStatusForWillBe(String,StatusType>)[0m

  Scenario Outline: start downloading & uploading & listen for incoming peers and then remove torrent [90m# cucumber/TorrentStatus.feature:113[0m
    [36mGiven [0m[36minitial torrent-status for torrent: "<torrent>" in "<downloadLocation>" is:[0m
    [36mWhen [0m[36mtorrent-status for torrent "<torrent>" is trying to change to:[0m
    [36mThen [0m[36mtorrent-status for torrent "<torrent>" will be:[0m

    Examples: 

  Scenario Outline: start downloading & uploading & listen for incoming peers and then remove torrent [90m# cucumber/TorrentStatus.feature:139[0m
    [32mGiven [0m[32minitial torrent-status for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m" is:[0m  [90m# MyStepdefs.activeTorrentForInWithTheFollowingStatus(String,String,StatusType,Boolean>)[0m
    [32mWhen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" is trying to change to:[0m           [90m# MyStepdefs.torrentStatusForIsTryingToChangeTo(String,StatusType>)[0m
    [32mThen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" will be:[0m                          [90m# MyStepdefs.torrentStatusForWillBe(String,StatusType>)[0m

  Scenario Outline: start downloading & uploading when torrent is removed             [90m# cucumber/TorrentStatus.feature:141[0m
    [36mGiven [0m[36minitial torrent-status for torrent: "<torrent>" in "<downloadLocation>" is:[0m
    [36mWhen [0m[36mtorrent-status for torrent "<torrent>" is trying to change to:[0m
    [36mThen [0m[36mtorrent-status for torrent "<torrent>" will be:[0m

    Examples: 

  Scenario Outline: start downloading & uploading when torrent is removed                            [90m# cucumber/TorrentStatus.feature:165[0m
    [32mGiven [0m[32minitial torrent-status for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m" is:[0m [90m# MyStepdefs.activeTorrentForInWithTheFollowingStatus(String,String,StatusType,Boolean>)[0m
    [32mWhen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" is trying to change to:[0m          [90m# MyStepdefs.torrentStatusForIsTryingToChangeTo(String,StatusType>)[0m
    [32mThen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" will be:[0m                         [90m# MyStepdefs.torrentStatusForWillBe(String,StatusType>)[0m

  Scenario Outline: start downloading & uploading when files are removed              [90m# cucumber/TorrentStatus.feature:167[0m
    [36mGiven [0m[36minitial torrent-status for torrent: "<torrent>" in "<downloadLocation>" is:[0m
    [36mWhen [0m[36mtorrent-status for torrent "<torrent>" is trying to change to:[0m
    [36mThen [0m[36mtorrent-status for torrent "<torrent>" will be:[0m

    Examples: 

  Scenario Outline: start downloading & uploading when files are removed                             [90m# cucumber/TorrentStatus.feature:189[0m
    [32mGiven [0m[32minitial torrent-status for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m" is:[0m [90m# MyStepdefs.activeTorrentForInWithTheFollowingStatus(String,String,StatusType,Boolean>)[0m
    [32mWhen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" is trying to change to:[0m          [90m# MyStepdefs.torrentStatusForIsTryingToChangeTo(String,StatusType>)[0m
    [32mThen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" will be:[0m                         [90m# MyStepdefs.torrentStatusForWillBe(String,StatusType>)[0m

  Scenario Outline: start downloading & uploading when torrent and files are removed  [90m# cucumber/TorrentStatus.feature:191[0m
    [36mGiven [0m[36minitial torrent-status for torrent: "<torrent>" in "<downloadLocation>" is:[0m
    [36mWhen [0m[36mtorrent-status for torrent "<torrent>" is trying to change to:[0m
    [36mThen [0m[36mtorrent-status for torrent "<torrent>" will be:[0m

    Examples: 

  Scenario Outline: start downloading & uploading when torrent and files are removed                 [90m# cucumber/TorrentStatus.feature:214[0m
    [32mGiven [0m[32minitial torrent-status for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m" is:[0m [90m# MyStepdefs.activeTorrentForInWithTheFollowingStatus(String,String,StatusType,Boolean>)[0m
    [32mWhen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" is trying to change to:[0m          [90m# MyStepdefs.torrentStatusForIsTryingToChangeTo(String,StatusType>)[0m
    [32mThen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" will be:[0m                         [90m# MyStepdefs.torrentStatusForWillBe(String,StatusType>)[0m

  Scenario Outline: complete downloading & uploading when torrent and files are removed [90m# cucumber/TorrentStatus.feature:216[0m
    [36mGiven [0m[36minitial torrent-status for torrent: "<torrent>" in "<downloadLocation>" is:[0m
    [36mWhen [0m[36mtorrent-status for torrent "<torrent>" is trying to change to:[0m
    [36mThen [0m[36mtorrent-status for torrent "<torrent>" will be:[0m

    Examples: 

  Scenario Outline: complete downloading & uploading when torrent and files are removed              [90m# cucumber/TorrentStatus.feature:239[0m
    [32mGiven [0m[32minitial torrent-status for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m" is:[0m [90m# MyStepdefs.activeTorrentForInWithTheFollowingStatus(String,String,StatusType,Boolean>)[0m
    [32mWhen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" is trying to change to:[0m          [90m# MyStepdefs.torrentStatusForIsTryingToChangeTo(String,StatusType>)[0m
    [32mThen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" will be:[0m                         [90m# MyStepdefs.torrentStatusForWillBe(String,StatusType>)[0m

  Scenario Outline: starting download and upload which already download and upload already started [90m# cucumber/TorrentStatus.feature:241[0m
    [36mGiven [0m[36minitial torrent-status for torrent: "<torrent>" in "<downloadLocation>" is:[0m
    [36mWhen [0m[36mtorrent-status for torrent "<torrent>" is trying to change to:[0m
    [36mThen [0m[36mtorrent-status for torrent "<torrent>" will be:[0m

    Examples: 

  Scenario Outline: starting download and upload which already download and upload already started   [90m# cucumber/TorrentStatus.feature:265[0m
    [32mGiven [0m[32minitial torrent-status for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m" is:[0m [90m# MyStepdefs.activeTorrentForInWithTheFollowingStatus(String,String,StatusType,Boolean>)[0m
    [32mWhen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" is trying to change to:[0m          [90m# MyStepdefs.torrentStatusForIsTryingToChangeTo(String,StatusType>)[0m
    [32mThen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" will be:[0m                         [90m# MyStepdefs.torrentStatusForWillBe(String,StatusType>)[0m

  Scenario Outline: starting a torrent twice                                          [90m# cucumber/TorrentStatus.feature:267[0m
    [36mGiven [0m[36minitial torrent-status for torrent: "<torrent>" in "<downloadLocation>" is:[0m
    [36mWhen [0m[36mtorrent-status for torrent "<torrent>" is trying to change to:[0m
    [36mThen [0m[36mtorrent-status for torrent "<torrent>" will be:[0m
    [36mWhen [0m[36mtorrent-status for torrent "<torrent>" is trying to change to:[0m
    [36mThen [0m[36mtorrent-status for torrent "<torrent>" will be:[0m

    Examples: 

  Scenario Outline: starting a torrent twice                                                         [90m# cucumber/TorrentStatus.feature:303[0m
    [32mGiven [0m[32minitial torrent-status for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m" is:[0m [90m# MyStepdefs.activeTorrentForInWithTheFollowingStatus(String,String,StatusType,Boolean>)[0m
    [32mWhen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" is trying to change to:[0m          [90m# MyStepdefs.torrentStatusForIsTryingToChangeTo(String,StatusType>)[0m
    [32mThen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" will be:[0m                         [90m# MyStepdefs.torrentStatusForWillBe(String,StatusType>)[0m
    [32mWhen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" is trying to change to:[0m          [90m# MyStepdefs.torrentStatusForIsTryingToChangeTo(String,StatusType>)[0m
    [32mThen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" will be:[0m                         [90m# MyStepdefs.torrentStatusForWillBe(String,StatusType>)[0m

  Scenario Outline: remove torrent twice                                              [90m# cucumber/TorrentStatus.feature:305[0m
    [36mGiven [0m[36minitial torrent-status for torrent: "<torrent>" in "<downloadLocation>" is:[0m
    [36mWhen [0m[36mtorrent-status for torrent "<torrent>" is trying to change to:[0m
    [36mThen [0m[36mtorrent-status for torrent "<torrent>" will be:[0m

    Examples: 

  Scenario Outline: remove torrent twice                                                             [90m# cucumber/TorrentStatus.feature:326[0m
    [32mGiven [0m[32minitial torrent-status for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m" is:[0m [90m# MyStepdefs.activeTorrentForInWithTheFollowingStatus(String,String,StatusType,Boolean>)[0m
    [32mWhen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" is trying to change to:[0m          [90m# MyStepdefs.torrentStatusForIsTryingToChangeTo(String,StatusType>)[0m
    [32mThen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" will be:[0m                         [90m# MyStepdefs.torrentStatusForWillBe(String,StatusType>)[0m

  Scenario Outline: remove files twice                                                [90m# cucumber/TorrentStatus.feature:328[0m
    [36mGiven [0m[36minitial torrent-status for torrent: "<torrent>" in "<downloadLocation>" is:[0m
    [36mWhen [0m[36mtorrent-status for torrent "<torrent>" is trying to change to:[0m
    [36mThen [0m[36mtorrent-status for torrent "<torrent>" will be:[0m

    Examples: 

  Scenario Outline: remove files twice                                                               [90m# cucumber/TorrentStatus.feature:347[0m
    [32mGiven [0m[32minitial torrent-status for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m" is:[0m [90m# MyStepdefs.activeTorrentForInWithTheFollowingStatus(String,String,StatusType,Boolean>)[0m
    [32mWhen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" is trying to change to:[0m          [90m# MyStepdefs.torrentStatusForIsTryingToChangeTo(String,StatusType>)[0m
    [32mThen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" will be:[0m                         [90m# MyStepdefs.torrentStatusForWillBe(String,StatusType>)[0m

  Scenario Outline: complete torrent twice                                            [90m# cucumber/TorrentStatus.feature:349[0m
    [36mGiven [0m[36minitial torrent-status for torrent: "<torrent>" in "<downloadLocation>" is:[0m
    [36mWhen [0m[36mtorrent-status for torrent "<torrent>" is trying to change to:[0m
    [36mThen [0m[36mtorrent-status for torrent "<torrent>" will be:[0m

    Examples: 

  Scenario Outline: complete torrent twice                                                           [90m# cucumber/TorrentStatus.feature:369[0m
    [32mGiven [0m[32minitial torrent-status for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m" is:[0m [90m# MyStepdefs.activeTorrentForInWithTheFollowingStatus(String,String,StatusType,Boolean>)[0m
    [32mWhen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" is trying to change to:[0m          [90m# MyStepdefs.torrentStatusForIsTryingToChangeTo(String,StatusType>)[0m
    [32mThen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" will be:[0m                         [90m# MyStepdefs.torrentStatusForWillBe(String,StatusType>)[0m

  Scenario Outline: start listening for incoming peers                                [90m# cucumber/TorrentStatus.feature:371[0m
    [36mGiven [0m[36minitial torrent-status for torrent: "<torrent>" in "<downloadLocation>" is:[0m
    [36mWhen [0m[36mtorrent-status for torrent "<torrent>" is trying to change to:[0m
    [36mThen [0m[36mtorrent-status for torrent "<torrent>" will be:[0m

    Examples: 

  Scenario Outline: start listening for incoming peers                                               [90m# cucumber/TorrentStatus.feature:391[0m
    [32mGiven [0m[32minitial torrent-status for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m" is:[0m [90m# MyStepdefs.activeTorrentForInWithTheFollowingStatus(String,String,StatusType,Boolean>)[0m
    [32mWhen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" is trying to change to:[0m          [90m# MyStepdefs.torrentStatusForIsTryingToChangeTo(String,StatusType>)[0m
    [32mThen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" will be:[0m                         [90m# MyStepdefs.torrentStatusForWillBe(String,StatusType>)[0m

  Scenario Outline: stop listening for incoming peers                                 [90m# cucumber/TorrentStatus.feature:393[0m
    [36mGiven [0m[36minitial torrent-status for torrent: "<torrent>" in "<downloadLocation>" is:[0m
    [36mWhen [0m[36mtorrent-status for torrent "<torrent>" is trying to change to:[0m
    [36mThen [0m[36mtorrent-status for torrent "<torrent>" will be:[0m

    Examples: 

  Scenario Outline: stop listening for incoming peers                                                [90m# cucumber/TorrentStatus.feature:413[0m
    [32mGiven [0m[32minitial torrent-status for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m" is:[0m [90m# MyStepdefs.activeTorrentForInWithTheFollowingStatus(String,String,StatusType,Boolean>)[0m
    [32mWhen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" is trying to change to:[0m          [90m# MyStepdefs.torrentStatusForIsTryingToChangeTo(String,StatusType>)[0m
    [32mThen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" will be:[0m                         [90m# MyStepdefs.torrentStatusForWillBe(String,StatusType>)[0m

  Scenario Outline: stop listening for incoming peers while keep searching peers      [90m# cucumber/TorrentStatus.feature:415[0m
    [36mGiven [0m[36minitial torrent-status for torrent: "<torrent>" in "<downloadLocation>" is:[0m
    [36mWhen [0m[36mtorrent-status for torrent "<torrent>" is trying to change to:[0m
    [36mThen [0m[36mtorrent-status for torrent "<torrent>" will be:[0m

    Examples: 

  Scenario Outline: stop listening for incoming peers while keep searching peers                     [90m# cucumber/TorrentStatus.feature:437[0m
    [32mGiven [0m[32minitial torrent-status for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m" is:[0m [90m# MyStepdefs.activeTorrentForInWithTheFollowingStatus(String,String,StatusType,Boolean>)[0m
    [32mWhen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" is trying to change to:[0m          [90m# MyStepdefs.torrentStatusForIsTryingToChangeTo(String,StatusType>)[0m
    [32mThen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" will be:[0m                         [90m# MyStepdefs.torrentStatusForWillBe(String,StatusType>)[0m

  Scenario Outline: remove torrent while searching peers                              [90m# cucumber/TorrentStatus.feature:439[0m
    [36mGiven [0m[36minitial torrent-status for torrent: "<torrent>" in "<downloadLocation>" is:[0m
    [36mWhen [0m[36mtorrent-status for torrent "<torrent>" is trying to change to:[0m
    [36mThen [0m[36mtorrent-status for torrent "<torrent>" will be:[0m

    Examples: 

  Scenario Outline: remove torrent while searching peers                                             [90m# cucumber/TorrentStatus.feature:460[0m
    [32mGiven [0m[32minitial torrent-status for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m" is:[0m [90m# MyStepdefs.activeTorrentForInWithTheFollowingStatus(String,String,StatusType,Boolean>)[0m
    [32mWhen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" is trying to change to:[0m          [90m# MyStepdefs.torrentStatusForIsTryingToChangeTo(String,StatusType>)[0m
    [32mThen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" will be:[0m                         [90m# MyStepdefs.torrentStatusForWillBe(String,StatusType>)[0m

  Scenario Outline: remove files while searching peers                                [90m# cucumber/TorrentStatus.feature:462[0m
    [36mGiven [0m[36minitial torrent-status for torrent: "<torrent>" in "<downloadLocation>" is:[0m
    [36mWhen [0m[36mtorrent-status for torrent "<torrent>" is trying to change to:[0m
    [36mThen [0m[36mtorrent-status for torrent "<torrent>" will be:[0m

    Examples: 

  Scenario Outline: remove files while searching peers                                               [90m# cucumber/TorrentStatus.feature:483[0m
    [32mGiven [0m[32minitial torrent-status for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m" is:[0m [90m# MyStepdefs.activeTorrentForInWithTheFollowingStatus(String,String,StatusType,Boolean>)[0m
    [32mWhen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" is trying to change to:[0m          [90m# MyStepdefs.torrentStatusForIsTryingToChangeTo(String,StatusType>)[0m
    [32mThen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" will be:[0m                         [90m# MyStepdefs.torrentStatusForWillBe(String,StatusType>)[0m

  Scenario Outline: start search peers when the download is already completed         [90m# cucumber/TorrentStatus.feature:485[0m
    [36mGiven [0m[36minitial torrent-status for torrent: "<torrent>" in "<downloadLocation>" is:[0m
    [36mWhen [0m[36mtorrent-status for torrent "<torrent>" is trying to change to:[0m
    [36mThen [0m[36mtorrent-status for torrent "<torrent>" will be:[0m

    Examples: 

  Scenario Outline: start search peers when the download is already completed                        [90m# cucumber/TorrentStatus.feature:505[0m
    [32mGiven [0m[32minitial torrent-status for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m" is:[0m [90m# MyStepdefs.activeTorrentForInWithTheFollowingStatus(String,String,StatusType,Boolean>)[0m
    [32mWhen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" is trying to change to:[0m          [90m# MyStepdefs.torrentStatusForIsTryingToChangeTo(String,StatusType>)[0m
    [32mThen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" will be:[0m                         [90m# MyStepdefs.torrentStatusForWillBe(String,StatusType>)[0m

  Scenario Outline: start search peers while downloading                              [90m# cucumber/TorrentStatus.feature:507[0m
    [36mGiven [0m[36minitial torrent-status for torrent: "<torrent>" in "<downloadLocation>" is:[0m
    [36mWhen [0m[36mtorrent-status for torrent "<torrent>" is trying to change to:[0m
    [36mThen [0m[36mtorrent-status for torrent "<torrent>" will be:[0m

    Examples: 

  Scenario Outline: start search peers while downloading                                             [90m# cucumber/TorrentStatus.feature:529[0m
    [32mGiven [0m[32minitial torrent-status for torrent: "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" in "[0m[32m[1mtorrents-test[0m[32m" is:[0m [90m# MyStepdefs.activeTorrentForInWithTheFollowingStatus(String,String,StatusType,Boolean>)[0m
    [32mWhen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" is trying to change to:[0m          [90m# MyStepdefs.torrentStatusForIsTryingToChangeTo(String,StatusType>)[0m
    [32mThen [0m[32mtorrent-status for torrent "[0m[32m[1mtorrent-file-example1.torrent[0m[32m" will be:[0m                         [90m# MyStepdefs.torrentStatusForWillBe(String,StatusType>)[0m
Feature: test tracker api calls

  Background: read torrent file                                         [90m# cucumber/TrackerCommunication.feature:3[0m
    [32mGiven [0m[32mnew torrent file: "[0m[32m[1mmultiple-active-seeders-torrent-1.torrent[0m[32m"[0m [90m# MyStepdefs.newTorrentFile(String)[0m

  Scenario: find any tracker, from all the trackers, which response to: connect,announce and scrape requests [90m# cucumber/TrackerCommunication.feature:6[0m
    [32mThen [0m[32mapplication send and receive the following messages from a random tracker:[0m                          [90m# MyStepdefs.applicationSendAndReceiveTheFollowingMessagesFromARandomTracker(TrackerFakeRequestResponseMessage>)[0m

  Background: read torrent file                                         [90m# cucumber/TrackerCommunication.feature:3[0m
    [32mGiven [0m[32mnew torrent file: "[0m[32m[1mmultiple-active-seeders-torrent-1.torrent[0m[32m"[0m [90m# MyStepdefs.newTorrentFile(String)[0m

  Scenario: communicating with collection of trackers which contain a not-responding trackers [90m# cucumber/TrackerCommunication.feature:13[0m
    [32mGiven [0m[32madditional not-responding trackers to the tracker-list[0m                              [90m# MyStepdefs.additionalNotRespondingTrackersToTheTrackerListFromFile()[0m
    [32mThen [0m[32mapplication send and receive the following messages from a random tracker:[0m           [90m# MyStepdefs.applicationSendAndReceiveTheFollowingMessagesFromARandomTracker(TrackerFakeRequestResponseMessage>)[0m

  Background: read torrent file                                         [90m# cucumber/TrackerCommunication.feature:3[0m
    [32mGiven [0m[32mnew torrent file: "[0m[32m[1mmultiple-active-seeders-torrent-1.torrent[0m[32m"[0m [90m# MyStepdefs.newTorrentFile(String)[0m

  Scenario: communicating with collection of trackers which contain invalid urls of trackers [90m# cucumber/TrackerCommunication.feature:19[0m
    [32mGiven [0m[32monly one invalid url of a tracker[0m                                                  [90m# MyStepdefs.additionalInvalidUrlOfATrackerOf()[0m
    [32mThen [0m[32mapplication send and receive the following messages from a random tracker:[0m          [90m# MyStepdefs.applicationSendAndReceiveTheFollowingMessagesFromARandomTracker(TrackerFakeRequestResponseMessage>)[0m
Feature: connect to valid fake-peers and map between them and their pieces

[31mFailed scenarios:[0m
[31mcucumber/CommunicateWithFakePeers.feature:35 [0m# Scenario Outline: we send peer-messages and must receive the same peer-messages back

60 Scenarios ([31m1 failed[0m, [32m59 passed[0m)
227 Steps ([31m1 failed[0m, [32m226 passed[0m)
0m4.153s

java.lang.AssertionError: expectation "expectNextCount(1)" failed (expected: count = 1; actual: counted = 0; signal: onError(java.lang.Exception: FileSystemLinkImpl object not exist.))
	at reactor.test.ErrorFormatter.assertionError(ErrorFormatter.java:105)
	at reactor.test.ErrorFormatter.failPrefix(ErrorFormatter.java:94)
	at reactor.test.ErrorFormatter.fail(ErrorFormatter.java:64)
	at reactor.test.ErrorFormatter.failOptional(ErrorFormatter.java:79)
	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.checkCountMismatch(DefaultStepVerifierBuilder.java:1223)
	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onSignalCount(DefaultStepVerifierBuilder.java:1454)
	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onExpectation(DefaultStepVerifierBuilder.java:1306)
	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onError(DefaultStepVerifierBuilder.java:996)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.FluxTake$TakeFuseableSubscriber.onError(FluxTake.java:415)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:193)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onError(MonoCollectList.java:106)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:782)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:556)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:536)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.innerError(FluxFlatMap.java:803)
	at reactor.core.publisher.FluxFlatMap$FlatMapInner.onError(FluxFlatMap.java:942)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.MonoSingle$SingleSubscriber.onError(MonoSingle.java:141)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.FluxTake$TakeFuseableSubscriber.onError(FluxTake.java:415)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:782)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:556)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:536)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.innerError(FluxFlatMap.java:803)
	at reactor.core.publisher.FluxFlatMap$FlatMapInner.onError(FluxFlatMap.java:942)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onError(FluxMapFuseable.java:134)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:135)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1219)
	at reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onComplete(MonoCollectList.java:117)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:388)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:786)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:556)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:536)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:422)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:388)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:265)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:201)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:463)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:447)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:139)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:63)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:164)
	at reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:164)
	at reactor.core.publisher.MonoCollectList.subscribe(MonoCollectList.java:59)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1219)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1219)
	at reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onComplete(MonoCollectList.java:117)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:388)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:786)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:556)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:536)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:422)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:388)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:265)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:201)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:463)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:447)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:139)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:63)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:164)
	at reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:164)
	at reactor.core.publisher.MonoCollectList.subscribe(MonoCollectList.java:59)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1219)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
	at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:178)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:50)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:27)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
	at ✽.Then application send to [peer ip: "localhost", peer port: "8983"] and receive the following messages for torrent: "multiple-active-seeders-torrent-1.torrent","torrents-test":(cucumber/CommunicateWithFakePeers.feature:8)
	Suppressed: java.lang.Exception: FileSystemLinkImpl object not exist.
		at main.file.system.FileSystemLinkImpl.lambda$deleteActiveTorrentOnlyMono$8(FileSystemLinkImpl.java:156)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:118)
		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1219)
		at reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onComplete(MonoCollectList.java:117)
		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:388)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:786)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:556)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:536)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:422)
		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:388)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:265)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:201)
		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:463)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332)
		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:447)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:139)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:63)
		at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:164)
		at reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97)
		at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:164)
		at reactor.core.publisher.MonoCollectList.subscribe(MonoCollectList.java:59)
		at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
		at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
		at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1219)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)
		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1219)
		at reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onComplete(MonoCollectList.java:117)
		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:388)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:786)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:556)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:536)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:422)
		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:388)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:265)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:201)
		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:463)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332)
		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:447)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:139)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:63)
		at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:164)
		at reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97)
		at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:164)
		at reactor.core.publisher.MonoCollectList.subscribe(MonoCollectList.java:59)
		at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
		at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
		at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
		at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
		at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
		at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)
		at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)
		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)
		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)
		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1219)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
		at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:178)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:50)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:27)
		at java.util.concurrent.FutureTask.run(FutureTask.java:266)
		at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
		at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
		at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
		at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
		at java.lang.Thread.run(Thread.java:745)
		Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Assembly trace from producer [reactor.core.publisher.MonoFlatMap] :
	reactor.core.publisher.Mono.flatMap(Mono.java:2158)
	main.file.system.FileSystemLinkImpl.deleteActiveTorrentOnlyMono(FileSystemLinkImpl.java:151)
	com.utils.Utils.lambda$null$18(Utils.java:348)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:118)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1219)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1219)
	reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onComplete(MonoCollectList.java:117)
	reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:786)
	reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:556)
	reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:536)
	reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:422)
	reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:265)
	reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:201)
	reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:139)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:63)
	reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97)
	reactor.core.publisher.MonoCollectList.subscribe(MonoCollectList.java:59)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)
	reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)
	reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1219)
	reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
	reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
	reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:178)
	reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:50)
	reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:27)
	java.util.concurrent.FutureTask.run(FutureTask.java:266)
Error has been observed by the following operator(s):
	|_	Mono.flatMap ⇢ main.file.system.FileSystemLinkImpl.deleteActiveTorrentOnlyMono(FileSystemLinkImpl.java:151)
	|_	Mono.flatMap ⇢ com.utils.Utils.lambda$null$20(Utils.java:348)
	|_	Mono.map ⇢ com.utils.Utils.lambda$null$20(Utils.java:349)
	|_	Mono.flatMap ⇢ com.utils.Utils.lambda$null$21(Utils.java:347)
	|_	Flux.flatMap ⇢ com.utils.Utils.lambda$null$22(Utils.java:346)
	|_	Flux.take ⇢ com.utils.Utils.lambda$null$22(Utils.java:350)
	|_	Flux.single ⇢ com.utils.Utils.lambda$null$22(Utils.java:351)
	|_	Mono.flatMap ⇢ com.utils.Utils.lambda$createAndSendFakePieceMessage$23(Utils.java:330)
	|_	Mono.flatMap ⇢ com.utils.Utils.createAndSendFakePieceMessage(Utils.java:326)
	|_	Flux.flatMap ⇢ com.steps.MyStepdefs.applicationSendToPeerIpPeerPortAndReceiveTheFollowingMessagesForTorrent(MyStepdefs.java:206)
	|_	Flux.collectList ⇢ com.steps.MyStepdefs.applicationSendToPeerIpPeerPortAndReceiveTheFollowingMessagesForTorrent(MyStepdefs.java:207)
	|_	Mono.flatMapMany ⇢ com.steps.MyStepdefs.applicationSendToPeerIpPeerPortAndReceiveTheFollowingMessagesForTorrent(MyStepdefs.java:211)
	|_	Flux.take ⇢ com.steps.MyStepdefs.applicationSendToPeerIpPeerPortAndReceiveTheFollowingMessagesForTorrent(MyStepdefs.java:212)


Tests run: 287, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 4.883 sec <<< FAILURE! - in com.runner.CucumberTest
Then application send to [peer ip: "localhost", peer port: "8983"] and receive the following messages for torrent: "multiple-active-seeders-torrent-1.torrent","torrents-test":(| multiple-active-seeders-torrent-1.torrent | torrents-test |)  Time elapsed: 0.005 sec  <<< FAILURE!
java.lang.AssertionError: expectation "expectNextCount(1)" failed (expected: count = 1; actual: counted = 0; signal: onError(java.lang.Exception: FileSystemLinkImpl object not exist.))
	at reactor.test.ErrorFormatter.assertionError(ErrorFormatter.java:105)
	at reactor.test.ErrorFormatter.failPrefix(ErrorFormatter.java:94)
	at reactor.test.ErrorFormatter.fail(ErrorFormatter.java:64)
	at reactor.test.ErrorFormatter.failOptional(ErrorFormatter.java:79)
	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.checkCountMismatch(DefaultStepVerifierBuilder.java:1223)
	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onSignalCount(DefaultStepVerifierBuilder.java:1454)
	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onExpectation(DefaultStepVerifierBuilder.java:1306)
	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onError(DefaultStepVerifierBuilder.java:996)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.FluxTake$TakeFuseableSubscriber.onError(FluxTake.java:415)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:193)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onError(MonoCollectList.java:106)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:782)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:556)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:536)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.innerError(FluxFlatMap.java:803)
	at reactor.core.publisher.FluxFlatMap$FlatMapInner.onError(FluxFlatMap.java:942)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.MonoSingle$SingleSubscriber.onError(MonoSingle.java:141)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.FluxTake$TakeFuseableSubscriber.onError(FluxTake.java:415)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:782)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:556)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:536)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.innerError(FluxFlatMap.java:803)
	at reactor.core.publisher.FluxFlatMap$FlatMapInner.onError(FluxFlatMap.java:942)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onError(FluxMapFuseable.java:134)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:135)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1219)
	at reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onComplete(MonoCollectList.java:117)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:388)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:786)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:556)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:536)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:422)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:388)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:265)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:201)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:463)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:447)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:139)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:63)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:164)
	at reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:164)
	at reactor.core.publisher.MonoCollectList.subscribe(MonoCollectList.java:59)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1219)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1219)
	at reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onComplete(MonoCollectList.java:117)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:388)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:786)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:556)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:536)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:422)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:388)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:265)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:201)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:463)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:447)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:139)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:63)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:164)
	at reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:164)
	at reactor.core.publisher.MonoCollectList.subscribe(MonoCollectList.java:59)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1219)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
	at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:178)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:50)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:27)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
	at ✽.Then application send to [peer ip: "localhost", peer port: "8983"] and receive the following messages for torrent: "multiple-active-seeders-torrent-1.torrent","torrents-test":(cucumber/CommunicateWithFakePeers.feature:8)

| multiple-active-seeders-torrent-1.torrent | torrents-test |  Time elapsed: 0.006 sec  <<< FAILURE!
java.lang.AssertionError: expectation "expectNextCount(1)" failed (expected: count = 1; actual: counted = 0; signal: onError(java.lang.Exception: FileSystemLinkImpl object not exist.))
	at reactor.test.ErrorFormatter.assertionError(ErrorFormatter.java:105)
	at reactor.test.ErrorFormatter.failPrefix(ErrorFormatter.java:94)
	at reactor.test.ErrorFormatter.fail(ErrorFormatter.java:64)
	at reactor.test.ErrorFormatter.failOptional(ErrorFormatter.java:79)
	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.checkCountMismatch(DefaultStepVerifierBuilder.java:1223)
	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onSignalCount(DefaultStepVerifierBuilder.java:1454)
	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onExpectation(DefaultStepVerifierBuilder.java:1306)
	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onError(DefaultStepVerifierBuilder.java:996)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.FluxTake$TakeFuseableSubscriber.onError(FluxTake.java:415)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:193)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onError(MonoCollectList.java:106)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:782)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:556)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:536)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.innerError(FluxFlatMap.java:803)
	at reactor.core.publisher.FluxFlatMap$FlatMapInner.onError(FluxFlatMap.java:942)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.MonoSingle$SingleSubscriber.onError(MonoSingle.java:141)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.FluxTake$TakeFuseableSubscriber.onError(FluxTake.java:415)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:782)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:556)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:536)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.innerError(FluxFlatMap.java:803)
	at reactor.core.publisher.FluxFlatMap$FlatMapInner.onError(FluxFlatMap.java:942)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onError(FluxMapFuseable.java:134)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:383)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:135)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1219)
	at reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onComplete(MonoCollectList.java:117)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:388)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:786)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:556)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:536)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:422)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:388)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:265)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:201)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:463)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:447)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:139)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:63)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:164)
	at reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:164)
	at reactor.core.publisher.MonoCollectList.subscribe(MonoCollectList.java:59)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1219)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1219)
	at reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onComplete(MonoCollectList.java:117)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:388)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:786)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:556)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:536)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:422)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:388)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:265)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:201)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:463)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:447)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:139)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:63)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:164)
	at reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:164)
	at reactor.core.publisher.MonoCollectList.subscribe(MonoCollectList.java:59)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1219)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:378)
	at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:178)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:50)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:27)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
	at ✽.Then application send to [peer ip: "localhost", peer port: "8983"] and receive the following messages for torrent: "multiple-active-seeders-torrent-1.torrent","torrents-test":(cucumber/CommunicateWithFakePeers.feature:8)


Results :

Failed tests: 
  expectation "expectNextCount(1)" failed (expected: count = 1; actual: counted = 0; signal: onError(java.lang.Exception: FileSystemLinkImpl object not exist.))
  expectation "expectNextCount(1)" failed (expected: count = 1; actual: counted = 0; signal: onError(java.lang.Exception: FileSystemLinkImpl object not exist.))

Tests run: 287, Failures: 2, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 7.345 s
[INFO] Finished at: 2018-05-13T11:37:16+02:00
[INFO] Final Memory: 22M/919M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.16:test (default-test) on project torrentx: There are test failures.
[ERROR] 
[ERROR] Please refer to /root/workspace/UniversityFinalProjects/TorrentX/378312924/target/surefire-reports for the individual test results.
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
