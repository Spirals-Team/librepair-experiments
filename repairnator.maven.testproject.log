[INFO] Scanning for projects...
[INFO] Inspecting build with total of 1 modules...
[INFO] Installing Nexus Staging features:
[INFO]   ... total of 1 executions of maven-deploy-plugin replaced with nexus-staging-maven-plugin
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Spoon Core 6.0.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-enforcer-plugin:1.4.1:enforce (enforce-maven) @ spoon-core ---
[INFO] Skipping Rule Enforcement.
[INFO] 
[INFO] --- maven-enforcer-plugin:1.4.1:enforce (enforce-bytecode-version) @ spoon-core ---
[INFO] Skipping Rule Enforcement.
[INFO] 
[INFO] --- jacoco-maven-plugin:0.7.5.201505241946:prepare-agent (default) @ spoon-core ---
[INFO] argLine set to -javaagent:/root/./workspace/INRIA/spoon/292059346/.m2/org/jacoco/org.jacoco.agent/0.7.5.201505241946/org.jacoco.agent-0.7.5.201505241946-runtime.jar=destfile=/root/workspace/INRIA/spoon/292059346/target/jacoco.exec
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ spoon-core ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 3 resources
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ spoon-core ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 516 source files to /root/workspace/INRIA/spoon/292059346/target/classes
[WARNING] /root/workspace/INRIA/spoon/292059346/src/main/java/spoon/reflect/factory/CodeFactory.java: Some input files use unchecked or unsafe operations.
[WARNING] /root/workspace/INRIA/spoon/292059346/src/main/java/spoon/reflect/factory/CodeFactory.java: Recompile with -Xlint:unchecked for details.
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ spoon-core ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 134 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ spoon-core ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.19.1:test (default-test) @ spoon-core ---
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.19.1/surefire-junit4-2.19.1.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.19.1/surefire-junit4-2.19.1.pom (4 KB at 6.7 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.19.1/surefire-providers-2.19.1.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.19.1/surefire-providers-2.19.1.pom (3 KB at 96.3 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.19.1/surefire-junit4-2.19.1.jar
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.19.1/surefire-junit4-2.19.1.jar (74 KB at 1169.1 KB/sec)

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running spoon.reflect.ast.AstCheckerTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 15.716 sec - in spoon.reflect.ast.AstCheckerTest
Running spoon.reflect.ast.CloneTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 11.351 sec - in spoon.reflect.ast.CloneTest
Running spoon.reflect.declaration.UnknownDeclarationTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.081 sec - in spoon.reflect.declaration.UnknownDeclarationTest
Running spoon.reflect.declaration.CtTypeInformationTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.391 sec - in spoon.reflect.declaration.CtTypeInformationTest
Running spoon.reflect.visitor.CtInheritanceScannerMethodsTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.151 sec - in spoon.reflect.visitor.CtInheritanceScannerMethodsTest
Running spoon.reflect.visitor.CtScannerTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 8.151 sec - in spoon.reflect.visitor.CtScannerTest
Running spoon.reflect.visitor.CtInheritanceScannerTest
Tests run: 0, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.014 sec - in spoon.reflect.visitor.CtInheritanceScannerTest
Running spoon.reflect.visitor.CtVisitorTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.667 sec - in spoon.reflect.visitor.CtVisitorTest
Running spoon.LauncherTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.314 sec - in spoon.LauncherTest
Running spoon.test.limits.utils.InternalTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.108 sec - in spoon.test.limits.utils.InternalTest
Running spoon.test.parameters.ParameterTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.35 sec - in spoon.test.parameters.ParameterTest
Running spoon.test.pkg.PackageTest
Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.843 sec - in spoon.test.pkg.PackageTest
Running spoon.test.reference.CloneReferenceTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.132 sec - in spoon.test.reference.CloneReferenceTest
Running spoon.test.reference.VariableAccessTest
Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.556 sec - in spoon.test.reference.VariableAccessTest
Running spoon.test.reference.ExecutableReferenceGenericTest
Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.566 sec - in spoon.test.reference.ExecutableReferenceGenericTest
Running spoon.test.reference.ElasticsearchStackoverflowTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.113 sec - in spoon.test.reference.ElasticsearchStackoverflowTest
Running spoon.test.reference.AnnotationFieldReferenceTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.041 sec - in spoon.test.reference.AnnotationFieldReferenceTest
Running spoon.test.reference.TypeReferenceTest
Tests run: 28, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.579 sec - in spoon.test.reference.TypeReferenceTest
Running spoon.test.reference.ExecutableReferenceTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.426 sec - in spoon.test.reference.ExecutableReferenceTest
Running spoon.test.exceptions.ExceptionTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.447 sec - in spoon.test.exceptions.ExceptionTest
Running spoon.test.prettyprinter.QualifiedThisRefTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.192 sec - in spoon.test.prettyprinter.QualifiedThisRefTest
Running spoon.test.prettyprinter.LinesTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.475 sec - in spoon.test.prettyprinter.LinesTest
Running spoon.test.prettyprinter.PrinterTest
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.437 sec - in spoon.test.prettyprinter.PrinterTest
Running spoon.test.prettyprinter.DefaultPrettyPrinterTest
Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.714 sec - in spoon.test.prettyprinter.DefaultPrettyPrinterTest
Running spoon.test.reflect.visitor.ReferenceQueryTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.048 sec - in spoon.test.reflect.visitor.ReferenceQueryTest
Running spoon.test.method_overriding.MethodOverriddingTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.12 sec - in spoon.test.method_overriding.MethodOverriddingTest
Running spoon.test.factory.AnnotationFactoryTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.039 sec - in spoon.test.factory.AnnotationFactoryTest
Running spoon.test.factory.ClassFactoryTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.017 sec - in spoon.test.factory.ClassFactoryTest
Running spoon.test.factory.FieldFactoryTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.134 sec - in spoon.test.factory.FieldFactoryTest
Running spoon.test.factory.TypeFactoryTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.107 sec - in spoon.test.factory.TypeFactoryTest
Running spoon.test.factory.CodeFactoryTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec - in spoon.test.factory.CodeFactoryTest
Running spoon.test.factory.ExecutableFactoryTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in spoon.test.factory.ExecutableFactoryTest
Running spoon.test.factory.FactoryTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.825 sec - in spoon.test.factory.FactoryTest
Running spoon.test.factory.ConstructorFactoryTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.086 sec - in spoon.test.factory.ConstructorFactoryTest
Running spoon.test.comment.CommentTest
Tests run: 15, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 18.906 sec - in spoon.test.comment.CommentTest
Running spoon.test.strings.StringLiteralTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.05 sec - in spoon.test.strings.StringLiteralTest
Running spoon.test.strings.StringTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.042 sec - in spoon.test.strings.StringTest
Running spoon.test.jdtimportbuilder.ImportBuilderTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.27 sec - in spoon.test.jdtimportbuilder.ImportBuilderTest
Running spoon.test.control.ControlTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.082 sec - in spoon.test.control.ControlTest
Running spoon.test.ctCase.SwitchCaseTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.083 sec - in spoon.test.ctCase.SwitchCaseTest
Running spoon.test.casts.CastTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.237 sec - in spoon.test.casts.CastTest
Running spoon.test.method.MethodTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.137 sec - in spoon.test.method.MethodTest
Running spoon.test.arrays.ArraysTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.269 sec - in spoon.test.arrays.ArraysTest
Running spoon.test.filters.CUFilterTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.129 sec - in spoon.test.filters.CUFilterTest
Running spoon.test.filters.FilterTest
2017-10-24 15:12:53,070 INFO spoon.Launcher - Spoon version 6.0.0-SNAPSHOT
2017-10-24 15:12:53,072 INFO spoon.Launcher - running Spoon...
2017-10-24 15:12:53,072 INFO spoon.Launcher - start processing...
2017-10-24 15:12:53,123 INFO spoon.Launcher - end of processing: 
2017-10-24 15:12:53,123 INFO spoon.Launcher - no errors, no warnings
2017-10-24 15:12:53,349 INFO spoon.Launcher - Spoon version 6.0.0-SNAPSHOT
2017-10-24 15:12:53,349 INFO spoon.Launcher - running Spoon...
2017-10-24 15:12:53,349 INFO spoon.Launcher - start processing...
2017-10-24 15:12:53,399 INFO spoon.Launcher - end of processing: 
2017-10-24 15:12:53,399 INFO spoon.Launcher - no errors, no warnings
2017-10-24 15:12:53,572 INFO spoon.Launcher - Spoon version 6.0.0-SNAPSHOT
2017-10-24 15:12:53,572 INFO spoon.Launcher - running Spoon...
2017-10-24 15:12:53,572 INFO spoon.Launcher - start processing...
2017-10-24 15:12:53,622 INFO spoon.Launcher - end of processing: 
2017-10-24 15:12:53,622 INFO spoon.Launcher - no errors, no warnings
2017-10-24 15:12:53,844 INFO spoon.Launcher - Spoon version 6.0.0-SNAPSHOT
2017-10-24 15:12:53,845 INFO spoon.Launcher - running Spoon...
2017-10-24 15:12:53,845 INFO spoon.Launcher - start processing...
2017-10-24 15:12:53,894 INFO spoon.Launcher - end of processing: 
2017-10-24 15:12:53,894 INFO spoon.Launcher - no errors, no warnings
2017-10-24 15:12:54,035 INFO spoon.Launcher - Spoon version 6.0.0-SNAPSHOT
2017-10-24 15:12:54,036 INFO spoon.Launcher - running Spoon...
2017-10-24 15:12:54,036 INFO spoon.Launcher - start processing...
2017-10-24 15:12:54,085 INFO spoon.Launcher - end of processing: 
2017-10-24 15:12:54,086 INFO spoon.Launcher - no errors, no warnings
2017-10-24 15:12:54,767 INFO spoon.Launcher - Spoon version 6.0.0-SNAPSHOT
2017-10-24 15:12:54,767 INFO spoon.Launcher - running Spoon...
2017-10-24 15:12:54,768 INFO spoon.Launcher - start processing...
2017-10-24 15:12:54,817 INFO spoon.Launcher - end of processing: 
2017-10-24 15:12:54,817 INFO spoon.Launcher - no errors, no warnings
2017-10-24 15:12:55,142 INFO spoon.Launcher - Spoon version 6.0.0-SNAPSHOT
2017-10-24 15:12:55,143 INFO spoon.Launcher - running Spoon...
2017-10-24 15:12:55,143 INFO spoon.Launcher - start processing...
2017-10-24 15:12:55,193 INFO spoon.Launcher - end of processing: 
2017-10-24 15:12:55,193 INFO spoon.Launcher - no errors, no warnings
2017-10-24 15:12:55,427 INFO spoon.Launcher - Spoon version 6.0.0-SNAPSHOT
2017-10-24 15:12:55,427 INFO spoon.Launcher - running Spoon...
2017-10-24 15:12:55,428 INFO spoon.Launcher - start processing...
2017-10-24 15:12:55,477 INFO spoon.Launcher - end of processing: 
2017-10-24 15:12:55,478 INFO spoon.Launcher - no errors, no warnings
2017-10-24 15:12:55,526 INFO spoon.Launcher - Spoon version 6.0.0-SNAPSHOT
2017-10-24 15:12:55,527 INFO spoon.Launcher - running Spoon...
2017-10-24 15:12:55,527 INFO spoon.Launcher - start processing...
2017-10-24 15:12:55,577 INFO spoon.Launcher - end of processing: 
2017-10-24 15:12:55,577 INFO spoon.Launcher - no errors, no warnings
2017-10-24 15:12:55,740 INFO spoon.Launcher - Spoon version 6.0.0-SNAPSHOT
2017-10-24 15:12:55,740 INFO spoon.Launcher - running Spoon...
2017-10-24 15:12:55,741 INFO spoon.Launcher - start processing...
2017-10-24 15:12:55,790 INFO spoon.Launcher - end of processing: 
2017-10-24 15:12:55,791 INFO spoon.Launcher - no errors, no warnings
2017-10-24 15:12:55,922 INFO spoon.Launcher - Spoon version 6.0.0-SNAPSHOT
2017-10-24 15:12:55,923 INFO spoon.Launcher - running Spoon...
2017-10-24 15:12:55,923 INFO spoon.Launcher - start processing...
2017-10-24 15:12:55,990 INFO spoon.Launcher - end of processing: 
2017-10-24 15:12:55,991 INFO spoon.Launcher - no errors, no warnings
2017-10-24 15:12:56,041 INFO spoon.Launcher - Spoon version 6.0.0-SNAPSHOT
2017-10-24 15:12:56,041 INFO spoon.Launcher - running Spoon...
2017-10-24 15:12:56,041 INFO spoon.Launcher - start processing...
2017-10-24 15:12:56,091 INFO spoon.Launcher - end of processing: 
2017-10-24 15:12:56,092 INFO spoon.Launcher - no errors, no warnings
2017-10-24 15:12:56,480 INFO spoon.Launcher - Spoon version 6.0.0-SNAPSHOT
2017-10-24 15:12:56,481 INFO spoon.Launcher - running Spoon...
2017-10-24 15:12:56,481 INFO spoon.Launcher - start processing...
2017-10-24 15:12:56,530 INFO spoon.Launcher - end of processing: 
2017-10-24 15:12:56,531 INFO spoon.Launcher - no errors, no warnings
2017-10-24 15:12:56,845 INFO spoon.Launcher - Spoon version 6.0.0-SNAPSHOT
2017-10-24 15:12:56,846 INFO spoon.Launcher - running Spoon...
2017-10-24 15:12:56,846 INFO spoon.Launcher - start processing...
2017-10-24 15:12:56,895 INFO spoon.Launcher - end of processing: 
2017-10-24 15:12:56,896 INFO spoon.Launcher - no errors, no warnings
2017-10-24 15:12:56,901 INFO spoon.Launcher - Step filter CtClass only) spoon.reflect.CtModelImpl$CtRootPackage cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtRootPackage: unnamed package
2017-10-24 15:12:56,901 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtPackageImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageImpl: spoon
2017-10-24 15:12:56,902 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtPackageImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageImpl: spoon.test
2017-10-24 15:12:56,902 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtPackageImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageImpl: spoon.test.filters
2017-10-24 15:12:56,902 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtPackageImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageImpl: spoon.test.filters.testclasses
2017-10-24 15:12:56,903 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2017-10-24 15:12:56,903 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:56,903 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: public AbstractTostada() {
}
2017-10-24 15:12:56,903 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2017-10-24 15:12:56,904 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2017-10-24 15:12:56,904 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.lang.Object()
2017-10-24 15:12:56,905 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2017-10-24 15:12:56,905 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:56,909 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2017-10-24 15:12:56,909 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:56,909 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}
2017-10-24 15:12:56,910 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2017-10-24 15:12:56,910 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2017-10-24 15:12:56,910 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:56,910 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2017-10-24 15:12:56,911 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:56,911 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2017-10-24 15:12:56,911 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:56,911 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}
2017-10-24 15:12:56,912 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}
2017-10-24 15:12:56,912 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtNewClassImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtNewClassImpl: new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}
2017-10-24 15:12:56,913 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.AbstractTostada$1()
2017-10-24 15:12:56,925 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada.1
2017-10-24 15:12:56,925 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2017-10-24 15:12:56,926 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:56,926 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2017-10-24 15:12:56,926 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:56,928 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2017-10-24 15:12:56,929 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:56,930 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: 1() {
}
2017-10-24 15:12:56,931 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2017-10-24 15:12:56,931 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2017-10-24 15:12:56,932 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.Tostada()
2017-10-24 15:12:56,933 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2017-10-24 15:12:56,933 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:56,933 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2017-10-24 15:12:56,933 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:56,934 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
    super.prepare();
}
2017-10-24 15:12:56,934 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2017-10-24 15:12:56,934 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2017-10-24 15:12:56,934 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:56,934 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2017-10-24 15:12:56,935 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:56,935 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2017-10-24 15:12:56,935 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    super.prepare();
}
2017-10-24 15:12:56,935 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.prepare()
2017-10-24 15:12:56,935 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2017-10-24 15:12:56,936 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2017-10-24 15:12:56,937 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: prepare()
2017-10-24 15:12:56,937 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2017-10-24 15:12:56,938 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:56,939 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2017-10-24 15:12:56,943 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}
2017-10-24 15:12:56,943 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2017-10-24 15:12:56,943 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2017-10-24 15:12:56,943 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:56,943 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2017-10-24 15:12:56,944 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:56,944 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2017-10-24 15:12:56,944 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:56,944 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return super.make();
}
2017-10-24 15:12:56,947 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return super.make()
2017-10-24 15:12:56,947 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.make()
2017-10-24 15:12:56,947 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2017-10-24 15:12:56,947 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2017-10-24 15:12:56,949 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: make()
2017-10-24 15:12:56,949 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2017-10-24 15:12:56,950 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:56,950 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2017-10-24 15:12:56,950 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:56,950 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public abstract void prepare();
2017-10-24 15:12:56,951 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2017-10-24 15:12:56,952 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2017-10-24 15:12:56,952 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:56,953 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: public Antojito() {
}
2017-10-24 15:12:56,954 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2017-10-24 15:12:56,955 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2017-10-24 15:12:56,955 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.AbstractTostada()
2017-10-24 15:12:56,955 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2017-10-24 15:12:56,956 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:56,956 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2017-10-24 15:12:56,957 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:56,957 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}
2017-10-24 15:12:56,957 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2017-10-24 15:12:56,957 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2017-10-24 15:12:56,957 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:56,959 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2017-10-24 15:12:56,964 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:56,964 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2017-10-24 15:12:56,964 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    java.lang.System.out.println("Antojito");
}
2017-10-24 15:12:56,964 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println("Antojito")
2017-10-24 15:12:56,965 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2017-10-24 15:12:56,965 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2017-10-24 15:12:56,965 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2017-10-24 15:12:56,965 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:56,966 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2017-10-24 15:12:56,970 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2017-10-24 15:12:56,971 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:56,971 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2017-10-24 15:12:56,971 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2017-10-24 15:12:56,971 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(java.lang.String)
2017-10-24 15:12:56,971 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2017-10-24 15:12:56,971 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2017-10-24 15:12:56,972 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2017-10-24 15:12:56,972 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2017-10-24 15:12:56,972 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:56,972 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "Antojito"
2017-10-24 15:12:56,972 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2017-10-24 15:12:56,972 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:56,973 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void prepare(java.lang.String ingredient) {
}
2017-10-24 15:12:56,973 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2017-10-24 15:12:56,973 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtParameterImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtParameterImpl: java.lang.String ingredient
2017-10-24 15:12:56,973 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2017-10-24 15:12:56,973 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:56,973 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2017-10-24 15:12:56,974 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2017-10-24 15:12:56,976 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2017-10-24 15:12:56,977 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtFieldImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldImpl: private int myfield = 0;
2017-10-24 15:12:56,977 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2017-10-24 15:12:56,978 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 0
2017-10-24 15:12:56,978 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2017-10-24 15:12:56,979 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: FieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}
2017-10-24 15:12:56,980 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    super();
    this.myfield = 0;
}
2017-10-24 15:12:56,981 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2017-10-24 15:12:56,981 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.util.ArrayList()
2017-10-24 15:12:56,982 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2017-10-24 15:12:56,982 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2017-10-24 15:12:56,983 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2017-10-24 15:12:56,983 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2017-10-24 15:12:56,984 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtAssignmentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAssignmentImpl: this.myfield = 0
2017-10-24 15:12:56,984 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2017-10-24 15:12:56,984 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldWriteImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldWriteImpl: this.myfield
2017-10-24 15:12:56,985 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThisAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThisAccessImpl: this
2017-10-24 15:12:56,985 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2017-10-24 15:12:56,986 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:56,986 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2017-10-24 15:12:56,987 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2017-10-24 15:12:56,987 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:56,987 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: myfield
2017-10-24 15:12:56,988 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2017-10-24 15:12:56,988 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:56,988 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2017-10-24 15:12:56,989 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 0
2017-10-24 15:12:56,989 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2017-10-24 15:12:56,994 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}
2017-10-24 15:12:56,994 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2017-10-24 15:12:56,997 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}
2017-10-24 15:12:56,998 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtAssignmentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAssignmentImpl: myfield = super.size()
2017-10-24 15:12:56,998 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2017-10-24 15:12:57,001 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldWriteImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldWriteImpl: myfield
2017-10-24 15:12:57,001 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThisAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThisAccessImpl: 
2017-10-24 15:12:57,001 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2017-10-24 15:12:57,001 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:57,002 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2017-10-24 15:12:57,002 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2017-10-24 15:12:57,002 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:57,002 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: myfield
2017-10-24 15:12:57,002 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2017-10-24 15:12:57,002 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:57,003 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2017-10-24 15:12:57,009 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.size()
2017-10-24 15:12:57,010 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2017-10-24 15:12:57,011 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2017-10-24 15:12:57,011 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: size()
2017-10-24 15:12:57,012 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2017-10-24 15:12:57,012 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2017-10-24 15:12:57,013 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2017-10-24 15:12:57,013 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: java.lang.Object o = super.get(myfield)
2017-10-24 15:12:57,014 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2017-10-24 15:12:57,014 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:57,015 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.get(myfield)
2017-10-24 15:12:57,015 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2017-10-24 15:12:57,016 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2017-10-24 15:12:57,016 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: get(int)
2017-10-24 15:12:57,019 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2017-10-24 15:12:57,020 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2017-10-24 15:12:57,020 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2017-10-24 15:12:57,021 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:57,021 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2017-10-24 15:12:57,022 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: myfield
2017-10-24 15:12:57,023 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThisAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThisAccessImpl: 
2017-10-24 15:12:57,023 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2017-10-24 15:12:57,024 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:57,024 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2017-10-24 15:12:57,025 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2017-10-24 15:12:57,025 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:57,026 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: myfield
2017-10-24 15:12:57,026 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2017-10-24 15:12:57,027 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:57,027 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2017-10-24 15:12:57,028 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtInterfaceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInterfaceImpl: public interface ITostada {
    spoon.test.filters.testclasses.ITostada make();
}
2017-10-24 15:12:57,028 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: spoon.test.filters.testclasses.ITostada make();
2017-10-24 15:12:57,029 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2017-10-24 15:12:57,029 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:57,030 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2017-10-24 15:12:57,030 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:57,031 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: public SubTostada() {
}
2017-10-24 15:12:57,031 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2017-10-24 15:12:57,032 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2017-10-24 15:12:57,032 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.Tostada()
2017-10-24 15:12:57,033 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2017-10-24 15:12:57,033 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:57,034 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2017-10-24 15:12:57,034 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:57,035 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}
2017-10-24 15:12:57,036 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2017-10-24 15:12:57,036 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2017-10-24 15:12:57,037 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:57,037 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2017-10-24 15:12:57,038 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:57,038 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2017-10-24 15:12:57,039 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}
2017-10-24 15:12:57,040 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println("SubTostada")
2017-10-24 15:12:57,040 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2017-10-24 15:12:57,041 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2017-10-24 15:12:57,041 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2017-10-24 15:12:57,042 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:57,042 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2017-10-24 15:12:57,043 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2017-10-24 15:12:57,043 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:57,044 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2017-10-24 15:12:57,044 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2017-10-24 15:12:57,045 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(java.lang.String)
2017-10-24 15:12:57,045 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2017-10-24 15:12:57,046 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2017-10-24 15:12:57,046 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2017-10-24 15:12:57,046 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2017-10-24 15:12:57,047 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:57,047 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "SubTostada"
2017-10-24 15:12:57,048 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2017-10-24 15:12:57,048 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:57,049 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.prepare()
2017-10-24 15:12:57,049 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2017-10-24 15:12:57,050 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2017-10-24 15:12:57,050 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: prepare()
2017-10-24 15:12:57,051 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2017-10-24 15:12:57,051 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:57,052 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2017-10-24 15:12:57,052 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2017-10-24 15:12:57,053 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:57,053 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: public Tacos() {
}
2017-10-24 15:12:57,054 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2017-10-24 15:12:57,054 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2017-10-24 15:12:57,055 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.lang.Object()
2017-10-24 15:12:57,055 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2017-10-24 15:12:57,056 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:57,056 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2017-10-24 15:12:57,057 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:57,057 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}
2017-10-24 15:12:57,058 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2017-10-24 15:12:57,059 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2017-10-24 15:12:57,059 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:57,060 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2017-10-24 15:12:57,060 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:57,061 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2017-10-24 15:12:57,061 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:57,061 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return null;
}
2017-10-24 15:12:57,062 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return null
2017-10-24 15:12:57,063 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: null
2017-10-24 15:12:57,063 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: <nulltype>
2017-10-24 15:12:57,064 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}
2017-10-24 15:12:57,064 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2017-10-24 15:12:57,065 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}
2017-10-24 15:12:57,066 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()
2017-10-24 15:12:57,066 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList<java.lang.String>
2017-10-24 15:12:57,066 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2017-10-24 15:12:57,067 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2017-10-24 15:12:57,067 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:57,068 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtConstructorCallImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorCallImpl: new java.util.ArrayList<java.lang.String>()
2017-10-24 15:12:57,068 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.util.ArrayList()
2017-10-24 15:12:57,069 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2017-10-24 15:12:57,069 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2017-10-24 15:12:57,070 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList<java.lang.String>
2017-10-24 15:12:57,070 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2017-10-24 15:12:57,071 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2017-10-24 15:12:57,071 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:57,072 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: strings.size()
2017-10-24 15:12:57,072 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: strings
2017-10-24 15:12:57,075 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: strings
2017-10-24 15:12:57,076 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList<java.lang.String>
2017-10-24 15:12:57,077 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2017-10-24 15:12:57,077 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2017-10-24 15:12:57,078 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:57,078 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: size()
2017-10-24 15:12:57,078 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2017-10-24 15:12:57,079 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2017-10-24 15:12:57,079 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2017-10-24 15:12:57,080 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2017-10-24 15:12:57,080 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:57,081 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: public Tostada() {
}
2017-10-24 15:12:57,085 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2017-10-24 15:12:57,085 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2017-10-24 15:12:57,086 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.AbstractTostada()
2017-10-24 15:12:57,086 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2017-10-24 15:12:57,087 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:57,087 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2017-10-24 15:12:57,088 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:57,088 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}
2017-10-24 15:12:57,089 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2017-10-24 15:12:57,090 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2017-10-24 15:12:57,090 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:57,091 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2017-10-24 15:12:57,091 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:57,091 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2017-10-24 15:12:57,092 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:57,092 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}
2017-10-24 15:12:57,093 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}
2017-10-24 15:12:57,095 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtNewClassImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtNewClassImpl: new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}
2017-10-24 15:12:57,095 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.Tostada$1()
2017-10-24 15:12:57,096 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada.1
2017-10-24 15:12:57,097 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2017-10-24 15:12:57,097 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:57,098 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2017-10-24 15:12:57,098 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:57,099 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2017-10-24 15:12:57,099 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:57,100 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: 1() {
}
2017-10-24 15:12:57,100 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2017-10-24 15:12:57,101 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2017-10-24 15:12:57,101 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.Tostada()
2017-10-24 15:12:57,102 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2017-10-24 15:12:57,102 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:57,102 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2017-10-24 15:12:57,103 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:57,103 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}
2017-10-24 15:12:57,104 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2017-10-24 15:12:57,104 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2017-10-24 15:12:57,105 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:57,105 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2017-10-24 15:12:57,106 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:57,106 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2017-10-24 15:12:57,107 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    int a = 3;
    super.prepare();
}
2017-10-24 15:12:57,107 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: int a = 3
2017-10-24 15:12:57,108 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2017-10-24 15:12:57,108 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 3
2017-10-24 15:12:57,109 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2017-10-24 15:12:57,109 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.prepare()
2017-10-24 15:12:57,109 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2017-10-24 15:12:57,110 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2017-10-24 15:12:57,110 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: prepare()
2017-10-24 15:12:57,111 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2017-10-24 15:12:57,111 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2017-10-24 15:12:57,112 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2017-10-24 15:12:57,112 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
}
2017-10-24 15:12:57,113 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2017-10-24 15:12:57,113 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2017-10-24 15:12:57,113 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:57,114 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2017-10-24 15:12:57,114 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2017-10-24 15:12:57,115 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2017-10-24 15:12:57,115 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
Tests run: 41, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.229 sec - in spoon.test.filters.FilterTest
Running spoon.test.initializers.InitializerTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.092 sec - in spoon.test.initializers.InitializerTest
Running spoon.test.trycatch.TryCatchTest
Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.453 sec - in spoon.test.trycatch.TryCatchTest
Running spoon.test.generics.GenericsTest
Tests run: 43, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.309 sec - in spoon.test.generics.GenericsTest
Running spoon.test.visibility.VisibilityTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.933 sec - in spoon.test.visibility.VisibilityTest
Running spoon.test.ctClass.CtClassTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.559 sec - in spoon.test.ctClass.CtClassTest
Running spoon.test.annotation.AnnotationTest
Tests run: 41, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.887 sec - in spoon.test.annotation.AnnotationTest
Running spoon.test.annotation.AnnotationLoopTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.058 sec - in spoon.test.annotation.AnnotationLoopTest
Running spoon.test.annotation.AnnotationValuesTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.154 sec - in spoon.test.annotation.AnnotationValuesTest
Running spoon.test.replace.ReplaceParametrizedTest
Tests run: 73, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.315 sec - in spoon.test.replace.ReplaceParametrizedTest
Running spoon.test.replace.ReplaceTest
Tests run: 17, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.24 sec - in spoon.test.replace.ReplaceTest
Running spoon.test.processing.ProcessingTest
Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.493 sec - in spoon.test.processing.ProcessingTest
Running spoon.test.api.APITest
Tests run: 15, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 10.263 sec - in spoon.test.api.APITest
Running spoon.test.api.NoClasspathTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.115 sec - in spoon.test.api.NoClasspathTest
Running spoon.test.api.FileSystemFolderTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec - in spoon.test.api.FileSystemFolderTest
Running spoon.test.api.MetamodelTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.934 sec - in spoon.test.api.MetamodelTest
Running spoon.test.constructor.ConstructorTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.344 sec - in spoon.test.constructor.ConstructorTest
Running spoon.test.support.ResourceTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.184 sec - in spoon.test.support.ResourceTest
Running spoon.test.template.TemplateClassAccessTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.083 sec - in spoon.test.template.TemplateClassAccessTest
Running spoon.test.template.TemplateInvocationSubstitutionTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.108 sec - in spoon.test.template.TemplateInvocationSubstitutionTest
Running spoon.test.template.TemplateArrayAccessTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.088 sec - in spoon.test.template.TemplateArrayAccessTest
Running spoon.test.template.TemplateTest
0
Tests run: 24, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.142 sec - in spoon.test.template.TemplateTest
Running spoon.test.template.TemplateEnumAccessTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.091 sec - in spoon.test.template.TemplateEnumAccessTest
Running spoon.test.template.TemplateReplaceReturnTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.092 sec - in spoon.test.template.TemplateReplaceReturnTest
Running spoon.test.literal.LiteralTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.546 sec - in spoon.test.literal.LiteralTest
Running spoon.test.fieldaccesses.FieldAccessTest
Tests run: 16, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.745 sec - in spoon.test.fieldaccesses.FieldAccessTest
Running spoon.test.compilationunit.GetBinaryFilesTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.408 sec - in spoon.test.compilationunit.GetBinaryFilesTest
Running spoon.test.compilationunit.TestEncoding
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.053 sec - in spoon.test.compilationunit.TestEncoding
Running spoon.test.refactoring.MethodsRefactoringTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.835 sec - in spoon.test.refactoring.MethodsRefactoringTest
Running spoon.test.refactoring.RefactoringTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.48 sec - in spoon.test.refactoring.RefactoringTest
Running spoon.test.refactoring.CtRenameLocalVariableRefactoringTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 12.388 sec - in spoon.test.refactoring.CtRenameLocalVariableRefactoringTest
Running spoon.test.ctBlock.TestCtBlock
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.123 sec - in spoon.test.ctBlock.TestCtBlock
Running spoon.test.field.FieldTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.122 sec - in spoon.test.field.FieldTest
Running spoon.test.labels.TestLabels
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.048 sec - in spoon.test.labels.TestLabels
Running spoon.test.OutputTypeTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec - in spoon.test.OutputTypeTest
Running spoon.test.ctBodyHolder.CtBodyHolderTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.322 sec - in spoon.test.ctBodyHolder.CtBodyHolderTest
Running spoon.test.javadoc.JavaDocTest
Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.103 sec <<< FAILURE! - in spoon.test.javadoc.JavaDocTest
testJavaDocReprint(spoon.test.javadoc.JavaDocTest)  Time elapsed: 0.059 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...CtAnnotationType<?> [getOrC]reate(CtPackage owne...> but was:<...CtAnnotationType<?> [c]reate(CtPackage owne...>
	at spoon.test.javadoc.JavaDocTest.testJavaDocReprint(JavaDocTest.java:30)

Running spoon.test.constructorcallnewclass.ConstructorCallTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.302 sec - in spoon.test.constructorcallnewclass.ConstructorCallTest
Running spoon.test.constructorcallnewclass.NewClassTest
Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.559 sec - in spoon.test.constructorcallnewclass.NewClassTest
Running spoon.test.variable.AccessTest
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.382 sec - in spoon.test.variable.AccessTest
Running spoon.test.variable.AccessFullyQualifiedFieldTest
Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.75 sec - in spoon.test.variable.AccessFullyQualifiedFieldTest
Running spoon.test.delete.DeleteTest
Tests run: 14, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.622 sec - in spoon.test.delete.DeleteTest
Running spoon.test.query_function.VariableReferencesTest
2017-10-24 15:13:50,050 INFO spoon.Launcher - Spoon version 6.0.0-SNAPSHOT
2017-10-24 15:13:50,050 INFO spoon.Launcher - running Spoon...
2017-10-24 15:13:50,050 INFO spoon.Launcher - start processing...
2017-10-24 15:13:50,106 INFO spoon.Launcher - end of processing: 
2017-10-24 15:13:50,107 INFO spoon.Launcher - no errors, no warnings
2017-10-24 15:13:50,154 INFO spoon.Launcher - Spoon version 6.0.0-SNAPSHOT
2017-10-24 15:13:50,154 INFO spoon.Launcher - running Spoon...
2017-10-24 15:13:50,154 INFO spoon.Launcher - start processing...
2017-10-24 15:13:50,218 INFO spoon.Launcher - end of processing: 
2017-10-24 15:13:50,219 INFO spoon.Launcher - no errors, no warnings
2017-10-24 15:13:50,268 INFO spoon.Launcher - Spoon version 6.0.0-SNAPSHOT
2017-10-24 15:13:50,268 INFO spoon.Launcher - running Spoon...
2017-10-24 15:13:50,268 INFO spoon.Launcher - start processing...
2017-10-24 15:13:50,323 INFO spoon.Launcher - end of processing: 
2017-10-24 15:13:50,323 INFO spoon.Launcher - no errors, no warnings
2017-10-24 15:13:50,329 INFO spoon.Launcher - Spoon version 6.0.0-SNAPSHOT
2017-10-24 15:13:50,329 INFO spoon.Launcher - running Spoon...
2017-10-24 15:13:50,329 INFO spoon.Launcher - start processing...
2017-10-24 15:13:50,383 INFO spoon.Launcher - end of processing: 
2017-10-24 15:13:50,383 INFO spoon.Launcher - no errors, no warnings
2017-10-24 15:13:50,413 INFO spoon.Launcher - Spoon version 6.0.0-SNAPSHOT
2017-10-24 15:13:50,413 INFO spoon.Launcher - running Spoon...
2017-10-24 15:13:50,413 INFO spoon.Launcher - start processing...
2017-10-24 15:13:50,466 INFO spoon.Launcher - end of processing: 
2017-10-24 15:13:50,466 INFO spoon.Launcher - no errors, no warnings
2017-10-24 15:13:50,477 INFO spoon.Launcher - Spoon version 6.0.0-SNAPSHOT
2017-10-24 15:13:50,477 INFO spoon.Launcher - running Spoon...
2017-10-24 15:13:50,477 INFO spoon.Launcher - start processing...
2017-10-24 15:13:50,531 INFO spoon.Launcher - end of processing: 
2017-10-24 15:13:50,531 INFO spoon.Launcher - no errors, no warnings
2017-10-24 15:13:50,542 INFO spoon.Launcher - Spoon version 6.0.0-SNAPSHOT
2017-10-24 15:13:50,542 INFO spoon.Launcher - running Spoon...
2017-10-24 15:13:50,542 INFO spoon.Launcher - start processing...
2017-10-24 15:13:50,595 INFO spoon.Launcher - end of processing: 
2017-10-24 15:13:50,595 INFO spoon.Launcher - no errors, no warnings
2017-10-24 15:13:50,639 INFO spoon.Launcher - Spoon version 6.0.0-SNAPSHOT
2017-10-24 15:13:50,639 INFO spoon.Launcher - running Spoon...
2017-10-24 15:13:50,639 INFO spoon.Launcher - start processing...
2017-10-24 15:13:50,692 INFO spoon.Launcher - end of processing: 
2017-10-24 15:13:50,693 INFO spoon.Launcher - no errors, no warnings
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.719 sec - in spoon.test.query_function.VariableReferencesTest
Running spoon.test.query_function.VariableReferencesModelTest
Tests run: 15, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.01 sec - in spoon.test.query_function.VariableReferencesModelTest
Running spoon.test.parent.SetParentTest
Tests run: 61, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.064 sec - in spoon.test.parent.SetParentTest
Running spoon.test.parent.ParentTest
Tests run: 11, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 0.622 sec - in spoon.test.parent.ParentTest
Running spoon.test.parent.TopLevelTypeTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.045 sec - in spoon.test.parent.TopLevelTypeTest
Running spoon.test.parent.NullParentTest
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.341 sec - in spoon.test.parent.NullParentTest
Running spoon.test.parent.ParentContractTest
Tests run: 61, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.614 sec - in spoon.test.parent.ParentContractTest
Running spoon.test.logging.LogTest
2017-10-24 15:13:52,509 DEBUG spoon.Launcher - output: spooned
2017-10-24 15:13:52,509 DEBUG spoon.Launcher - destination: /root/workspace/INRIA/spoon/292059346/spooned-classes
2017-10-24 15:13:52,510 DEBUG spoon.Launcher - source classpath: null
2017-10-24 15:13:52,510 DEBUG spoon.Launcher - template classpath: []
2017-10-24 15:13:52,511 INFO spoon.Launcher - Log info
2017-10-24 15:13:52,511 WARN spoon.Launcher - Log warn
2017-10-24 15:13:52,511 ERROR spoon.Launcher - Log error
2017-10-24 15:13:52,512 DEBUG spoon.Launcher - Log debug
2017-10-24 15:13:52,513 DEBUG spoon.Launcher - output: spooned
2017-10-24 15:13:52,513 DEBUG spoon.Launcher - destination: /root/workspace/INRIA/spoon/292059346/spooned-classes
2017-10-24 15:13:52,513 DEBUG spoon.Launcher - source classpath: null
2017-10-24 15:13:52,513 DEBUG spoon.Launcher - template classpath: []
2017-10-24 15:13:52,514 INFO spoon.Launcher - Log info
2017-10-24 15:13:52,514 WARN spoon.Launcher - Log warn
2017-10-24 15:13:52,514 ERROR spoon.Launcher - Log error
2017-10-24 15:13:52,514 DEBUG spoon.Launcher - Log debug
2017-10-24 15:13:52,515 INFO spoon.Launcher - Log info
2017-10-24 15:13:52,516 WARN spoon.Launcher - Log warn
2017-10-24 15:13:52,516 ERROR spoon.Launcher - Log error
2017-10-24 15:13:52,517 WARN spoon.Launcher - Log warn
2017-10-24 15:13:52,517 ERROR spoon.Launcher - Log error
2017-10-24 15:13:52,519 ERROR spoon.Launcher - Log error
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.015 sec - in spoon.test.logging.LogTest
Running spoon.test.ctType.CtTypeTest
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.393 sec - in spoon.test.ctType.CtTypeTest
Running spoon.test.ctType.CtTypeParameterTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.115 sec - in spoon.test.ctType.CtTypeParameterTest
Running spoon.test.imports.ImportAndExtendWithPackageNameTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.04 sec - in spoon.test.imports.ImportAndExtendWithPackageNameTest
Running spoon.test.imports.ImportScannerTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.24 sec - in spoon.test.imports.ImportScannerTest
Running spoon.test.imports.ImportTest
Tests run: 41, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.674 sec - in spoon.test.imports.ImportTest
Running spoon.test.comparison.EqualTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.312 sec - in spoon.test.comparison.EqualTest
Running spoon.test.invocations.InvocationTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.085 sec - in spoon.test.invocations.InvocationTest
Running spoon.test.methodreference.MethodReferenceTest
Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.346 sec - in spoon.test.methodreference.MethodReferenceTest
Running spoon.test.lambda.LambdaTest
Tests run: 22, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.836 sec - in spoon.test.lambda.LambdaTest
Running spoon.test.ctElement.MetadataTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.042 sec - in spoon.test.ctElement.MetadataTest
Running spoon.test.ctElement.ElementTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec - in spoon.test.ctElement.ElementTest
Running spoon.test.jar.JarTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.119 sec - in spoon.test.jar.JarTest
Running spoon.test.intercession.IntercessionTest
Tests run: 8, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 4.918 sec - in spoon.test.intercession.IntercessionTest
Running spoon.test.intercession.IntercessionContractTest
Tests run: 94, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.447 sec - in spoon.test.intercession.IntercessionContractTest
Running spoon.test.intercession.RemoveTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.06 sec - in spoon.test.intercession.RemoveTest
Running spoon.test.intercession.insertBefore.InsertMethodsTest
Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.782 sec - in spoon.test.intercession.insertBefore.InsertMethodsTest
Running spoon.test.visitor.VisitorTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.04 sec - in spoon.test.visitor.VisitorTest
Running spoon.test.main.MainTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 63.178 sec - in spoon.test.main.MainTest
Running spoon.test.executable.ExecutableTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.125 sec - in spoon.test.executable.ExecutableTest
Running spoon.test.executable.ExecutableRefTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.264 sec - in spoon.test.executable.ExecutableRefTest
Running spoon.test.loop.LoopTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.087 sec - in spoon.test.loop.LoopTest
Running spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest
Tests run: 16, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.424 sec - in spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest
Running spoon.test.sourcePosition.SourcePositionTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.085 sec - in spoon.test.sourcePosition.SourcePositionTest
Running spoon.test.secondaryclasses.ClassesTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.273 sec - in spoon.test.secondaryclasses.ClassesTest
Running spoon.test.model.BlockTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.085 sec - in spoon.test.model.BlockTest
Running spoon.test.model.TypeTest
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.525 sec - in spoon.test.model.TypeTest
Running spoon.test.model.SwitchCaseTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.08 sec - in spoon.test.model.SwitchCaseTest
Running spoon.test.model.AnonymousExecutableTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.043 sec - in spoon.test.model.AnonymousExecutableTest
Running spoon.test.type.TypeTest
Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.642 sec - in spoon.test.type.TypeTest
Running spoon.test.condition.ConditionalTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.179 sec - in spoon.test.condition.ConditionalTest
Running spoon.test.compilation.CompilationTest
>> Hello: Bar <<
>> Hello: FooEx <<
>> Hello: IBar <<
>> Hello: SimpleProcessor <<
Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 7.169 sec - in spoon.test.compilation.CompilationTest
Running spoon.test.enums.EnumsTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.16 sec - in spoon.test.enums.EnumsTest
Running spoon.test.targeted.TargetedExpressionTest
Tests run: 17, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.767 sec - in spoon.test.targeted.TargetedExpressionTest
Running spoon.test.properties.PropertiesTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.049 sec - in spoon.test.properties.PropertiesTest
Running spoon.test.eval.EvalTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.307 sec - in spoon.test.eval.EvalTest
Running spoon.test.serializable.SerializableTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.225 sec - in spoon.test.serializable.SerializableTest
Running spoon.test.staticFieldAccess.StaticAccessTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.145 sec - in spoon.test.staticFieldAccess.StaticAccessTest
Running spoon.test.varargs.VarArgsTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.038 sec - in spoon.test.varargs.VarArgsTest
Running spoon.test.position.PositionTest
Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.386 sec - in spoon.test.position.PositionTest
Running spoon.test.architecture.SpoonArchitectureEnforcerTest
Tests run: 6, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 13.301 sec <<< FAILURE! - in spoon.test.architecture.SpoonArchitectureEnforcerTest
testFactorySubFactory(spoon.test.architecture.SpoonArchitectureEnforcerTest)  Time elapsed: 0.297 sec  <<< FAILURE!
java.lang.AssertionError: getOrCreateCtBlock(T extends spoon.reflect.code.CtStatement) is not present in the main factory
	at spoon.test.architecture.SpoonArchitectureEnforcerTest.testFactorySubFactory(SpoonArchitectureEnforcerTest.java:95)

Running spoon.test.interfaces.InterfaceTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.265 sec - in spoon.test.interfaces.InterfaceTest
Running spoon.test.snippets.SnippetTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.351 sec - in spoon.test.snippets.SnippetTest
Running spoon.test.signature.SignatureTest
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.649 sec - in spoon.test.signature.SignatureTest
Running spoon.test.path.PathTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.268 sec - in spoon.test.path.PathTest
Running spoon.processing.ProcessingTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.061 sec - in spoon.processing.ProcessingTest
Running spoon.processing.CtGenerationTest
Tests run: 3, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 34.781 sec <<< FAILURE! - in spoon.processing.CtGenerationTest
testGenerateCloneVisitor(spoon.processing.CtGenerationTest)  Time elapsed: 24.082 sec  <<< FAILURE!
org.junit.ComparisonFailure: 
CloneVisitor different expected:<...getFactory().Core().[createAnnotation());
        aCtAnnotation.setType(this.cloneHelper.clone(annotation.getType()));
        aCtAnnotation.setComments(this.cloneHelper.clone(annotation.getComments()));
        aCtAnnotation.setAnnotationType(this.cloneHelper.clone(annotation.getAnnotationType()));
        aCtAnnotation.setAnnotations(this.cloneHelper.clone(annotation.getAnnotations()));
        aCtAnnotation.setValues(this.cloneHelper.clone(annotation.getValues()));
        this.other = aCtAnnotation;
    }

    public <A extends java.lang.annotation.Annotation> void visitCtAnnotationType(final spoon.reflect.declaration.CtAnnotationType<A> annotationType) {
        spoon.reflect.declaration.CtAnnotationType<A> aCtAnnotationType = spoon.support.visitor.clone.CloneBuilder.build(this.builder, annotationType, annotationType.getFactory().Core().createAnnotationType());
        aCtAnnotationType.setAnnotations(this.cloneHelper.clone(annotationType.getAnnotations()));
        aCtAnnotationType.setTypeMembers(this.cloneHelper.clone(annotationType.getTypeMembers()));
        aCtAnnotationType.setComments(this.cloneHelper.clone(annotationType.getComments()));
        this.other = aCtAnnotationType;
    }

    public void visitCtAnonymousExecutable(final spoon.reflect.declaration.CtAnonymousExecutable anonymousExec) {
        spoon.reflect.declaration.CtAnonymousExecutable aCtAnonymousExecutable = spoon.support.visitor.clone.CloneBuilder.build(this.builder, anonymousExec, anonymousExec.getFactory().Core().createAnonymousExecutable());
        aCtAnonymousExecutable.setAnnotations(this.cloneHelper.clone(anonymousExec.getAnnotations()));
        aCtAnonymousExecutable.setBody(this.cloneHelper.clone(anonymousExec.getBody()));
        aCtAnonymousExecutable.setComments(this.cloneHelper.clone(anonymousExec.getComments()));
        this.other = aCtAnonymousExecutable;
    }

    @java.lang.Override
    public <T> void visitCtArrayRead(final spoon.reflect.code.CtArrayRead<T> arrayRead) {
        spoon.reflect.code.CtArrayRead<T> aCtArrayRead = spoon.support.visitor.clone.CloneBuilder.build(this.builder, arrayRead, arrayRead.getFactory().Core().createArrayRead());
        aCtArrayRead.setAnnotations(this.cloneHelper.clone(arrayRead.getAnnotations()));
        aCtArrayRead.setType(this.cloneHelper.clone(arrayRead.getType()));
        aCtArrayRead.setTypeCasts(this.cloneHelper.clone(arrayRead.getTypeCasts()));
        aCtArrayRead.setTarget(this.cloneHelper.clone(arrayRead.getTarget()));
        aCtArrayRead.setIndexExpression(this.cloneHelper.clone(arrayRead.getIndexExpression()));
        aCtArrayRead.setComments(this.cloneHelper.clone(arrayRead.getComments()));
        this.other = aCtArrayRead;
    }

    @java.lang.Override
    public <T> void visitCtArrayWrite(final spoon.reflect.code.CtArrayWrite<T> arrayWrite) {
        spoon.reflect.code.CtArrayWrite<T> aCtArrayWrite = spoon.support.visitor.clone.CloneBuilder.build(this.builder, arrayWrite, arrayWrite.getFactory().Core().createArrayWrite());
        aCtArrayWrite.setAnnotations(this.cloneHelper.clone(arrayWrite.getAnnotations()));
        aCtArrayWrite.setType(this.cloneHelper.clone(arrayWrite.getType()));
        aCtArrayWrite.setTypeCasts(this.cloneHelper.clone(arrayWrite.getTypeCasts()));
        aCtArrayWrite.setTarget(this.cloneHelper.clone(arrayWrite.getTarget()));
        aCtArrayWrite.setIndexExpression(this.cloneHelper.clone(arrayWrite.getIndexExpression()));
        aCtArrayWrite.setComments(this.cloneHelper.clone(arrayWrite.getComments()));
        this.other = aCtArrayWrite;
    }

    public <T> void visitCtArrayTypeReference(final spoon.reflect.reference.CtArrayTypeReference<T> reference) {
        spoon.reflect.reference.CtArrayTypeReference<T> aCtArrayTypeReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().createArrayTypeReference());
        aCtArrayTypeReference.setComments(this.cloneHelper.clone(reference.getComments()));
        aCtArrayTypeReference.setPackage(this.cloneHelper.clone(reference.getPackage()));
        aCtArrayTypeReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtArrayTypeReference.setComponentType(this.cloneHelper.clone(reference.getComponentType()));
        aCtArrayTypeReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));
        aCtArrayTypeReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.other = aCtArrayTypeReference;
    }

    public <T> void visitCtAssert(final spoon.reflect.code.CtAssert<T> asserted) {
        spoon.reflect.code.CtAssert<T> aCtAssert = spoon.support.visitor.clone.CloneBuilder.build(this.builder, asserted, asserted.getFactory().Core().createAssert());
        aCtAssert.setAnnotations(this.cloneHelper.clone(asserted.getAnnotations()));
        aCtAssert.setAssertExpression(this.cloneHelper.clone(asserted.getAssertExpression()));
        aCtAssert.setExpression(this.cloneHelper.clone(asserted.getExpression()));
        aCtAssert.setComments(this.cloneHelper.clone(asserted.getComments()));
        this.other = aCtAssert;
    }

    public <T, A extends T> void visitCtAssignment(final spoon.reflect.code.CtAssignment<T, A> assignement) {
        spoon.reflect.code.CtAssignment<T, A> aCtAssignment = spoon.support.visitor.clone.CloneBuilder.build(this.builder, assignement, assignement.getFactory().Core().createAssignment());
        aCtAssignment.setAnnotations(this.cloneHelper.clone(assignement.getAnnotations()));
        aCtAssignment.setType(this.cloneHelper.clone(assignement.getType()));
        aCtAssignment.setTypeCasts(this.cloneHelper.clone(assignement.getTypeCasts()));
        aCtAssignment.setAssigned(this.cloneHelper.clone(assignement.getAssigned()));
        aCtAssignment.setAssignment(this.cloneHelper.clone(assignement.getAssignment()));
        aCtAssignment.setComments(this.cloneHelper.clone(assignement.getComments()));
        this.other = aCtAssignment;
    }

    public <T> void visitCtBinaryOperator(final spoon.reflect.code.CtBinaryOperator<T> operator) {
        spoon.reflect.code.CtBinaryOperator<T> aCtBinaryOperator = spoon.support.visitor.clone.CloneBuilder.build(this.builder, operator, operator.getFactory().Core().createBinaryOperator());
        aCtBinaryOperator.setAnnotations(this.cloneHelper.clone(operator.getAnnotations()));
        aCtBinaryOperator.setType(this.cloneHelper.clone(operator.getType()));
        aCtBinaryOperator.setTypeCasts(this.cloneHelper.clone(operator.getTypeCasts()));
        aCtBinaryOperator.setLeftHandOperand(this.cloneHelper.clone(operator.getLeftHandOperand()));
        aCtBinaryOperator.setRightHandOperand(this.cloneHelper.clone(operator.getRightHandOperand()));
        aCtBinaryOperator.setComments(this.cloneHelper.clone(operator.getComments()));
        this.other = aCtBinaryOperator;
    }

    public <R> void visitCtBlock(final spoon.reflect.code.CtBlock<R> block) {
        spoon.reflect.code.CtBlock<R> aCtBlock = spoon.support.visitor.clone.CloneBuilder.build(this.builder, block, block.getFactory().Core().createBlock());
        aCtBlock.setAnnotations(this.cloneHelper.clone(block.getAnnotations()));
        aCtBlock.setStatements(this.cloneHelper.clone(block.getStatements()));
        aCtBlock.setComments(this.cloneHelper.clone(block.getComments()));
        this.other = aCtBlock;
    }

    public void visitCtBreak(final spoon.reflect.code.CtBreak breakStatement) {
        spoon.reflect.code.CtBreak aCtBreak = spoon.support.visitor.clone.CloneBuilder.build(this.builder, breakStatement, breakStatement.getFactory().Core().createBreak());
        aCtBreak.setAnnotations(this.cloneHelper.clone(breakStatement.getAnnotations()));
        aCtBreak.setComments(this.cloneHelper.clone(breakStatement.getComments()));
        this.other = aCtBreak;
    }

    public <S> void visitCtCase(final spoon.reflect.code.CtCase<S> caseStatement) {
        spoon.reflect.code.CtCase<S> aCtCase = spoon.support.visitor.clone.CloneBuilder.build(this.builder, caseStatement, caseStatement.getFactory().Core().createCase());
        aCtCase.setAnnotations(this.cloneHelper.clone(caseStatement.getAnnotations()));
        aCtCase.setCaseExpression(this.cloneHelper.clone(caseStatement.getCaseExpression()));
        aCtCase.setStatements(this.cloneHelper.clone(caseStatement.getStatements()));
        aCtCase.setComments(this.cloneHelper.clone(caseStatement.getComments()));
        this.other = aCtCase;
    }

    public void visitCtCatch(final spoon.reflect.code.CtCatch catchBlock) {
        spoon.reflect.code.CtCatch aCtCatch = spoon.support.visitor.clone.CloneBuilder.build(this.builder, catchBlock, catchBlock.getFactory().Core().createCatch());
        aCtCatch.setAnnotations(this.cloneHelper.clone(catchBlock.getAnnotations()));
        aCtCatch.setParameter(this.cloneHelper.clone(catchBlock.getParameter()));
        aCtCatch.setBody(this.cloneHelper.clone(catchBlock.getBody()));
        aCtCatch.setComments(this.cloneHelper.clone(catchBlock.getComments()));
        this.other = aCtCatch;
    }

    public <T> void visitCtClass(final spoon.reflect.declaration.CtClass<T> ctClass) {
        spoon.reflect.declaration.CtClass<T> aCtClass = spoon.support.visitor.clone.CloneBuilder.build(this.builder, ctClass, ctClass.getFactory().Core().createClass());
        aCtClass.setAnnotations(this.cloneHelper.clone(ctClass.getAnnotations()));
        aCtClass.setSuperclass(this.cloneHelper.clone(ctClass.getSuperclass()));
        aCtClass.setSuperInterfaces(this.cloneHelper.clone(ctClass.getSuperInterfaces()));
        aCtClass.setFormalCtTypeParameters(this.cloneHelper.clone(ctClass.getFormalCtTypeParameters()));
        aCtClass.setTypeMembers(this.cloneHelper.clone(ctClass.getTypeMembers()));
        aCtClass.setComments(this.cloneHelper.clone(ctClass.getComments()));
        this.other = aCtClass;
    }

    @java.lang.Override
    public void visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter typeParameter) {
        spoon.reflect.declaration.CtTypeParameter aCtTypeParameter = spoon.support.visitor.clone.CloneBuilder.build(this.builder, typeParameter, typeParameter.getFactory().Core().createTypeParameter());
        aCtTypeParameter.setAnnotations(this.cloneHelper.clone(typeParameter.getAnnotations()));
        aCtTypeParameter.setSuperclass(this.cloneHelper.clone(typeParameter.getSuperclass()));
        aCtTypeParameter.setComments(this.cloneHelper.clone(typeParameter.getComments()));
        this.other = aCtTypeParameter;
    }

    public <T> void visitCtConditional(final spoon.reflect.code.CtConditional<T> conditional) {
        spoon.reflect.code.CtConditional<T> aCtConditional = spoon.support.visitor.clone.CloneBuilder.build(this.builder, conditional, conditional.getFactory().Core().createConditional());
        aCtConditional.setType(this.cloneHelper.clone(conditional.getType()));
        aCtConditional.setAnnotations(this.cloneHelper.clone(conditional.getAnnotations()));
        aCtConditional.setCondition(this.cloneHelper.clone(conditional.getCondition()));
        aCtConditional.setThenExpression(this.cloneHelper.clone(conditional.getThenExpression()));
        aCtConditional.setElseExpression(this.cloneHelper.clone(conditional.getElseExpression()));
        aCtConditional.setComments(this.cloneHelper.clone(conditional.getComments()));
        aCtConditional.setTypeCasts(this.cloneHelper.clone(conditional.getTypeCasts()));
        this.other = aCtConditional;
    }

    public <T> void visitCtConstructor(final spoon.reflect.declaration.CtConstructor<T> c) {
        spoon.reflect.declaration.CtConstructor<T> aCtConstructor = spoon.support.visitor.clone.CloneBuilder.build(this.builder, c, c.getFactory().Core().createConstructor());
        aCtConstructor.setAnnotations(this.cloneHelper.clone(c.getAnnotations()));
        aCtConstructor.setParameters(this.cloneHelper.clone(c.getParameters()));
        aCtConstructor.setThrownTypes(this.cloneHelper.clone(c.getThrownTypes()));
        aCtConstructor.setFormalCtTypeParameters(this.cloneHelper.clone(c.getFormalCtTypeParameters()));
        aCtConstructor.setBody(this.cloneHelper.clone(c.getBody()));
        aCtConstructor.setComments(this.cloneHelper.clone(c.getComments()));
        this.other = aCtConstructor;
    }

    public void visitCtContinue(final spoon.reflect.code.CtContinue continueStatement) {
        spoon.reflect.code.CtContinue aCtContinue = spoon.support.visitor.clone.CloneBuilder.build(this.builder, continueStatement, continueStatement.getFactory().Core().createContinue());
        aCtContinue.setAnnotations(this.cloneHelper.clone(continueStatement.getAnnotations()));
        aCtContinue.setComments(this.cloneHelper.clone(continueStatement.getComments()));
        this.other = aCtContinue;
    }

    public void visitCtDo(final spoon.reflect.code.CtDo doLoop) {
        spoon.reflect.code.CtDo aCtDo = spoon.support.visitor.clone.CloneBuilder.build(this.builder, doLoop, doLoop.getFactory().Core().createDo());
        aCtDo.setAnnotations(this.cloneHelper.clone(doLoop.getAnnotations()));
        aCtDo.setLoopingExpression(this.cloneHelper.clone(doLoop.getLoopingExpression()));
        aCtDo.setBody(this.cloneHelper.clone(doLoop.getBody()));
        aCtDo.setComments(this.cloneHelper.clone(doLoop.getComments()));
        this.other = aCtDo;
    }

    public <T extends java.lang.Enum<?>> void visitCtEnum(final spoon.reflect.declaration.CtEnum<T> ctEnum) {
        spoon.reflect.declaration.CtEnum<T> aCtEnum = spoon.support.visitor.clone.CloneBuilder.build(this.builder, ctEnum, ctEnum.getFactory().Core().createEnum());
        aCtEnum.setAnnotations(this.cloneHelper.clone(ctEnum.getAnnotations()));
        aCtEnum.setSuperInterfaces(this.cloneHelper.clone(ctEnum.getSuperInterfaces()));
        aCtEnum.setTypeMembers(this.cloneHelper.clone(ctEnum.getTypeMembers()));
        aCtEnum.setEnumValues(this.cloneHelper.clone(ctEnum.getEnumValues()));
        aCtEnum.setComments(this.cloneHelper.clone(ctEnum.getComments()));
        this.other = aCtEnum;
    }

    public <T> void visitCtExecutableReference(final spoon.reflect.reference.CtExecutableReference<T> reference) {
        spoon.reflect.reference.CtExecutableReference<T> aCtExecutableReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().createExecutableReference());
        aCtExecutableReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtExecutableReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtExecutableReference.setParameters(this.cloneHelper.clone(reference.getParameters()));
        aCtExecutableReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));
        aCtExecutableReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        aCtExecutableReference.setComments(this.cloneHelper.clone(reference.getComments()));
        this.other = aCtExecutableReference;
    }

    public <T> void visitCtField(final spoon.reflect.declaration.CtField<T> f) {
        spoon.reflect.declaration.CtField<T> aCtField = spoon.support.visitor.clone.CloneBuilder.build(this.builder, f, f.getFactory().Core().createField());
        aCtField.setAnnotations(this.cloneHelper.clone(f.getAnnotations()));
        aCtField.setType(this.cloneHelper.clone(f.getType()));
        aCtField.setDefaultExpression(this.cloneHelper.clone(f.getDefaultExpression()));
        aCtField.setComments(this.cloneHelper.clone(f.getComments()));
        this.other = aCtField;
    }

    @java.lang.Override
    public <T> void visitCtEnumValue(final spoon.reflect.declaration.CtEnumValue<T> enumValue) {
        spoon.reflect.declaration.CtEnumValue<T> aCtEnumValue = spoon.support.visitor.clone.CloneBuilder.build(this.builder, enumValue, enumValue.getFactory().Core().createEnumValue());
        aCtEnumValue.setAnnotations(this.cloneHelper.clone(enumValue.getAnnotations()));
        aCtEnumValue.setType(this.cloneHelper.clone(enumValue.getType()));
        aCtEnumValue.setDefaultExpression(this.cloneHelper.clone(enumValue.getDefaultExpression()));
        aCtEnumValue.setComments(this.cloneHelper.clone(enumValue.getComments()));
        this.other = aCtEnumValue;
    }

    @java.lang.Override
    public <T> void visitCtThisAccess(final spoon.reflect.code.CtThisAccess<T> thisAccess) {
        spoon.reflect.code.CtThisAccess<T> aCtThisAccess = spoon.support.visitor.clone.CloneBuilder.build(this.builder, thisAccess, thisAccess.getFactory().Core().createThisAccess());
        aCtThisAccess.setComments(this.cloneHelper.clone(thisAccess.getComments()));
        aCtThisAccess.setAnnotations(this.cloneHelper.clone(thisAccess.getAnnotations()));
        aCtThisAccess.setType(this.cloneHelper.clone(thisAccess.getType()));
        aCtThisAccess.setTypeCasts(this.cloneHelper.clone(thisAccess.getTypeCasts()));
        aCtThisAccess.setTarget(this.cloneHelper.clone(thisAccess.getTarget()));
        this.other = aCtThisAccess;
    }

    public <T> void visitCtAnnotationFieldAccess(final spoon.reflect.code.CtAnnotationFieldAccess<T> annotationFieldAccess) {
        spoon.reflect.code.CtAnnotationFieldAccess<T> aCtAnnotationFieldAccess = spoon.support.visitor.clone.CloneBuilder.build(this.builder, annotationFieldAccess, annotationFieldAccess.getFactory().Core().createAnnotationFieldAccess());
        aCtAnnotationFieldAccess.setComments(this.cloneHelper.clone(annotationFieldAccess.getComments()));
        aCtAnnotationFieldAccess.setAnnotations(this.cloneHelper.clone(annotationFieldAccess.getAnnotations()));
        aCtAnnotationFieldAccess.setTypeCasts(this.cloneHelper.clone(annotationFieldAccess.getTypeCasts()));
        aCtAnnotationFieldAccess.setTarget(this.cloneHelper.clone(annotationFieldAccess.getTarget()));
        aCtAnnotationFieldAccess.setType(this.cloneHelper.clone(annotationFieldAccess.getType()));
        aCtAnnotationFieldAccess.setVariable(this.cloneHelper.clone(annotationFieldAccess.getVariable()));
        this.other = aCtAnnotationFieldAccess;
    }

    public <T> void visitCtFieldReference(final spoon.reflect.reference.CtFieldReference<T> reference) {
        spoon.reflect.reference.CtFieldReference<T> aCtFieldReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().createFieldReference());
        aCtFieldReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtFieldReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtFieldReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.other = aCtFieldReference;
    }

    public void visitCtFor(final spoon.reflect.code.CtFor forLoop) {
        spoon.reflect.code.CtFor aCtFor = spoon.support.visitor.clone.CloneBuilder.build(this.builder, forLoop, forLoop.getFactory().Core().createFor());
        aCtFor.setAnnotations(this.cloneHelper.clone(forLoop.getAnnotations()));
        aCtFor.setForInit(this.cloneHelper.clone(forLoop.getForInit()));
        aCtFor.setExpression(this.cloneHelper.clone(forLoop.getExpression()));
        aCtFor.setForUpdate(this.cloneHelper.clone(forLoop.getForUpdate()));
        aCtFor.setBody(this.cloneHelper.clone(forLoop.getBody()));
        aCtFor.setComments(this.cloneHelper.clone(forLoop.getComments()));
        this.other = aCtFor;
    }

    public void visitCtForEach(final spoon.reflect.code.CtForEach foreach) {
        spoon.reflect.code.CtForEach aCtForEach = spoon.support.visitor.clone.CloneBuilder.build(this.builder, foreach, foreach.getFactory().Core().createForEach());
        aCtForEach.setAnnotations(this.cloneHelper.clone(foreach.getAnnotations()));
        aCtForEach.setVariable(this.cloneHelper.clone(foreach.getVariable()));
        aCtForEach.setExpression(this.cloneHelper.clone(foreach.getExpression()));
        aCtForEach.setBody(this.cloneHelper.clone(foreach.getBody()));
        aCtForEach.setComments(this.cloneHelper.clone(foreach.getComments()));
        this.other = aCtForEach;
    }

    public void visitCtIf(final spoon.reflect.code.CtIf ifElement) {
        spoon.reflect.code.CtIf aCtIf = spoon.support.visitor.clone.CloneBuilder.build(this.builder, ifElement, ifElement.getFactory().Core().createIf());
        aCtIf.setAnnotations(this.cloneHelper.clone(ifElement.getAnnotations()));
        aCtIf.setCondition(this.cloneHelper.clone(ifElement.getCondition()));
        aCtIf.setThenStatement(this.cloneHelper.clone(((spoon.reflect.code.CtStatement) (ifElement.getThenStatement()))));
        aCtIf.setElseStatement(this.cloneHelper.clone(((spoon.reflect.code.CtStatement) (ifElement.getElseStatement()))));
        aCtIf.setComments(this.cloneHelper.clone(ifElement.getComments()));
        this.other = aCtIf;
    }

    public <T> void visitCtInterface(final spoon.reflect.declaration.CtInterface<T> intrface) {
        spoon.reflect.declaration.CtInterface<T> aCtInterface = spoon.support.visitor.clone.CloneBuilder.build(this.builder, intrface, intrface.getFactory().Core().createInterface());
        aCtInterface.setAnnotations(this.cloneHelper.clone(intrface.getAnnotations()));
        aCtInterface.setSuperInterfaces(this.cloneHelper.clone(intrface.getSuperInterfaces()));
        aCtInterface.setFormalCtTypeParameters(this.cloneHelper.clone(intrface.getFormalCtTypeParameters()));
        aCtInterface.setTypeMembers(this.cloneHelper.clone(intrface.getTypeMembers()));
        aCtInterface.setComments(this.cloneHelper.clone(intrface.getComments()));
        this.other = aCtInterface;
    }

    public <T> void visitCtInvocation(final spoon.reflect.code.CtInvocation<T> invocation) {
        spoon.reflect.code.CtInvocation<T> aCtInvocation = spoon.support.visitor.clone.CloneBuilder.build(this.builder, invocation, invocation.getFactory().Core().createInvocation());
        aCtInvocation.setAnnotations(this.cloneHelper.clone(invocation.getAnnotations()));
        aCtInvocation.setTypeCasts(this.cloneHelper.clone(invocation.getTypeCasts()));
        aCtInvocation.setTarget(this.cloneHelper.clone(invocation.getTarget()));
        aCtInvocation.setExecutable(this.cloneHelper.clone(invocation.getExecutable()));
        aCtInvocation.setArguments(this.cloneHelper.clone(invocation.getArguments()));
        aCtInvocation.setComments(this.cloneHelper.clone(invocation.getComments()));
        this.other = aCtInvocation;
    }

    public <T> void visitCtLiteral(final spoon.reflect.code.CtLiteral<T> literal) {
        spoon.reflect.code.CtLiteral<T> aCtLiteral = spoon.support.visitor.clone.CloneBuilder.build(this.builder, literal, literal.getFactory().Core().createLiteral());
        aCtLiteral.setAnnotations(this.cloneHelper.clone(literal.getAnnotations()));
        aCtLiteral.setType(this.cloneHelper.clone(literal.getType()));
        aCtLiteral.setTypeCasts(this.cloneHelper.clone(literal.getTypeCasts()));
        aCtLiteral.setComments(this.cloneHelper.clone(literal.getComments()));
        this.other = aCtLiteral;
    }

    public <T> void visitCtLocalVariable(final spoon.reflect.code.CtLocalVariable<T> localVariable) {
        spoon.reflect.code.CtLocalVariable<T> aCtLocalVariable = spoon.support.visitor.clone.CloneBuilder.build(this.builder, localVariable, localVariable.getFactory().Core().createLocalVariable());
        aCtLocalVariable.setAnnotations(this.cloneHelper.clone(localVariable.getAnnotations()));
        aCtLocalVariable.setType(this.cloneHelper.clone(localVariable.getType()));
        aCtLocalVariable.setDefaultExpression(this.cloneHelper.clone(localVariable.getDefaultExpression()));
        aCtLocalVariable.setComments(this.cloneHelper.clone(localVariable.getComments()));
        this.other = aCtLocalVariable;
    }

    public <T> void visitCtLocalVariableReference(final spoon.reflect.reference.CtLocalVariableReference<T> reference) {
        spoon.reflect.reference.CtLocalVariableReference<T> aCtLocalVariableReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().createLocalVariableReference());
        aCtLocalVariableReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtLocalVariableReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.other = aCtLocalVariableReference;
    }

    public <T> void visitCtCatchVariable(final spoon.reflect.code.CtCatchVariable<T> catchVariable) {
        spoon.reflect.code.CtCatchVariable<T> aCtCatchVariable = spoon.support.visitor.clone.CloneBuilder.build(this.builder, catchVariable, catchVariable.getFactory().Core().createCatchVariable());
        aCtCatchVariable.setComments(this.cloneHelper.clone(catchVariable.getComments()));
        aCtCatchVariable.setAnnotations(this.cloneHelper.clone(catchVariable.getAnnotations()));
        aCtCatchVariable.setDefaultExpression(this.cloneHelper.clone(catchVariable.getDefaultExpression()));
        aCtCatchVariable.setType(this.cloneHelper.clone(catchVariable.getType()));
        aCtCatchVariable.setMultiTypes(this.cloneHelper.clone(catchVariable.getMultiTypes()));
        this.other = aCtCatchVariable;
    }

    public <T> void visitCtCatchVariableReference(final spoon.reflect.reference.CtCatchVariableReference<T> reference) {
        spoon.reflect.reference.CtCatchVariableReference<T> aCtCatchVariableReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().createCatchVariableReference());
        aCtCatchVariableReference.setComments(this.cloneHelper.clone(reference.getComments()));
        aCtCatchVariableReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtCatchVariableReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.other = aCtCatchVariableReference;
    }

    public <T> void visitCtMethod(final spoon.reflect.declaration.CtMethod<T> m) {
        spoon.reflect.declaration.CtMethod<T> aCtMethod = spoon.support.visitor.clone.CloneBuilder.build(this.builder, m, m.getFactory().Core().createMethod());
        aCtMethod.setAnnotations(this.cloneHelper.clone(m.getAnnotations()));
        aCtMethod.setFormalCtTypeParameters(this.cloneHelper.clone(m.getFormalCtTypeParameters()));
        aCtMethod.setType(this.cloneHelper.clone(m.getType()));
        aCtMethod.setParameters(this.cloneHelper.clone(m.getParameters()));
        aCtMethod.setThrownTypes(this.cloneHelper.clone(m.getThrownTypes()));
        aCtMethod.setBody(this.cloneHelper.clone(m.getBody()));
        aCtMethod.setComments(this.cloneHelper.clone(m.getComments()));
        this.other = aCtMethod;
    }

    @java.lang.Override
    public <T> void visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod<T> annotationMethod) {
        spoon.reflect.declaration.CtAnnotationMethod<T> aCtAnnotationMethod = spoon.support.visitor.clone.CloneBuilder.build(this.builder, annotationMethod, annotationMethod.getFactory().Core().createAnnotationMethod());
        aCtAnnotationMethod.setAnnotations(this.cloneHelper.clone(annotationMethod.getAnnotations()));
        aCtAnnotationMethod.setType(this.cloneHelper.clone(annotationMethod.getType()));
        aCtAnnotationMethod.setDefaultExpression(this.cloneHelper.clone(annotationMethod.getDefaultExpression()));
        aCtAnnotationMethod.setComments(this.cloneHelper.clone(annotationMethod.getComments()));
        this.other = aCtAnnotationMethod;
    }

    public <T> void visitCtNewArray(final spoon.reflect.code.CtNewArray<T> newArray) {
        spoon.reflect.code.CtNewArray<T> aCtNewArray = spoon.support.visitor.clone.CloneBuilder.build(this.builder, newArray, newArray.getFactory().Core().createNewArray());
        aCtNewArray.setAnnotations(this.cloneHelper.clone(newArray.getAnnotations()));
        aCtNewArray.setType(this.cloneHelper.clone(newArray.getType()));
        aCtNewArray.setTypeCasts(this.cloneHelper.clone(newArray.getTypeCasts()));
        aCtNewArray.setElements(this.cloneHelper.clone(newArray.getElements()));
        aCtNewArray.setDimensionExpressions(this.cloneHelper.clone(newArray.getDimensionExpressions()));
        aCtNewArray.setComments(this.cloneHelper.clone(newArray.getComments()));
        this.other = aCtNewArray;
    }

    @java.lang.Override
    public <T> void visitCtConstructorCall(final spoon.reflect.code.CtConstructorCall<T> ctConstructorCall) {
        spoon.reflect.code.CtConstructorCall<T> aCtConstructorCall = spoon.support.visitor.clone.CloneBuilder.build(this.builder, ctConstructorCall, ctConstructorCall.getFactory().Core().createConstructorCall());
        aCtConstructorCall.setAnnotations(this.cloneHelper.clone(ctConstructorCall.getAnnotations()));
        aCtConstructorCall.setTypeCasts(this.cloneHelper.clone(ctConstructorCall.getTypeCasts()));
        aCtConstructorCall.setExecutable(this.cloneHelper.clone(ctConstructorCall.getExecutable()));
        aCtConstructorCall.setTarget(this.cloneHelper.clone(ctConstructorCall.getTarget()));
        aCtConstructorCall.setArguments(this.cloneHelper.clone(ctConstructorCall.getArguments()));
        aCtConstructorCall.setComments(this.cloneHelper.clone(ctConstructorCall.getComments()));
        this.other = aCtConstructorCall;
    }

    public <T> void visitCtNewClass(final spoon.reflect.code.CtNewClass<T> newClass) {
        spoon.reflect.code.CtNewClass<T> aCtNewClass = spoon.support.visitor.clone.CloneBuilder.build(this.builder, newClass, newClass.getFactory().Core().createNewClass());
        aCtNewClass.setAnnotations(this.cloneHelper.clone(newClass.getAnnotations()));
        aCtNewClass.setTypeCasts(this.cloneHelper.clone(newClass.getTypeCasts()));
        aCtNewClass.setExecutable(this.cloneHelper.clone(newClass.getExecutable()));
        aCtNewClass.setTarget(this.cloneHelper.clone(newClass.getTarget()));
        aCtNewClass.setArguments(this.cloneHelper.clone(newClass.getArguments()));
        aCtNewClass.setAnonymousClass(this.cloneHelper.clone(newClass.getAnonymousClass()));
        aCtNewClass.setComments(this.cloneHelper.clone(newClass.getComments()));
        this.other = aCtNewClass;
    }

    @java.lang.Override
    public <T> void visitCtLambda(final spoon.reflect.code.CtLambda<T> lambda) {
        spoon.reflect.code.CtLambda<T> aCtLambda = spoon.support.visitor.clone.CloneBuilder.build(this.builder, lambda, lambda.getFactory().Core().createLambda());
        aCtLambda.setAnnotations(this.cloneHelper.clone(lambda.getAnnotations()));
        aCtLambda.setType(this.cloneHelper.clone(lambda.getType()));
        aCtLambda.setTypeCasts(this.cloneHelper.clone(lambda.getTypeCasts()));
        aCtLambda.setParameters(this.cloneHelper.clone(lambda.getParameters()));
        aCtLambda.setThrownTypes(this.cloneHelper.clone(lambda.getThrownTypes()));
        aCtLambda.setBody(this.cloneHelper.clone(lambda.getBody()));
        aCtLambda.setExpression(this.cloneHelper.clone(lambda.getExpression()));
        aCtLambda.setComments(this.cloneHelper.clone(lambda.getComments()));
        this.other = aCtLambda;
    }

    @java.lang.Override
    public <T, E extends spoon.reflect.code.CtExpression<?>> void visitCtExecutableReferenceExpression(final spoon.reflect.code.CtExecutableReferenceExpression<T, E> expression) {
        spoon.reflect.code.CtExecutableReferenceExpression<T, E> aCtExecutableReferenceExpression = spoon.support.visitor.clone.CloneBuilder.build(this.builder, expression, expression.getFactory().Core().createExecutableReferenceExpression());
        aCtExecutableReferenceExpression.setComments(this.cloneHelper.clone(expression.getComments()));
        aCtExecutableReferenceExpression.setAnnotations(this.cloneHelper.clone(expression.getAnnotations()));
        aCtExecutableReferenceExpression.setType(this.cloneHelper.clone(expression.getType()));
        aCtExecutableReferenceExpression.setTypeCasts(this.cloneHelper.clone(expression.getTypeCasts()));
        aCtExecutableReferenceExpression.setExecutable(this.cloneHelper.clone(expression.getExecutable()));
        aCtExecutableReferenceExpression.setTarget(this.cloneHelper.clone(expression.getTarget()));
        this.other = aCtExecutableReferenceExpression;
    }

    public <T, A extends T> void visitCtOperatorAssignment(final spoon.reflect.code.CtOperatorAssignment<T, A> assignment) {
        spoon.reflect.code.CtOperatorAssignment<T, A> aCtOperatorAssignment = spoon.support.visitor.clone.CloneBuilder.build(this.builder, assignment, assignment.getFactory().Core().createOperatorAssignment());
        aCtOperatorAssignment.setAnnotations(this.cloneHelper.clone(assignment.getAnnotations()));
        aCtOperatorAssignment.setType(this.cloneHelper.clone(assignment.getType()));
        aCtOperatorAssignment.setTypeCasts(this.cloneHelper.clone(assignment.getTypeCasts()));
        aCtOperatorAssignment.setAssigned(this.cloneHelper.clone(assignment.getAssigned()));
        aCtOperatorAssignment.setAssignment(this.cloneHelper.clone(assignment.getAssignment()));
        aCtOperatorAssignment.setComments(this.cloneHelper.clone(assignment.getComments()));
        this.other = aCtOperatorAssignment;
    }

    public void visitCtPackage(final spoon.reflect.declaration.CtPackage ctPackage) {
        spoon.reflect.declaration.CtPackage aCtPackage = spoon.support.visitor.clone.CloneBuilder.build(this.builder, ctPackage, ctPackage.getFactory().Core().createPackage());
        aCtPackage.setAnnotations(this.cloneHelper.clone(ctPackage.getAnnotations()));
        aCtPackage.setPackages(this.cloneHelper.clone(ctPackage.getPackages()));
        aCtPackage.setTypes(this.cloneHelper.clone(ctPackage.getTypes()));
        aCtPackage.setComments(this.cloneHelper.clone(ctPackage.getComments()));
        this.other = aCtPackage;
    }

    public void visitCtPackageReference(final spoon.reflect.reference.CtPackageReference reference) {
        spoon.reflect.reference.CtPackageReference aCtPackageReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().createPackageReference());
        aCtPackageReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.other = aCtPackageReference;
    }

    public <T> void visitCtParameter(final spoon.reflect.declaration.CtParameter<T> parameter) {
        spoon.reflect.declaration.CtParameter<T> aCtParameter = spoon.support.visitor.clone.CloneBuilder.build(this.builder, parameter, parameter.getFactory().Core().createParameter());
        aCtParameter.setAnnotations(this.cloneHelper.clone(parameter.getAnnotations()));
        aCtParameter.setType(this.cloneHelper.clone(parameter.getType()));
        aCtParameter.setComments(this.cloneHelper.clone(parameter.getComments()));
        this.other = aCtParameter;
    }

    public <T> void visitCtParameterReference(final spoon.reflect.reference.CtParameterReference<T> reference) {
        spoon.reflect.reference.CtParameterReference<T> aCtParameterReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().createParameterReference());
        aCtParameterReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtParameterReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        aCtParameterReference.setDeclaringExecutable(this.cloneHelper.clone(reference.getDeclaringExecutable()));
        this.other = aCtParameterReference;
    }

    public <R> void visitCtReturn(final spoon.reflect.code.CtReturn<R> returnStatement) {
        spoon.reflect.code.CtReturn<R> aCtReturn = spoon.support.visitor.clone.CloneBuilder.build(this.builder, returnStatement, returnStatement.getFactory().Core().createReturn());
        aCtReturn.setAnnotations(this.cloneHelper.clone(returnStatement.getAnnotations()));
        aCtReturn.setReturnedExpression(this.cloneHelper.clone(returnStatement.getReturnedExpression()));
        aCtReturn.setComments(this.cloneHelper.clone(returnStatement.getComments()));
        this.other = aCtReturn;
    }

    public <R> void visitCtStatementList(final spoon.reflect.code.CtStatementList statements) {
        spoon.reflect.code.CtStatementList aCtStatementList = spoon.support.visitor.clone.CloneBuilder.build(this.builder, statements, statements.getFactory().Core().createStatementList());
        aCtStatementList.setAnnotations(this.cloneHelper.clone(statements.getAnnotations()));
        aCtStatementList.setStatements(this.cloneHelper.clone(statements.getStatements()));
        aCtStatementList.setComments(this.cloneHelper.clone(statements.getComments()));
        this.other = aCtStatementList;
    }

    public <S> void visitCtSwitch(final spoon.reflect.code.CtSwitch<S> switchStatement) {
        spoon.reflect.code.CtSwitch<S> aCtSwitch = spoon.support.visitor.clone.CloneBuilder.build(this.builder, switchStatement, switchStatement.getFactory().Core().createSwitch());
        aCtSwitch.setAnnotations(this.cloneHelper.clone(switchStatement.getAnnotations()));
        aCtSwitch.setSelector(this.cloneHelper.clone(switchStatement.getSelector()));
        aCtSwitch.setCases(this.cloneHelper.clone(switchStatement.getCases()));
        aCtSwitch.setComments(this.cloneHelper.clone(switchStatement.getComments()));
        this.other = aCtSwitch;
    }

    public void visitCtSynchronized(final spoon.reflect.code.CtSynchronized synchro) {
        spoon.reflect.code.CtSynchronized aCtSynchronized = spoon.support.visitor.clone.CloneBuilder.build(this.builder, synchro, synchro.getFactory().Core().createSynchronized());
        aCtSynchronized.setAnnotations(this.cloneHelper.clone(synchro.getAnnotations()));
        aCtSynchronized.setExpression(this.cloneHelper.clone(synchro.getExpression()));
        aCtSynchronized.setBlock(this.cloneHelper.clone(synchro.getBlock()));
        aCtSynchronized.setComments(this.cloneHelper.clone(synchro.getComments()));
        this.other = aCtSynchronized;
    }

    public void visitCtThrow(final spoon.reflect.code.CtThrow throwStatement) {
        spoon.reflect.code.CtThrow aCtThrow = spoon.support.visitor.clone.CloneBuilder.build(this.builder, throwStatement, throwStatement.getFactory().Core().createThrow());
        aCtThrow.setAnnotations(this.cloneHelper.clone(throwStatement.getAnnotations()));
        aCtThrow.setThrownExpression(this.cloneHelper.clone(throwStatement.getThrownExpression()));
        aCtThrow.setComments(this.cloneHelper.clone(throwStatement.getComments()));
        this.other = aCtThrow;
    }

    public void visitCtTry(final spoon.reflect.code.CtTry tryBlock) {
        spoon.reflect.code.CtTry aCtTry = spoon.support.visitor.clone.CloneBuilder.build(this.builder, tryBlock, tryBlock.getFactory().Core().createTry());
        aCtTry.setAnnotations(this.cloneHelper.clone(tryBlock.getAnnotations()));
        aCtTry.setBody(this.cloneHelper.clone(tryBlock.getBody()));
        aCtTry.setCatchers(this.cloneHelper.clone(tryBlock.getCatchers()));
        aCtTry.setFinalizer(this.cloneHelper.clone(tryBlock.getFinalizer()));
        aCtTry.setComments(this.cloneHelper.clone(tryBlock.getComments()));
        this.other = aCtTry;
    }

    @java.lang.Override
    public void visitCtTryWithResource(final spoon.reflect.code.CtTryWithResource tryWithResource) {
        spoon.reflect.code.CtTryWithResource aCtTryWithResource = spoon.support.visitor.clone.CloneBuilder.build(this.builder, tryWithResource, tryWithResource.getFactory().Core().createTryWithResource());
        aCtTryWithResource.setAnnotations(this.cloneHelper.clone(tryWithResource.getAnnotations()));
        aCtTryWithResource.setResources(this.cloneHelper.clone(tryWithResource.getResources()));
        aCtTryWithResource.setBody(this.cloneHelper.clone(tryWithResource.getBody()));
        aCtTryWithResource.setCatchers(this.cloneHelper.clone(tryWithResource.getCatchers()));
        aCtTryWithResource.setFinalizer(this.cloneHelper.clone(tryWithResource.getFinalizer()));
        aCtTryWithResource.setComments(this.cloneHelper.clone(tryWithResource.getComments()));
        this.other = aCtTryWithResource;
    }

    public void visitCtTypeParameterReference(final spoon.reflect.reference.CtTypeParameterReference ref) {
        spoon.reflect.reference.CtTypeParameterReference aCtTypeParameterReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, ref, ref.getFactory().Core().createTypeParameterReference());
        aCtTypeParameterReference.setPackage(this.cloneHelper.clone(ref.getPackage()));
        aCtTypeParameterReference.setDeclaringType(this.cloneHelper.clone(ref.getDeclaringType()));
        aCtTypeParameterReference.setAnnotations(this.cloneHelper.clone(ref.getAnnotations()));
        aCtTypeParameterReference.setBoundingType(this.cloneHelper.clone(ref.getBoundingType()));
        this.other = aCtTypeParameterReference;
    }

    @java.lang.Override
    public void visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference wildcardReference) {
        spoon.reflect.reference.CtWildcardReference aCtWildcardReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, wildcardReference, wildcardReference.getFactory().Core().createWildcardReference());
        aCtWildcardReference.setPackage(this.cloneHelper.clone(wildcardReference.getPackage()));
        aCtWildcardReference.setDeclaringType(this.cloneHelper.clone(wildcardReference.getDeclaringType()));
        aCtWildcardReference.setAnnotations(this.cloneHelper.clone(wildcardReference.getAnnotations()));
        aCtWildcardReference.setBoundingType(this.cloneHelper.clone(wildcardReference.getBoundingType()));
        this.other = aCtWildcardReference;
    }

    @java.lang.Override
    public <T> void visitCtIntersectionTypeReference(final spoon.reflect.reference.CtIntersectionTypeReference<T> reference) {
        spoon.reflect.reference.CtIntersectionTypeReference<T> aCtIntersectionTypeReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().createIntersectionTypeReference());
        aCtIntersectionTypeReference.setPackage(this.cloneHelper.clone(reference.getPackage()));
        aCtIntersectionTypeReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtIntersectionTypeReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        aCtIntersectionTypeReference.setBounds(this.cloneHelper.clone(reference.getBounds()));
        this.other = aCtIntersectionTypeReference;
    }

    public <T> void visitCtTypeReference(final spoon.reflect.reference.CtTypeReference<T> reference) {
        spoon.reflect.reference.CtTypeReference<T> aCtTypeReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().createTypeReference());
        aCtTypeReference.setPackage(this.cloneHelper.clone(reference.getPackage()));
        aCtTypeReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtTypeReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));
        aCtTypeReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        aCtTypeReference.setComments(this.cloneHelper.clone(reference.getComments()));
        this.other = aCtTypeReference;
    }

    @java.lang.Override
    public <T> void visitCtTypeAccess(final spoon.reflect.code.CtTypeAccess<T> typeAccess) {
        spoon.reflect.code.CtTypeAccess<T> aCtTypeAccess = spoon.support.visitor.clone.CloneBuilder.build(this.builder, typeAccess, typeAccess.getFactory().Core().createTypeAccess());
        aCtTypeAccess.setAnnotations(this.cloneHelper.clone(typeAccess.getAnnotations()));
        aCtTypeAccess.setTypeCasts(this.cloneHelper.clone(typeAccess.getTypeCasts()));
        aCtTypeAccess.setAccessedType(this.cloneHelper.clone(typeAccess.getAccessedType()));
        aCtTypeAccess.setComments(this.cloneHelper.clone(typeAccess.getComments()));
        this.other = aCtTypeAccess;
    }

    public <T> void visitCtUnaryOperator(final spoon.reflect.code.CtUnaryOperator<T> operator) {
        spoon.reflect.code.CtUnaryOperator<T> aCtUnaryOperator = spoon.support.visitor.clone.CloneBuilder.build(this.builder, operator, operator.getFactory().Core().createUnaryOperator());
        aCtUnaryOperator.setAnnotations(this.cloneHelper.clone(operator.getAnnotations()));
        aCtUnaryOperator.setType(this.cloneHelper.clone(operator.getType()));
        aCtUnaryOperator.setTypeCasts(this.cloneHelper.clone(operator.getTypeCasts()));
        aCtUnaryOperator.setOperand(this.cloneHelper.clone(operator.getOperand()));
        aCtUnaryOperator.setComments(this.cloneHelper.clone(operator.getComments()));
        this.other = aCtUnaryOperator;
    }

    @java.lang.Override
    public <T> void visitCtVariableRead(final spoon.reflect.code.CtVariableRead<T> variableRead) {
        spoon.reflect.code.CtVariableRead<T> aCtVariableRead = spoon.support.visitor.clone.CloneBuilder.build(this.builder, variableRead, variableRead.getFactory().Core().createVariableRead());
        aCtVariableRead.setAnnotations(this.cloneHelper.clone(variableRead.getAnnotations()));
        aCtVariableRead.setTypeCasts(this.cloneHelper.clone(variableRead.getTypeCasts()));
        aCtVariableRead.setVariable(this.cloneHelper.clone(variableRead.getVariable()));
        aCtVariableRead.setComments(this.cloneHelper.clone(variableRead.getComments()));
        this.other = aCtVariableRead;
    }

    @java.lang.Override
    public <T> void visitCtVariableWrite(final spoon.reflect.code.CtVariableWrite<T> variableWrite) {
        spoon.reflect.code.CtVariableWrite<T> aCtVariableWrite = spoon.support.visitor.clone.CloneBuilder.build(this.builder, variableWrite, variableWrite.getFactory().Core().createVariableWrite());
        aCtVariableWrite.setAnnotations(this.cloneHelper.clone(variableWrite.getAnnotations()));
        aCtVariableWrite.setTypeCasts(this.cloneHelper.clone(variableWrite.getTypeCasts()));
        aCtVariableWrite.setVariable(this.cloneHelper.clone(variableWrite.getVariable()));
        aCtVariableWrite.setComments(this.cloneHelper.clone(variableWrite.getComments()));
        this.other = aCtVariableWrite;
    }

    public void visitCtWhile(final spoon.reflect.code.CtWhile whileLoop) {
        spoon.reflect.code.CtWhile aCtWhile = spoon.support.visitor.clone.CloneBuilder.build(this.builder, whileLoop, whileLoop.getFactory().Core().createWhile());
        aCtWhile.setAnnotations(this.cloneHelper.clone(whileLoop.getAnnotations()));
        aCtWhile.setLoopingExpression(this.cloneHelper.clone(whileLoop.getLoopingExpression()));
        aCtWhile.setBody(this.cloneHelper.clone(whileLoop.getBody()));
        aCtWhile.setComments(this.cloneHelper.clone(whileLoop.getComments()));
        this.other = aCtWhile;
    }

    public <T> void visitCtCodeSnippetExpression(final spoon.reflect.code.CtCodeSnippetExpression<T> expression) {
        spoon.reflect.code.CtCodeSnippetExpression<T> aCtCodeSnippetExpression = spoon.support.visitor.clone.CloneBuilder.build(this.builder, expression, expression.getFactory().Core().createCodeSnippetExpression());
        aCtCodeSnippetExpression.setType(this.cloneHelper.clone(expression.getType()));
        aCtCodeSnippetExpression.setComments(this.cloneHelper.clone(expression.getComments()));
        aCtCodeSnippetExpression.setAnnotations(this.cloneHelper.clone(expression.getAnnotations()));
        aCtCodeSnippetExpression.setTypeCasts(this.cloneHelper.clone(expression.getTypeCasts()));
        this.other = aCtCodeSnippetExpression;
    }

    public void visitCtCodeSnippetStatement(final spoon.reflect.code.CtCodeSnippetStatement statement) {
        spoon.reflect.code.CtCodeSnippetStatement aCtCodeSnippetStatement = spoon.support.visitor.clone.CloneBuilder.build(this.builder, statement, statement.getFactory().Core().createCodeSnippetStatement());
        aCtCodeSnippetStatement.setComments(this.cloneHelper.clone(statement.getComments()));
        aCtCodeSnippetStatement.setAnnotations(this.cloneHelper.clone(statement.getAnnotations()));
        this.other = aCtCodeSnippetStatement;
    }

    public <T> void visitCtUnboundVariableReference(final spoon.reflect.reference.CtUnboundVariableReference<T> reference) {
        spoon.reflect.reference.CtUnboundVariableReference<T> aCtUnboundVariableReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().createUnboundVariableReference());
        aCtUnboundVariableReference.setType(this.cloneHelper.clone(reference.getType()));
        this.other = aCtUnboundVariableReference;
    }

    @java.lang.Override
    public <T> void visitCtFieldRead(final spoon.reflect.code.CtFieldRead<T> fieldRead) {
        spoon.reflect.code.CtFieldRead<T> aCtFieldRead = spoon.support.visitor.clone.CloneBuilder.build(this.builder, fieldRead, fieldRead.getFactory().Core().createFieldRead());
        aCtFieldRead.setAnnotations(this.cloneHelper.clone(fieldRead.getAnnotations()));
        aCtFieldRead.setTypeCasts(this.cloneHelper.clone(fieldRead.getTypeCasts()));
        aCtFieldRead.setTarget(this.cloneHelper.clone(fieldRead.getTarget()));
        aCtFieldRead.setVariable(this.cloneHelper.clone(fieldRead.getVariable()));
        aCtFieldRead.setComments(this.cloneHelper.clone(fieldRead.getComments()));
        this.other = aCtFieldRead;
    }

    @java.lang.Override
    public <T> void visitCtFieldWrite(final spoon.reflect.code.CtFieldWrite<T> fieldWrite) {
        spoon.reflect.code.CtFieldWrite<T> aCtFieldWrite = spoon.support.visitor.clone.CloneBuilder.build(this.builder, fieldWrite, fieldWrite.getFactory().Core().createFieldWrite());
        aCtFieldWrite.setAnnotations(this.cloneHelper.clone(fieldWrite.getAnnotations()));
        aCtFieldWrite.setTypeCasts(this.cloneHelper.clone(fieldWrite.getTypeCasts()));
        aCtFieldWrite.setTarget(this.cloneHelper.clone(fieldWrite.getTarget()));
        aCtFieldWrite.setVariable(this.cloneHelper.clone(fieldWrite.getVariable()));
        aCtFieldWrite.setComments(this.cloneHelper.clone(fieldWrite.getComments()));
        this.other = aCtFieldWrite;
    }

    @java.lang.Override
    public <T> void visitCtSuperAccess(final spoon.reflect.code.CtSuperAccess<T> f) {
        spoon.reflect.code.CtSuperAccess<T> aCtSuperAccess = spoon.support.visitor.clone.CloneBuilder.build(this.builder, f, f.getFactory().Core().createSuperAccess());
        aCtSuperAccess.setType(this.cloneHelper.clone(f.getType()));
        aCtSuperAccess.setComments(this.cloneHelper.clone(f.getComments()));
        aCtSuperAccess.setAnnotations(this.cloneHelper.clone(f.getAnnotations()));
        aCtSuperAccess.setTypeCasts(this.cloneHelper.clone(f.getTypeCasts()));
        aCtSuperAccess.setTarget(this.cloneHelper.clone(f.getTarget()));
        aCtSuperAccess.setVariable(this.cloneHelper.clone(f.getVariable()));
        this.other = aCtSuperAccess;
    }

    @java.lang.Override
    public void visitCtComment(final spoon.reflect.code.CtComment comment) {
        spoon.reflect.code.CtComment aCtComment = spoon.support.visitor.clone.CloneBuilder.build(this.builder, comment, comment.getFactory().Core().createComment());
        aCtComment.setComments(this.cloneHelper.clone(comment.getComments()));
        aCtComment.setAnnotations(this.cloneHelper.clone(comment.getAnnotations()));
        this.other = aCtComment;
    }

    @java.lang.Override
    public void visitCtJavaDoc(final spoon.reflect.code.CtJavaDoc javaDoc) {
        spoon.reflect.code.CtJavaDoc aCtJavaDoc = spoon.support.visitor.clone.CloneBuilder.build(this.builder, javaDoc, javaDoc.getFactory().Core().createJavaDoc());
        aCtJavaDoc.setComments(this.cloneHelper.clone(javaDoc.getComments()));
        aCtJavaDoc.setAnnotations(this.cloneHelper.clone(javaDoc.getAnnotations()));
        aCtJavaDoc.setTags(this.cloneHelper.clone(javaDoc.getTags()));
        this.other = aCtJavaDoc;
    }

    @java.lang.Override
    public void visitCtJavaDocTag(final spoon.reflect.code.CtJavaDocTag docTag) {
        spoon.reflect.code.CtJavaDocTag aCtJavaDocTag = spoon.support.visitor.clone.CloneBuilder.build(this.builder, docTag, docTag.getFactory().Core().c]reateJavaDocTag());
...> but was:<...getFactory().Core().[getOrCreateAnnotation());
        aCtAnnotation.setType(this.cloneHelper.clone(annotation.getType()));
        aCtAnnotation.setComments(this.cloneHelper.clone(annotation.getComments()));
        aCtAnnotation.setAnnotationType(this.cloneHelper.clone(annotation.getAnnotationType()));
        aCtAnnotation.setAnnotations(this.cloneHelper.clone(annotation.getAnnotations()));
        aCtAnnotation.setValues(this.cloneHelper.clone(annotation.getValues()));
        this.other = aCtAnnotation;
    }

    public <A extends java.lang.annotation.Annotation> void visitCtAnnotationType(final spoon.reflect.declaration.CtAnnotationType<A> annotationType) {
        spoon.reflect.declaration.CtAnnotationType<A> aCtAnnotationType = spoon.support.visitor.clone.CloneBuilder.build(this.builder, annotationType, annotationType.getFactory().Core().getOrCreateAnnotationType());
        aCtAnnotationType.setAnnotations(this.cloneHelper.clone(annotationType.getAnnotations()));
        aCtAnnotationType.setTypeMembers(this.cloneHelper.clone(annotationType.getTypeMembers()));
        aCtAnnotationType.setComments(this.cloneHelper.clone(annotationType.getComments()));
        this.other = aCtAnnotationType;
    }

    public void visitCtAnonymousExecutable(final spoon.reflect.declaration.CtAnonymousExecutable anonymousExec) {
        spoon.reflect.declaration.CtAnonymousExecutable aCtAnonymousExecutable = spoon.support.visitor.clone.CloneBuilder.build(this.builder, anonymousExec, anonymousExec.getFactory().Core().getOrCreateAnonymousExecutable());
        aCtAnonymousExecutable.setAnnotations(this.cloneHelper.clone(anonymousExec.getAnnotations()));
        aCtAnonymousExecutable.setBody(this.cloneHelper.clone(anonymousExec.getBody()));
        aCtAnonymousExecutable.setComments(this.cloneHelper.clone(anonymousExec.getComments()));
        this.other = aCtAnonymousExecutable;
    }

    @java.lang.Override
    public <T> void visitCtArrayRead(final spoon.reflect.code.CtArrayRead<T> arrayRead) {
        spoon.reflect.code.CtArrayRead<T> aCtArrayRead = spoon.support.visitor.clone.CloneBuilder.build(this.builder, arrayRead, arrayRead.getFactory().Core().getOrCreateArrayRead());
        aCtArrayRead.setAnnotations(this.cloneHelper.clone(arrayRead.getAnnotations()));
        aCtArrayRead.setType(this.cloneHelper.clone(arrayRead.getType()));
        aCtArrayRead.setTypeCasts(this.cloneHelper.clone(arrayRead.getTypeCasts()));
        aCtArrayRead.setTarget(this.cloneHelper.clone(arrayRead.getTarget()));
        aCtArrayRead.setIndexExpression(this.cloneHelper.clone(arrayRead.getIndexExpression()));
        aCtArrayRead.setComments(this.cloneHelper.clone(arrayRead.getComments()));
        this.other = aCtArrayRead;
    }

    @java.lang.Override
    public <T> void visitCtArrayWrite(final spoon.reflect.code.CtArrayWrite<T> arrayWrite) {
        spoon.reflect.code.CtArrayWrite<T> aCtArrayWrite = spoon.support.visitor.clone.CloneBuilder.build(this.builder, arrayWrite, arrayWrite.getFactory().Core().getOrCreateArrayWrite());
        aCtArrayWrite.setAnnotations(this.cloneHelper.clone(arrayWrite.getAnnotations()));
        aCtArrayWrite.setType(this.cloneHelper.clone(arrayWrite.getType()));
        aCtArrayWrite.setTypeCasts(this.cloneHelper.clone(arrayWrite.getTypeCasts()));
        aCtArrayWrite.setTarget(this.cloneHelper.clone(arrayWrite.getTarget()));
        aCtArrayWrite.setIndexExpression(this.cloneHelper.clone(arrayWrite.getIndexExpression()));
        aCtArrayWrite.setComments(this.cloneHelper.clone(arrayWrite.getComments()));
        this.other = aCtArrayWrite;
    }

    public <T> void visitCtArrayTypeReference(final spoon.reflect.reference.CtArrayTypeReference<T> reference) {
        spoon.reflect.reference.CtArrayTypeReference<T> aCtArrayTypeReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().getOrCreateArrayTypeReference());
        aCtArrayTypeReference.setComments(this.cloneHelper.clone(reference.getComments()));
        aCtArrayTypeReference.setPackage(this.cloneHelper.clone(reference.getPackage()));
        aCtArrayTypeReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtArrayTypeReference.setComponentType(this.cloneHelper.clone(reference.getComponentType()));
        aCtArrayTypeReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));
        aCtArrayTypeReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.other = aCtArrayTypeReference;
    }

    public <T> void visitCtAssert(final spoon.reflect.code.CtAssert<T> asserted) {
        spoon.reflect.code.CtAssert<T> aCtAssert = spoon.support.visitor.clone.CloneBuilder.build(this.builder, asserted, asserted.getFactory().Core().getOrCreateAssert());
        aCtAssert.setAnnotations(this.cloneHelper.clone(asserted.getAnnotations()));
        aCtAssert.setAssertExpression(this.cloneHelper.clone(asserted.getAssertExpression()));
        aCtAssert.setExpression(this.cloneHelper.clone(asserted.getExpression()));
        aCtAssert.setComments(this.cloneHelper.clone(asserted.getComments()));
        this.other = aCtAssert;
    }

    public <T, A extends T> void visitCtAssignment(final spoon.reflect.code.CtAssignment<T, A> assignement) {
        spoon.reflect.code.CtAssignment<T, A> aCtAssignment = spoon.support.visitor.clone.CloneBuilder.build(this.builder, assignement, assignement.getFactory().Core().getOrCreateAssignment());
        aCtAssignment.setAnnotations(this.cloneHelper.clone(assignement.getAnnotations()));
        aCtAssignment.setType(this.cloneHelper.clone(assignement.getType()));
        aCtAssignment.setTypeCasts(this.cloneHelper.clone(assignement.getTypeCasts()));
        aCtAssignment.setAssigned(this.cloneHelper.clone(assignement.getAssigned()));
        aCtAssignment.setAssignment(this.cloneHelper.clone(assignement.getAssignment()));
        aCtAssignment.setComments(this.cloneHelper.clone(assignement.getComments()));
        this.other = aCtAssignment;
    }

    public <T> void visitCtBinaryOperator(final spoon.reflect.code.CtBinaryOperator<T> operator) {
        spoon.reflect.code.CtBinaryOperator<T> aCtBinaryOperator = spoon.support.visitor.clone.CloneBuilder.build(this.builder, operator, operator.getFactory().Core().getOrCreateBinaryOperator());
        aCtBinaryOperator.setAnnotations(this.cloneHelper.clone(operator.getAnnotations()));
        aCtBinaryOperator.setType(this.cloneHelper.clone(operator.getType()));
        aCtBinaryOperator.setTypeCasts(this.cloneHelper.clone(operator.getTypeCasts()));
        aCtBinaryOperator.setLeftHandOperand(this.cloneHelper.clone(operator.getLeftHandOperand()));
        aCtBinaryOperator.setRightHandOperand(this.cloneHelper.clone(operator.getRightHandOperand()));
        aCtBinaryOperator.setComments(this.cloneHelper.clone(operator.getComments()));
        this.other = aCtBinaryOperator;
    }

    public <R> void visitCtBlock(final spoon.reflect.code.CtBlock<R> block) {
        spoon.reflect.code.CtBlock<R> aCtBlock = spoon.support.visitor.clone.CloneBuilder.build(this.builder, block, block.getFactory().Core().getOrCreateBlock());
        aCtBlock.setAnnotations(this.cloneHelper.clone(block.getAnnotations()));
        aCtBlock.setStatements(this.cloneHelper.clone(block.getStatements()));
        aCtBlock.setComments(this.cloneHelper.clone(block.getComments()));
        this.other = aCtBlock;
    }

    public void visitCtBreak(final spoon.reflect.code.CtBreak breakStatement) {
        spoon.reflect.code.CtBreak aCtBreak = spoon.support.visitor.clone.CloneBuilder.build(this.builder, breakStatement, breakStatement.getFactory().Core().getOrCreateBreak());
        aCtBreak.setAnnotations(this.cloneHelper.clone(breakStatement.getAnnotations()));
        aCtBreak.setComments(this.cloneHelper.clone(breakStatement.getComments()));
        this.other = aCtBreak;
    }

    public <S> void visitCtCase(final spoon.reflect.code.CtCase<S> caseStatement) {
        spoon.reflect.code.CtCase<S> aCtCase = spoon.support.visitor.clone.CloneBuilder.build(this.builder, caseStatement, caseStatement.getFactory().Core().getOrCreateCase());
        aCtCase.setAnnotations(this.cloneHelper.clone(caseStatement.getAnnotations()));
        aCtCase.setCaseExpression(this.cloneHelper.clone(caseStatement.getCaseExpression()));
        aCtCase.setStatements(this.cloneHelper.clone(caseStatement.getStatements()));
        aCtCase.setComments(this.cloneHelper.clone(caseStatement.getComments()));
        this.other = aCtCase;
    }

    public void visitCtCatch(final spoon.reflect.code.CtCatch catchBlock) {
        spoon.reflect.code.CtCatch aCtCatch = spoon.support.visitor.clone.CloneBuilder.build(this.builder, catchBlock, catchBlock.getFactory().Core().getOrCreateCatch());
        aCtCatch.setAnnotations(this.cloneHelper.clone(catchBlock.getAnnotations()));
        aCtCatch.setParameter(this.cloneHelper.clone(catchBlock.getParameter()));
        aCtCatch.setBody(this.cloneHelper.clone(catchBlock.getBody()));
        aCtCatch.setComments(this.cloneHelper.clone(catchBlock.getComments()));
        this.other = aCtCatch;
    }

    public <T> void visitCtClass(final spoon.reflect.declaration.CtClass<T> ctClass) {
        spoon.reflect.declaration.CtClass<T> aCtClass = spoon.support.visitor.clone.CloneBuilder.build(this.builder, ctClass, ctClass.getFactory().Core().getOrCreateClass());
        aCtClass.setAnnotations(this.cloneHelper.clone(ctClass.getAnnotations()));
        aCtClass.setSuperclass(this.cloneHelper.clone(ctClass.getSuperclass()));
        aCtClass.setSuperInterfaces(this.cloneHelper.clone(ctClass.getSuperInterfaces()));
        aCtClass.setFormalCtTypeParameters(this.cloneHelper.clone(ctClass.getFormalCtTypeParameters()));
        aCtClass.setTypeMembers(this.cloneHelper.clone(ctClass.getTypeMembers()));
        aCtClass.setComments(this.cloneHelper.clone(ctClass.getComments()));
        this.other = aCtClass;
    }

    @java.lang.Override
    public void visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter typeParameter) {
        spoon.reflect.declaration.CtTypeParameter aCtTypeParameter = spoon.support.visitor.clone.CloneBuilder.build(this.builder, typeParameter, typeParameter.getFactory().Core().getOrCreateTypeParameter());
        aCtTypeParameter.setAnnotations(this.cloneHelper.clone(typeParameter.getAnnotations()));
        aCtTypeParameter.setSuperclass(this.cloneHelper.clone(typeParameter.getSuperclass()));
        aCtTypeParameter.setComments(this.cloneHelper.clone(typeParameter.getComments()));
        this.other = aCtTypeParameter;
    }

    public <T> void visitCtConditional(final spoon.reflect.code.CtConditional<T> conditional) {
        spoon.reflect.code.CtConditional<T> aCtConditional = spoon.support.visitor.clone.CloneBuilder.build(this.builder, conditional, conditional.getFactory().Core().getOrCreateConditional());
        aCtConditional.setType(this.cloneHelper.clone(conditional.getType()));
        aCtConditional.setAnnotations(this.cloneHelper.clone(conditional.getAnnotations()));
        aCtConditional.setCondition(this.cloneHelper.clone(conditional.getCondition()));
        aCtConditional.setThenExpression(this.cloneHelper.clone(conditional.getThenExpression()));
        aCtConditional.setElseExpression(this.cloneHelper.clone(conditional.getElseExpression()));
        aCtConditional.setComments(this.cloneHelper.clone(conditional.getComments()));
        aCtConditional.setTypeCasts(this.cloneHelper.clone(conditional.getTypeCasts()));
        this.other = aCtConditional;
    }

    public <T> void visitCtConstructor(final spoon.reflect.declaration.CtConstructor<T> c) {
        spoon.reflect.declaration.CtConstructor<T> aCtConstructor = spoon.support.visitor.clone.CloneBuilder.build(this.builder, c, c.getFactory().Core().getOrCreateConstructor());
        aCtConstructor.setAnnotations(this.cloneHelper.clone(c.getAnnotations()));
        aCtConstructor.setParameters(this.cloneHelper.clone(c.getParameters()));
        aCtConstructor.setThrownTypes(this.cloneHelper.clone(c.getThrownTypes()));
        aCtConstructor.setFormalCtTypeParameters(this.cloneHelper.clone(c.getFormalCtTypeParameters()));
        aCtConstructor.setBody(this.cloneHelper.clone(c.getBody()));
        aCtConstructor.setComments(this.cloneHelper.clone(c.getComments()));
        this.other = aCtConstructor;
    }

    public void visitCtContinue(final spoon.reflect.code.CtContinue continueStatement) {
        spoon.reflect.code.CtContinue aCtContinue = spoon.support.visitor.clone.CloneBuilder.build(this.builder, continueStatement, continueStatement.getFactory().Core().getOrCreateContinue());
        aCtContinue.setAnnotations(this.cloneHelper.clone(continueStatement.getAnnotations()));
        aCtContinue.setComments(this.cloneHelper.clone(continueStatement.getComments()));
        this.other = aCtContinue;
    }

    public void visitCtDo(final spoon.reflect.code.CtDo doLoop) {
        spoon.reflect.code.CtDo aCtDo = spoon.support.visitor.clone.CloneBuilder.build(this.builder, doLoop, doLoop.getFactory().Core().getOrCreateDo());
        aCtDo.setAnnotations(this.cloneHelper.clone(doLoop.getAnnotations()));
        aCtDo.setLoopingExpression(this.cloneHelper.clone(doLoop.getLoopingExpression()));
        aCtDo.setBody(this.cloneHelper.clone(doLoop.getBody()));
        aCtDo.setComments(this.cloneHelper.clone(doLoop.getComments()));
        this.other = aCtDo;
    }

    public <T extends java.lang.Enum<?>> void visitCtEnum(final spoon.reflect.declaration.CtEnum<T> ctEnum) {
        spoon.reflect.declaration.CtEnum<T> aCtEnum = spoon.support.visitor.clone.CloneBuilder.build(this.builder, ctEnum, ctEnum.getFactory().Core().getOrCreateEnum());
        aCtEnum.setAnnotations(this.cloneHelper.clone(ctEnum.getAnnotations()));
        aCtEnum.setSuperInterfaces(this.cloneHelper.clone(ctEnum.getSuperInterfaces()));
        aCtEnum.setTypeMembers(this.cloneHelper.clone(ctEnum.getTypeMembers()));
        aCtEnum.setEnumValues(this.cloneHelper.clone(ctEnum.getEnumValues()));
        aCtEnum.setComments(this.cloneHelper.clone(ctEnum.getComments()));
        this.other = aCtEnum;
    }

    public <T> void visitCtExecutableReference(final spoon.reflect.reference.CtExecutableReference<T> reference) {
        spoon.reflect.reference.CtExecutableReference<T> aCtExecutableReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().getOrCreateExecutableReference());
        aCtExecutableReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtExecutableReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtExecutableReference.setParameters(this.cloneHelper.clone(reference.getParameters()));
        aCtExecutableReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));
        aCtExecutableReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        aCtExecutableReference.setComments(this.cloneHelper.clone(reference.getComments()));
        this.other = aCtExecutableReference;
    }

    public <T> void visitCtField(final spoon.reflect.declaration.CtField<T> f) {
        spoon.reflect.declaration.CtField<T> aCtField = spoon.support.visitor.clone.CloneBuilder.build(this.builder, f, f.getFactory().Core().getOrCreateField());
        aCtField.setAnnotations(this.cloneHelper.clone(f.getAnnotations()));
        aCtField.setType(this.cloneHelper.clone(f.getType()));
        aCtField.setDefaultExpression(this.cloneHelper.clone(f.getDefaultExpression()));
        aCtField.setComments(this.cloneHelper.clone(f.getComments()));
        this.other = aCtField;
    }

    @java.lang.Override
    public <T> void visitCtEnumValue(final spoon.reflect.declaration.CtEnumValue<T> enumValue) {
        spoon.reflect.declaration.CtEnumValue<T> aCtEnumValue = spoon.support.visitor.clone.CloneBuilder.build(this.builder, enumValue, enumValue.getFactory().Core().getOrCreateEnumValue());
        aCtEnumValue.setAnnotations(this.cloneHelper.clone(enumValue.getAnnotations()));
        aCtEnumValue.setType(this.cloneHelper.clone(enumValue.getType()));
        aCtEnumValue.setDefaultExpression(this.cloneHelper.clone(enumValue.getDefaultExpression()));
        aCtEnumValue.setComments(this.cloneHelper.clone(enumValue.getComments()));
        this.other = aCtEnumValue;
    }

    @java.lang.Override
    public <T> void visitCtThisAccess(final spoon.reflect.code.CtThisAccess<T> thisAccess) {
        spoon.reflect.code.CtThisAccess<T> aCtThisAccess = spoon.support.visitor.clone.CloneBuilder.build(this.builder, thisAccess, thisAccess.getFactory().Core().getOrCreateThisAccess());
        aCtThisAccess.setComments(this.cloneHelper.clone(thisAccess.getComments()));
        aCtThisAccess.setAnnotations(this.cloneHelper.clone(thisAccess.getAnnotations()));
        aCtThisAccess.setType(this.cloneHelper.clone(thisAccess.getType()));
        aCtThisAccess.setTypeCasts(this.cloneHelper.clone(thisAccess.getTypeCasts()));
        aCtThisAccess.setTarget(this.cloneHelper.clone(thisAccess.getTarget()));
        this.other = aCtThisAccess;
    }

    public <T> void visitCtAnnotationFieldAccess(final spoon.reflect.code.CtAnnotationFieldAccess<T> annotationFieldAccess) {
        spoon.reflect.code.CtAnnotationFieldAccess<T> aCtAnnotationFieldAccess = spoon.support.visitor.clone.CloneBuilder.build(this.builder, annotationFieldAccess, annotationFieldAccess.getFactory().Core().getOrCreateAnnotationFieldAccess());
        aCtAnnotationFieldAccess.setComments(this.cloneHelper.clone(annotationFieldAccess.getComments()));
        aCtAnnotationFieldAccess.setAnnotations(this.cloneHelper.clone(annotationFieldAccess.getAnnotations()));
        aCtAnnotationFieldAccess.setTypeCasts(this.cloneHelper.clone(annotationFieldAccess.getTypeCasts()));
        aCtAnnotationFieldAccess.setTarget(this.cloneHelper.clone(annotationFieldAccess.getTarget()));
        aCtAnnotationFieldAccess.setType(this.cloneHelper.clone(annotationFieldAccess.getType()));
        aCtAnnotationFieldAccess.setVariable(this.cloneHelper.clone(annotationFieldAccess.getVariable()));
        this.other = aCtAnnotationFieldAccess;
    }

    public <T> void visitCtFieldReference(final spoon.reflect.reference.CtFieldReference<T> reference) {
        spoon.reflect.reference.CtFieldReference<T> aCtFieldReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().getOrCreateFieldReference());
        aCtFieldReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtFieldReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtFieldReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.other = aCtFieldReference;
    }

    public void visitCtFor(final spoon.reflect.code.CtFor forLoop) {
        spoon.reflect.code.CtFor aCtFor = spoon.support.visitor.clone.CloneBuilder.build(this.builder, forLoop, forLoop.getFactory().Core().getOrCreateFor());
        aCtFor.setAnnotations(this.cloneHelper.clone(forLoop.getAnnotations()));
        aCtFor.setForInit(this.cloneHelper.clone(forLoop.getForInit()));
        aCtFor.setExpression(this.cloneHelper.clone(forLoop.getExpression()));
        aCtFor.setForUpdate(this.cloneHelper.clone(forLoop.getForUpdate()));
        aCtFor.setBody(this.cloneHelper.clone(forLoop.getBody()));
        aCtFor.setComments(this.cloneHelper.clone(forLoop.getComments()));
        this.other = aCtFor;
    }

    public void visitCtForEach(final spoon.reflect.code.CtForEach foreach) {
        spoon.reflect.code.CtForEach aCtForEach = spoon.support.visitor.clone.CloneBuilder.build(this.builder, foreach, foreach.getFactory().Core().getOrCreateForEach());
        aCtForEach.setAnnotations(this.cloneHelper.clone(foreach.getAnnotations()));
        aCtForEach.setVariable(this.cloneHelper.clone(foreach.getVariable()));
        aCtForEach.setExpression(this.cloneHelper.clone(foreach.getExpression()));
        aCtForEach.setBody(this.cloneHelper.clone(foreach.getBody()));
        aCtForEach.setComments(this.cloneHelper.clone(foreach.getComments()));
        this.other = aCtForEach;
    }

    public void visitCtIf(final spoon.reflect.code.CtIf ifElement) {
        spoon.reflect.code.CtIf aCtIf = spoon.support.visitor.clone.CloneBuilder.build(this.builder, ifElement, ifElement.getFactory().Core().getOrCreateIf());
        aCtIf.setAnnotations(this.cloneHelper.clone(ifElement.getAnnotations()));
        aCtIf.setCondition(this.cloneHelper.clone(ifElement.getCondition()));
        aCtIf.setThenStatement(this.cloneHelper.clone(((spoon.reflect.code.CtStatement) (ifElement.getThenStatement()))));
        aCtIf.setElseStatement(this.cloneHelper.clone(((spoon.reflect.code.CtStatement) (ifElement.getElseStatement()))));
        aCtIf.setComments(this.cloneHelper.clone(ifElement.getComments()));
        this.other = aCtIf;
    }

    public <T> void visitCtInterface(final spoon.reflect.declaration.CtInterface<T> intrface) {
        spoon.reflect.declaration.CtInterface<T> aCtInterface = spoon.support.visitor.clone.CloneBuilder.build(this.builder, intrface, intrface.getFactory().Core().getOrCreateInterface());
        aCtInterface.setAnnotations(this.cloneHelper.clone(intrface.getAnnotations()));
        aCtInterface.setSuperInterfaces(this.cloneHelper.clone(intrface.getSuperInterfaces()));
        aCtInterface.setFormalCtTypeParameters(this.cloneHelper.clone(intrface.getFormalCtTypeParameters()));
        aCtInterface.setTypeMembers(this.cloneHelper.clone(intrface.getTypeMembers()));
        aCtInterface.setComments(this.cloneHelper.clone(intrface.getComments()));
        this.other = aCtInterface;
    }

    public <T> void visitCtInvocation(final spoon.reflect.code.CtInvocation<T> invocation) {
        spoon.reflect.code.CtInvocation<T> aCtInvocation = spoon.support.visitor.clone.CloneBuilder.build(this.builder, invocation, invocation.getFactory().Core().getOrCreateInvocation());
        aCtInvocation.setAnnotations(this.cloneHelper.clone(invocation.getAnnotations()));
        aCtInvocation.setTypeCasts(this.cloneHelper.clone(invocation.getTypeCasts()));
        aCtInvocation.setTarget(this.cloneHelper.clone(invocation.getTarget()));
        aCtInvocation.setExecutable(this.cloneHelper.clone(invocation.getExecutable()));
        aCtInvocation.setArguments(this.cloneHelper.clone(invocation.getArguments()));
        aCtInvocation.setComments(this.cloneHelper.clone(invocation.getComments()));
        this.other = aCtInvocation;
    }

    public <T> void visitCtLiteral(final spoon.reflect.code.CtLiteral<T> literal) {
        spoon.reflect.code.CtLiteral<T> aCtLiteral = spoon.support.visitor.clone.CloneBuilder.build(this.builder, literal, literal.getFactory().Core().getOrCreateLiteral());
        aCtLiteral.setAnnotations(this.cloneHelper.clone(literal.getAnnotations()));
        aCtLiteral.setType(this.cloneHelper.clone(literal.getType()));
        aCtLiteral.setTypeCasts(this.cloneHelper.clone(literal.getTypeCasts()));
        aCtLiteral.setComments(this.cloneHelper.clone(literal.getComments()));
        this.other = aCtLiteral;
    }

    public <T> void visitCtLocalVariable(final spoon.reflect.code.CtLocalVariable<T> localVariable) {
        spoon.reflect.code.CtLocalVariable<T> aCtLocalVariable = spoon.support.visitor.clone.CloneBuilder.build(this.builder, localVariable, localVariable.getFactory().Core().getOrCreateLocalVariable());
        aCtLocalVariable.setAnnotations(this.cloneHelper.clone(localVariable.getAnnotations()));
        aCtLocalVariable.setType(this.cloneHelper.clone(localVariable.getType()));
        aCtLocalVariable.setDefaultExpression(this.cloneHelper.clone(localVariable.getDefaultExpression()));
        aCtLocalVariable.setComments(this.cloneHelper.clone(localVariable.getComments()));
        this.other = aCtLocalVariable;
    }

    public <T> void visitCtLocalVariableReference(final spoon.reflect.reference.CtLocalVariableReference<T> reference) {
        spoon.reflect.reference.CtLocalVariableReference<T> aCtLocalVariableReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().getOrCreateLocalVariableReference());
        aCtLocalVariableReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtLocalVariableReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.other = aCtLocalVariableReference;
    }

    public <T> void visitCtCatchVariable(final spoon.reflect.code.CtCatchVariable<T> catchVariable) {
        spoon.reflect.code.CtCatchVariable<T> aCtCatchVariable = spoon.support.visitor.clone.CloneBuilder.build(this.builder, catchVariable, catchVariable.getFactory().Core().getOrCreateCatchVariable());
        aCtCatchVariable.setComments(this.cloneHelper.clone(catchVariable.getComments()));
        aCtCatchVariable.setAnnotations(this.cloneHelper.clone(catchVariable.getAnnotations()));
        aCtCatchVariable.setDefaultExpression(this.cloneHelper.clone(catchVariable.getDefaultExpression()));
        aCtCatchVariable.setType(this.cloneHelper.clone(catchVariable.getType()));
        aCtCatchVariable.setMultiTypes(this.cloneHelper.clone(catchVariable.getMultiTypes()));
        this.other = aCtCatchVariable;
    }

    public <T> void visitCtCatchVariableReference(final spoon.reflect.reference.CtCatchVariableReference<T> reference) {
        spoon.reflect.reference.CtCatchVariableReference<T> aCtCatchVariableReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().getOrCreateCatchVariableReference());
        aCtCatchVariableReference.setComments(this.cloneHelper.clone(reference.getComments()));
        aCtCatchVariableReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtCatchVariableReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.other = aCtCatchVariableReference;
    }

    public <T> void visitCtMethod(final spoon.reflect.declaration.CtMethod<T> m) {
        spoon.reflect.declaration.CtMethod<T> aCtMethod = spoon.support.visitor.clone.CloneBuilder.build(this.builder, m, m.getFactory().Core().getOrCreateMethod());
        aCtMethod.setAnnotations(this.cloneHelper.clone(m.getAnnotations()));
        aCtMethod.setFormalCtTypeParameters(this.cloneHelper.clone(m.getFormalCtTypeParameters()));
        aCtMethod.setType(this.cloneHelper.clone(m.getType()));
        aCtMethod.setParameters(this.cloneHelper.clone(m.getParameters()));
        aCtMethod.setThrownTypes(this.cloneHelper.clone(m.getThrownTypes()));
        aCtMethod.setBody(this.cloneHelper.clone(m.getBody()));
        aCtMethod.setComments(this.cloneHelper.clone(m.getComments()));
        this.other = aCtMethod;
    }

    @java.lang.Override
    public <T> void visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod<T> annotationMethod) {
        spoon.reflect.declaration.CtAnnotationMethod<T> aCtAnnotationMethod = spoon.support.visitor.clone.CloneBuilder.build(this.builder, annotationMethod, annotationMethod.getFactory().Core().getOrCreateAnnotationMethod());
        aCtAnnotationMethod.setAnnotations(this.cloneHelper.clone(annotationMethod.getAnnotations()));
        aCtAnnotationMethod.setType(this.cloneHelper.clone(annotationMethod.getType()));
        aCtAnnotationMethod.setDefaultExpression(this.cloneHelper.clone(annotationMethod.getDefaultExpression()));
        aCtAnnotationMethod.setComments(this.cloneHelper.clone(annotationMethod.getComments()));
        this.other = aCtAnnotationMethod;
    }

    public <T> void visitCtNewArray(final spoon.reflect.code.CtNewArray<T> newArray) {
        spoon.reflect.code.CtNewArray<T> aCtNewArray = spoon.support.visitor.clone.CloneBuilder.build(this.builder, newArray, newArray.getFactory().Core().getOrCreateNewArray());
        aCtNewArray.setAnnotations(this.cloneHelper.clone(newArray.getAnnotations()));
        aCtNewArray.setType(this.cloneHelper.clone(newArray.getType()));
        aCtNewArray.setTypeCasts(this.cloneHelper.clone(newArray.getTypeCasts()));
        aCtNewArray.setElements(this.cloneHelper.clone(newArray.getElements()));
        aCtNewArray.setDimensionExpressions(this.cloneHelper.clone(newArray.getDimensionExpressions()));
        aCtNewArray.setComments(this.cloneHelper.clone(newArray.getComments()));
        this.other = aCtNewArray;
    }

    @java.lang.Override
    public <T> void visitCtConstructorCall(final spoon.reflect.code.CtConstructorCall<T> ctConstructorCall) {
        spoon.reflect.code.CtConstructorCall<T> aCtConstructorCall = spoon.support.visitor.clone.CloneBuilder.build(this.builder, ctConstructorCall, ctConstructorCall.getFactory().Core().getOrCreateConstructorCall());
        aCtConstructorCall.setAnnotations(this.cloneHelper.clone(ctConstructorCall.getAnnotations()));
        aCtConstructorCall.setTypeCasts(this.cloneHelper.clone(ctConstructorCall.getTypeCasts()));
        aCtConstructorCall.setExecutable(this.cloneHelper.clone(ctConstructorCall.getExecutable()));
        aCtConstructorCall.setTarget(this.cloneHelper.clone(ctConstructorCall.getTarget()));
        aCtConstructorCall.setArguments(this.cloneHelper.clone(ctConstructorCall.getArguments()));
        aCtConstructorCall.setComments(this.cloneHelper.clone(ctConstructorCall.getComments()));
        this.other = aCtConstructorCall;
    }

    public <T> void visitCtNewClass(final spoon.reflect.code.CtNewClass<T> newClass) {
        spoon.reflect.code.CtNewClass<T> aCtNewClass = spoon.support.visitor.clone.CloneBuilder.build(this.builder, newClass, newClass.getFactory().Core().getOrCreateNewClass());
        aCtNewClass.setAnnotations(this.cloneHelper.clone(newClass.getAnnotations()));
        aCtNewClass.setTypeCasts(this.cloneHelper.clone(newClass.getTypeCasts()));
        aCtNewClass.setExecutable(this.cloneHelper.clone(newClass.getExecutable()));
        aCtNewClass.setTarget(this.cloneHelper.clone(newClass.getTarget()));
        aCtNewClass.setArguments(this.cloneHelper.clone(newClass.getArguments()));
        aCtNewClass.setAnonymousClass(this.cloneHelper.clone(newClass.getAnonymousClass()));
        aCtNewClass.setComments(this.cloneHelper.clone(newClass.getComments()));
        this.other = aCtNewClass;
    }

    @java.lang.Override
    public <T> void visitCtLambda(final spoon.reflect.code.CtLambda<T> lambda) {
        spoon.reflect.code.CtLambda<T> aCtLambda = spoon.support.visitor.clone.CloneBuilder.build(this.builder, lambda, lambda.getFactory().Core().getOrCreateLambda());
        aCtLambda.setAnnotations(this.cloneHelper.clone(lambda.getAnnotations()));
        aCtLambda.setType(this.cloneHelper.clone(lambda.getType()));
        aCtLambda.setTypeCasts(this.cloneHelper.clone(lambda.getTypeCasts()));
        aCtLambda.setParameters(this.cloneHelper.clone(lambda.getParameters()));
        aCtLambda.setThrownTypes(this.cloneHelper.clone(lambda.getThrownTypes()));
        aCtLambda.setBody(this.cloneHelper.clone(lambda.getBody()));
        aCtLambda.setExpression(this.cloneHelper.clone(lambda.getExpression()));
        aCtLambda.setComments(this.cloneHelper.clone(lambda.getComments()));
        this.other = aCtLambda;
    }

    @java.lang.Override
    public <T, E extends spoon.reflect.code.CtExpression<?>> void visitCtExecutableReferenceExpression(final spoon.reflect.code.CtExecutableReferenceExpression<T, E> expression) {
        spoon.reflect.code.CtExecutableReferenceExpression<T, E> aCtExecutableReferenceExpression = spoon.support.visitor.clone.CloneBuilder.build(this.builder, expression, expression.getFactory().Core().getOrCreateExecutableReferenceExpression());
        aCtExecutableReferenceExpression.setComments(this.cloneHelper.clone(expression.getComments()));
        aCtExecutableReferenceExpression.setAnnotations(this.cloneHelper.clone(expression.getAnnotations()));
        aCtExecutableReferenceExpression.setType(this.cloneHelper.clone(expression.getType()));
        aCtExecutableReferenceExpression.setTypeCasts(this.cloneHelper.clone(expression.getTypeCasts()));
        aCtExecutableReferenceExpression.setExecutable(this.cloneHelper.clone(expression.getExecutable()));
        aCtExecutableReferenceExpression.setTarget(this.cloneHelper.clone(expression.getTarget()));
        this.other = aCtExecutableReferenceExpression;
    }

    public <T, A extends T> void visitCtOperatorAssignment(final spoon.reflect.code.CtOperatorAssignment<T, A> assignment) {
        spoon.reflect.code.CtOperatorAssignment<T, A> aCtOperatorAssignment = spoon.support.visitor.clone.CloneBuilder.build(this.builder, assignment, assignment.getFactory().Core().getOrCreateOperatorAssignment());
        aCtOperatorAssignment.setAnnotations(this.cloneHelper.clone(assignment.getAnnotations()));
        aCtOperatorAssignment.setType(this.cloneHelper.clone(assignment.getType()));
        aCtOperatorAssignment.setTypeCasts(this.cloneHelper.clone(assignment.getTypeCasts()));
        aCtOperatorAssignment.setAssigned(this.cloneHelper.clone(assignment.getAssigned()));
        aCtOperatorAssignment.setAssignment(this.cloneHelper.clone(assignment.getAssignment()));
        aCtOperatorAssignment.setComments(this.cloneHelper.clone(assignment.getComments()));
        this.other = aCtOperatorAssignment;
    }

    public void visitCtPackage(final spoon.reflect.declaration.CtPackage ctPackage) {
        spoon.reflect.declaration.CtPackage aCtPackage = spoon.support.visitor.clone.CloneBuilder.build(this.builder, ctPackage, ctPackage.getFactory().Core().getOrCreatePackage());
        aCtPackage.setAnnotations(this.cloneHelper.clone(ctPackage.getAnnotations()));
        aCtPackage.setPackages(this.cloneHelper.clone(ctPackage.getPackages()));
        aCtPackage.setTypes(this.cloneHelper.clone(ctPackage.getTypes()));
        aCtPackage.setComments(this.cloneHelper.clone(ctPackage.getComments()));
        this.other = aCtPackage;
    }

    public void visitCtPackageReference(final spoon.reflect.reference.CtPackageReference reference) {
        spoon.reflect.reference.CtPackageReference aCtPackageReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().getOrCreatePackageReference());
        aCtPackageReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.other = aCtPackageReference;
    }

    public <T> void visitCtParameter(final spoon.reflect.declaration.CtParameter<T> parameter) {
        spoon.reflect.declaration.CtParameter<T> aCtParameter = spoon.support.visitor.clone.CloneBuilder.build(this.builder, parameter, parameter.getFactory().Core().getOrCreateParameter());
        aCtParameter.setAnnotations(this.cloneHelper.clone(parameter.getAnnotations()));
        aCtParameter.setType(this.cloneHelper.clone(parameter.getType()));
        aCtParameter.setComments(this.cloneHelper.clone(parameter.getComments()));
        this.other = aCtParameter;
    }

    public <T> void visitCtParameterReference(final spoon.reflect.reference.CtParameterReference<T> reference) {
        spoon.reflect.reference.CtParameterReference<T> aCtParameterReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().getOrCreateParameterReference());
        aCtParameterReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtParameterReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        aCtParameterReference.setDeclaringExecutable(this.cloneHelper.clone(reference.getDeclaringExecutable()));
        this.other = aCtParameterReference;
    }

    public <R> void visitCtReturn(final spoon.reflect.code.CtReturn<R> returnStatement) {
        spoon.reflect.code.CtReturn<R> aCtReturn = spoon.support.visitor.clone.CloneBuilder.build(this.builder, returnStatement, returnStatement.getFactory().Core().getOrCreateReturn());
        aCtReturn.setAnnotations(this.cloneHelper.clone(returnStatement.getAnnotations()));
        aCtReturn.setReturnedExpression(this.cloneHelper.clone(returnStatement.getReturnedExpression()));
        aCtReturn.setComments(this.cloneHelper.clone(returnStatement.getComments()));
        this.other = aCtReturn;
    }

    public <R> void visitCtStatementList(final spoon.reflect.code.CtStatementList statements) {
        spoon.reflect.code.CtStatementList aCtStatementList = spoon.support.visitor.clone.CloneBuilder.build(this.builder, statements, statements.getFactory().Core().getOrCreateStatementList());
        aCtStatementList.setAnnotations(this.cloneHelper.clone(statements.getAnnotations()));
        aCtStatementList.setStatements(this.cloneHelper.clone(statements.getStatements()));
        aCtStatementList.setComments(this.cloneHelper.clone(statements.getComments()));
        this.other = aCtStatementList;
    }

    public <S> void visitCtSwitch(final spoon.reflect.code.CtSwitch<S> switchStatement) {
        spoon.reflect.code.CtSwitch<S> aCtSwitch = spoon.support.visitor.clone.CloneBuilder.build(this.builder, switchStatement, switchStatement.getFactory().Core().getOrCreateSwitch());
        aCtSwitch.setAnnotations(this.cloneHelper.clone(switchStatement.getAnnotations()));
        aCtSwitch.setSelector(this.cloneHelper.clone(switchStatement.getSelector()));
        aCtSwitch.setCases(this.cloneHelper.clone(switchStatement.getCases()));
        aCtSwitch.setComments(this.cloneHelper.clone(switchStatement.getComments()));
        this.other = aCtSwitch;
    }

    public void visitCtSynchronized(final spoon.reflect.code.CtSynchronized synchro) {
        spoon.reflect.code.CtSynchronized aCtSynchronized = spoon.support.visitor.clone.CloneBuilder.build(this.builder, synchro, synchro.getFactory().Core().getOrCreateSynchronized());
        aCtSynchronized.setAnnotations(this.cloneHelper.clone(synchro.getAnnotations()));
        aCtSynchronized.setExpression(this.cloneHelper.clone(synchro.getExpression()));
        aCtSynchronized.setBlock(this.cloneHelper.clone(synchro.getBlock()));
        aCtSynchronized.setComments(this.cloneHelper.clone(synchro.getComments()));
        this.other = aCtSynchronized;
    }

    public void visitCtThrow(final spoon.reflect.code.CtThrow throwStatement) {
        spoon.reflect.code.CtThrow aCtThrow = spoon.support.visitor.clone.CloneBuilder.build(this.builder, throwStatement, throwStatement.getFactory().Core().getOrCreateThrow());
        aCtThrow.setAnnotations(this.cloneHelper.clone(throwStatement.getAnnotations()));
        aCtThrow.setThrownExpression(this.cloneHelper.clone(throwStatement.getThrownExpression()));
        aCtThrow.setComments(this.cloneHelper.clone(throwStatement.getComments()));
        this.other = aCtThrow;
    }

    public void visitCtTry(final spoon.reflect.code.CtTry tryBlock) {
        spoon.reflect.code.CtTry aCtTry = spoon.support.visitor.clone.CloneBuilder.build(this.builder, tryBlock, tryBlock.getFactory().Core().getOrCreateTry());
        aCtTry.setAnnotations(this.cloneHelper.clone(tryBlock.getAnnotations()));
        aCtTry.setBody(this.cloneHelper.clone(tryBlock.getBody()));
        aCtTry.setCatchers(this.cloneHelper.clone(tryBlock.getCatchers()));
        aCtTry.setFinalizer(this.cloneHelper.clone(tryBlock.getFinalizer()));
        aCtTry.setComments(this.cloneHelper.clone(tryBlock.getComments()));
        this.other = aCtTry;
    }

    @java.lang.Override
    public void visitCtTryWithResource(final spoon.reflect.code.CtTryWithResource tryWithResource) {
        spoon.reflect.code.CtTryWithResource aCtTryWithResource = spoon.support.visitor.clone.CloneBuilder.build(this.builder, tryWithResource, tryWithResource.getFactory().Core().getOrCreateTryWithResource());
        aCtTryWithResource.setAnnotations(this.cloneHelper.clone(tryWithResource.getAnnotations()));
        aCtTryWithResource.setResources(this.cloneHelper.clone(tryWithResource.getResources()));
        aCtTryWithResource.setBody(this.cloneHelper.clone(tryWithResource.getBody()));
        aCtTryWithResource.setCatchers(this.cloneHelper.clone(tryWithResource.getCatchers()));
        aCtTryWithResource.setFinalizer(this.cloneHelper.clone(tryWithResource.getFinalizer()));
        aCtTryWithResource.setComments(this.cloneHelper.clone(tryWithResource.getComments()));
        this.other = aCtTryWithResource;
    }

    public void visitCtTypeParameterReference(final spoon.reflect.reference.CtTypeParameterReference ref) {
        spoon.reflect.reference.CtTypeParameterReference aCtTypeParameterReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, ref, ref.getFactory().Core().getOrCreateTypeParameterReference());
        aCtTypeParameterReference.setPackage(this.cloneHelper.clone(ref.getPackage()));
        aCtTypeParameterReference.setDeclaringType(this.cloneHelper.clone(ref.getDeclaringType()));
        aCtTypeParameterReference.setAnnotations(this.cloneHelper.clone(ref.getAnnotations()));
        aCtTypeParameterReference.setBoundingType(this.cloneHelper.clone(ref.getBoundingType()));
        this.other = aCtTypeParameterReference;
    }

    @java.lang.Override
    public void visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference wildcardReference) {
        spoon.reflect.reference.CtWildcardReference aCtWildcardReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, wildcardReference, wildcardReference.getFactory().Core().getOrCreateWildcardReference());
        aCtWildcardReference.setPackage(this.cloneHelper.clone(wildcardReference.getPackage()));
        aCtWildcardReference.setDeclaringType(this.cloneHelper.clone(wildcardReference.getDeclaringType()));
        aCtWildcardReference.setAnnotations(this.cloneHelper.clone(wildcardReference.getAnnotations()));
        aCtWildcardReference.setBoundingType(this.cloneHelper.clone(wildcardReference.getBoundingType()));
        this.other = aCtWildcardReference;
    }

    @java.lang.Override
    public <T> void visitCtIntersectionTypeReference(final spoon.reflect.reference.CtIntersectionTypeReference<T> reference) {
        spoon.reflect.reference.CtIntersectionTypeReference<T> aCtIntersectionTypeReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().getOrCreateIntersectionTypeReference());
        aCtIntersectionTypeReference.setPackage(this.cloneHelper.clone(reference.getPackage()));
        aCtIntersectionTypeReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtIntersectionTypeReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        aCtIntersectionTypeReference.setBounds(this.cloneHelper.clone(reference.getBounds()));
        this.other = aCtIntersectionTypeReference;
    }

    public <T> void visitCtTypeReference(final spoon.reflect.reference.CtTypeReference<T> reference) {
        spoon.reflect.reference.CtTypeReference<T> aCtTypeReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().getOrCreateTypeReference());
        aCtTypeReference.setPackage(this.cloneHelper.clone(reference.getPackage()));
        aCtTypeReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtTypeReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));
        aCtTypeReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        aCtTypeReference.setComments(this.cloneHelper.clone(reference.getComments()));
        this.other = aCtTypeReference;
    }

    @java.lang.Override
    public <T> void visitCtTypeAccess(final spoon.reflect.code.CtTypeAccess<T> typeAccess) {
        spoon.reflect.code.CtTypeAccess<T> aCtTypeAccess = spoon.support.visitor.clone.CloneBuilder.build(this.builder, typeAccess, typeAccess.getFactory().Core().getOrCreateTypeAccess());
        aCtTypeAccess.setAnnotations(this.cloneHelper.clone(typeAccess.getAnnotations()));
        aCtTypeAccess.setTypeCasts(this.cloneHelper.clone(typeAccess.getTypeCasts()));
        aCtTypeAccess.setAccessedType(this.cloneHelper.clone(typeAccess.getAccessedType()));
        aCtTypeAccess.setComments(this.cloneHelper.clone(typeAccess.getComments()));
        this.other = aCtTypeAccess;
    }

    public <T> void visitCtUnaryOperator(final spoon.reflect.code.CtUnaryOperator<T> operator) {
        spoon.reflect.code.CtUnaryOperator<T> aCtUnaryOperator = spoon.support.visitor.clone.CloneBuilder.build(this.builder, operator, operator.getFactory().Core().getOrCreateUnaryOperator());
        aCtUnaryOperator.setAnnotations(this.cloneHelper.clone(operator.getAnnotations()));
        aCtUnaryOperator.setType(this.cloneHelper.clone(operator.getType()));
        aCtUnaryOperator.setTypeCasts(this.cloneHelper.clone(operator.getTypeCasts()));
        aCtUnaryOperator.setOperand(this.cloneHelper.clone(operator.getOperand()));
        aCtUnaryOperator.setComments(this.cloneHelper.clone(operator.getComments()));
        this.other = aCtUnaryOperator;
    }

    @java.lang.Override
    public <T> void visitCtVariableRead(final spoon.reflect.code.CtVariableRead<T> variableRead) {
        spoon.reflect.code.CtVariableRead<T> aCtVariableRead = spoon.support.visitor.clone.CloneBuilder.build(this.builder, variableRead, variableRead.getFactory().Core().getOrCreateVariableRead());
        aCtVariableRead.setAnnotations(this.cloneHelper.clone(variableRead.getAnnotations()));
        aCtVariableRead.setTypeCasts(this.cloneHelper.clone(variableRead.getTypeCasts()));
        aCtVariableRead.setVariable(this.cloneHelper.clone(variableRead.getVariable()));
        aCtVariableRead.setComments(this.cloneHelper.clone(variableRead.getComments()));
        this.other = aCtVariableRead;
    }

    @java.lang.Override
    public <T> void visitCtVariableWrite(final spoon.reflect.code.CtVariableWrite<T> variableWrite) {
        spoon.reflect.code.CtVariableWrite<T> aCtVariableWrite = spoon.support.visitor.clone.CloneBuilder.build(this.builder, variableWrite, variableWrite.getFactory().Core().getOrCreateVariableWrite());
        aCtVariableWrite.setAnnotations(this.cloneHelper.clone(variableWrite.getAnnotations()));
        aCtVariableWrite.setTypeCasts(this.cloneHelper.clone(variableWrite.getTypeCasts()));
        aCtVariableWrite.setVariable(this.cloneHelper.clone(variableWrite.getVariable()));
        aCtVariableWrite.setComments(this.cloneHelper.clone(variableWrite.getComments()));
        this.other = aCtVariableWrite;
    }

    public void visitCtWhile(final spoon.reflect.code.CtWhile whileLoop) {
        spoon.reflect.code.CtWhile aCtWhile = spoon.support.visitor.clone.CloneBuilder.build(this.builder, whileLoop, whileLoop.getFactory().Core().getOrCreateWhile());
        aCtWhile.setAnnotations(this.cloneHelper.clone(whileLoop.getAnnotations()));
        aCtWhile.setLoopingExpression(this.cloneHelper.clone(whileLoop.getLoopingExpression()));
        aCtWhile.setBody(this.cloneHelper.clone(whileLoop.getBody()));
        aCtWhile.setComments(this.cloneHelper.clone(whileLoop.getComments()));
        this.other = aCtWhile;
    }

    public <T> void visitCtCodeSnippetExpression(final spoon.reflect.code.CtCodeSnippetExpression<T> expression) {
        spoon.reflect.code.CtCodeSnippetExpression<T> aCtCodeSnippetExpression = spoon.support.visitor.clone.CloneBuilder.build(this.builder, expression, expression.getFactory().Core().getOrCreateCodeSnippetExpression());
        aCtCodeSnippetExpression.setType(this.cloneHelper.clone(expression.getType()));
        aCtCodeSnippetExpression.setComments(this.cloneHelper.clone(expression.getComments()));
        aCtCodeSnippetExpression.setAnnotations(this.cloneHelper.clone(expression.getAnnotations()));
        aCtCodeSnippetExpression.setTypeCasts(this.cloneHelper.clone(expression.getTypeCasts()));
        this.other = aCtCodeSnippetExpression;
    }

    public void visitCtCodeSnippetStatement(final spoon.reflect.code.CtCodeSnippetStatement statement) {
        spoon.reflect.code.CtCodeSnippetStatement aCtCodeSnippetStatement = spoon.support.visitor.clone.CloneBuilder.build(this.builder, statement, statement.getFactory().Core().getOrCreateCodeSnippetStatement());
        aCtCodeSnippetStatement.setComments(this.cloneHelper.clone(statement.getComments()));
        aCtCodeSnippetStatement.setAnnotations(this.cloneHelper.clone(statement.getAnnotations()));
        this.other = aCtCodeSnippetStatement;
    }

    public <T> void visitCtUnboundVariableReference(final spoon.reflect.reference.CtUnboundVariableReference<T> reference) {
        spoon.reflect.reference.CtUnboundVariableReference<T> aCtUnboundVariableReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().getOrCreateUnboundVariableReference());
        aCtUnboundVariableReference.setType(this.cloneHelper.clone(reference.getType()));
        this.other = aCtUnboundVariableReference;
    }

    @java.lang.Override
    public <T> void visitCtFieldRead(final spoon.reflect.code.CtFieldRead<T> fieldRead) {
        spoon.reflect.code.CtFieldRead<T> aCtFieldRead = spoon.support.visitor.clone.CloneBuilder.build(this.builder, fieldRead, fieldRead.getFactory().Core().getOrCreateFieldRead());
        aCtFieldRead.setAnnotations(this.cloneHelper.clone(fieldRead.getAnnotations()));
        aCtFieldRead.setTypeCasts(this.cloneHelper.clone(fieldRead.getTypeCasts()));
        aCtFieldRead.setTarget(this.cloneHelper.clone(fieldRead.getTarget()));
        aCtFieldRead.setVariable(this.cloneHelper.clone(fieldRead.getVariable()));
        aCtFieldRead.setComments(this.cloneHelper.clone(fieldRead.getComments()));
        this.other = aCtFieldRead;
    }

    @java.lang.Override
    public <T> void visitCtFieldWrite(final spoon.reflect.code.CtFieldWrite<T> fieldWrite) {
        spoon.reflect.code.CtFieldWrite<T> aCtFieldWrite = spoon.support.visitor.clone.CloneBuilder.build(this.builder, fieldWrite, fieldWrite.getFactory().Core().getOrCreateFieldWrite());
        aCtFieldWrite.setAnnotations(this.cloneHelper.clone(fieldWrite.getAnnotations()));
        aCtFieldWrite.setTypeCasts(this.cloneHelper.clone(fieldWrite.getTypeCasts()));
        aCtFieldWrite.setTarget(this.cloneHelper.clone(fieldWrite.getTarget()));
        aCtFieldWrite.setVariable(this.cloneHelper.clone(fieldWrite.getVariable()));
        aCtFieldWrite.setComments(this.cloneHelper.clone(fieldWrite.getComments()));
        this.other = aCtFieldWrite;
    }

    @java.lang.Override
    public <T> void visitCtSuperAccess(final spoon.reflect.code.CtSuperAccess<T> f) {
        spoon.reflect.code.CtSuperAccess<T> aCtSuperAccess = spoon.support.visitor.clone.CloneBuilder.build(this.builder, f, f.getFactory().Core().getOrCreateSuperAccess());
        aCtSuperAccess.setType(this.cloneHelper.clone(f.getType()));
        aCtSuperAccess.setComments(this.cloneHelper.clone(f.getComments()));
        aCtSuperAccess.setAnnotations(this.cloneHelper.clone(f.getAnnotations()));
        aCtSuperAccess.setTypeCasts(this.cloneHelper.clone(f.getTypeCasts()));
        aCtSuperAccess.setTarget(this.cloneHelper.clone(f.getTarget()));
        aCtSuperAccess.setVariable(this.cloneHelper.clone(f.getVariable()));
        this.other = aCtSuperAccess;
    }

    @java.lang.Override
    public void visitCtComment(final spoon.reflect.code.CtComment comment) {
        spoon.reflect.code.CtComment aCtComment = spoon.support.visitor.clone.CloneBuilder.build(this.builder, comment, comment.getFactory().Core().getOrCreateComment());
        aCtComment.setComments(this.cloneHelper.clone(comment.getComments()));
        aCtComment.setAnnotations(this.cloneHelper.clone(comment.getAnnotations()));
        this.other = aCtComment;
    }

    @java.lang.Override
    public void visitCtJavaDoc(final spoon.reflect.code.CtJavaDoc javaDoc) {
        spoon.reflect.code.CtJavaDoc aCtJavaDoc = spoon.support.visitor.clone.CloneBuilder.build(this.builder, javaDoc, javaDoc.getFactory().Core().getOrCreateJavaDoc());
        aCtJavaDoc.setComments(this.cloneHelper.clone(javaDoc.getComments()));
        aCtJavaDoc.setAnnotations(this.cloneHelper.clone(javaDoc.getAnnotations()));
        aCtJavaDoc.setTags(this.cloneHelper.clone(javaDoc.getTags()));
        this.other = aCtJavaDoc;
    }

    @java.lang.Override
    public void visitCtJavaDocTag(final spoon.reflect.code.CtJavaDocTag docTag) {
        spoon.reflect.code.CtJavaDocTag aCtJavaDocTag = spoon.support.visitor.clone.CloneBuilder.build(this.builder, docTag, docTag.getFactory().Core().getOrC]reateJavaDocTag());
...>
	at spoon.processing.CtGenerationTest.testGenerateCloneVisitor(CtGenerationTest.java:132)

Running spoon.support.compiler.classpath.ComputeClasspathTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in spoon.support.compiler.classpath.ComputeClasspathTest
Running spoon.support.compiler.jdt.ExtendedStringLiteralTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in spoon.support.compiler.jdt.ExtendedStringLiteralTest
Running spoon.support.compiler.jdt.JDTBuilderTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in spoon.support.compiler.jdt.JDTBuilderTest
Running spoon.support.compiler.jdt.JDTBatchCompilerTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.114 sec - in spoon.support.compiler.jdt.JDTBatchCompilerTest
Running spoon.support.visitor.java.JavaReflectionTreeBuilderTest
Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.053 sec - in spoon.support.visitor.java.JavaReflectionTreeBuilderTest
Running spoon.MavenLauncherTest
Tests run: 4, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.224 sec <<< FAILURE! - in spoon.MavenLauncherTest
spoonMavenLauncherTest(spoon.MavenLauncherTest)  Time elapsed: 0.082 sec  <<< FAILURE!
java.lang.AssertionError: expected:<5> but was:<0>
	at spoon.MavenLauncherTest.spoonMavenLauncherTest(MavenLauncherTest.java:16)

Running spoon.testing.CtPackageAssertTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.115 sec - in spoon.testing.CtPackageAssertTest
Running spoon.testing.FileAssertTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.153 sec - in spoon.testing.FileAssertTest
Running spoon.testing.CtElementAssertTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.228 sec - in spoon.testing.CtElementAssertTest
Running spoon.testing.AbstractAssertTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.286 sec - in spoon.testing.AbstractAssertTest

Results :

Failed tests: 
  MavenLauncherTest.spoonMavenLauncherTest:16 expected:<5> but was:<0>
  CtGenerationTest.testGenerateCloneVisitor:132 CloneVisitor different expected:<...getFactory().Core().[createAnnotation());
        aCtAnnotation.setType(this.cloneHelper.clone(annotation.getType()));
        aCtAnnotation.setComments(this.cloneHelper.clone(annotation.getComments()));
        aCtAnnotation.setAnnotationType(this.cloneHelper.clone(annotation.getAnnotationType()));
        aCtAnnotation.setAnnotations(this.cloneHelper.clone(annotation.getAnnotations()));
        aCtAnnotation.setValues(this.cloneHelper.clone(annotation.getValues()));
        this.other = aCtAnnotation;
    }

    public <A extends java.lang.annotation.Annotation> void visitCtAnnotationType(final spoon.reflect.declaration.CtAnnotationType<A> annotationType) {
        spoon.reflect.declaration.CtAnnotationType<A> aCtAnnotationType = spoon.support.visitor.clone.CloneBuilder.build(this.builder, annotationType, annotationType.getFactory().Core().createAnnotationType());
        aCtAnnotationType.setAnnotations(this.cloneHelper.clone(annotationType.getAnnotations()));
        aCtAnnotationType.setTypeMembers(this.cloneHelper.clone(annotationType.getTypeMembers()));
        aCtAnnotationType.setComments(this.cloneHelper.clone(annotationType.getComments()));
        this.other = aCtAnnotationType;
    }

    public void visitCtAnonymousExecutable(final spoon.reflect.declaration.CtAnonymousExecutable anonymousExec) {
        spoon.reflect.declaration.CtAnonymousExecutable aCtAnonymousExecutable = spoon.support.visitor.clone.CloneBuilder.build(this.builder, anonymousExec, anonymousExec.getFactory().Core().createAnonymousExecutable());
        aCtAnonymousExecutable.setAnnotations(this.cloneHelper.clone(anonymousExec.getAnnotations()));
        aCtAnonymousExecutable.setBody(this.cloneHelper.clone(anonymousExec.getBody()));
        aCtAnonymousExecutable.setComments(this.cloneHelper.clone(anonymousExec.getComments()));
        this.other = aCtAnonymousExecutable;
    }

    @java.lang.Override
    public <T> void visitCtArrayRead(final spoon.reflect.code.CtArrayRead<T> arrayRead) {
        spoon.reflect.code.CtArrayRead<T> aCtArrayRead = spoon.support.visitor.clone.CloneBuilder.build(this.builder, arrayRead, arrayRead.getFactory().Core().createArrayRead());
        aCtArrayRead.setAnnotations(this.cloneHelper.clone(arrayRead.getAnnotations()));
        aCtArrayRead.setType(this.cloneHelper.clone(arrayRead.getType()));
        aCtArrayRead.setTypeCasts(this.cloneHelper.clone(arrayRead.getTypeCasts()));
        aCtArrayRead.setTarget(this.cloneHelper.clone(arrayRead.getTarget()));
        aCtArrayRead.setIndexExpression(this.cloneHelper.clone(arrayRead.getIndexExpression()));
        aCtArrayRead.setComments(this.cloneHelper.clone(arrayRead.getComments()));
        this.other = aCtArrayRead;
    }

    @java.lang.Override
    public <T> void visitCtArrayWrite(final spoon.reflect.code.CtArrayWrite<T> arrayWrite) {
        spoon.reflect.code.CtArrayWrite<T> aCtArrayWrite = spoon.support.visitor.clone.CloneBuilder.build(this.builder, arrayWrite, arrayWrite.getFactory().Core().createArrayWrite());
        aCtArrayWrite.setAnnotations(this.cloneHelper.clone(arrayWrite.getAnnotations()));
        aCtArrayWrite.setType(this.cloneHelper.clone(arrayWrite.getType()));
        aCtArrayWrite.setTypeCasts(this.cloneHelper.clone(arrayWrite.getTypeCasts()));
        aCtArrayWrite.setTarget(this.cloneHelper.clone(arrayWrite.getTarget()));
        aCtArrayWrite.setIndexExpression(this.cloneHelper.clone(arrayWrite.getIndexExpression()));
        aCtArrayWrite.setComments(this.cloneHelper.clone(arrayWrite.getComments()));
        this.other = aCtArrayWrite;
    }

    public <T> void visitCtArrayTypeReference(final spoon.reflect.reference.CtArrayTypeReference<T> reference) {
        spoon.reflect.reference.CtArrayTypeReference<T> aCtArrayTypeReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().createArrayTypeReference());
        aCtArrayTypeReference.setComments(this.cloneHelper.clone(reference.getComments()));
        aCtArrayTypeReference.setPackage(this.cloneHelper.clone(reference.getPackage()));
        aCtArrayTypeReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtArrayTypeReference.setComponentType(this.cloneHelper.clone(reference.getComponentType()));
        aCtArrayTypeReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));
        aCtArrayTypeReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.other = aCtArrayTypeReference;
    }

    public <T> void visitCtAssert(final spoon.reflect.code.CtAssert<T> asserted) {
        spoon.reflect.code.CtAssert<T> aCtAssert = spoon.support.visitor.clone.CloneBuilder.build(this.builder, asserted, asserted.getFactory().Core().createAssert());
        aCtAssert.setAnnotations(this.cloneHelper.clone(asserted.getAnnotations()));
        aCtAssert.setAssertExpression(this.cloneHelper.clone(asserted.getAssertExpression()));
        aCtAssert.setExpression(this.cloneHelper.clone(asserted.getExpression()));
        aCtAssert.setComments(this.cloneHelper.clone(asserted.getComments()));
        this.other = aCtAssert;
    }

    public <T, A extends T> void visitCtAssignment(final spoon.reflect.code.CtAssignment<T, A> assignement) {
        spoon.reflect.code.CtAssignment<T, A> aCtAssignment = spoon.support.visitor.clone.CloneBuilder.build(this.builder, assignement, assignement.getFactory().Core().createAssignment());
        aCtAssignment.setAnnotations(this.cloneHelper.clone(assignement.getAnnotations()));
        aCtAssignment.setType(this.cloneHelper.clone(assignement.getType()));
        aCtAssignment.setTypeCasts(this.cloneHelper.clone(assignement.getTypeCasts()));
        aCtAssignment.setAssigned(this.cloneHelper.clone(assignement.getAssigned()));
        aCtAssignment.setAssignment(this.cloneHelper.clone(assignement.getAssignment()));
        aCtAssignment.setComments(this.cloneHelper.clone(assignement.getComments()));
        this.other = aCtAssignment;
    }

    public <T> void visitCtBinaryOperator(final spoon.reflect.code.CtBinaryOperator<T> operator) {
        spoon.reflect.code.CtBinaryOperator<T> aCtBinaryOperator = spoon.support.visitor.clone.CloneBuilder.build(this.builder, operator, operator.getFactory().Core().createBinaryOperator());
        aCtBinaryOperator.setAnnotations(this.cloneHelper.clone(operator.getAnnotations()));
        aCtBinaryOperator.setType(this.cloneHelper.clone(operator.getType()));
        aCtBinaryOperator.setTypeCasts(this.cloneHelper.clone(operator.getTypeCasts()));
        aCtBinaryOperator.setLeftHandOperand(this.cloneHelper.clone(operator.getLeftHandOperand()));
        aCtBinaryOperator.setRightHandOperand(this.cloneHelper.clone(operator.getRightHandOperand()));
        aCtBinaryOperator.setComments(this.cloneHelper.clone(operator.getComments()));
        this.other = aCtBinaryOperator;
    }

    public <R> void visitCtBlock(final spoon.reflect.code.CtBlock<R> block) {
        spoon.reflect.code.CtBlock<R> aCtBlock = spoon.support.visitor.clone.CloneBuilder.build(this.builder, block, block.getFactory().Core().createBlock());
        aCtBlock.setAnnotations(this.cloneHelper.clone(block.getAnnotations()));
        aCtBlock.setStatements(this.cloneHelper.clone(block.getStatements()));
        aCtBlock.setComments(this.cloneHelper.clone(block.getComments()));
        this.other = aCtBlock;
    }

    public void visitCtBreak(final spoon.reflect.code.CtBreak breakStatement) {
        spoon.reflect.code.CtBreak aCtBreak = spoon.support.visitor.clone.CloneBuilder.build(this.builder, breakStatement, breakStatement.getFactory().Core().createBreak());
        aCtBreak.setAnnotations(this.cloneHelper.clone(breakStatement.getAnnotations()));
        aCtBreak.setComments(this.cloneHelper.clone(breakStatement.getComments()));
        this.other = aCtBreak;
    }

    public <S> void visitCtCase(final spoon.reflect.code.CtCase<S> caseStatement) {
        spoon.reflect.code.CtCase<S> aCtCase = spoon.support.visitor.clone.CloneBuilder.build(this.builder, caseStatement, caseStatement.getFactory().Core().createCase());
        aCtCase.setAnnotations(this.cloneHelper.clone(caseStatement.getAnnotations()));
        aCtCase.setCaseExpression(this.cloneHelper.clone(caseStatement.getCaseExpression()));
        aCtCase.setStatements(this.cloneHelper.clone(caseStatement.getStatements()));
        aCtCase.setComments(this.cloneHelper.clone(caseStatement.getComments()));
        this.other = aCtCase;
    }

    public void visitCtCatch(final spoon.reflect.code.CtCatch catchBlock) {
        spoon.reflect.code.CtCatch aCtCatch = spoon.support.visitor.clone.CloneBuilder.build(this.builder, catchBlock, catchBlock.getFactory().Core().createCatch());
        aCtCatch.setAnnotations(this.cloneHelper.clone(catchBlock.getAnnotations()));
        aCtCatch.setParameter(this.cloneHelper.clone(catchBlock.getParameter()));
        aCtCatch.setBody(this.cloneHelper.clone(catchBlock.getBody()));
        aCtCatch.setComments(this.cloneHelper.clone(catchBlock.getComments()));
        this.other = aCtCatch;
    }

    public <T> void visitCtClass(final spoon.reflect.declaration.CtClass<T> ctClass) {
        spoon.reflect.declaration.CtClass<T> aCtClass = spoon.support.visitor.clone.CloneBuilder.build(this.builder, ctClass, ctClass.getFactory().Core().createClass());
        aCtClass.setAnnotations(this.cloneHelper.clone(ctClass.getAnnotations()));
        aCtClass.setSuperclass(this.cloneHelper.clone(ctClass.getSuperclass()));
        aCtClass.setSuperInterfaces(this.cloneHelper.clone(ctClass.getSuperInterfaces()));
        aCtClass.setFormalCtTypeParameters(this.cloneHelper.clone(ctClass.getFormalCtTypeParameters()));
        aCtClass.setTypeMembers(this.cloneHelper.clone(ctClass.getTypeMembers()));
        aCtClass.setComments(this.cloneHelper.clone(ctClass.getComments()));
        this.other = aCtClass;
    }

    @java.lang.Override
    public void visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter typeParameter) {
        spoon.reflect.declaration.CtTypeParameter aCtTypeParameter = spoon.support.visitor.clone.CloneBuilder.build(this.builder, typeParameter, typeParameter.getFactory().Core().createTypeParameter());
        aCtTypeParameter.setAnnotations(this.cloneHelper.clone(typeParameter.getAnnotations()));
        aCtTypeParameter.setSuperclass(this.cloneHelper.clone(typeParameter.getSuperclass()));
        aCtTypeParameter.setComments(this.cloneHelper.clone(typeParameter.getComments()));
        this.other = aCtTypeParameter;
    }

    public <T> void visitCtConditional(final spoon.reflect.code.CtConditional<T> conditional) {
        spoon.reflect.code.CtConditional<T> aCtConditional = spoon.support.visitor.clone.CloneBuilder.build(this.builder, conditional, conditional.getFactory().Core().createConditional());
        aCtConditional.setType(this.cloneHelper.clone(conditional.getType()));
        aCtConditional.setAnnotations(this.cloneHelper.clone(conditional.getAnnotations()));
        aCtConditional.setCondition(this.cloneHelper.clone(conditional.getCondition()));
        aCtConditional.setThenExpression(this.cloneHelper.clone(conditional.getThenExpression()));
        aCtConditional.setElseExpression(this.cloneHelper.clone(conditional.getElseExpression()));
        aCtConditional.setComments(this.cloneHelper.clone(conditional.getComments()));
        aCtConditional.setTypeCasts(this.cloneHelper.clone(conditional.getTypeCasts()));
        this.other = aCtConditional;
    }

    public <T> void visitCtConstructor(final spoon.reflect.declaration.CtConstructor<T> c) {
        spoon.reflect.declaration.CtConstructor<T> aCtConstructor = spoon.support.visitor.clone.CloneBuilder.build(this.builder, c, c.getFactory().Core().createConstructor());
        aCtConstructor.setAnnotations(this.cloneHelper.clone(c.getAnnotations()));
        aCtConstructor.setParameters(this.cloneHelper.clone(c.getParameters()));
        aCtConstructor.setThrownTypes(this.cloneHelper.clone(c.getThrownTypes()));
        aCtConstructor.setFormalCtTypeParameters(this.cloneHelper.clone(c.getFormalCtTypeParameters()));
        aCtConstructor.setBody(this.cloneHelper.clone(c.getBody()));
        aCtConstructor.setComments(this.cloneHelper.clone(c.getComments()));
        this.other = aCtConstructor;
    }

    public void visitCtContinue(final spoon.reflect.code.CtContinue continueStatement) {
        spoon.reflect.code.CtContinue aCtContinue = spoon.support.visitor.clone.CloneBuilder.build(this.builder, continueStatement, continueStatement.getFactory().Core().createContinue());
        aCtContinue.setAnnotations(this.cloneHelper.clone(continueStatement.getAnnotations()));
        aCtContinue.setComments(this.cloneHelper.clone(continueStatement.getComments()));
        this.other = aCtContinue;
    }

    public void visitCtDo(final spoon.reflect.code.CtDo doLoop) {
        spoon.reflect.code.CtDo aCtDo = spoon.support.visitor.clone.CloneBuilder.build(this.builder, doLoop, doLoop.getFactory().Core().createDo());
        aCtDo.setAnnotations(this.cloneHelper.clone(doLoop.getAnnotations()));
        aCtDo.setLoopingExpression(this.cloneHelper.clone(doLoop.getLoopingExpression()));
        aCtDo.setBody(this.cloneHelper.clone(doLoop.getBody()));
        aCtDo.setComments(this.cloneHelper.clone(doLoop.getComments()));
        this.other = aCtDo;
    }

    public <T extends java.lang.Enum<?>> void visitCtEnum(final spoon.reflect.declaration.CtEnum<T> ctEnum) {
        spoon.reflect.declaration.CtEnum<T> aCtEnum = spoon.support.visitor.clone.CloneBuilder.build(this.builder, ctEnum, ctEnum.getFactory().Core().createEnum());
        aCtEnum.setAnnotations(this.cloneHelper.clone(ctEnum.getAnnotations()));
        aCtEnum.setSuperInterfaces(this.cloneHelper.clone(ctEnum.getSuperInterfaces()));
        aCtEnum.setTypeMembers(this.cloneHelper.clone(ctEnum.getTypeMembers()));
        aCtEnum.setEnumValues(this.cloneHelper.clone(ctEnum.getEnumValues()));
        aCtEnum.setComments(this.cloneHelper.clone(ctEnum.getComments()));
        this.other = aCtEnum;
    }

    public <T> void visitCtExecutableReference(final spoon.reflect.reference.CtExecutableReference<T> reference) {
        spoon.reflect.reference.CtExecutableReference<T> aCtExecutableReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().createExecutableReference());
        aCtExecutableReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtExecutableReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtExecutableReference.setParameters(this.cloneHelper.clone(reference.getParameters()));
        aCtExecutableReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));
        aCtExecutableReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        aCtExecutableReference.setComments(this.cloneHelper.clone(reference.getComments()));
        this.other = aCtExecutableReference;
    }

    public <T> void visitCtField(final spoon.reflect.declaration.CtField<T> f) {
        spoon.reflect.declaration.CtField<T> aCtField = spoon.support.visitor.clone.CloneBuilder.build(this.builder, f, f.getFactory().Core().createField());
        aCtField.setAnnotations(this.cloneHelper.clone(f.getAnnotations()));
        aCtField.setType(this.cloneHelper.clone(f.getType()));
        aCtField.setDefaultExpression(this.cloneHelper.clone(f.getDefaultExpression()));
        aCtField.setComments(this.cloneHelper.clone(f.getComments()));
        this.other = aCtField;
    }

    @java.lang.Override
    public <T> void visitCtEnumValue(final spoon.reflect.declaration.CtEnumValue<T> enumValue) {
        spoon.reflect.declaration.CtEnumValue<T> aCtEnumValue = spoon.support.visitor.clone.CloneBuilder.build(this.builder, enumValue, enumValue.getFactory().Core().createEnumValue());
        aCtEnumValue.setAnnotations(this.cloneHelper.clone(enumValue.getAnnotations()));
        aCtEnumValue.setType(this.cloneHelper.clone(enumValue.getType()));
        aCtEnumValue.setDefaultExpression(this.cloneHelper.clone(enumValue.getDefaultExpression()));
        aCtEnumValue.setComments(this.cloneHelper.clone(enumValue.getComments()));
        this.other = aCtEnumValue;
    }

    @java.lang.Override
    public <T> void visitCtThisAccess(final spoon.reflect.code.CtThisAccess<T> thisAccess) {
        spoon.reflect.code.CtThisAccess<T> aCtThisAccess = spoon.support.visitor.clone.CloneBuilder.build(this.builder, thisAccess, thisAccess.getFactory().Core().createThisAccess());
        aCtThisAccess.setComments(this.cloneHelper.clone(thisAccess.getComments()));
        aCtThisAccess.setAnnotations(this.cloneHelper.clone(thisAccess.getAnnotations()));
        aCtThisAccess.setType(this.cloneHelper.clone(thisAccess.getType()));
        aCtThisAccess.setTypeCasts(this.cloneHelper.clone(thisAccess.getTypeCasts()));
        aCtThisAccess.setTarget(this.cloneHelper.clone(thisAccess.getTarget()));
        this.other = aCtThisAccess;
    }

    public <T> void visitCtAnnotationFieldAccess(final spoon.reflect.code.CtAnnotationFieldAccess<T> annotationFieldAccess) {
        spoon.reflect.code.CtAnnotationFieldAccess<T> aCtAnnotationFieldAccess = spoon.support.visitor.clone.CloneBuilder.build(this.builder, annotationFieldAccess, annotationFieldAccess.getFactory().Core().createAnnotationFieldAccess());
        aCtAnnotationFieldAccess.setComments(this.cloneHelper.clone(annotationFieldAccess.getComments()));
        aCtAnnotationFieldAccess.setAnnotations(this.cloneHelper.clone(annotationFieldAccess.getAnnotations()));
        aCtAnnotationFieldAccess.setTypeCasts(this.cloneHelper.clone(annotationFieldAccess.getTypeCasts()));
        aCtAnnotationFieldAccess.setTarget(this.cloneHelper.clone(annotationFieldAccess.getTarget()));
        aCtAnnotationFieldAccess.setType(this.cloneHelper.clone(annotationFieldAccess.getType()));
        aCtAnnotationFieldAccess.setVariable(this.cloneHelper.clone(annotationFieldAccess.getVariable()));
        this.other = aCtAnnotationFieldAccess;
    }

    public <T> void visitCtFieldReference(final spoon.reflect.reference.CtFieldReference<T> reference) {
        spoon.reflect.reference.CtFieldReference<T> aCtFieldReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().createFieldReference());
        aCtFieldReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtFieldReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtFieldReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.other = aCtFieldReference;
    }

    public void visitCtFor(final spoon.reflect.code.CtFor forLoop) {
        spoon.reflect.code.CtFor aCtFor = spoon.support.visitor.clone.CloneBuilder.build(this.builder, forLoop, forLoop.getFactory().Core().createFor());
        aCtFor.setAnnotations(this.cloneHelper.clone(forLoop.getAnnotations()));
        aCtFor.setForInit(this.cloneHelper.clone(forLoop.getForInit()));
        aCtFor.setExpression(this.cloneHelper.clone(forLoop.getExpression()));
        aCtFor.setForUpdate(this.cloneHelper.clone(forLoop.getForUpdate()));
        aCtFor.setBody(this.cloneHelper.clone(forLoop.getBody()));
        aCtFor.setComments(this.cloneHelper.clone(forLoop.getComments()));
        this.other = aCtFor;
    }

    public void visitCtForEach(final spoon.reflect.code.CtForEach foreach) {
        spoon.reflect.code.CtForEach aCtForEach = spoon.support.visitor.clone.CloneBuilder.build(this.builder, foreach, foreach.getFactory().Core().createForEach());
        aCtForEach.setAnnotations(this.cloneHelper.clone(foreach.getAnnotations()));
        aCtForEach.setVariable(this.cloneHelper.clone(foreach.getVariable()));
        aCtForEach.setExpression(this.cloneHelper.clone(foreach.getExpression()));
        aCtForEach.setBody(this.cloneHelper.clone(foreach.getBody()));
        aCtForEach.setComments(this.cloneHelper.clone(foreach.getComments()));
        this.other = aCtForEach;
    }

    public void visitCtIf(final spoon.reflect.code.CtIf ifElement) {
        spoon.reflect.code.CtIf aCtIf = spoon.support.visitor.clone.CloneBuilder.build(this.builder, ifElement, ifElement.getFactory().Core().createIf());
        aCtIf.setAnnotations(this.cloneHelper.clone(ifElement.getAnnotations()));
        aCtIf.setCondition(this.cloneHelper.clone(ifElement.getCondition()));
        aCtIf.setThenStatement(this.cloneHelper.clone(((spoon.reflect.code.CtStatement) (ifElement.getThenStatement()))));
        aCtIf.setElseStatement(this.cloneHelper.clone(((spoon.reflect.code.CtStatement) (ifElement.getElseStatement()))));
        aCtIf.setComments(this.cloneHelper.clone(ifElement.getComments()));
        this.other = aCtIf;
    }

    public <T> void visitCtInterface(final spoon.reflect.declaration.CtInterface<T> intrface) {
        spoon.reflect.declaration.CtInterface<T> aCtInterface = spoon.support.visitor.clone.CloneBuilder.build(this.builder, intrface, intrface.getFactory().Core().createInterface());
        aCtInterface.setAnnotations(this.cloneHelper.clone(intrface.getAnnotations()));
        aCtInterface.setSuperInterfaces(this.cloneHelper.clone(intrface.getSuperInterfaces()));
        aCtInterface.setFormalCtTypeParameters(this.cloneHelper.clone(intrface.getFormalCtTypeParameters()));
        aCtInterface.setTypeMembers(this.cloneHelper.clone(intrface.getTypeMembers()));
        aCtInterface.setComments(this.cloneHelper.clone(intrface.getComments()));
        this.other = aCtInterface;
    }

    public <T> void visitCtInvocation(final spoon.reflect.code.CtInvocation<T> invocation) {
        spoon.reflect.code.CtInvocation<T> aCtInvocation = spoon.support.visitor.clone.CloneBuilder.build(this.builder, invocation, invocation.getFactory().Core().createInvocation());
        aCtInvocation.setAnnotations(this.cloneHelper.clone(invocation.getAnnotations()));
        aCtInvocation.setTypeCasts(this.cloneHelper.clone(invocation.getTypeCasts()));
        aCtInvocation.setTarget(this.cloneHelper.clone(invocation.getTarget()));
        aCtInvocation.setExecutable(this.cloneHelper.clone(invocation.getExecutable()));
        aCtInvocation.setArguments(this.cloneHelper.clone(invocation.getArguments()));
        aCtInvocation.setComments(this.cloneHelper.clone(invocation.getComments()));
        this.other = aCtInvocation;
    }

    public <T> void visitCtLiteral(final spoon.reflect.code.CtLiteral<T> literal) {
        spoon.reflect.code.CtLiteral<T> aCtLiteral = spoon.support.visitor.clone.CloneBuilder.build(this.builder, literal, literal.getFactory().Core().createLiteral());
        aCtLiteral.setAnnotations(this.cloneHelper.clone(literal.getAnnotations()));
        aCtLiteral.setType(this.cloneHelper.clone(literal.getType()));
        aCtLiteral.setTypeCasts(this.cloneHelper.clone(literal.getTypeCasts()));
        aCtLiteral.setComments(this.cloneHelper.clone(literal.getComments()));
        this.other = aCtLiteral;
    }

    public <T> void visitCtLocalVariable(final spoon.reflect.code.CtLocalVariable<T> localVariable) {
        spoon.reflect.code.CtLocalVariable<T> aCtLocalVariable = spoon.support.visitor.clone.CloneBuilder.build(this.builder, localVariable, localVariable.getFactory().Core().createLocalVariable());
        aCtLocalVariable.setAnnotations(this.cloneHelper.clone(localVariable.getAnnotations()));
        aCtLocalVariable.setType(this.cloneHelper.clone(localVariable.getType()));
        aCtLocalVariable.setDefaultExpression(this.cloneHelper.clone(localVariable.getDefaultExpression()));
        aCtLocalVariable.setComments(this.cloneHelper.clone(localVariable.getComments()));
        this.other = aCtLocalVariable;
    }

    public <T> void visitCtLocalVariableReference(final spoon.reflect.reference.CtLocalVariableReference<T> reference) {
        spoon.reflect.reference.CtLocalVariableReference<T> aCtLocalVariableReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().createLocalVariableReference());
        aCtLocalVariableReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtLocalVariableReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.other = aCtLocalVariableReference;
    }

    public <T> void visitCtCatchVariable(final spoon.reflect.code.CtCatchVariable<T> catchVariable) {
        spoon.reflect.code.CtCatchVariable<T> aCtCatchVariable = spoon.support.visitor.clone.CloneBuilder.build(this.builder, catchVariable, catchVariable.getFactory().Core().createCatchVariable());
        aCtCatchVariable.setComments(this.cloneHelper.clone(catchVariable.getComments()));
        aCtCatchVariable.setAnnotations(this.cloneHelper.clone(catchVariable.getAnnotations()));
        aCtCatchVariable.setDefaultExpression(this.cloneHelper.clone(catchVariable.getDefaultExpression()));
        aCtCatchVariable.setType(this.cloneHelper.clone(catchVariable.getType()));
        aCtCatchVariable.setMultiTypes(this.cloneHelper.clone(catchVariable.getMultiTypes()));
        this.other = aCtCatchVariable;
    }

    public <T> void visitCtCatchVariableReference(final spoon.reflect.reference.CtCatchVariableReference<T> reference) {
        spoon.reflect.reference.CtCatchVariableReference<T> aCtCatchVariableReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().createCatchVariableReference());
        aCtCatchVariableReference.setComments(this.cloneHelper.clone(reference.getComments()));
        aCtCatchVariableReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtCatchVariableReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.other = aCtCatchVariableReference;
    }

    public <T> void visitCtMethod(final spoon.reflect.declaration.CtMethod<T> m) {
        spoon.reflect.declaration.CtMethod<T> aCtMethod = spoon.support.visitor.clone.CloneBuilder.build(this.builder, m, m.getFactory().Core().createMethod());
        aCtMethod.setAnnotations(this.cloneHelper.clone(m.getAnnotations()));
        aCtMethod.setFormalCtTypeParameters(this.cloneHelper.clone(m.getFormalCtTypeParameters()));
        aCtMethod.setType(this.cloneHelper.clone(m.getType()));
        aCtMethod.setParameters(this.cloneHelper.clone(m.getParameters()));
        aCtMethod.setThrownTypes(this.cloneHelper.clone(m.getThrownTypes()));
        aCtMethod.setBody(this.cloneHelper.clone(m.getBody()));
        aCtMethod.setComments(this.cloneHelper.clone(m.getComments()));
        this.other = aCtMethod;
    }

    @java.lang.Override
    public <T> void visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod<T> annotationMethod) {
        spoon.reflect.declaration.CtAnnotationMethod<T> aCtAnnotationMethod = spoon.support.visitor.clone.CloneBuilder.build(this.builder, annotationMethod, annotationMethod.getFactory().Core().createAnnotationMethod());
        aCtAnnotationMethod.setAnnotations(this.cloneHelper.clone(annotationMethod.getAnnotations()));
        aCtAnnotationMethod.setType(this.cloneHelper.clone(annotationMethod.getType()));
        aCtAnnotationMethod.setDefaultExpression(this.cloneHelper.clone(annotationMethod.getDefaultExpression()));
        aCtAnnotationMethod.setComments(this.cloneHelper.clone(annotationMethod.getComments()));
        this.other = aCtAnnotationMethod;
    }

    public <T> void visitCtNewArray(final spoon.reflect.code.CtNewArray<T> newArray) {
        spoon.reflect.code.CtNewArray<T> aCtNewArray = spoon.support.visitor.clone.CloneBuilder.build(this.builder, newArray, newArray.getFactory().Core().createNewArray());
        aCtNewArray.setAnnotations(this.cloneHelper.clone(newArray.getAnnotations()));
        aCtNewArray.setType(this.cloneHelper.clone(newArray.getType()));
        aCtNewArray.setTypeCasts(this.cloneHelper.clone(newArray.getTypeCasts()));
        aCtNewArray.setElements(this.cloneHelper.clone(newArray.getElements()));
        aCtNewArray.setDimensionExpressions(this.cloneHelper.clone(newArray.getDimensionExpressions()));
        aCtNewArray.setComments(this.cloneHelper.clone(newArray.getComments()));
        this.other = aCtNewArray;
    }

    @java.lang.Override
    public <T> void visitCtConstructorCall(final spoon.reflect.code.CtConstructorCall<T> ctConstructorCall) {
        spoon.reflect.code.CtConstructorCall<T> aCtConstructorCall = spoon.support.visitor.clone.CloneBuilder.build(this.builder, ctConstructorCall, ctConstructorCall.getFactory().Core().createConstructorCall());
        aCtConstructorCall.setAnnotations(this.cloneHelper.clone(ctConstructorCall.getAnnotations()));
        aCtConstructorCall.setTypeCasts(this.cloneHelper.clone(ctConstructorCall.getTypeCasts()));
        aCtConstructorCall.setExecutable(this.cloneHelper.clone(ctConstructorCall.getExecutable()));
        aCtConstructorCall.setTarget(this.cloneHelper.clone(ctConstructorCall.getTarget()));
        aCtConstructorCall.setArguments(this.cloneHelper.clone(ctConstructorCall.getArguments()));
        aCtConstructorCall.setComments(this.cloneHelper.clone(ctConstructorCall.getComments()));
        this.other = aCtConstructorCall;
    }

    public <T> void visitCtNewClass(final spoon.reflect.code.CtNewClass<T> newClass) {
        spoon.reflect.code.CtNewClass<T> aCtNewClass = spoon.support.visitor.clone.CloneBuilder.build(this.builder, newClass, newClass.getFactory().Core().createNewClass());
        aCtNewClass.setAnnotations(this.cloneHelper.clone(newClass.getAnnotations()));
        aCtNewClass.setTypeCasts(this.cloneHelper.clone(newClass.getTypeCasts()));
        aCtNewClass.setExecutable(this.cloneHelper.clone(newClass.getExecutable()));
        aCtNewClass.setTarget(this.cloneHelper.clone(newClass.getTarget()));
        aCtNewClass.setArguments(this.cloneHelper.clone(newClass.getArguments()));
        aCtNewClass.setAnonymousClass(this.cloneHelper.clone(newClass.getAnonymousClass()));
        aCtNewClass.setComments(this.cloneHelper.clone(newClass.getComments()));
        this.other = aCtNewClass;
    }

    @java.lang.Override
    public <T> void visitCtLambda(final spoon.reflect.code.CtLambda<T> lambda) {
        spoon.reflect.code.CtLambda<T> aCtLambda = spoon.support.visitor.clone.CloneBuilder.build(this.builder, lambda, lambda.getFactory().Core().createLambda());
        aCtLambda.setAnnotations(this.cloneHelper.clone(lambda.getAnnotations()));
        aCtLambda.setType(this.cloneHelper.clone(lambda.getType()));
        aCtLambda.setTypeCasts(this.cloneHelper.clone(lambda.getTypeCasts()));
        aCtLambda.setParameters(this.cloneHelper.clone(lambda.getParameters()));
        aCtLambda.setThrownTypes(this.cloneHelper.clone(lambda.getThrownTypes()));
        aCtLambda.setBody(this.cloneHelper.clone(lambda.getBody()));
        aCtLambda.setExpression(this.cloneHelper.clone(lambda.getExpression()));
        aCtLambda.setComments(this.cloneHelper.clone(lambda.getComments()));
        this.other = aCtLambda;
    }

    @java.lang.Override
    public <T, E extends spoon.reflect.code.CtExpression<?>> void visitCtExecutableReferenceExpression(final spoon.reflect.code.CtExecutableReferenceExpression<T, E> expression) {
        spoon.reflect.code.CtExecutableReferenceExpression<T, E> aCtExecutableReferenceExpression = spoon.support.visitor.clone.CloneBuilder.build(this.builder, expression, expression.getFactory().Core().createExecutableReferenceExpression());
        aCtExecutableReferenceExpression.setComments(this.cloneHelper.clone(expression.getComments()));
        aCtExecutableReferenceExpression.setAnnotations(this.cloneHelper.clone(expression.getAnnotations()));
        aCtExecutableReferenceExpression.setType(this.cloneHelper.clone(expression.getType()));
        aCtExecutableReferenceExpression.setTypeCasts(this.cloneHelper.clone(expression.getTypeCasts()));
        aCtExecutableReferenceExpression.setExecutable(this.cloneHelper.clone(expression.getExecutable()));
        aCtExecutableReferenceExpression.setTarget(this.cloneHelper.clone(expression.getTarget()));
        this.other = aCtExecutableReferenceExpression;
    }

    public <T, A extends T> void visitCtOperatorAssignment(final spoon.reflect.code.CtOperatorAssignment<T, A> assignment) {
        spoon.reflect.code.CtOperatorAssignment<T, A> aCtOperatorAssignment = spoon.support.visitor.clone.CloneBuilder.build(this.builder, assignment, assignment.getFactory().Core().createOperatorAssignment());
        aCtOperatorAssignment.setAnnotations(this.cloneHelper.clone(assignment.getAnnotations()));
        aCtOperatorAssignment.setType(this.cloneHelper.clone(assignment.getType()));
        aCtOperatorAssignment.setTypeCasts(this.cloneHelper.clone(assignment.getTypeCasts()));
        aCtOperatorAssignment.setAssigned(this.cloneHelper.clone(assignment.getAssigned()));
        aCtOperatorAssignment.setAssignment(this.cloneHelper.clone(assignment.getAssignment()));
        aCtOperatorAssignment.setComments(this.cloneHelper.clone(assignment.getComments()));
        this.other = aCtOperatorAssignment;
    }

    public void visitCtPackage(final spoon.reflect.declaration.CtPackage ctPackage) {
        spoon.reflect.declaration.CtPackage aCtPackage = spoon.support.visitor.clone.CloneBuilder.build(this.builder, ctPackage, ctPackage.getFactory().Core().createPackage());
        aCtPackage.setAnnotations(this.cloneHelper.clone(ctPackage.getAnnotations()));
        aCtPackage.setPackages(this.cloneHelper.clone(ctPackage.getPackages()));
        aCtPackage.setTypes(this.cloneHelper.clone(ctPackage.getTypes()));
        aCtPackage.setComments(this.cloneHelper.clone(ctPackage.getComments()));
        this.other = aCtPackage;
    }

    public void visitCtPackageReference(final spoon.reflect.reference.CtPackageReference reference) {
        spoon.reflect.reference.CtPackageReference aCtPackageReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().createPackageReference());
        aCtPackageReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.other = aCtPackageReference;
    }

    public <T> void visitCtParameter(final spoon.reflect.declaration.CtParameter<T> parameter) {
        spoon.reflect.declaration.CtParameter<T> aCtParameter = spoon.support.visitor.clone.CloneBuilder.build(this.builder, parameter, parameter.getFactory().Core().createParameter());
        aCtParameter.setAnnotations(this.cloneHelper.clone(parameter.getAnnotations()));
        aCtParameter.setType(this.cloneHelper.clone(parameter.getType()));
        aCtParameter.setComments(this.cloneHelper.clone(parameter.getComments()));
        this.other = aCtParameter;
    }

    public <T> void visitCtParameterReference(final spoon.reflect.reference.CtParameterReference<T> reference) {
        spoon.reflect.reference.CtParameterReference<T> aCtParameterReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().createParameterReference());
        aCtParameterReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtParameterReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        aCtParameterReference.setDeclaringExecutable(this.cloneHelper.clone(reference.getDeclaringExecutable()));
        this.other = aCtParameterReference;
    }

    public <R> void visitCtReturn(final spoon.reflect.code.CtReturn<R> returnStatement) {
        spoon.reflect.code.CtReturn<R> aCtReturn = spoon.support.visitor.clone.CloneBuilder.build(this.builder, returnStatement, returnStatement.getFactory().Core().createReturn());
        aCtReturn.setAnnotations(this.cloneHelper.clone(returnStatement.getAnnotations()));
        aCtReturn.setReturnedExpression(this.cloneHelper.clone(returnStatement.getReturnedExpression()));
        aCtReturn.setComments(this.cloneHelper.clone(returnStatement.getComments()));
        this.other = aCtReturn;
    }

    public <R> void visitCtStatementList(final spoon.reflect.code.CtStatementList statements) {
        spoon.reflect.code.CtStatementList aCtStatementList = spoon.support.visitor.clone.CloneBuilder.build(this.builder, statements, statements.getFactory().Core().createStatementList());
        aCtStatementList.setAnnotations(this.cloneHelper.clone(statements.getAnnotations()));
        aCtStatementList.setStatements(this.cloneHelper.clone(statements.getStatements()));
        aCtStatementList.setComments(this.cloneHelper.clone(statements.getComments()));
        this.other = aCtStatementList;
    }

    public <S> void visitCtSwitch(final spoon.reflect.code.CtSwitch<S> switchStatement) {
        spoon.reflect.code.CtSwitch<S> aCtSwitch = spoon.support.visitor.clone.CloneBuilder.build(this.builder, switchStatement, switchStatement.getFactory().Core().createSwitch());
        aCtSwitch.setAnnotations(this.cloneHelper.clone(switchStatement.getAnnotations()));
        aCtSwitch.setSelector(this.cloneHelper.clone(switchStatement.getSelector()));
        aCtSwitch.setCases(this.cloneHelper.clone(switchStatement.getCases()));
        aCtSwitch.setComments(this.cloneHelper.clone(switchStatement.getComments()));
        this.other = aCtSwitch;
    }

    public void visitCtSynchronized(final spoon.reflect.code.CtSynchronized synchro) {
        spoon.reflect.code.CtSynchronized aCtSynchronized = spoon.support.visitor.clone.CloneBuilder.build(this.builder, synchro, synchro.getFactory().Core().createSynchronized());
        aCtSynchronized.setAnnotations(this.cloneHelper.clone(synchro.getAnnotations()));
        aCtSynchronized.setExpression(this.cloneHelper.clone(synchro.getExpression()));
        aCtSynchronized.setBlock(this.cloneHelper.clone(synchro.getBlock()));
        aCtSynchronized.setComments(this.cloneHelper.clone(synchro.getComments()));
        this.other = aCtSynchronized;
    }

    public void visitCtThrow(final spoon.reflect.code.CtThrow throwStatement) {
        spoon.reflect.code.CtThrow aCtThrow = spoon.support.visitor.clone.CloneBuilder.build(this.builder, throwStatement, throwStatement.getFactory().Core().createThrow());
        aCtThrow.setAnnotations(this.cloneHelper.clone(throwStatement.getAnnotations()));
        aCtThrow.setThrownExpression(this.cloneHelper.clone(throwStatement.getThrownExpression()));
        aCtThrow.setComments(this.cloneHelper.clone(throwStatement.getComments()));
        this.other = aCtThrow;
    }

    public void visitCtTry(final spoon.reflect.code.CtTry tryBlock) {
        spoon.reflect.code.CtTry aCtTry = spoon.support.visitor.clone.CloneBuilder.build(this.builder, tryBlock, tryBlock.getFactory().Core().createTry());
        aCtTry.setAnnotations(this.cloneHelper.clone(tryBlock.getAnnotations()));
        aCtTry.setBody(this.cloneHelper.clone(tryBlock.getBody()));
        aCtTry.setCatchers(this.cloneHelper.clone(tryBlock.getCatchers()));
        aCtTry.setFinalizer(this.cloneHelper.clone(tryBlock.getFinalizer()));
        aCtTry.setComments(this.cloneHelper.clone(tryBlock.getComments()));
        this.other = aCtTry;
    }

    @java.lang.Override
    public void visitCtTryWithResource(final spoon.reflect.code.CtTryWithResource tryWithResource) {
        spoon.reflect.code.CtTryWithResource aCtTryWithResource = spoon.support.visitor.clone.CloneBuilder.build(this.builder, tryWithResource, tryWithResource.getFactory().Core().createTryWithResource());
        aCtTryWithResource.setAnnotations(this.cloneHelper.clone(tryWithResource.getAnnotations()));
        aCtTryWithResource.setResources(this.cloneHelper.clone(tryWithResource.getResources()));
        aCtTryWithResource.setBody(this.cloneHelper.clone(tryWithResource.getBody()));
        aCtTryWithResource.setCatchers(this.cloneHelper.clone(tryWithResource.getCatchers()));
        aCtTryWithResource.setFinalizer(this.cloneHelper.clone(tryWithResource.getFinalizer()));
        aCtTryWithResource.setComments(this.cloneHelper.clone(tryWithResource.getComments()));
        this.other = aCtTryWithResource;
    }

    public void visitCtTypeParameterReference(final spoon.reflect.reference.CtTypeParameterReference ref) {
        spoon.reflect.reference.CtTypeParameterReference aCtTypeParameterReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, ref, ref.getFactory().Core().createTypeParameterReference());
        aCtTypeParameterReference.setPackage(this.cloneHelper.clone(ref.getPackage()));
        aCtTypeParameterReference.setDeclaringType(this.cloneHelper.clone(ref.getDeclaringType()));
        aCtTypeParameterReference.setAnnotations(this.cloneHelper.clone(ref.getAnnotations()));
        aCtTypeParameterReference.setBoundingType(this.cloneHelper.clone(ref.getBoundingType()));
        this.other = aCtTypeParameterReference;
    }

    @java.lang.Override
    public void visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference wildcardReference) {
        spoon.reflect.reference.CtWildcardReference aCtWildcardReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, wildcardReference, wildcardReference.getFactory().Core().createWildcardReference());
        aCtWildcardReference.setPackage(this.cloneHelper.clone(wildcardReference.getPackage()));
        aCtWildcardReference.setDeclaringType(this.cloneHelper.clone(wildcardReference.getDeclaringType()));
        aCtWildcardReference.setAnnotations(this.cloneHelper.clone(wildcardReference.getAnnotations()));
        aCtWildcardReference.setBoundingType(this.cloneHelper.clone(wildcardReference.getBoundingType()));
        this.other = aCtWildcardReference;
    }

    @java.lang.Override
    public <T> void visitCtIntersectionTypeReference(final spoon.reflect.reference.CtIntersectionTypeReference<T> reference) {
        spoon.reflect.reference.CtIntersectionTypeReference<T> aCtIntersectionTypeReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().createIntersectionTypeReference());
        aCtIntersectionTypeReference.setPackage(this.cloneHelper.clone(reference.getPackage()));
        aCtIntersectionTypeReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtIntersectionTypeReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        aCtIntersectionTypeReference.setBounds(this.cloneHelper.clone(reference.getBounds()));
        this.other = aCtIntersectionTypeReference;
    }

    public <T> void visitCtTypeReference(final spoon.reflect.reference.CtTypeReference<T> reference) {
        spoon.reflect.reference.CtTypeReference<T> aCtTypeReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().createTypeReference());
        aCtTypeReference.setPackage(this.cloneHelper.clone(reference.getPackage()));
        aCtTypeReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtTypeReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));
        aCtTypeReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        aCtTypeReference.setComments(this.cloneHelper.clone(reference.getComments()));
        this.other = aCtTypeReference;
    }

    @java.lang.Override
    public <T> void visitCtTypeAccess(final spoon.reflect.code.CtTypeAccess<T> typeAccess) {
        spoon.reflect.code.CtTypeAccess<T> aCtTypeAccess = spoon.support.visitor.clone.CloneBuilder.build(this.builder, typeAccess, typeAccess.getFactory().Core().createTypeAccess());
        aCtTypeAccess.setAnnotations(this.cloneHelper.clone(typeAccess.getAnnotations()));
        aCtTypeAccess.setTypeCasts(this.cloneHelper.clone(typeAccess.getTypeCasts()));
        aCtTypeAccess.setAccessedType(this.cloneHelper.clone(typeAccess.getAccessedType()));
        aCtTypeAccess.setComments(this.cloneHelper.clone(typeAccess.getComments()));
        this.other = aCtTypeAccess;
    }

    public <T> void visitCtUnaryOperator(final spoon.reflect.code.CtUnaryOperator<T> operator) {
        spoon.reflect.code.CtUnaryOperator<T> aCtUnaryOperator = spoon.support.visitor.clone.CloneBuilder.build(this.builder, operator, operator.getFactory().Core().createUnaryOperator());
        aCtUnaryOperator.setAnnotations(this.cloneHelper.clone(operator.getAnnotations()));
        aCtUnaryOperator.setType(this.cloneHelper.clone(operator.getType()));
        aCtUnaryOperator.setTypeCasts(this.cloneHelper.clone(operator.getTypeCasts()));
        aCtUnaryOperator.setOperand(this.cloneHelper.clone(operator.getOperand()));
        aCtUnaryOperator.setComments(this.cloneHelper.clone(operator.getComments()));
        this.other = aCtUnaryOperator;
    }

    @java.lang.Override
    public <T> void visitCtVariableRead(final spoon.reflect.code.CtVariableRead<T> variableRead) {
        spoon.reflect.code.CtVariableRead<T> aCtVariableRead = spoon.support.visitor.clone.CloneBuilder.build(this.builder, variableRead, variableRead.getFactory().Core().createVariableRead());
        aCtVariableRead.setAnnotations(this.cloneHelper.clone(variableRead.getAnnotations()));
        aCtVariableRead.setTypeCasts(this.cloneHelper.clone(variableRead.getTypeCasts()));
        aCtVariableRead.setVariable(this.cloneHelper.clone(variableRead.getVariable()));
        aCtVariableRead.setComments(this.cloneHelper.clone(variableRead.getComments()));
        this.other = aCtVariableRead;
    }

    @java.lang.Override
    public <T> void visitCtVariableWrite(final spoon.reflect.code.CtVariableWrite<T> variableWrite) {
        spoon.reflect.code.CtVariableWrite<T> aCtVariableWrite = spoon.support.visitor.clone.CloneBuilder.build(this.builder, variableWrite, variableWrite.getFactory().Core().createVariableWrite());
        aCtVariableWrite.setAnnotations(this.cloneHelper.clone(variableWrite.getAnnotations()));
        aCtVariableWrite.setTypeCasts(this.cloneHelper.clone(variableWrite.getTypeCasts()));
        aCtVariableWrite.setVariable(this.cloneHelper.clone(variableWrite.getVariable()));
        aCtVariableWrite.setComments(this.cloneHelper.clone(variableWrite.getComments()));
        this.other = aCtVariableWrite;
    }

    public void visitCtWhile(final spoon.reflect.code.CtWhile whileLoop) {
        spoon.reflect.code.CtWhile aCtWhile = spoon.support.visitor.clone.CloneBuilder.build(this.builder, whileLoop, whileLoop.getFactory().Core().createWhile());
        aCtWhile.setAnnotations(this.cloneHelper.clone(whileLoop.getAnnotations()));
        aCtWhile.setLoopingExpression(this.cloneHelper.clone(whileLoop.getLoopingExpression()));
        aCtWhile.setBody(this.cloneHelper.clone(whileLoop.getBody()));
        aCtWhile.setComments(this.cloneHelper.clone(whileLoop.getComments()));
        this.other = aCtWhile;
    }

    public <T> void visitCtCodeSnippetExpression(final spoon.reflect.code.CtCodeSnippetExpression<T> expression) {
        spoon.reflect.code.CtCodeSnippetExpression<T> aCtCodeSnippetExpression = spoon.support.visitor.clone.CloneBuilder.build(this.builder, expression, expression.getFactory().Core().createCodeSnippetExpression());
        aCtCodeSnippetExpression.setType(this.cloneHelper.clone(expression.getType()));
        aCtCodeSnippetExpression.setComments(this.cloneHelper.clone(expression.getComments()));
        aCtCodeSnippetExpression.setAnnotations(this.cloneHelper.clone(expression.getAnnotations()));
        aCtCodeSnippetExpression.setTypeCasts(this.cloneHelper.clone(expression.getTypeCasts()));
        this.other = aCtCodeSnippetExpression;
    }

    public void visitCtCodeSnippetStatement(final spoon.reflect.code.CtCodeSnippetStatement statement) {
        spoon.reflect.code.CtCodeSnippetStatement aCtCodeSnippetStatement = spoon.support.visitor.clone.CloneBuilder.build(this.builder, statement, statement.getFactory().Core().createCodeSnippetStatement());
        aCtCodeSnippetStatement.setComments(this.cloneHelper.clone(statement.getComments()));
        aCtCodeSnippetStatement.setAnnotations(this.cloneHelper.clone(statement.getAnnotations()));
        this.other = aCtCodeSnippetStatement;
    }

    public <T> void visitCtUnboundVariableReference(final spoon.reflect.reference.CtUnboundVariableReference<T> reference) {
        spoon.reflect.reference.CtUnboundVariableReference<T> aCtUnboundVariableReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().createUnboundVariableReference());
        aCtUnboundVariableReference.setType(this.cloneHelper.clone(reference.getType()));
        this.other = aCtUnboundVariableReference;
    }

    @java.lang.Override
    public <T> void visitCtFieldRead(final spoon.reflect.code.CtFieldRead<T> fieldRead) {
        spoon.reflect.code.CtFieldRead<T> aCtFieldRead = spoon.support.visitor.clone.CloneBuilder.build(this.builder, fieldRead, fieldRead.getFactory().Core().createFieldRead());
        aCtFieldRead.setAnnotations(this.cloneHelper.clone(fieldRead.getAnnotations()));
        aCtFieldRead.setTypeCasts(this.cloneHelper.clone(fieldRead.getTypeCasts()));
        aCtFieldRead.setTarget(this.cloneHelper.clone(fieldRead.getTarget()));
        aCtFieldRead.setVariable(this.cloneHelper.clone(fieldRead.getVariable()));
        aCtFieldRead.setComments(this.cloneHelper.clone(fieldRead.getComments()));
        this.other = aCtFieldRead;
    }

    @java.lang.Override
    public <T> void visitCtFieldWrite(final spoon.reflect.code.CtFieldWrite<T> fieldWrite) {
        spoon.reflect.code.CtFieldWrite<T> aCtFieldWrite = spoon.support.visitor.clone.CloneBuilder.build(this.builder, fieldWrite, fieldWrite.getFactory().Core().createFieldWrite());
        aCtFieldWrite.setAnnotations(this.cloneHelper.clone(fieldWrite.getAnnotations()));
        aCtFieldWrite.setTypeCasts(this.cloneHelper.clone(fieldWrite.getTypeCasts()));
        aCtFieldWrite.setTarget(this.cloneHelper.clone(fieldWrite.getTarget()));
        aCtFieldWrite.setVariable(this.cloneHelper.clone(fieldWrite.getVariable()));
        aCtFieldWrite.setComments(this.cloneHelper.clone(fieldWrite.getComments()));
        this.other = aCtFieldWrite;
    }

    @java.lang.Override
    public <T> void visitCtSuperAccess(final spoon.reflect.code.CtSuperAccess<T> f) {
        spoon.reflect.code.CtSuperAccess<T> aCtSuperAccess = spoon.support.visitor.clone.CloneBuilder.build(this.builder, f, f.getFactory().Core().createSuperAccess());
        aCtSuperAccess.setType(this.cloneHelper.clone(f.getType()));
        aCtSuperAccess.setComments(this.cloneHelper.clone(f.getComments()));
        aCtSuperAccess.setAnnotations(this.cloneHelper.clone(f.getAnnotations()));
        aCtSuperAccess.setTypeCasts(this.cloneHelper.clone(f.getTypeCasts()));
        aCtSuperAccess.setTarget(this.cloneHelper.clone(f.getTarget()));
        aCtSuperAccess.setVariable(this.cloneHelper.clone(f.getVariable()));
        this.other = aCtSuperAccess;
    }

    @java.lang.Override
    public void visitCtComment(final spoon.reflect.code.CtComment comment) {
        spoon.reflect.code.CtComment aCtComment = spoon.support.visitor.clone.CloneBuilder.build(this.builder, comment, comment.getFactory().Core().createComment());
        aCtComment.setComments(this.cloneHelper.clone(comment.getComments()));
        aCtComment.setAnnotations(this.cloneHelper.clone(comment.getAnnotations()));
        this.other = aCtComment;
    }

    @java.lang.Override
    public void visitCtJavaDoc(final spoon.reflect.code.CtJavaDoc javaDoc) {
        spoon.reflect.code.CtJavaDoc aCtJavaDoc = spoon.support.visitor.clone.CloneBuilder.build(this.builder, javaDoc, javaDoc.getFactory().Core().createJavaDoc());
        aCtJavaDoc.setComments(this.cloneHelper.clone(javaDoc.getComments()));
        aCtJavaDoc.setAnnotations(this.cloneHelper.clone(javaDoc.getAnnotations()));
        aCtJavaDoc.setTags(this.cloneHelper.clone(javaDoc.getTags()));
        this.other = aCtJavaDoc;
    }

    @java.lang.Override
    public void visitCtJavaDocTag(final spoon.reflect.code.CtJavaDocTag docTag) {
        spoon.reflect.code.CtJavaDocTag aCtJavaDocTag = spoon.support.visitor.clone.CloneBuilder.build(this.builder, docTag, docTag.getFactory().Core().c]reateJavaDocTag());
...> but was:<...getFactory().Core().[getOrCreateAnnotation());
        aCtAnnotation.setType(this.cloneHelper.clone(annotation.getType()));
        aCtAnnotation.setComments(this.cloneHelper.clone(annotation.getComments()));
        aCtAnnotation.setAnnotationType(this.cloneHelper.clone(annotation.getAnnotationType()));
        aCtAnnotation.setAnnotations(this.cloneHelper.clone(annotation.getAnnotations()));
        aCtAnnotation.setValues(this.cloneHelper.clone(annotation.getValues()));
        this.other = aCtAnnotation;
    }

    public <A extends java.lang.annotation.Annotation> void visitCtAnnotationType(final spoon.reflect.declaration.CtAnnotationType<A> annotationType) {
        spoon.reflect.declaration.CtAnnotationType<A> aCtAnnotationType = spoon.support.visitor.clone.CloneBuilder.build(this.builder, annotationType, annotationType.getFactory().Core().getOrCreateAnnotationType());
        aCtAnnotationType.setAnnotations(this.cloneHelper.clone(annotationType.getAnnotations()));
        aCtAnnotationType.setTypeMembers(this.cloneHelper.clone(annotationType.getTypeMembers()));
        aCtAnnotationType.setComments(this.cloneHelper.clone(annotationType.getComments()));
        this.other = aCtAnnotationType;
    }

    public void visitCtAnonymousExecutable(final spoon.reflect.declaration.CtAnonymousExecutable anonymousExec) {
        spoon.reflect.declaration.CtAnonymousExecutable aCtAnonymousExecutable = spoon.support.visitor.clone.CloneBuilder.build(this.builder, anonymousExec, anonymousExec.getFactory().Core().getOrCreateAnonymousExecutable());
        aCtAnonymousExecutable.setAnnotations(this.cloneHelper.clone(anonymousExec.getAnnotations()));
        aCtAnonymousExecutable.setBody(this.cloneHelper.clone(anonymousExec.getBody()));
        aCtAnonymousExecutable.setComments(this.cloneHelper.clone(anonymousExec.getComments()));
        this.other = aCtAnonymousExecutable;
    }

    @java.lang.Override
    public <T> void visitCtArrayRead(final spoon.reflect.code.CtArrayRead<T> arrayRead) {
        spoon.reflect.code.CtArrayRead<T> aCtArrayRead = spoon.support.visitor.clone.CloneBuilder.build(this.builder, arrayRead, arrayRead.getFactory().Core().getOrCreateArrayRead());
        aCtArrayRead.setAnnotations(this.cloneHelper.clone(arrayRead.getAnnotations()));
        aCtArrayRead.setType(this.cloneHelper.clone(arrayRead.getType()));
        aCtArrayRead.setTypeCasts(this.cloneHelper.clone(arrayRead.getTypeCasts()));
        aCtArrayRead.setTarget(this.cloneHelper.clone(arrayRead.getTarget()));
        aCtArrayRead.setIndexExpression(this.cloneHelper.clone(arrayRead.getIndexExpression()));
        aCtArrayRead.setComments(this.cloneHelper.clone(arrayRead.getComments()));
        this.other = aCtArrayRead;
    }

    @java.lang.Override
    public <T> void visitCtArrayWrite(final spoon.reflect.code.CtArrayWrite<T> arrayWrite) {
        spoon.reflect.code.CtArrayWrite<T> aCtArrayWrite = spoon.support.visitor.clone.CloneBuilder.build(this.builder, arrayWrite, arrayWrite.getFactory().Core().getOrCreateArrayWrite());
        aCtArrayWrite.setAnnotations(this.cloneHelper.clone(arrayWrite.getAnnotations()));
        aCtArrayWrite.setType(this.cloneHelper.clone(arrayWrite.getType()));
        aCtArrayWrite.setTypeCasts(this.cloneHelper.clone(arrayWrite.getTypeCasts()));
        aCtArrayWrite.setTarget(this.cloneHelper.clone(arrayWrite.getTarget()));
        aCtArrayWrite.setIndexExpression(this.cloneHelper.clone(arrayWrite.getIndexExpression()));
        aCtArrayWrite.setComments(this.cloneHelper.clone(arrayWrite.getComments()));
        this.other = aCtArrayWrite;
    }

    public <T> void visitCtArrayTypeReference(final spoon.reflect.reference.CtArrayTypeReference<T> reference) {
        spoon.reflect.reference.CtArrayTypeReference<T> aCtArrayTypeReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().getOrCreateArrayTypeReference());
        aCtArrayTypeReference.setComments(this.cloneHelper.clone(reference.getComments()));
        aCtArrayTypeReference.setPackage(this.cloneHelper.clone(reference.getPackage()));
        aCtArrayTypeReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtArrayTypeReference.setComponentType(this.cloneHelper.clone(reference.getComponentType()));
        aCtArrayTypeReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));
        aCtArrayTypeReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.other = aCtArrayTypeReference;
    }

    public <T> void visitCtAssert(final spoon.reflect.code.CtAssert<T> asserted) {
        spoon.reflect.code.CtAssert<T> aCtAssert = spoon.support.visitor.clone.CloneBuilder.build(this.builder, asserted, asserted.getFactory().Core().getOrCreateAssert());
        aCtAssert.setAnnotations(this.cloneHelper.clone(asserted.getAnnotations()));
        aCtAssert.setAssertExpression(this.cloneHelper.clone(asserted.getAssertExpression()));
        aCtAssert.setExpression(this.cloneHelper.clone(asserted.getExpression()));
        aCtAssert.setComments(this.cloneHelper.clone(asserted.getComments()));
        this.other = aCtAssert;
    }

    public <T, A extends T> void visitCtAssignment(final spoon.reflect.code.CtAssignment<T, A> assignement) {
        spoon.reflect.code.CtAssignment<T, A> aCtAssignment = spoon.support.visitor.clone.CloneBuilder.build(this.builder, assignement, assignement.getFactory().Core().getOrCreateAssignment());
        aCtAssignment.setAnnotations(this.cloneHelper.clone(assignement.getAnnotations()));
        aCtAssignment.setType(this.cloneHelper.clone(assignement.getType()));
        aCtAssignment.setTypeCasts(this.cloneHelper.clone(assignement.getTypeCasts()));
        aCtAssignment.setAssigned(this.cloneHelper.clone(assignement.getAssigned()));
        aCtAssignment.setAssignment(this.cloneHelper.clone(assignement.getAssignment()));
        aCtAssignment.setComments(this.cloneHelper.clone(assignement.getComments()));
        this.other = aCtAssignment;
    }

    public <T> void visitCtBinaryOperator(final spoon.reflect.code.CtBinaryOperator<T> operator) {
        spoon.reflect.code.CtBinaryOperator<T> aCtBinaryOperator = spoon.support.visitor.clone.CloneBuilder.build(this.builder, operator, operator.getFactory().Core().getOrCreateBinaryOperator());
        aCtBinaryOperator.setAnnotations(this.cloneHelper.clone(operator.getAnnotations()));
        aCtBinaryOperator.setType(this.cloneHelper.clone(operator.getType()));
        aCtBinaryOperator.setTypeCasts(this.cloneHelper.clone(operator.getTypeCasts()));
        aCtBinaryOperator.setLeftHandOperand(this.cloneHelper.clone(operator.getLeftHandOperand()));
        aCtBinaryOperator.setRightHandOperand(this.cloneHelper.clone(operator.getRightHandOperand()));
        aCtBinaryOperator.setComments(this.cloneHelper.clone(operator.getComments()));
        this.other = aCtBinaryOperator;
    }

    public <R> void visitCtBlock(final spoon.reflect.code.CtBlock<R> block) {
        spoon.reflect.code.CtBlock<R> aCtBlock = spoon.support.visitor.clone.CloneBuilder.build(this.builder, block, block.getFactory().Core().getOrCreateBlock());
        aCtBlock.setAnnotations(this.cloneHelper.clone(block.getAnnotations()));
        aCtBlock.setStatements(this.cloneHelper.clone(block.getStatements()));
        aCtBlock.setComments(this.cloneHelper.clone(block.getComments()));
        this.other = aCtBlock;
    }

    public void visitCtBreak(final spoon.reflect.code.CtBreak breakStatement) {
        spoon.reflect.code.CtBreak aCtBreak = spoon.support.visitor.clone.CloneBuilder.build(this.builder, breakStatement, breakStatement.getFactory().Core().getOrCreateBreak());
        aCtBreak.setAnnotations(this.cloneHelper.clone(breakStatement.getAnnotations()));
        aCtBreak.setComments(this.cloneHelper.clone(breakStatement.getComments()));
        this.other = aCtBreak;
    }

    public <S> void visitCtCase(final spoon.reflect.code.CtCase<S> caseStatement) {
        spoon.reflect.code.CtCase<S> aCtCase = spoon.support.visitor.clone.CloneBuilder.build(this.builder, caseStatement, caseStatement.getFactory().Core().getOrCreateCase());
        aCtCase.setAnnotations(this.cloneHelper.clone(caseStatement.getAnnotations()));
        aCtCase.setCaseExpression(this.cloneHelper.clone(caseStatement.getCaseExpression()));
        aCtCase.setStatements(this.cloneHelper.clone(caseStatement.getStatements()));
        aCtCase.setComments(this.cloneHelper.clone(caseStatement.getComments()));
        this.other = aCtCase;
    }

    public void visitCtCatch(final spoon.reflect.code.CtCatch catchBlock) {
        spoon.reflect.code.CtCatch aCtCatch = spoon.support.visitor.clone.CloneBuilder.build(this.builder, catchBlock, catchBlock.getFactory().Core().getOrCreateCatch());
        aCtCatch.setAnnotations(this.cloneHelper.clone(catchBlock.getAnnotations()));
        aCtCatch.setParameter(this.cloneHelper.clone(catchBlock.getParameter()));
        aCtCatch.setBody(this.cloneHelper.clone(catchBlock.getBody()));
        aCtCatch.setComments(this.cloneHelper.clone(catchBlock.getComments()));
        this.other = aCtCatch;
    }

    public <T> void visitCtClass(final spoon.reflect.declaration.CtClass<T> ctClass) {
        spoon.reflect.declaration.CtClass<T> aCtClass = spoon.support.visitor.clone.CloneBuilder.build(this.builder, ctClass, ctClass.getFactory().Core().getOrCreateClass());
        aCtClass.setAnnotations(this.cloneHelper.clone(ctClass.getAnnotations()));
        aCtClass.setSuperclass(this.cloneHelper.clone(ctClass.getSuperclass()));
        aCtClass.setSuperInterfaces(this.cloneHelper.clone(ctClass.getSuperInterfaces()));
        aCtClass.setFormalCtTypeParameters(this.cloneHelper.clone(ctClass.getFormalCtTypeParameters()));
        aCtClass.setTypeMembers(this.cloneHelper.clone(ctClass.getTypeMembers()));
        aCtClass.setComments(this.cloneHelper.clone(ctClass.getComments()));
        this.other = aCtClass;
    }

    @java.lang.Override
    public void visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter typeParameter) {
        spoon.reflect.declaration.CtTypeParameter aCtTypeParameter = spoon.support.visitor.clone.CloneBuilder.build(this.builder, typeParameter, typeParameter.getFactory().Core().getOrCreateTypeParameter());
        aCtTypeParameter.setAnnotations(this.cloneHelper.clone(typeParameter.getAnnotations()));
        aCtTypeParameter.setSuperclass(this.cloneHelper.clone(typeParameter.getSuperclass()));
        aCtTypeParameter.setComments(this.cloneHelper.clone(typeParameter.getComments()));
        this.other = aCtTypeParameter;
    }

    public <T> void visitCtConditional(final spoon.reflect.code.CtConditional<T> conditional) {
        spoon.reflect.code.CtConditional<T> aCtConditional = spoon.support.visitor.clone.CloneBuilder.build(this.builder, conditional, conditional.getFactory().Core().getOrCreateConditional());
        aCtConditional.setType(this.cloneHelper.clone(conditional.getType()));
        aCtConditional.setAnnotations(this.cloneHelper.clone(conditional.getAnnotations()));
        aCtConditional.setCondition(this.cloneHelper.clone(conditional.getCondition()));
        aCtConditional.setThenExpression(this.cloneHelper.clone(conditional.getThenExpression()));
        aCtConditional.setElseExpression(this.cloneHelper.clone(conditional.getElseExpression()));
        aCtConditional.setComments(this.cloneHelper.clone(conditional.getComments()));
        aCtConditional.setTypeCasts(this.cloneHelper.clone(conditional.getTypeCasts()));
        this.other = aCtConditional;
    }

    public <T> void visitCtConstructor(final spoon.reflect.declaration.CtConstructor<T> c) {
        spoon.reflect.declaration.CtConstructor<T> aCtConstructor = spoon.support.visitor.clone.CloneBuilder.build(this.builder, c, c.getFactory().Core().getOrCreateConstructor());
        aCtConstructor.setAnnotations(this.cloneHelper.clone(c.getAnnotations()));
        aCtConstructor.setParameters(this.cloneHelper.clone(c.getParameters()));
        aCtConstructor.setThrownTypes(this.cloneHelper.clone(c.getThrownTypes()));
        aCtConstructor.setFormalCtTypeParameters(this.cloneHelper.clone(c.getFormalCtTypeParameters()));
        aCtConstructor.setBody(this.cloneHelper.clone(c.getBody()));
        aCtConstructor.setComments(this.cloneHelper.clone(c.getComments()));
        this.other = aCtConstructor;
    }

    public void visitCtContinue(final spoon.reflect.code.CtContinue continueStatement) {
        spoon.reflect.code.CtContinue aCtContinue = spoon.support.visitor.clone.CloneBuilder.build(this.builder, continueStatement, continueStatement.getFactory().Core().getOrCreateContinue());
        aCtContinue.setAnnotations(this.cloneHelper.clone(continueStatement.getAnnotations()));
        aCtContinue.setComments(this.cloneHelper.clone(continueStatement.getComments()));
        this.other = aCtContinue;
    }

    public void visitCtDo(final spoon.reflect.code.CtDo doLoop) {
        spoon.reflect.code.CtDo aCtDo = spoon.support.visitor.clone.CloneBuilder.build(this.builder, doLoop, doLoop.getFactory().Core().getOrCreateDo());
        aCtDo.setAnnotations(this.cloneHelper.clone(doLoop.getAnnotations()));
        aCtDo.setLoopingExpression(this.cloneHelper.clone(doLoop.getLoopingExpression()));
        aCtDo.setBody(this.cloneHelper.clone(doLoop.getBody()));
        aCtDo.setComments(this.cloneHelper.clone(doLoop.getComments()));
        this.other = aCtDo;
    }

    public <T extends java.lang.Enum<?>> void visitCtEnum(final spoon.reflect.declaration.CtEnum<T> ctEnum) {
        spoon.reflect.declaration.CtEnum<T> aCtEnum = spoon.support.visitor.clone.CloneBuilder.build(this.builder, ctEnum, ctEnum.getFactory().Core().getOrCreateEnum());
        aCtEnum.setAnnotations(this.cloneHelper.clone(ctEnum.getAnnotations()));
        aCtEnum.setSuperInterfaces(this.cloneHelper.clone(ctEnum.getSuperInterfaces()));
        aCtEnum.setTypeMembers(this.cloneHelper.clone(ctEnum.getTypeMembers()));
        aCtEnum.setEnumValues(this.cloneHelper.clone(ctEnum.getEnumValues()));
        aCtEnum.setComments(this.cloneHelper.clone(ctEnum.getComments()));
        this.other = aCtEnum;
    }

    public <T> void visitCtExecutableReference(final spoon.reflect.reference.CtExecutableReference<T> reference) {
        spoon.reflect.reference.CtExecutableReference<T> aCtExecutableReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().getOrCreateExecutableReference());
        aCtExecutableReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtExecutableReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtExecutableReference.setParameters(this.cloneHelper.clone(reference.getParameters()));
        aCtExecutableReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));
        aCtExecutableReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        aCtExecutableReference.setComments(this.cloneHelper.clone(reference.getComments()));
        this.other = aCtExecutableReference;
    }

    public <T> void visitCtField(final spoon.reflect.declaration.CtField<T> f) {
        spoon.reflect.declaration.CtField<T> aCtField = spoon.support.visitor.clone.CloneBuilder.build(this.builder, f, f.getFactory().Core().getOrCreateField());
        aCtField.setAnnotations(this.cloneHelper.clone(f.getAnnotations()));
        aCtField.setType(this.cloneHelper.clone(f.getType()));
        aCtField.setDefaultExpression(this.cloneHelper.clone(f.getDefaultExpression()));
        aCtField.setComments(this.cloneHelper.clone(f.getComments()));
        this.other = aCtField;
    }

    @java.lang.Override
    public <T> void visitCtEnumValue(final spoon.reflect.declaration.CtEnumValue<T> enumValue) {
        spoon.reflect.declaration.CtEnumValue<T> aCtEnumValue = spoon.support.visitor.clone.CloneBuilder.build(this.builder, enumValue, enumValue.getFactory().Core().getOrCreateEnumValue());
        aCtEnumValue.setAnnotations(this.cloneHelper.clone(enumValue.getAnnotations()));
        aCtEnumValue.setType(this.cloneHelper.clone(enumValue.getType()));
        aCtEnumValue.setDefaultExpression(this.cloneHelper.clone(enumValue.getDefaultExpression()));
        aCtEnumValue.setComments(this.cloneHelper.clone(enumValue.getComments()));
        this.other = aCtEnumValue;
    }

    @java.lang.Override
    public <T> void visitCtThisAccess(final spoon.reflect.code.CtThisAccess<T> thisAccess) {
        spoon.reflect.code.CtThisAccess<T> aCtThisAccess = spoon.support.visitor.clone.CloneBuilder.build(this.builder, thisAccess, thisAccess.getFactory().Core().getOrCreateThisAccess());
        aCtThisAccess.setComments(this.cloneHelper.clone(thisAccess.getComments()));
        aCtThisAccess.setAnnotations(this.cloneHelper.clone(thisAccess.getAnnotations()));
        aCtThisAccess.setType(this.cloneHelper.clone(thisAccess.getType()));
        aCtThisAccess.setTypeCasts(this.cloneHelper.clone(thisAccess.getTypeCasts()));
        aCtThisAccess.setTarget(this.cloneHelper.clone(thisAccess.getTarget()));
        this.other = aCtThisAccess;
    }

    public <T> void visitCtAnnotationFieldAccess(final spoon.reflect.code.CtAnnotationFieldAccess<T> annotationFieldAccess) {
        spoon.reflect.code.CtAnnotationFieldAccess<T> aCtAnnotationFieldAccess = spoon.support.visitor.clone.CloneBuilder.build(this.builder, annotationFieldAccess, annotationFieldAccess.getFactory().Core().getOrCreateAnnotationFieldAccess());
        aCtAnnotationFieldAccess.setComments(this.cloneHelper.clone(annotationFieldAccess.getComments()));
        aCtAnnotationFieldAccess.setAnnotations(this.cloneHelper.clone(annotationFieldAccess.getAnnotations()));
        aCtAnnotationFieldAccess.setTypeCasts(this.cloneHelper.clone(annotationFieldAccess.getTypeCasts()));
        aCtAnnotationFieldAccess.setTarget(this.cloneHelper.clone(annotationFieldAccess.getTarget()));
        aCtAnnotationFieldAccess.setType(this.cloneHelper.clone(annotationFieldAccess.getType()));
        aCtAnnotationFieldAccess.setVariable(this.cloneHelper.clone(annotationFieldAccess.getVariable()));
        this.other = aCtAnnotationFieldAccess;
    }

    public <T> void visitCtFieldReference(final spoon.reflect.reference.CtFieldReference<T> reference) {
        spoon.reflect.reference.CtFieldReference<T> aCtFieldReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().getOrCreateFieldReference());
        aCtFieldReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtFieldReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtFieldReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.other = aCtFieldReference;
    }

    public void visitCtFor(final spoon.reflect.code.CtFor forLoop) {
        spoon.reflect.code.CtFor aCtFor = spoon.support.visitor.clone.CloneBuilder.build(this.builder, forLoop, forLoop.getFactory().Core().getOrCreateFor());
        aCtFor.setAnnotations(this.cloneHelper.clone(forLoop.getAnnotations()));
        aCtFor.setForInit(this.cloneHelper.clone(forLoop.getForInit()));
        aCtFor.setExpression(this.cloneHelper.clone(forLoop.getExpression()));
        aCtFor.setForUpdate(this.cloneHelper.clone(forLoop.getForUpdate()));
        aCtFor.setBody(this.cloneHelper.clone(forLoop.getBody()));
        aCtFor.setComments(this.cloneHelper.clone(forLoop.getComments()));
        this.other = aCtFor;
    }

    public void visitCtForEach(final spoon.reflect.code.CtForEach foreach) {
        spoon.reflect.code.CtForEach aCtForEach = spoon.support.visitor.clone.CloneBuilder.build(this.builder, foreach, foreach.getFactory().Core().getOrCreateForEach());
        aCtForEach.setAnnotations(this.cloneHelper.clone(foreach.getAnnotations()));
        aCtForEach.setVariable(this.cloneHelper.clone(foreach.getVariable()));
        aCtForEach.setExpression(this.cloneHelper.clone(foreach.getExpression()));
        aCtForEach.setBody(this.cloneHelper.clone(foreach.getBody()));
        aCtForEach.setComments(this.cloneHelper.clone(foreach.getComments()));
        this.other = aCtForEach;
    }

    public void visitCtIf(final spoon.reflect.code.CtIf ifElement) {
        spoon.reflect.code.CtIf aCtIf = spoon.support.visitor.clone.CloneBuilder.build(this.builder, ifElement, ifElement.getFactory().Core().getOrCreateIf());
        aCtIf.setAnnotations(this.cloneHelper.clone(ifElement.getAnnotations()));
        aCtIf.setCondition(this.cloneHelper.clone(ifElement.getCondition()));
        aCtIf.setThenStatement(this.cloneHelper.clone(((spoon.reflect.code.CtStatement) (ifElement.getThenStatement()))));
        aCtIf.setElseStatement(this.cloneHelper.clone(((spoon.reflect.code.CtStatement) (ifElement.getElseStatement()))));
        aCtIf.setComments(this.cloneHelper.clone(ifElement.getComments()));
        this.other = aCtIf;
    }

    public <T> void visitCtInterface(final spoon.reflect.declaration.CtInterface<T> intrface) {
        spoon.reflect.declaration.CtInterface<T> aCtInterface = spoon.support.visitor.clone.CloneBuilder.build(this.builder, intrface, intrface.getFactory().Core().getOrCreateInterface());
        aCtInterface.setAnnotations(this.cloneHelper.clone(intrface.getAnnotations()));
        aCtInterface.setSuperInterfaces(this.cloneHelper.clone(intrface.getSuperInterfaces()));
        aCtInterface.setFormalCtTypeParameters(this.cloneHelper.clone(intrface.getFormalCtTypeParameters()));
        aCtInterface.setTypeMembers(this.cloneHelper.clone(intrface.getTypeMembers()));
        aCtInterface.setComments(this.cloneHelper.clone(intrface.getComments()));
        this.other = aCtInterface;
    }

    public <T> void visitCtInvocation(final spoon.reflect.code.CtInvocation<T> invocation) {
        spoon.reflect.code.CtInvocation<T> aCtInvocation = spoon.support.visitor.clone.CloneBuilder.build(this.builder, invocation, invocation.getFactory().Core().getOrCreateInvocation());
        aCtInvocation.setAnnotations(this.cloneHelper.clone(invocation.getAnnotations()));
        aCtInvocation.setTypeCasts(this.cloneHelper.clone(invocation.getTypeCasts()));
        aCtInvocation.setTarget(this.cloneHelper.clone(invocation.getTarget()));
        aCtInvocation.setExecutable(this.cloneHelper.clone(invocation.getExecutable()));
        aCtInvocation.setArguments(this.cloneHelper.clone(invocation.getArguments()));
        aCtInvocation.setComments(this.cloneHelper.clone(invocation.getComments()));
        this.other = aCtInvocation;
    }

    public <T> void visitCtLiteral(final spoon.reflect.code.CtLiteral<T> literal) {
        spoon.reflect.code.CtLiteral<T> aCtLiteral = spoon.support.visitor.clone.CloneBuilder.build(this.builder, literal, literal.getFactory().Core().getOrCreateLiteral());
        aCtLiteral.setAnnotations(this.cloneHelper.clone(literal.getAnnotations()));
        aCtLiteral.setType(this.cloneHelper.clone(literal.getType()));
        aCtLiteral.setTypeCasts(this.cloneHelper.clone(literal.getTypeCasts()));
        aCtLiteral.setComments(this.cloneHelper.clone(literal.getComments()));
        this.other = aCtLiteral;
    }

    public <T> void visitCtLocalVariable(final spoon.reflect.code.CtLocalVariable<T> localVariable) {
        spoon.reflect.code.CtLocalVariable<T> aCtLocalVariable = spoon.support.visitor.clone.CloneBuilder.build(this.builder, localVariable, localVariable.getFactory().Core().getOrCreateLocalVariable());
        aCtLocalVariable.setAnnotations(this.cloneHelper.clone(localVariable.getAnnotations()));
        aCtLocalVariable.setType(this.cloneHelper.clone(localVariable.getType()));
        aCtLocalVariable.setDefaultExpression(this.cloneHelper.clone(localVariable.getDefaultExpression()));
        aCtLocalVariable.setComments(this.cloneHelper.clone(localVariable.getComments()));
        this.other = aCtLocalVariable;
    }

    public <T> void visitCtLocalVariableReference(final spoon.reflect.reference.CtLocalVariableReference<T> reference) {
        spoon.reflect.reference.CtLocalVariableReference<T> aCtLocalVariableReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().getOrCreateLocalVariableReference());
        aCtLocalVariableReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtLocalVariableReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.other = aCtLocalVariableReference;
    }

    public <T> void visitCtCatchVariable(final spoon.reflect.code.CtCatchVariable<T> catchVariable) {
        spoon.reflect.code.CtCatchVariable<T> aCtCatchVariable = spoon.support.visitor.clone.CloneBuilder.build(this.builder, catchVariable, catchVariable.getFactory().Core().getOrCreateCatchVariable());
        aCtCatchVariable.setComments(this.cloneHelper.clone(catchVariable.getComments()));
        aCtCatchVariable.setAnnotations(this.cloneHelper.clone(catchVariable.getAnnotations()));
        aCtCatchVariable.setDefaultExpression(this.cloneHelper.clone(catchVariable.getDefaultExpression()));
        aCtCatchVariable.setType(this.cloneHelper.clone(catchVariable.getType()));
        aCtCatchVariable.setMultiTypes(this.cloneHelper.clone(catchVariable.getMultiTypes()));
        this.other = aCtCatchVariable;
    }

    public <T> void visitCtCatchVariableReference(final spoon.reflect.reference.CtCatchVariableReference<T> reference) {
        spoon.reflect.reference.CtCatchVariableReference<T> aCtCatchVariableReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().getOrCreateCatchVariableReference());
        aCtCatchVariableReference.setComments(this.cloneHelper.clone(reference.getComments()));
        aCtCatchVariableReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtCatchVariableReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.other = aCtCatchVariableReference;
    }

    public <T> void visitCtMethod(final spoon.reflect.declaration.CtMethod<T> m) {
        spoon.reflect.declaration.CtMethod<T> aCtMethod = spoon.support.visitor.clone.CloneBuilder.build(this.builder, m, m.getFactory().Core().getOrCreateMethod());
        aCtMethod.setAnnotations(this.cloneHelper.clone(m.getAnnotations()));
        aCtMethod.setFormalCtTypeParameters(this.cloneHelper.clone(m.getFormalCtTypeParameters()));
        aCtMethod.setType(this.cloneHelper.clone(m.getType()));
        aCtMethod.setParameters(this.cloneHelper.clone(m.getParameters()));
        aCtMethod.setThrownTypes(this.cloneHelper.clone(m.getThrownTypes()));
        aCtMethod.setBody(this.cloneHelper.clone(m.getBody()));
        aCtMethod.setComments(this.cloneHelper.clone(m.getComments()));
        this.other = aCtMethod;
    }

    @java.lang.Override
    public <T> void visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod<T> annotationMethod) {
        spoon.reflect.declaration.CtAnnotationMethod<T> aCtAnnotationMethod = spoon.support.visitor.clone.CloneBuilder.build(this.builder, annotationMethod, annotationMethod.getFactory().Core().getOrCreateAnnotationMethod());
        aCtAnnotationMethod.setAnnotations(this.cloneHelper.clone(annotationMethod.getAnnotations()));
        aCtAnnotationMethod.setType(this.cloneHelper.clone(annotationMethod.getType()));
        aCtAnnotationMethod.setDefaultExpression(this.cloneHelper.clone(annotationMethod.getDefaultExpression()));
        aCtAnnotationMethod.setComments(this.cloneHelper.clone(annotationMethod.getComments()));
        this.other = aCtAnnotationMethod;
    }

    public <T> void visitCtNewArray(final spoon.reflect.code.CtNewArray<T> newArray) {
        spoon.reflect.code.CtNewArray<T> aCtNewArray = spoon.support.visitor.clone.CloneBuilder.build(this.builder, newArray, newArray.getFactory().Core().getOrCreateNewArray());
        aCtNewArray.setAnnotations(this.cloneHelper.clone(newArray.getAnnotations()));
        aCtNewArray.setType(this.cloneHelper.clone(newArray.getType()));
        aCtNewArray.setTypeCasts(this.cloneHelper.clone(newArray.getTypeCasts()));
        aCtNewArray.setElements(this.cloneHelper.clone(newArray.getElements()));
        aCtNewArray.setDimensionExpressions(this.cloneHelper.clone(newArray.getDimensionExpressions()));
        aCtNewArray.setComments(this.cloneHelper.clone(newArray.getComments()));
        this.other = aCtNewArray;
    }

    @java.lang.Override
    public <T> void visitCtConstructorCall(final spoon.reflect.code.CtConstructorCall<T> ctConstructorCall) {
        spoon.reflect.code.CtConstructorCall<T> aCtConstructorCall = spoon.support.visitor.clone.CloneBuilder.build(this.builder, ctConstructorCall, ctConstructorCall.getFactory().Core().getOrCreateConstructorCall());
        aCtConstructorCall.setAnnotations(this.cloneHelper.clone(ctConstructorCall.getAnnotations()));
        aCtConstructorCall.setTypeCasts(this.cloneHelper.clone(ctConstructorCall.getTypeCasts()));
        aCtConstructorCall.setExecutable(this.cloneHelper.clone(ctConstructorCall.getExecutable()));
        aCtConstructorCall.setTarget(this.cloneHelper.clone(ctConstructorCall.getTarget()));
        aCtConstructorCall.setArguments(this.cloneHelper.clone(ctConstructorCall.getArguments()));
        aCtConstructorCall.setComments(this.cloneHelper.clone(ctConstructorCall.getComments()));
        this.other = aCtConstructorCall;
    }

    public <T> void visitCtNewClass(final spoon.reflect.code.CtNewClass<T> newClass) {
        spoon.reflect.code.CtNewClass<T> aCtNewClass = spoon.support.visitor.clone.CloneBuilder.build(this.builder, newClass, newClass.getFactory().Core().getOrCreateNewClass());
        aCtNewClass.setAnnotations(this.cloneHelper.clone(newClass.getAnnotations()));
        aCtNewClass.setTypeCasts(this.cloneHelper.clone(newClass.getTypeCasts()));
        aCtNewClass.setExecutable(this.cloneHelper.clone(newClass.getExecutable()));
        aCtNewClass.setTarget(this.cloneHelper.clone(newClass.getTarget()));
        aCtNewClass.setArguments(this.cloneHelper.clone(newClass.getArguments()));
        aCtNewClass.setAnonymousClass(this.cloneHelper.clone(newClass.getAnonymousClass()));
        aCtNewClass.setComments(this.cloneHelper.clone(newClass.getComments()));
        this.other = aCtNewClass;
    }

    @java.lang.Override
    public <T> void visitCtLambda(final spoon.reflect.code.CtLambda<T> lambda) {
        spoon.reflect.code.CtLambda<T> aCtLambda = spoon.support.visitor.clone.CloneBuilder.build(this.builder, lambda, lambda.getFactory().Core().getOrCreateLambda());
        aCtLambda.setAnnotations(this.cloneHelper.clone(lambda.getAnnotations()));
        aCtLambda.setType(this.cloneHelper.clone(lambda.getType()));
        aCtLambda.setTypeCasts(this.cloneHelper.clone(lambda.getTypeCasts()));
        aCtLambda.setParameters(this.cloneHelper.clone(lambda.getParameters()));
        aCtLambda.setThrownTypes(this.cloneHelper.clone(lambda.getThrownTypes()));
        aCtLambda.setBody(this.cloneHelper.clone(lambda.getBody()));
        aCtLambda.setExpression(this.cloneHelper.clone(lambda.getExpression()));
        aCtLambda.setComments(this.cloneHelper.clone(lambda.getComments()));
        this.other = aCtLambda;
    }

    @java.lang.Override
    public <T, E extends spoon.reflect.code.CtExpression<?>> void visitCtExecutableReferenceExpression(final spoon.reflect.code.CtExecutableReferenceExpression<T, E> expression) {
        spoon.reflect.code.CtExecutableReferenceExpression<T, E> aCtExecutableReferenceExpression = spoon.support.visitor.clone.CloneBuilder.build(this.builder, expression, expression.getFactory().Core().getOrCreateExecutableReferenceExpression());
        aCtExecutableReferenceExpression.setComments(this.cloneHelper.clone(expression.getComments()));
        aCtExecutableReferenceExpression.setAnnotations(this.cloneHelper.clone(expression.getAnnotations()));
        aCtExecutableReferenceExpression.setType(this.cloneHelper.clone(expression.getType()));
        aCtExecutableReferenceExpression.setTypeCasts(this.cloneHelper.clone(expression.getTypeCasts()));
        aCtExecutableReferenceExpression.setExecutable(this.cloneHelper.clone(expression.getExecutable()));
        aCtExecutableReferenceExpression.setTarget(this.cloneHelper.clone(expression.getTarget()));
        this.other = aCtExecutableReferenceExpression;
    }

    public <T, A extends T> void visitCtOperatorAssignment(final spoon.reflect.code.CtOperatorAssignment<T, A> assignment) {
        spoon.reflect.code.CtOperatorAssignment<T, A> aCtOperatorAssignment = spoon.support.visitor.clone.CloneBuilder.build(this.builder, assignment, assignment.getFactory().Core().getOrCreateOperatorAssignment());
        aCtOperatorAssignment.setAnnotations(this.cloneHelper.clone(assignment.getAnnotations()));
        aCtOperatorAssignment.setType(this.cloneHelper.clone(assignment.getType()));
        aCtOperatorAssignment.setTypeCasts(this.cloneHelper.clone(assignment.getTypeCasts()));
        aCtOperatorAssignment.setAssigned(this.cloneHelper.clone(assignment.getAssigned()));
        aCtOperatorAssignment.setAssignment(this.cloneHelper.clone(assignment.getAssignment()));
        aCtOperatorAssignment.setComments(this.cloneHelper.clone(assignment.getComments()));
        this.other = aCtOperatorAssignment;
    }

    public void visitCtPackage(final spoon.reflect.declaration.CtPackage ctPackage) {
        spoon.reflect.declaration.CtPackage aCtPackage = spoon.support.visitor.clone.CloneBuilder.build(this.builder, ctPackage, ctPackage.getFactory().Core().getOrCreatePackage());
        aCtPackage.setAnnotations(this.cloneHelper.clone(ctPackage.getAnnotations()));
        aCtPackage.setPackages(this.cloneHelper.clone(ctPackage.getPackages()));
        aCtPackage.setTypes(this.cloneHelper.clone(ctPackage.getTypes()));
        aCtPackage.setComments(this.cloneHelper.clone(ctPackage.getComments()));
        this.other = aCtPackage;
    }

    public void visitCtPackageReference(final spoon.reflect.reference.CtPackageReference reference) {
        spoon.reflect.reference.CtPackageReference aCtPackageReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().getOrCreatePackageReference());
        aCtPackageReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.other = aCtPackageReference;
    }

    public <T> void visitCtParameter(final spoon.reflect.declaration.CtParameter<T> parameter) {
        spoon.reflect.declaration.CtParameter<T> aCtParameter = spoon.support.visitor.clone.CloneBuilder.build(this.builder, parameter, parameter.getFactory().Core().getOrCreateParameter());
        aCtParameter.setAnnotations(this.cloneHelper.clone(parameter.getAnnotations()));
        aCtParameter.setType(this.cloneHelper.clone(parameter.getType()));
        aCtParameter.setComments(this.cloneHelper.clone(parameter.getComments()));
        this.other = aCtParameter;
    }

    public <T> void visitCtParameterReference(final spoon.reflect.reference.CtParameterReference<T> reference) {
        spoon.reflect.reference.CtParameterReference<T> aCtParameterReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().getOrCreateParameterReference());
        aCtParameterReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtParameterReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        aCtParameterReference.setDeclaringExecutable(this.cloneHelper.clone(reference.getDeclaringExecutable()));
        this.other = aCtParameterReference;
    }

    public <R> void visitCtReturn(final spoon.reflect.code.CtReturn<R> returnStatement) {
        spoon.reflect.code.CtReturn<R> aCtReturn = spoon.support.visitor.clone.CloneBuilder.build(this.builder, returnStatement, returnStatement.getFactory().Core().getOrCreateReturn());
        aCtReturn.setAnnotations(this.cloneHelper.clone(returnStatement.getAnnotations()));
        aCtReturn.setReturnedExpression(this.cloneHelper.clone(returnStatement.getReturnedExpression()));
        aCtReturn.setComments(this.cloneHelper.clone(returnStatement.getComments()));
        this.other = aCtReturn;
    }

    public <R> void visitCtStatementList(final spoon.reflect.code.CtStatementList statements) {
        spoon.reflect.code.CtStatementList aCtStatementList = spoon.support.visitor.clone.CloneBuilder.build(this.builder, statements, statements.getFactory().Core().getOrCreateStatementList());
        aCtStatementList.setAnnotations(this.cloneHelper.clone(statements.getAnnotations()));
        aCtStatementList.setStatements(this.cloneHelper.clone(statements.getStatements()));
        aCtStatementList.setComments(this.cloneHelper.clone(statements.getComments()));
        this.other = aCtStatementList;
    }

    public <S> void visitCtSwitch(final spoon.reflect.code.CtSwitch<S> switchStatement) {
        spoon.reflect.code.CtSwitch<S> aCtSwitch = spoon.support.visitor.clone.CloneBuilder.build(this.builder, switchStatement, switchStatement.getFactory().Core().getOrCreateSwitch());
        aCtSwitch.setAnnotations(this.cloneHelper.clone(switchStatement.getAnnotations()));
        aCtSwitch.setSelector(this.cloneHelper.clone(switchStatement.getSelector()));
        aCtSwitch.setCases(this.cloneHelper.clone(switchStatement.getCases()));
        aCtSwitch.setComments(this.cloneHelper.clone(switchStatement.getComments()));
        this.other = aCtSwitch;
    }

    public void visitCtSynchronized(final spoon.reflect.code.CtSynchronized synchro) {
        spoon.reflect.code.CtSynchronized aCtSynchronized = spoon.support.visitor.clone.CloneBuilder.build(this.builder, synchro, synchro.getFactory().Core().getOrCreateSynchronized());
        aCtSynchronized.setAnnotations(this.cloneHelper.clone(synchro.getAnnotations()));
        aCtSynchronized.setExpression(this.cloneHelper.clone(synchro.getExpression()));
        aCtSynchronized.setBlock(this.cloneHelper.clone(synchro.getBlock()));
        aCtSynchronized.setComments(this.cloneHelper.clone(synchro.getComments()));
        this.other = aCtSynchronized;
    }

    public void visitCtThrow(final spoon.reflect.code.CtThrow throwStatement) {
        spoon.reflect.code.CtThrow aCtThrow = spoon.support.visitor.clone.CloneBuilder.build(this.builder, throwStatement, throwStatement.getFactory().Core().getOrCreateThrow());
        aCtThrow.setAnnotations(this.cloneHelper.clone(throwStatement.getAnnotations()));
        aCtThrow.setThrownExpression(this.cloneHelper.clone(throwStatement.getThrownExpression()));
        aCtThrow.setComments(this.cloneHelper.clone(throwStatement.getComments()));
        this.other = aCtThrow;
    }

    public void visitCtTry(final spoon.reflect.code.CtTry tryBlock) {
        spoon.reflect.code.CtTry aCtTry = spoon.support.visitor.clone.CloneBuilder.build(this.builder, tryBlock, tryBlock.getFactory().Core().getOrCreateTry());
        aCtTry.setAnnotations(this.cloneHelper.clone(tryBlock.getAnnotations()));
        aCtTry.setBody(this.cloneHelper.clone(tryBlock.getBody()));
        aCtTry.setCatchers(this.cloneHelper.clone(tryBlock.getCatchers()));
        aCtTry.setFinalizer(this.cloneHelper.clone(tryBlock.getFinalizer()));
        aCtTry.setComments(this.cloneHelper.clone(tryBlock.getComments()));
        this.other = aCtTry;
    }

    @java.lang.Override
    public void visitCtTryWithResource(final spoon.reflect.code.CtTryWithResource tryWithResource) {
        spoon.reflect.code.CtTryWithResource aCtTryWithResource = spoon.support.visitor.clone.CloneBuilder.build(this.builder, tryWithResource, tryWithResource.getFactory().Core().getOrCreateTryWithResource());
        aCtTryWithResource.setAnnotations(this.cloneHelper.clone(tryWithResource.getAnnotations()));
        aCtTryWithResource.setResources(this.cloneHelper.clone(tryWithResource.getResources()));
        aCtTryWithResource.setBody(this.cloneHelper.clone(tryWithResource.getBody()));
        aCtTryWithResource.setCatchers(this.cloneHelper.clone(tryWithResource.getCatchers()));
        aCtTryWithResource.setFinalizer(this.cloneHelper.clone(tryWithResource.getFinalizer()));
        aCtTryWithResource.setComments(this.cloneHelper.clone(tryWithResource.getComments()));
        this.other = aCtTryWithResource;
    }

    public void visitCtTypeParameterReference(final spoon.reflect.reference.CtTypeParameterReference ref) {
        spoon.reflect.reference.CtTypeParameterReference aCtTypeParameterReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, ref, ref.getFactory().Core().getOrCreateTypeParameterReference());
        aCtTypeParameterReference.setPackage(this.cloneHelper.clone(ref.getPackage()));
        aCtTypeParameterReference.setDeclaringType(this.cloneHelper.clone(ref.getDeclaringType()));
        aCtTypeParameterReference.setAnnotations(this.cloneHelper.clone(ref.getAnnotations()));
        aCtTypeParameterReference.setBoundingType(this.cloneHelper.clone(ref.getBoundingType()));
        this.other = aCtTypeParameterReference;
    }

    @java.lang.Override
    public void visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference wildcardReference) {
        spoon.reflect.reference.CtWildcardReference aCtWildcardReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, wildcardReference, wildcardReference.getFactory().Core().getOrCreateWildcardReference());
        aCtWildcardReference.setPackage(this.cloneHelper.clone(wildcardReference.getPackage()));
        aCtWildcardReference.setDeclaringType(this.cloneHelper.clone(wildcardReference.getDeclaringType()));
        aCtWildcardReference.setAnnotations(this.cloneHelper.clone(wildcardReference.getAnnotations()));
        aCtWildcardReference.setBoundingType(this.cloneHelper.clone(wildcardReference.getBoundingType()));
        this.other = aCtWildcardReference;
    }

    @java.lang.Override
    public <T> void visitCtIntersectionTypeReference(final spoon.reflect.reference.CtIntersectionTypeReference<T> reference) {
        spoon.reflect.reference.CtIntersectionTypeReference<T> aCtIntersectionTypeReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().getOrCreateIntersectionTypeReference());
        aCtIntersectionTypeReference.setPackage(this.cloneHelper.clone(reference.getPackage()));
        aCtIntersectionTypeReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtIntersectionTypeReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        aCtIntersectionTypeReference.setBounds(this.cloneHelper.clone(reference.getBounds()));
        this.other = aCtIntersectionTypeReference;
    }

    public <T> void visitCtTypeReference(final spoon.reflect.reference.CtTypeReference<T> reference) {
        spoon.reflect.reference.CtTypeReference<T> aCtTypeReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().getOrCreateTypeReference());
        aCtTypeReference.setPackage(this.cloneHelper.clone(reference.getPackage()));
        aCtTypeReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtTypeReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));
        aCtTypeReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        aCtTypeReference.setComments(this.cloneHelper.clone(reference.getComments()));
        this.other = aCtTypeReference;
    }

    @java.lang.Override
    public <T> void visitCtTypeAccess(final spoon.reflect.code.CtTypeAccess<T> typeAccess) {
        spoon.reflect.code.CtTypeAccess<T> aCtTypeAccess = spoon.support.visitor.clone.CloneBuilder.build(this.builder, typeAccess, typeAccess.getFactory().Core().getOrCreateTypeAccess());
        aCtTypeAccess.setAnnotations(this.cloneHelper.clone(typeAccess.getAnnotations()));
        aCtTypeAccess.setTypeCasts(this.cloneHelper.clone(typeAccess.getTypeCasts()));
        aCtTypeAccess.setAccessedType(this.cloneHelper.clone(typeAccess.getAccessedType()));
        aCtTypeAccess.setComments(this.cloneHelper.clone(typeAccess.getComments()));
        this.other = aCtTypeAccess;
    }

    public <T> void visitCtUnaryOperator(final spoon.reflect.code.CtUnaryOperator<T> operator) {
        spoon.reflect.code.CtUnaryOperator<T> aCtUnaryOperator = spoon.support.visitor.clone.CloneBuilder.build(this.builder, operator, operator.getFactory().Core().getOrCreateUnaryOperator());
        aCtUnaryOperator.setAnnotations(this.cloneHelper.clone(operator.getAnnotations()));
        aCtUnaryOperator.setType(this.cloneHelper.clone(operator.getType()));
        aCtUnaryOperator.setTypeCasts(this.cloneHelper.clone(operator.getTypeCasts()));
        aCtUnaryOperator.setOperand(this.cloneHelper.clone(operator.getOperand()));
        aCtUnaryOperator.setComments(this.cloneHelper.clone(operator.getComments()));
        this.other = aCtUnaryOperator;
    }

    @java.lang.Override
    public <T> void visitCtVariableRead(final spoon.reflect.code.CtVariableRead<T> variableRead) {
        spoon.reflect.code.CtVariableRead<T> aCtVariableRead = spoon.support.visitor.clone.CloneBuilder.build(this.builder, variableRead, variableRead.getFactory().Core().getOrCreateVariableRead());
        aCtVariableRead.setAnnotations(this.cloneHelper.clone(variableRead.getAnnotations()));
        aCtVariableRead.setTypeCasts(this.cloneHelper.clone(variableRead.getTypeCasts()));
        aCtVariableRead.setVariable(this.cloneHelper.clone(variableRead.getVariable()));
        aCtVariableRead.setComments(this.cloneHelper.clone(variableRead.getComments()));
        this.other = aCtVariableRead;
    }

    @java.lang.Override
    public <T> void visitCtVariableWrite(final spoon.reflect.code.CtVariableWrite<T> variableWrite) {
        spoon.reflect.code.CtVariableWrite<T> aCtVariableWrite = spoon.support.visitor.clone.CloneBuilder.build(this.builder, variableWrite, variableWrite.getFactory().Core().getOrCreateVariableWrite());
        aCtVariableWrite.setAnnotations(this.cloneHelper.clone(variableWrite.getAnnotations()));
        aCtVariableWrite.setTypeCasts(this.cloneHelper.clone(variableWrite.getTypeCasts()));
        aCtVariableWrite.setVariable(this.cloneHelper.clone(variableWrite.getVariable()));
        aCtVariableWrite.setComments(this.cloneHelper.clone(variableWrite.getComments()));
        this.other = aCtVariableWrite;
    }

    public void visitCtWhile(final spoon.reflect.code.CtWhile whileLoop) {
        spoon.reflect.code.CtWhile aCtWhile = spoon.support.visitor.clone.CloneBuilder.build(this.builder, whileLoop, whileLoop.getFactory().Core().getOrCreateWhile());
        aCtWhile.setAnnotations(this.cloneHelper.clone(whileLoop.getAnnotations()));
        aCtWhile.setLoopingExpression(this.cloneHelper.clone(whileLoop.getLoopingExpression()));
        aCtWhile.setBody(this.cloneHelper.clone(whileLoop.getBody()));
        aCtWhile.setComments(this.cloneHelper.clone(whileLoop.getComments()));
        this.other = aCtWhile;
    }

    public <T> void visitCtCodeSnippetExpression(final spoon.reflect.code.CtCodeSnippetExpression<T> expression) {
        spoon.reflect.code.CtCodeSnippetExpression<T> aCtCodeSnippetExpression = spoon.support.visitor.clone.CloneBuilder.build(this.builder, expression, expression.getFactory().Core().getOrCreateCodeSnippetExpression());
        aCtCodeSnippetExpression.setType(this.cloneHelper.clone(expression.getType()));
        aCtCodeSnippetExpression.setComments(this.cloneHelper.clone(expression.getComments()));
        aCtCodeSnippetExpression.setAnnotations(this.cloneHelper.clone(expression.getAnnotations()));
        aCtCodeSnippetExpression.setTypeCasts(this.cloneHelper.clone(expression.getTypeCasts()));
        this.other = aCtCodeSnippetExpression;
    }

    public void visitCtCodeSnippetStatement(final spoon.reflect.code.CtCodeSnippetStatement statement) {
        spoon.reflect.code.CtCodeSnippetStatement aCtCodeSnippetStatement = spoon.support.visitor.clone.CloneBuilder.build(this.builder, statement, statement.getFactory().Core().getOrCreateCodeSnippetStatement());
        aCtCodeSnippetStatement.setComments(this.cloneHelper.clone(statement.getComments()));
        aCtCodeSnippetStatement.setAnnotations(this.cloneHelper.clone(statement.getAnnotations()));
        this.other = aCtCodeSnippetStatement;
    }

    public <T> void visitCtUnboundVariableReference(final spoon.reflect.reference.CtUnboundVariableReference<T> reference) {
        spoon.reflect.reference.CtUnboundVariableReference<T> aCtUnboundVariableReference = spoon.support.visitor.clone.CloneBuilder.build(this.builder, reference, reference.getFactory().Core().getOrCreateUnboundVariableReference());
        aCtUnboundVariableReference.setType(this.cloneHelper.clone(reference.getType()));
        this.other = aCtUnboundVariableReference;
    }

    @java.lang.Override
    public <T> void visitCtFieldRead(final spoon.reflect.code.CtFieldRead<T> fieldRead) {
        spoon.reflect.code.CtFieldRead<T> aCtFieldRead = spoon.support.visitor.clone.CloneBuilder.build(this.builder, fieldRead, fieldRead.getFactory().Core().getOrCreateFieldRead());
        aCtFieldRead.setAnnotations(this.cloneHelper.clone(fieldRead.getAnnotations()));
        aCtFieldRead.setTypeCasts(this.cloneHelper.clone(fieldRead.getTypeCasts()));
        aCtFieldRead.setTarget(this.cloneHelper.clone(fieldRead.getTarget()));
        aCtFieldRead.setVariable(this.cloneHelper.clone(fieldRead.getVariable()));
        aCtFieldRead.setComments(this.cloneHelper.clone(fieldRead.getComments()));
        this.other = aCtFieldRead;
    }

    @java.lang.Override
    public <T> void visitCtFieldWrite(final spoon.reflect.code.CtFieldWrite<T> fieldWrite) {
        spoon.reflect.code.CtFieldWrite<T> aCtFieldWrite = spoon.support.visitor.clone.CloneBuilder.build(this.builder, fieldWrite, fieldWrite.getFactory().Core().getOrCreateFieldWrite());
        aCtFieldWrite.setAnnotations(this.cloneHelper.clone(fieldWrite.getAnnotations()));
        aCtFieldWrite.setTypeCasts(this.cloneHelper.clone(fieldWrite.getTypeCasts()));
        aCtFieldWrite.setTarget(this.cloneHelper.clone(fieldWrite.getTarget()));
        aCtFieldWrite.setVariable(this.cloneHelper.clone(fieldWrite.getVariable()));
        aCtFieldWrite.setComments(this.cloneHelper.clone(fieldWrite.getComments()));
        this.other = aCtFieldWrite;
    }

    @java.lang.Override
    public <T> void visitCtSuperAccess(final spoon.reflect.code.CtSuperAccess<T> f) {
        spoon.reflect.code.CtSuperAccess<T> aCtSuperAccess = spoon.support.visitor.clone.CloneBuilder.build(this.builder, f, f.getFactory().Core().getOrCreateSuperAccess());
        aCtSuperAccess.setType(this.cloneHelper.clone(f.getType()));
        aCtSuperAccess.setComments(this.cloneHelper.clone(f.getComments()));
        aCtSuperAccess.setAnnotations(this.cloneHelper.clone(f.getAnnotations()));
        aCtSuperAccess.setTypeCasts(this.cloneHelper.clone(f.getTypeCasts()));
        aCtSuperAccess.setTarget(this.cloneHelper.clone(f.getTarget()));
        aCtSuperAccess.setVariable(this.cloneHelper.clone(f.getVariable()));
        this.other = aCtSuperAccess;
    }

    @java.lang.Override
    public void visitCtComment(final spoon.reflect.code.CtComment comment) {
        spoon.reflect.code.CtComment aCtComment = spoon.support.visitor.clone.CloneBuilder.build(this.builder, comment, comment.getFactory().Core().getOrCreateComment());
        aCtComment.setComments(this.cloneHelper.clone(comment.getComments()));
        aCtComment.setAnnotations(this.cloneHelper.clone(comment.getAnnotations()));
        this.other = aCtComment;
    }

    @java.lang.Override
    public void visitCtJavaDoc(final spoon.reflect.code.CtJavaDoc javaDoc) {
        spoon.reflect.code.CtJavaDoc aCtJavaDoc = spoon.support.visitor.clone.CloneBuilder.build(this.builder, javaDoc, javaDoc.getFactory().Core().getOrCreateJavaDoc());
        aCtJavaDoc.setComments(this.cloneHelper.clone(javaDoc.getComments()));
        aCtJavaDoc.setAnnotations(this.cloneHelper.clone(javaDoc.getAnnotations()));
        aCtJavaDoc.setTags(this.cloneHelper.clone(javaDoc.getTags()));
        this.other = aCtJavaDoc;
    }

    @java.lang.Override
    public void visitCtJavaDocTag(final spoon.reflect.code.CtJavaDocTag docTag) {
        spoon.reflect.code.CtJavaDocTag aCtJavaDocTag = spoon.support.visitor.clone.CloneBuilder.build(this.builder, docTag, docTag.getFactory().Core().getOrC]reateJavaDocTag());
...>
  SpoonArchitectureEnforcerTest.testFactorySubFactory:95 getOrCreateCtBlock(T extends spoon.reflect.code.CtStatement) is not present in the main factory
  JavaDocTest.testJavaDocReprint:30 expected:<...CtAnnotationType<?> [getOrC]reate(CtPackage owne...> but was:<...CtAnnotationType<?> [c]reate(CtPackage owne...>

Tests run: 1181, Failures: 4, Errors: 0, Skipped: 2

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 04:54 min
[INFO] Finished at: 2017-10-24T15:16:16+02:00
[INFO] Final Memory: 32M/756M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.19.1:test (default-test) on project spoon-core: There are test failures.
[ERROR] 
[ERROR] Please refer to /root/workspace/INRIA/spoon/292059346/target/surefire-reports for the individual test results.
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
