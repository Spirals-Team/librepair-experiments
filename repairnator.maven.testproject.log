[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO] 
[INFO] GraphHopper Parent Project
[INFO] GraphHopper Core
[INFO] GraphHopper Reader for OpenStreetMap Data
[INFO] GraphHopper Isochrone
[INFO] GraphHopper Reader for Gtfs Data
[INFO] GraphHopper Reader JSON
[INFO] GraphHopper Tools
[INFO] GraphHopper Directions API hand-crafted Java Client.
[INFO] GraphHopper Web
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building GraphHopper Parent Project 0.11-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building GraphHopper Core 0.11-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ graphhopper-core ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO] Copying 48 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.5.1:compile (default-compile) @ graphhopper-core ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ graphhopper-core ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 11 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.5.1:testCompile (default-testCompile) @ graphhopper-core ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.19.1:test (default-test) @ graphhopper-core ---
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.19.1/surefire-junit4-2.19.1.pom
3/4 KB   
4/4 KB   
         
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.19.1/surefire-junit4-2.19.1.pom (4 KB at 7.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.19.1/surefire-providers-2.19.1.pom
3/3 KB   
         
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.19.1/surefire-providers-2.19.1.pom (3 KB at 61.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.19.1/surefire-junit4-2.19.1.jar
3/74 KB   
5/74 KB   
8/74 KB   
11/74 KB   
13/74 KB   
16/74 KB   
19/74 KB   
21/74 KB   
24/74 KB   
27/74 KB   
29/74 KB   
32/74 KB   
36/74 KB   
40/74 KB   
44/74 KB   
48/74 KB   
52/74 KB   
56/74 KB   
60/74 KB   
64/74 KB   
68/74 KB   
72/74 KB   
74/74 KB   
           
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.19.1/surefire-junit4-2.19.1.jar (74 KB at 406.9 KB/sec)

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running com.graphhopper.routing.ch.CHAlgoFactoryDecoratorTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.267 sec - in com.graphhopper.routing.ch.CHAlgoFactoryDecoratorTest
Running com.graphhopper.routing.ch.NodeBasedNodeContractorTest
Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.22 sec - in com.graphhopper.routing.ch.NodeBasedNodeContractorTest
Running com.graphhopper.routing.ch.CHTurnCostTest
Tests run: 17, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 40.617 sec <<< FAILURE! - in com.graphhopper.routing.ch.CHTurnCostTest
testFindPath_random_compareWithDijkstra(com.graphhopper.routing.ch.CHTurnCostTest)  Time elapsed: 6.717 sec  <<< FAILURE!
java.lang.AssertionError: 
Dijkstra and CH did not find equal shortest paths for route from 6 to 1
 dijkstra: weight: 80.702, nodes: [6, 7, 8, 0, 1]
       ch: weight: 93.747, nodes: [6, 7, 9, 1]
	at com.graphhopper.routing.ch.CHTurnCostTest.compareCHQueryWithDijkstra(CHTurnCostTest.java:713)
	at com.graphhopper.routing.ch.CHTurnCostTest.compareCHWithDijkstra(CHTurnCostTest.java:701)
	at com.graphhopper.routing.ch.CHTurnCostTest.testFindPath_random_compareWithDijkstra(CHTurnCostTest.java:641)

Running com.graphhopper.routing.ch.EdgeBasedNodeContractorTest
Using seed 3977551368802027
na.setNode(0, 49.400563, 9.700023);
na.setNode(1, 49.400873, 9.700994);
na.setNode(2, 49.400222, 9.700169);
na.setNode(3, 49.400663, 9.700763);
na.setNode(4, 49.400342, 9.700451);
na.setNode(5, 49.400134, 9.700214);
na.setNode(6, 49.400500, 9.700904);
na.setNode(7, 49.400725, 9.700767);
na.setNode(8, 49.400187, 9.700324);
na.setNode(9, 49.400422, 9.700178);
na.setNode(10, 49.400011, 9.700771);
na.setNode(11, 49.400522, 9.700428);
na.setNode(12, 49.400859, 9.700973);
na.setNode(13, 49.400180, 9.700580);
na.setNode(14, 49.400277, 9.700832);
na.setNode(15, 49.400791, 9.700007);
na.setNode(16, 49.400404, 9.700665);
na.setNode(17, 49.400959, 9.700596);
na.setNode(18, 49.400342, 9.700043);
na.setNode(19, 49.400394, 9.700888);
graph.edge(5, 9, 32.149000, true);
graph.edge(10, 18, 64.246000, true);
graph.edge(1, 18, 91.069000, true);
graph.edge(11, 16, 21.681000, true);
graph.edge(13, 15, 79.653000, false);
graph.edge(4, 16, 16.919000, true);
graph.edge(13, 19, 32.633000, true);
graph.edge(3, 5, 71.345000, true);
graph.edge(4, 15, 59.933000, true);
graph.edge(1, 9, 77.684000, true);
graph.edge(8, 19, 46.998000, true);
graph.edge(0, 11, 29.725000, true);
graph.edge(8, 17, 88.056000, true);
graph.edge(5, 8, 10.012000, true);
graph.edge(0, 7, 56.749000, true);
graph.edge(0, 8, 47.373000, true);
graph.edge(11, 15, 42.872000, true);
graph.edge(8, 17, 88.858000, false);
graph.edge(12, 18, 89.130000, true);
graph.edge(15, 18, 50.247000, true);
graph.edge(1, 6, 42.415000, true);
graph.edge(11, 13, 39.781000, true);
graph.edge(0, 12, 76.254000, true);
graph.edge(0, 7, 57.141000, true);
graph.edge(15, 17, 46.968000, true);
graph.edge(11, 17, 50.258000, true);
graph.edge(8, 1, 91.164000, false);
graph.edge(3, 13, 55.562000, true);
graph.edge(0, 12, 76.889000, true);
graph.edge(15, 19, 78.108000, false);
graph.edge(15, 16, 64.499000, true);
graph.edge(8, 9, 28.246000, true);
graph.edge(5, 19, 57.230000, true);
graph.edge(10, 16, 44.497000, true);
graph.edge(3, 16, 29.676000, true);
graph.edge(6, 7, 27.120000, true);
graph.edge(2, 5, 10.381000, true);
graph.edge(17, 6, 55.935000, false);
graph.edge(1, 14, 67.560000, true);
graph.edge(7, 11, 33.596000, true);
graph.edge(12, 19, 52.411000, true);
graph.edge(8, 2, 11.898000, false);
graph.edge(16, 8, 34.746000, false);
graph.edge(6, 11, 34.803000, false);
graph.edge(11, 7, 33.350000, false);
graph.edge(8, 9, 28.158000, true);
graph.edge(1, 9, 78.178000, true);
graph.edge(8, 14, 38.299000, true);
graph.edge(5, 8, 10.042000, true);
graph.edge(2, 6, 61.637000, true);
graph.edge(13, 7, 62.150000, false);
graph.edge(1, 19, 53.890000, true);
graph.edge(7, 12, 21.312000, true);
graph.edge(1, 12, 2.138000, true);
graph.edge(4, 19, 32.167000, true);
graph.edge(11, 13, 39.585000, true);
graph.edge(9, 19, 51.996000, true);
graph.edge(7, 15, 55.714000, true);
na.setNode(0, 49.400563, 9.700023);
na.setNode(1, 49.400873, 9.700994);
na.setNode(2, 49.400222, 9.700169);
na.setNode(3, 49.400663, 9.700763);
na.setNode(4, 49.400342, 9.700451);
na.setNode(5, 49.400134, 9.700214);
na.setNode(6, 49.400500, 9.700904);
na.setNode(7, 49.400725, 9.700767);
na.setNode(8, 49.400187, 9.700324);
na.setNode(9, 49.400422, 9.700178);
na.setNode(10, 49.400011, 9.700771);
na.setNode(11, 49.400522, 9.700428);
na.setNode(12, 49.400859, 9.700973);
na.setNode(13, 49.400180, 9.700580);
na.setNode(14, 49.400277, 9.700832);
na.setNode(15, 49.400791, 9.700007);
na.setNode(16, 49.400404, 9.700665);
na.setNode(17, 49.400959, 9.700596);
na.setNode(18, 49.400342, 9.700043);
na.setNode(19, 49.400394, 9.700888);
graph.edge(5, 9, 32.149000, true);
graph.edge(10, 18, 64.246000, true);
graph.edge(1, 18, 91.069000, true);
graph.edge(11, 16, 21.681000, true);
graph.edge(13, 15, 79.653000, false);
graph.edge(4, 16, 16.919000, true);
graph.edge(13, 19, 32.633000, true);
graph.edge(3, 5, 71.345000, true);
graph.edge(4, 15, 59.933000, true);
graph.edge(1, 9, 77.684000, true);
graph.edge(8, 19, 46.998000, true);
graph.edge(0, 11, 29.725000, true);
graph.edge(8, 17, 88.056000, true);
graph.edge(5, 8, 10.012000, true);
graph.edge(0, 7, 56.749000, true);
graph.edge(0, 8, 47.373000, true);
graph.edge(11, 15, 42.872000, true);
graph.edge(8, 17, 88.858000, false);
graph.edge(12, 18, 89.130000, true);
graph.edge(15, 18, 50.247000, true);
graph.edge(1, 6, 42.415000, true);
graph.edge(11, 13, 39.781000, true);
graph.edge(0, 12, 76.254000, true);
graph.edge(0, 7, 57.141000, true);
graph.edge(15, 17, 46.968000, true);
graph.edge(11, 17, 50.258000, true);
graph.edge(8, 1, 91.164000, false);
graph.edge(3, 13, 55.562000, true);
graph.edge(0, 12, 76.889000, true);
graph.edge(15, 19, 78.108000, false);
graph.edge(15, 16, 64.499000, true);
graph.edge(8, 9, 28.246000, true);
graph.edge(5, 19, 57.230000, true);
graph.edge(10, 16, 44.497000, true);
graph.edge(3, 16, 29.676000, true);
graph.edge(6, 7, 27.120000, true);
graph.edge(2, 5, 10.381000, true);
graph.edge(17, 6, 55.935000, false);
graph.edge(1, 14, 67.560000, true);
graph.edge(7, 11, 33.596000, true);
graph.edge(12, 19, 52.411000, true);
graph.edge(8, 2, 11.898000, false);
graph.edge(16, 8, 34.746000, false);
graph.edge(6, 11, 34.803000, false);
graph.edge(11, 7, 33.350000, false);
graph.edge(8, 9, 28.158000, true);
graph.edge(1, 9, 78.178000, true);
graph.edge(8, 14, 38.299000, true);
graph.edge(5, 8, 10.042000, true);
graph.edge(2, 6, 61.637000, true);
graph.edge(13, 7, 62.150000, false);
graph.edge(1, 19, 53.890000, true);
graph.edge(7, 12, 21.312000, true);
graph.edge(1, 12, 2.138000, true);
graph.edge(4, 19, 32.167000, true);
graph.edge(11, 13, 39.585000, true);
graph.edge(9, 19, 51.996000, true);
graph.edge(7, 15, 55.714000, true);
na.setNode(0, 49.400563, 9.700023);
na.setNode(1, 49.400873, 9.700994);
na.setNode(2, 49.400222, 9.700169);
na.setNode(3, 49.400663, 9.700763);
na.setNode(4, 49.400342, 9.700451);
na.setNode(5, 49.400134, 9.700214);
na.setNode(6, 49.400500, 9.700904);
na.setNode(7, 49.400725, 9.700767);
na.setNode(8, 49.400187, 9.700324);
na.setNode(9, 49.400422, 9.700178);
na.setNode(10, 49.400011, 9.700771);
na.setNode(11, 49.400522, 9.700428);
na.setNode(12, 49.400859, 9.700973);
na.setNode(13, 49.400180, 9.700580);
na.setNode(14, 49.400277, 9.700832);
na.setNode(15, 49.400791, 9.700007);
na.setNode(16, 49.400404, 9.700665);
na.setNode(17, 49.400959, 9.700596);
na.setNode(18, 49.400342, 9.700043);
na.setNode(19, 49.400394, 9.700888);
graph.edge(5, 9, 32.149000, true);
graph.edge(10, 18, 64.246000, true);
graph.edge(1, 18, 91.069000, true);
graph.edge(11, 16, 21.681000, true);
graph.edge(13, 15, 79.653000, false);
graph.edge(4, 16, 16.919000, true);
graph.edge(13, 19, 32.633000, true);
graph.edge(3, 5, 71.345000, true);
graph.edge(4, 15, 59.933000, true);
graph.edge(1, 9, 77.684000, true);
graph.edge(8, 19, 46.998000, true);
graph.edge(0, 11, 29.725000, true);
graph.edge(8, 17, 88.056000, true);
graph.edge(5, 8, 10.012000, true);
graph.edge(0, 7, 56.749000, true);
graph.edge(0, 8, 47.373000, true);
graph.edge(11, 15, 42.872000, true);
graph.edge(8, 17, 88.858000, false);
graph.edge(12, 18, 89.130000, true);
graph.edge(15, 18, 50.247000, true);
graph.edge(1, 6, 42.415000, true);
graph.edge(11, 13, 39.781000, true);
graph.edge(0, 12, 76.254000, true);
graph.edge(0, 7, 57.141000, true);
graph.edge(15, 17, 46.968000, true);
graph.edge(11, 17, 50.258000, true);
graph.edge(8, 1, 91.164000, false);
graph.edge(3, 13, 55.562000, true);
graph.edge(0, 12, 76.889000, true);
graph.edge(15, 19, 78.108000, false);
graph.edge(15, 16, 64.499000, true);
graph.edge(8, 9, 28.246000, true);
graph.edge(5, 19, 57.230000, true);
graph.edge(10, 16, 44.497000, true);
graph.edge(3, 16, 29.676000, true);
graph.edge(6, 7, 27.120000, true);
graph.edge(2, 5, 10.381000, true);
graph.edge(17, 6, 55.935000, false);
graph.edge(1, 14, 67.560000, true);
graph.edge(7, 11, 33.596000, true);
graph.edge(12, 19, 52.411000, true);
graph.edge(8, 2, 11.898000, false);
graph.edge(16, 8, 34.746000, false);
graph.edge(6, 11, 34.803000, false);
graph.edge(11, 7, 33.350000, false);
graph.edge(8, 9, 28.158000, true);
graph.edge(1, 9, 78.178000, true);
graph.edge(8, 14, 38.299000, true);
graph.edge(5, 8, 10.042000, true);
graph.edge(2, 6, 61.637000, true);
graph.edge(13, 7, 62.150000, false);
graph.edge(1, 19, 53.890000, true);
graph.edge(7, 12, 21.312000, true);
graph.edge(1, 12, 2.138000, true);
graph.edge(4, 19, 32.167000, true);
graph.edge(11, 13, 39.585000, true);
graph.edge(9, 19, 51.996000, true);
graph.edge(7, 15, 55.714000, true);
na.setNode(0, 49.400563, 9.700023);
na.setNode(1, 49.400873, 9.700994);
na.setNode(2, 49.400222, 9.700169);
na.setNode(3, 49.400663, 9.700763);
na.setNode(4, 49.400342, 9.700451);
na.setNode(5, 49.400134, 9.700214);
na.setNode(6, 49.400500, 9.700904);
na.setNode(7, 49.400725, 9.700767);
na.setNode(8, 49.400187, 9.700324);
na.setNode(9, 49.400422, 9.700178);
na.setNode(10, 49.400011, 9.700771);
na.setNode(11, 49.400522, 9.700428);
na.setNode(12, 49.400859, 9.700973);
na.setNode(13, 49.400180, 9.700580);
na.setNode(14, 49.400277, 9.700832);
na.setNode(15, 49.400791, 9.700007);
na.setNode(16, 49.400404, 9.700665);
na.setNode(17, 49.400959, 9.700596);
na.setNode(18, 49.400342, 9.700043);
na.setNode(19, 49.400394, 9.700888);
graph.edge(5, 9, 32.149000, true);
graph.edge(10, 18, 64.246000, true);
graph.edge(1, 18, 91.069000, true);
graph.edge(11, 16, 21.681000, true);
graph.edge(13, 15, 79.653000, false);
graph.edge(4, 16, 16.919000, true);
graph.edge(13, 19, 32.633000, true);
graph.edge(3, 5, 71.345000, true);
graph.edge(4, 15, 59.933000, true);
graph.edge(1, 9, 77.684000, true);
graph.edge(8, 19, 46.998000, true);
graph.edge(0, 11, 29.725000, true);
graph.edge(8, 17, 88.056000, true);
graph.edge(5, 8, 10.012000, true);
graph.edge(0, 7, 56.749000, true);
graph.edge(0, 8, 47.373000, true);
graph.edge(11, 15, 42.872000, true);
graph.edge(8, 17, 88.858000, false);
graph.edge(12, 18, 89.130000, true);
graph.edge(15, 18, 50.247000, true);
graph.edge(1, 6, 42.415000, true);
graph.edge(11, 13, 39.781000, true);
graph.edge(0, 12, 76.254000, true);
graph.edge(0, 7, 57.141000, true);
graph.edge(15, 17, 46.968000, true);
graph.edge(11, 17, 50.258000, true);
graph.edge(8, 1, 91.164000, false);
graph.edge(3, 13, 55.562000, true);
graph.edge(0, 12, 76.889000, true);
graph.edge(15, 19, 78.108000, false);
graph.edge(15, 16, 64.499000, true);
graph.edge(8, 9, 28.246000, true);
graph.edge(5, 19, 57.230000, true);
graph.edge(10, 16, 44.497000, true);
graph.edge(3, 16, 29.676000, true);
graph.edge(6, 7, 27.120000, true);
graph.edge(2, 5, 10.381000, true);
graph.edge(17, 6, 55.935000, false);
graph.edge(1, 14, 67.560000, true);
graph.edge(7, 11, 33.596000, true);
graph.edge(12, 19, 52.411000, true);
graph.edge(8, 2, 11.898000, false);
graph.edge(16, 8, 34.746000, false);
graph.edge(6, 11, 34.803000, false);
graph.edge(11, 7, 33.350000, false);
graph.edge(8, 9, 28.158000, true);
graph.edge(1, 9, 78.178000, true);
graph.edge(8, 14, 38.299000, true);
graph.edge(5, 8, 10.042000, true);
graph.edge(2, 6, 61.637000, true);
graph.edge(13, 7, 62.150000, false);
graph.edge(1, 19, 53.890000, true);
graph.edge(7, 12, 21.312000, true);
graph.edge(1, 12, 2.138000, true);
graph.edge(4, 19, 32.167000, true);
graph.edge(11, 13, 39.585000, true);
graph.edge(9, 19, 51.996000, true);
graph.edge(7, 15, 55.714000, true);
na.setNode(0, 49.400563, 9.700023);
na.setNode(1, 49.400873, 9.700994);
na.setNode(2, 49.400222, 9.700169);
na.setNode(3, 49.400663, 9.700763);
na.setNode(4, 49.400342, 9.700451);
na.setNode(5, 49.400134, 9.700214);
na.setNode(6, 49.400500, 9.700904);
na.setNode(7, 49.400725, 9.700767);
na.setNode(8, 49.400187, 9.700324);
na.setNode(9, 49.400422, 9.700178);
na.setNode(10, 49.400011, 9.700771);
na.setNode(11, 49.400522, 9.700428);
na.setNode(12, 49.400859, 9.700973);
na.setNode(13, 49.400180, 9.700580);
na.setNode(14, 49.400277, 9.700832);
na.setNode(15, 49.400791, 9.700007);
na.setNode(16, 49.400404, 9.700665);
na.setNode(17, 49.400959, 9.700596);
na.setNode(18, 49.400342, 9.700043);
na.setNode(19, 49.400394, 9.700888);
graph.edge(5, 9, 32.149000, true);
graph.edge(10, 18, 64.246000, true);
graph.edge(1, 18, 91.069000, true);
graph.edge(11, 16, 21.681000, true);
graph.edge(13, 15, 79.653000, false);
graph.edge(4, 16, 16.919000, true);
graph.edge(13, 19, 32.633000, true);
graph.edge(3, 5, 71.345000, true);
graph.edge(4, 15, 59.933000, true);
graph.edge(1, 9, 77.684000, true);
graph.edge(8, 19, 46.998000, true);
graph.edge(0, 11, 29.725000, true);
graph.edge(8, 17, 88.056000, true);
graph.edge(5, 8, 10.012000, true);
graph.edge(0, 7, 56.749000, true);
graph.edge(0, 8, 47.373000, true);
graph.edge(11, 15, 42.872000, true);
graph.edge(8, 17, 88.858000, false);
graph.edge(12, 18, 89.130000, true);
graph.edge(15, 18, 50.247000, true);
graph.edge(1, 6, 42.415000, true);
graph.edge(11, 13, 39.781000, true);
graph.edge(0, 12, 76.254000, true);
graph.edge(0, 7, 57.141000, true);
graph.edge(15, 17, 46.968000, true);
graph.edge(11, 17, 50.258000, true);
graph.edge(8, 1, 91.164000, false);
graph.edge(3, 13, 55.562000, true);
graph.edge(0, 12, 76.889000, true);
graph.edge(15, 19, 78.108000, false);
graph.edge(15, 16, 64.499000, true);
graph.edge(8, 9, 28.246000, true);
graph.edge(5, 19, 57.230000, true);
graph.edge(10, 16, 44.497000, true);
graph.edge(3, 16, 29.676000, true);
graph.edge(6, 7, 27.120000, true);
graph.edge(2, 5, 10.381000, true);
graph.edge(17, 6, 55.935000, false);
graph.edge(1, 14, 67.560000, true);
graph.edge(7, 11, 33.596000, true);
graph.edge(12, 19, 52.411000, true);
graph.edge(8, 2, 11.898000, false);
graph.edge(16, 8, 34.746000, false);
graph.edge(6, 11, 34.803000, false);
graph.edge(11, 7, 33.350000, false);
graph.edge(8, 9, 28.158000, true);
graph.edge(1, 9, 78.178000, true);
graph.edge(8, 14, 38.299000, true);
graph.edge(5, 8, 10.042000, true);
graph.edge(2, 6, 61.637000, true);
graph.edge(13, 7, 62.150000, false);
graph.edge(1, 19, 53.890000, true);
graph.edge(7, 12, 21.312000, true);
graph.edge(1, 12, 2.138000, true);
graph.edge(4, 19, 32.167000, true);
graph.edge(11, 13, 39.585000, true);
graph.edge(9, 19, 51.996000, true);
graph.edge(7, 15, 55.714000, true);
na.setNode(0, 49.400563, 9.700023);
na.setNode(1, 49.400873, 9.700994);
na.setNode(2, 49.400222, 9.700169);
na.setNode(3, 49.400663, 9.700763);
na.setNode(4, 49.400342, 9.700451);
na.setNode(5, 49.400134, 9.700214);
na.setNode(6, 49.400500, 9.700904);
na.setNode(7, 49.400725, 9.700767);
na.setNode(8, 49.400187, 9.700324);
na.setNode(9, 49.400422, 9.700178);
na.setNode(10, 49.400011, 9.700771);
na.setNode(11, 49.400522, 9.700428);
na.setNode(12, 49.400859, 9.700973);
na.setNode(13, 49.400180, 9.700580);
na.setNode(14, 49.400277, 9.700832);
na.setNode(15, 49.400791, 9.700007);
na.setNode(16, 49.400404, 9.700665);
na.setNode(17, 49.400959, 9.700596);
na.setNode(18, 49.400342, 9.700043);
na.setNode(19, 49.400394, 9.700888);
graph.edge(5, 9, 32.149000, true);
graph.edge(10, 18, 64.246000, true);
graph.edge(1, 18, 91.069000, true);
graph.edge(11, 16, 21.681000, true);
graph.edge(13, 15, 79.653000, false);
graph.edge(4, 16, 16.919000, true);
graph.edge(13, 19, 32.633000, true);
graph.edge(3, 5, 71.345000, true);
graph.edge(4, 15, 59.933000, true);
graph.edge(1, 9, 77.684000, true);
graph.edge(8, 19, 46.998000, true);
graph.edge(0, 11, 29.725000, true);
graph.edge(8, 17, 88.056000, true);
graph.edge(5, 8, 10.012000, true);
graph.edge(0, 7, 56.749000, true);
graph.edge(0, 8, 47.373000, true);
graph.edge(11, 15, 42.872000, true);
graph.edge(8, 17, 88.858000, false);
graph.edge(12, 18, 89.130000, true);
graph.edge(15, 18, 50.247000, true);
graph.edge(1, 6, 42.415000, true);
graph.edge(11, 13, 39.781000, true);
graph.edge(0, 12, 76.254000, true);
graph.edge(0, 7, 57.141000, true);
graph.edge(15, 17, 46.968000, true);
graph.edge(11, 17, 50.258000, true);
graph.edge(8, 1, 91.164000, false);
graph.edge(3, 13, 55.562000, true);
graph.edge(0, 12, 76.889000, true);
graph.edge(15, 19, 78.108000, false);
graph.edge(15, 16, 64.499000, true);
graph.edge(8, 9, 28.246000, true);
graph.edge(5, 19, 57.230000, true);
graph.edge(10, 16, 44.497000, true);
graph.edge(3, 16, 29.676000, true);
graph.edge(6, 7, 27.120000, true);
graph.edge(2, 5, 10.381000, true);
graph.edge(17, 6, 55.935000, false);
graph.edge(1, 14, 67.560000, true);
graph.edge(7, 11, 33.596000, true);
graph.edge(12, 19, 52.411000, true);
graph.edge(8, 2, 11.898000, false);
graph.edge(16, 8, 34.746000, false);
graph.edge(6, 11, 34.803000, false);
graph.edge(11, 7, 33.350000, false);
graph.edge(8, 9, 28.158000, true);
graph.edge(1, 9, 78.178000, true);
graph.edge(8, 14, 38.299000, true);
graph.edge(5, 8, 10.042000, true);
graph.edge(2, 6, 61.637000, true);
graph.edge(13, 7, 62.150000, false);
graph.edge(1, 19, 53.890000, true);
graph.edge(7, 12, 21.312000, true);
graph.edge(1, 12, 2.138000, true);
graph.edge(4, 19, 32.167000, true);
graph.edge(11, 13, 39.585000, true);
graph.edge(9, 19, 51.996000, true);
graph.edge(7, 15, 55.714000, true);
na.setNode(0, 49.400563, 9.700023);
na.setNode(1, 49.400873, 9.700994);
na.setNode(2, 49.400222, 9.700169);
na.setNode(3, 49.400663, 9.700763);
na.setNode(4, 49.400342, 9.700451);
na.setNode(5, 49.400134, 9.700214);
na.setNode(6, 49.400500, 9.700904);
na.setNode(7, 49.400725, 9.700767);
na.setNode(8, 49.400187, 9.700324);
na.setNode(9, 49.400422, 9.700178);
na.setNode(10, 49.400011, 9.700771);
na.setNode(11, 49.400522, 9.700428);
na.setNode(12, 49.400859, 9.700973);
na.setNode(13, 49.400180, 9.700580);
na.setNode(14, 49.400277, 9.700832);
na.setNode(15, 49.400791, 9.700007);
na.setNode(16, 49.400404, 9.700665);
na.setNode(17, 49.400959, 9.700596);
na.setNode(18, 49.400342, 9.700043);
na.setNode(19, 49.400394, 9.700888);
graph.edge(5, 9, 32.149000, true);
graph.edge(10, 18, 64.246000, true);
graph.edge(1, 18, 91.069000, true);
graph.edge(11, 16, 21.681000, true);
graph.edge(13, 15, 79.653000, false);
graph.edge(4, 16, 16.919000, true);
graph.edge(13, 19, 32.633000, true);
graph.edge(3, 5, 71.345000, true);
graph.edge(4, 15, 59.933000, true);
graph.edge(1, 9, 77.684000, true);
graph.edge(8, 19, 46.998000, true);
graph.edge(0, 11, 29.725000, true);
graph.edge(8, 17, 88.056000, true);
graph.edge(5, 8, 10.012000, true);
graph.edge(0, 7, 56.749000, true);
graph.edge(0, 8, 47.373000, true);
graph.edge(11, 15, 42.872000, true);
graph.edge(8, 17, 88.858000, false);
graph.edge(12, 18, 89.130000, true);
graph.edge(15, 18, 50.247000, true);
graph.edge(1, 6, 42.415000, true);
graph.edge(11, 13, 39.781000, true);
graph.edge(0, 12, 76.254000, true);
graph.edge(0, 7, 57.141000, true);
graph.edge(15, 17, 46.968000, true);
graph.edge(11, 17, 50.258000, true);
graph.edge(8, 1, 91.164000, false);
graph.edge(3, 13, 55.562000, true);
graph.edge(0, 12, 76.889000, true);
graph.edge(15, 19, 78.108000, false);
graph.edge(15, 16, 64.499000, true);
graph.edge(8, 9, 28.246000, true);
graph.edge(5, 19, 57.230000, true);
graph.edge(10, 16, 44.497000, true);
graph.edge(3, 16, 29.676000, true);
graph.edge(6, 7, 27.120000, true);
graph.edge(2, 5, 10.381000, true);
graph.edge(17, 6, 55.935000, false);
graph.edge(1, 14, 67.560000, true);
graph.edge(7, 11, 33.596000, true);
graph.edge(12, 19, 52.411000, true);
graph.edge(8, 2, 11.898000, false);
graph.edge(16, 8, 34.746000, false);
graph.edge(6, 11, 34.803000, false);
graph.edge(11, 7, 33.350000, false);
graph.edge(8, 9, 28.158000, true);
graph.edge(1, 9, 78.178000, true);
graph.edge(8, 14, 38.299000, true);
graph.edge(5, 8, 10.042000, true);
graph.edge(2, 6, 61.637000, true);
graph.edge(13, 7, 62.150000, false);
graph.edge(1, 19, 53.890000, true);
graph.edge(7, 12, 21.312000, true);
graph.edge(1, 12, 2.138000, true);
graph.edge(4, 19, 32.167000, true);
graph.edge(11, 13, 39.585000, true);
graph.edge(9, 19, 51.996000, true);
graph.edge(7, 15, 55.714000, true);
na.setNode(0, 49.400563, 9.700023);
na.setNode(1, 49.400873, 9.700994);
na.setNode(2, 49.400222, 9.700169);
na.setNode(3, 49.400663, 9.700763);
na.setNode(4, 49.400342, 9.700451);
na.setNode(5, 49.400134, 9.700214);
na.setNode(6, 49.400500, 9.700904);
na.setNode(7, 49.400725, 9.700767);
na.setNode(8, 49.400187, 9.700324);
na.setNode(9, 49.400422, 9.700178);
na.setNode(10, 49.400011, 9.700771);
na.setNode(11, 49.400522, 9.700428);
na.setNode(12, 49.400859, 9.700973);
na.setNode(13, 49.400180, 9.700580);
na.setNode(14, 49.400277, 9.700832);
na.setNode(15, 49.400791, 9.700007);
na.setNode(16, 49.400404, 9.700665);
na.setNode(17, 49.400959, 9.700596);
na.setNode(18, 49.400342, 9.700043);
na.setNode(19, 49.400394, 9.700888);
graph.edge(5, 9, 32.149000, true);
graph.edge(10, 18, 64.246000, true);
graph.edge(1, 18, 91.069000, true);
graph.edge(11, 16, 21.681000, true);
graph.edge(13, 15, 79.653000, false);
graph.edge(4, 16, 16.919000, true);
graph.edge(13, 19, 32.633000, true);
graph.edge(3, 5, 71.345000, true);
graph.edge(4, 15, 59.933000, true);
graph.edge(1, 9, 77.684000, true);
graph.edge(8, 19, 46.998000, true);
graph.edge(0, 11, 29.725000, true);
graph.edge(8, 17, 88.056000, true);
graph.edge(5, 8, 10.012000, true);
graph.edge(0, 7, 56.749000, true);
graph.edge(0, 8, 47.373000, true);
graph.edge(11, 15, 42.872000, true);
graph.edge(8, 17, 88.858000, false);
graph.edge(12, 18, 89.130000, true);
graph.edge(15, 18, 50.247000, true);
graph.edge(1, 6, 42.415000, true);
graph.edge(11, 13, 39.781000, true);
graph.edge(0, 12, 76.254000, true);
graph.edge(0, 7, 57.141000, true);
graph.edge(15, 17, 46.968000, true);
graph.edge(11, 17, 50.258000, true);
graph.edge(8, 1, 91.164000, false);
graph.edge(3, 13, 55.562000, true);
graph.edge(0, 12, 76.889000, true);
graph.edge(15, 19, 78.108000, false);
graph.edge(15, 16, 64.499000, true);
graph.edge(8, 9, 28.246000, true);
graph.edge(5, 19, 57.230000, true);
graph.edge(10, 16, 44.497000, true);
graph.edge(3, 16, 29.676000, true);
graph.edge(6, 7, 27.120000, true);
graph.edge(2, 5, 10.381000, true);
graph.edge(17, 6, 55.935000, false);
graph.edge(1, 14, 67.560000, true);
graph.edge(7, 11, 33.596000, true);
graph.edge(12, 19, 52.411000, true);
graph.edge(8, 2, 11.898000, false);
graph.edge(16, 8, 34.746000, false);
graph.edge(6, 11, 34.803000, false);
graph.edge(11, 7, 33.350000, false);
graph.edge(8, 9, 28.158000, true);
graph.edge(1, 9, 78.178000, true);
graph.edge(8, 14, 38.299000, true);
graph.edge(5, 8, 10.042000, true);
graph.edge(2, 6, 61.637000, true);
graph.edge(13, 7, 62.150000, false);
graph.edge(1, 19, 53.890000, true);
graph.edge(7, 12, 21.312000, true);
graph.edge(1, 12, 2.138000, true);
graph.edge(4, 19, 32.167000, true);
graph.edge(11, 13, 39.585000, true);
graph.edge(9, 19, 51.996000, true);
graph.edge(7, 15, 55.714000, true);
na.setNode(0, 49.400563, 9.700023);
na.setNode(1, 49.400873, 9.700994);
na.setNode(2, 49.400222, 9.700169);
na.setNode(3, 49.400663, 9.700763);
na.setNode(4, 49.400342, 9.700451);
na.setNode(5, 49.400134, 9.700214);
na.setNode(6, 49.400500, 9.700904);
na.setNode(7, 49.400725, 9.700767);
na.setNode(8, 49.400187, 9.700324);
na.setNode(9, 49.400422, 9.700178);
na.setNode(10, 49.400011, 9.700771);
na.setNode(11, 49.400522, 9.700428);
na.setNode(12, 49.400859, 9.700973);
na.setNode(13, 49.400180, 9.700580);
na.setNode(14, 49.400277, 9.700832);
na.setNode(15, 49.400791, 9.700007);
na.setNode(16, 49.400404, 9.700665);
na.setNode(17, 49.400959, 9.700596);
na.setNode(18, 49.400342, 9.700043);
na.setNode(19, 49.400394, 9.700888);
graph.edge(5, 9, 32.149000, true);
graph.edge(10, 18, 64.246000, true);
graph.edge(1, 18, 91.069000, true);
graph.edge(11, 16, 21.681000, true);
graph.edge(13, 15, 79.653000, false);
graph.edge(4, 16, 16.919000, true);
graph.edge(13, 19, 32.633000, true);
graph.edge(3, 5, 71.345000, true);
graph.edge(4, 15, 59.933000, true);
graph.edge(1, 9, 77.684000, true);
graph.edge(8, 19, 46.998000, true);
graph.edge(0, 11, 29.725000, true);
graph.edge(8, 17, 88.056000, true);
graph.edge(5, 8, 10.012000, true);
graph.edge(0, 7, 56.749000, true);
graph.edge(0, 8, 47.373000, true);
graph.edge(11, 15, 42.872000, true);
graph.edge(8, 17, 88.858000, false);
graph.edge(12, 18, 89.130000, true);
graph.edge(15, 18, 50.247000, true);
graph.edge(1, 6, 42.415000, true);
graph.edge(11, 13, 39.781000, true);
graph.edge(0, 12, 76.254000, true);
graph.edge(0, 7, 57.141000, true);
graph.edge(15, 17, 46.968000, true);
graph.edge(11, 17, 50.258000, true);
graph.edge(8, 1, 91.164000, false);
graph.edge(3, 13, 55.562000, true);
graph.edge(0, 12, 76.889000, true);
graph.edge(15, 19, 78.108000, false);
graph.edge(15, 16, 64.499000, true);
graph.edge(8, 9, 28.246000, true);
graph.edge(5, 19, 57.230000, true);
graph.edge(10, 16, 44.497000, true);
graph.edge(3, 16, 29.676000, true);
graph.edge(6, 7, 27.120000, true);
graph.edge(2, 5, 10.381000, true);
graph.edge(17, 6, 55.935000, false);
graph.edge(1, 14, 67.560000, true);
graph.edge(7, 11, 33.596000, true);
graph.edge(12, 19, 52.411000, true);
graph.edge(8, 2, 11.898000, false);
graph.edge(16, 8, 34.746000, false);
graph.edge(6, 11, 34.803000, false);
graph.edge(11, 7, 33.350000, false);
graph.edge(8, 9, 28.158000, true);
graph.edge(1, 9, 78.178000, true);
graph.edge(8, 14, 38.299000, true);
graph.edge(5, 8, 10.042000, true);
graph.edge(2, 6, 61.637000, true);
graph.edge(13, 7, 62.150000, false);
graph.edge(1, 19, 53.890000, true);
graph.edge(7, 12, 21.312000, true);
graph.edge(1, 12, 2.138000, true);
graph.edge(4, 19, 32.167000, true);
graph.edge(11, 13, 39.585000, true);
graph.edge(9, 19, 51.996000, true);
graph.edge(7, 15, 55.714000, true);
na.setNode(0, 49.400563, 9.700023);
na.setNode(1, 49.400873, 9.700994);
na.setNode(2, 49.400222, 9.700169);
na.setNode(3, 49.400663, 9.700763);
na.setNode(4, 49.400342, 9.700451);
na.setNode(5, 49.400134, 9.700214);
na.setNode(6, 49.400500, 9.700904);
na.setNode(7, 49.400725, 9.700767);
na.setNode(8, 49.400187, 9.700324);
na.setNode(9, 49.400422, 9.700178);
na.setNode(10, 49.400011, 9.700771);
na.setNode(11, 49.400522, 9.700428);
na.setNode(12, 49.400859, 9.700973);
na.setNode(13, 49.400180, 9.700580);
na.setNode(14, 49.400277, 9.700832);
na.setNode(15, 49.400791, 9.700007);
na.setNode(16, 49.400404, 9.700665);
na.setNode(17, 49.400959, 9.700596);
na.setNode(18, 49.400342, 9.700043);
na.setNode(19, 49.400394, 9.700888);
graph.edge(5, 9, 32.149000, true);
graph.edge(10, 18, 64.246000, true);
graph.edge(1, 18, 91.069000, true);
graph.edge(11, 16, 21.681000, true);
graph.edge(13, 15, 79.653000, false);
graph.edge(4, 16, 16.919000, true);
graph.edge(13, 19, 32.633000, true);
graph.edge(3, 5, 71.345000, true);
graph.edge(4, 15, 59.933000, true);
graph.edge(1, 9, 77.684000, true);
graph.edge(8, 19, 46.998000, true);
graph.edge(0, 11, 29.725000, true);
graph.edge(8, 17, 88.056000, true);
graph.edge(5, 8, 10.012000, true);
graph.edge(0, 7, 56.749000, true);
graph.edge(0, 8, 47.373000, true);
graph.edge(11, 15, 42.872000, true);
graph.edge(8, 17, 88.858000, false);
graph.edge(12, 18, 89.130000, true);
graph.edge(15, 18, 50.247000, true);
graph.edge(1, 6, 42.415000, true);
graph.edge(11, 13, 39.781000, true);
graph.edge(0, 12, 76.254000, true);
graph.edge(0, 7, 57.141000, true);
graph.edge(15, 17, 46.968000, true);
graph.edge(11, 17, 50.258000, true);
graph.edge(8, 1, 91.164000, false);
graph.edge(3, 13, 55.562000, true);
graph.edge(0, 12, 76.889000, true);
graph.edge(15, 19, 78.108000, false);
graph.edge(15, 16, 64.499000, true);
graph.edge(8, 9, 28.246000, true);
graph.edge(5, 19, 57.230000, true);
graph.edge(10, 16, 44.497000, true);
graph.edge(3, 16, 29.676000, true);
graph.edge(6, 7, 27.120000, true);
graph.edge(2, 5, 10.381000, true);
graph.edge(17, 6, 55.935000, false);
graph.edge(1, 14, 67.560000, true);
graph.edge(7, 11, 33.596000, true);
graph.edge(12, 19, 52.411000, true);
graph.edge(8, 2, 11.898000, false);
graph.edge(16, 8, 34.746000, false);
graph.edge(6, 11, 34.803000, false);
graph.edge(11, 7, 33.350000, false);
graph.edge(8, 9, 28.158000, true);
graph.edge(1, 9, 78.178000, true);
graph.edge(8, 14, 38.299000, true);
graph.edge(5, 8, 10.042000, true);
graph.edge(2, 6, 61.637000, true);
graph.edge(13, 7, 62.150000, false);
graph.edge(1, 19, 53.890000, true);
graph.edge(7, 12, 21.312000, true);
graph.edge(1, 12, 2.138000, true);
graph.edge(4, 19, 32.167000, true);
graph.edge(11, 13, 39.585000, true);
graph.edge(9, 19, 51.996000, true);
graph.edge(7, 15, 55.714000, true);
na.setNode(0, 49.400563, 9.700023);
na.setNode(1, 49.400873, 9.700994);
na.setNode(2, 49.400222, 9.700169);
na.setNode(3, 49.400663, 9.700763);
na.setNode(4, 49.400342, 9.700451);
na.setNode(5, 49.400134, 9.700214);
na.setNode(6, 49.400500, 9.700904);
na.setNode(7, 49.400725, 9.700767);
na.setNode(8, 49.400187, 9.700324);
na.setNode(9, 49.400422, 9.700178);
na.setNode(10, 49.400011, 9.700771);
na.setNode(11, 49.400522, 9.700428);
na.setNode(12, 49.400859, 9.700973);
na.setNode(13, 49.400180, 9.700580);
na.setNode(14, 49.400277, 9.700832);
na.setNode(15, 49.400791, 9.700007);
na.setNode(16, 49.400404, 9.700665);
na.setNode(17, 49.400959, 9.700596);
na.setNode(18, 49.400342, 9.700043);
na.setNode(19, 49.400394, 9.700888);
graph.edge(5, 9, 32.149000, true);
graph.edge(10, 18, 64.246000, true);
graph.edge(1, 18, 91.069000, true);
graph.edge(11, 16, 21.681000, true);
graph.edge(13, 15, 79.653000, false);
graph.edge(4, 16, 16.919000, true);
graph.edge(13, 19, 32.633000, true);
graph.edge(3, 5, 71.345000, true);
graph.edge(4, 15, 59.933000, true);
graph.edge(1, 9, 77.684000, true);
graph.edge(8, 19, 46.998000, true);
graph.edge(0, 11, 29.725000, true);
graph.edge(8, 17, 88.056000, true);
graph.edge(5, 8, 10.012000, true);
graph.edge(0, 7, 56.749000, true);
graph.edge(0, 8, 47.373000, true);
graph.edge(11, 15, 42.872000, true);
graph.edge(8, 17, 88.858000, false);
graph.edge(12, 18, 89.130000, true);
graph.edge(15, 18, 50.247000, true);
graph.edge(1, 6, 42.415000, true);
graph.edge(11, 13, 39.781000, true);
graph.edge(0, 12, 76.254000, true);
graph.edge(0, 7, 57.141000, true);
graph.edge(15, 17, 46.968000, true);
graph.edge(11, 17, 50.258000, true);
graph.edge(8, 1, 91.164000, false);
graph.edge(3, 13, 55.562000, true);
graph.edge(0, 12, 76.889000, true);
graph.edge(15, 19, 78.108000, false);
graph.edge(15, 16, 64.499000, true);
graph.edge(8, 9, 28.246000, true);
graph.edge(5, 19, 57.230000, true);
graph.edge(10, 16, 44.497000, true);
graph.edge(3, 16, 29.676000, true);
graph.edge(6, 7, 27.120000, true);
graph.edge(2, 5, 10.381000, true);
graph.edge(17, 6, 55.935000, false);
graph.edge(1, 14, 67.560000, true);
graph.edge(7, 11, 33.596000, true);
graph.edge(12, 19, 52.411000, true);
graph.edge(8, 2, 11.898000, false);
graph.edge(16, 8, 34.746000, false);
graph.edge(6, 11, 34.803000, false);
graph.edge(11, 7, 33.350000, false);
graph.edge(8, 9, 28.158000, true);
graph.edge(1, 9, 78.178000, true);
graph.edge(8, 14, 38.299000, true);
graph.edge(5, 8, 10.042000, true);
graph.edge(2, 6, 61.637000, true);
graph.edge(13, 7, 62.150000, false);
graph.edge(1, 19, 53.890000, true);
graph.edge(7, 12, 21.312000, true);
graph.edge(1, 12, 2.138000, true);
graph.edge(4, 19, 32.167000, true);
graph.edge(11, 13, 39.585000, true);
graph.edge(9, 19, 51.996000, true);
graph.edge(7, 15, 55.714000, true);
na.setNode(0, 49.400563, 9.700023);
na.setNode(1, 49.400873, 9.700994);
na.setNode(2, 49.400222, 9.700169);
na.setNode(3, 49.400663, 9.700763);
na.setNode(4, 49.400342, 9.700451);
na.setNode(5, 49.400134, 9.700214);
na.setNode(6, 49.400500, 9.700904);
na.setNode(7, 49.400725, 9.700767);
na.setNode(8, 49.400187, 9.700324);
na.setNode(9, 49.400422, 9.700178);
na.setNode(10, 49.400011, 9.700771);
na.setNode(11, 49.400522, 9.700428);
na.setNode(12, 49.400859, 9.700973);
na.setNode(13, 49.400180, 9.700580);
na.setNode(14, 49.400277, 9.700832);
na.setNode(15, 49.400791, 9.700007);
na.setNode(16, 49.400404, 9.700665);
na.setNode(17, 49.400959, 9.700596);
na.setNode(18, 49.400342, 9.700043);
na.setNode(19, 49.400394, 9.700888);
graph.edge(5, 9, 32.149000, true);
graph.edge(10, 18, 64.246000, true);
graph.edge(1, 18, 91.069000, true);
graph.edge(11, 16, 21.681000, true);
graph.edge(13, 15, 79.653000, false);
graph.edge(4, 16, 16.919000, true);
graph.edge(13, 19, 32.633000, true);
graph.edge(3, 5, 71.345000, true);
graph.edge(4, 15, 59.933000, true);
graph.edge(1, 9, 77.684000, true);
graph.edge(8, 19, 46.998000, true);
graph.edge(0, 11, 29.725000, true);
graph.edge(8, 17, 88.056000, true);
graph.edge(5, 8, 10.012000, true);
graph.edge(0, 7, 56.749000, true);
graph.edge(0, 8, 47.373000, true);
graph.edge(11, 15, 42.872000, true);
graph.edge(8, 17, 88.858000, false);
graph.edge(12, 18, 89.130000, true);
graph.edge(15, 18, 50.247000, true);
graph.edge(1, 6, 42.415000, true);
graph.edge(11, 13, 39.781000, true);
graph.edge(0, 12, 76.254000, true);
graph.edge(0, 7, 57.141000, true);
graph.edge(15, 17, 46.968000, true);
graph.edge(11, 17, 50.258000, true);
graph.edge(8, 1, 91.164000, false);
graph.edge(3, 13, 55.562000, true);
graph.edge(0, 12, 76.889000, true);
graph.edge(15, 19, 78.108000, false);
graph.edge(15, 16, 64.499000, true);
graph.edge(8, 9, 28.246000, true);
graph.edge(5, 19, 57.230000, true);
graph.edge(10, 16, 44.497000, true);
graph.edge(3, 16, 29.676000, true);
graph.edge(6, 7, 27.120000, true);
graph.edge(2, 5, 10.381000, true);
graph.edge(17, 6, 55.935000, false);
graph.edge(1, 14, 67.560000, true);
graph.edge(7, 11, 33.596000, true);
graph.edge(12, 19, 52.411000, true);
graph.edge(8, 2, 11.898000, false);
graph.edge(16, 8, 34.746000, false);
graph.edge(6, 11, 34.803000, false);
graph.edge(11, 7, 33.350000, false);
graph.edge(8, 9, 28.158000, true);
graph.edge(1, 9, 78.178000, true);
graph.edge(8, 14, 38.299000, true);
graph.edge(5, 8, 10.042000, true);
graph.edge(2, 6, 61.637000, true);
graph.edge(13, 7, 62.150000, false);
graph.edge(1, 19, 53.890000, true);
graph.edge(7, 12, 21.312000, true);
graph.edge(1, 12, 2.138000, true);
graph.edge(4, 19, 32.167000, true);
graph.edge(11, 13, 39.585000, true);
graph.edge(9, 19, 51.996000, true);
graph.edge(7, 15, 55.714000, true);
na.setNode(0, 49.400563, 9.700023);
na.setNode(1, 49.400873, 9.700994);
na.setNode(2, 49.400222, 9.700169);
na.setNode(3, 49.400663, 9.700763);
na.setNode(4, 49.400342, 9.700451);
na.setNode(5, 49.400134, 9.700214);
na.setNode(6, 49.400500, 9.700904);
na.setNode(7, 49.400725, 9.700767);
na.setNode(8, 49.400187, 9.700324);
na.setNode(9, 49.400422, 9.700178);
na.setNode(10, 49.400011, 9.700771);
na.setNode(11, 49.400522, 9.700428);
na.setNode(12, 49.400859, 9.700973);
na.setNode(13, 49.400180, 9.700580);
na.setNode(14, 49.400277, 9.700832);
na.setNode(15, 49.400791, 9.700007);
na.setNode(16, 49.400404, 9.700665);
na.setNode(17, 49.400959, 9.700596);
na.setNode(18, 49.400342, 9.700043);
na.setNode(19, 49.400394, 9.700888);
graph.edge(5, 9, 32.149000, true);
graph.edge(10, 18, 64.246000, true);
graph.edge(1, 18, 91.069000, true);
graph.edge(11, 16, 21.681000, true);
graph.edge(13, 15, 79.653000, false);
graph.edge(4, 16, 16.919000, true);
graph.edge(13, 19, 32.633000, true);
graph.edge(3, 5, 71.345000, true);
graph.edge(4, 15, 59.933000, true);
graph.edge(1, 9, 77.684000, true);
graph.edge(8, 19, 46.998000, true);
graph.edge(0, 11, 29.725000, true);
graph.edge(8, 17, 88.056000, true);
graph.edge(5, 8, 10.012000, true);
graph.edge(0, 7, 56.749000, true);
graph.edge(0, 8, 47.373000, true);
graph.edge(11, 15, 42.872000, true);
graph.edge(8, 17, 88.858000, false);
graph.edge(12, 18, 89.130000, true);
graph.edge(15, 18, 50.247000, true);
graph.edge(1, 6, 42.415000, true);
graph.edge(11, 13, 39.781000, true);
graph.edge(0, 12, 76.254000, true);
graph.edge(0, 7, 57.141000, true);
graph.edge(15, 17, 46.968000, true);
graph.edge(11, 17, 50.258000, true);
graph.edge(8, 1, 91.164000, false);
graph.edge(3, 13, 55.562000, true);
graph.edge(0, 12, 76.889000, true);
graph.edge(15, 19, 78.108000, false);
graph.edge(15, 16, 64.499000, true);
graph.edge(8, 9, 28.246000, true);
graph.edge(5, 19, 57.230000, true);
graph.edge(10, 16, 44.497000, true);
graph.edge(3, 16, 29.676000, true);
graph.edge(6, 7, 27.120000, true);
graph.edge(2, 5, 10.381000, true);
graph.edge(17, 6, 55.935000, false);
graph.edge(1, 14, 67.560000, true);
graph.edge(7, 11, 33.596000, true);
graph.edge(12, 19, 52.411000, true);
graph.edge(8, 2, 11.898000, false);
graph.edge(16, 8, 34.746000, false);
graph.edge(6, 11, 34.803000, false);
graph.edge(11, 7, 33.350000, false);
graph.edge(8, 9, 28.158000, true);
graph.edge(1, 9, 78.178000, true);
graph.edge(8, 14, 38.299000, true);
graph.edge(5, 8, 10.042000, true);
graph.edge(2, 6, 61.637000, true);
graph.edge(13, 7, 62.150000, false);
graph.edge(1, 19, 53.890000, true);
graph.edge(7, 12, 21.312000, true);
graph.edge(1, 12, 2.138000, true);
graph.edge(4, 19, 32.167000, true);
graph.edge(11, 13, 39.585000, true);
graph.edge(9, 19, 51.996000, true);
graph.edge(7, 15, 55.714000, true);
na.setNode(0, 49.400563, 9.700023);
na.setNode(1, 49.400873, 9.700994);
na.setNode(2, 49.400222, 9.700169);
na.setNode(3, 49.400663, 9.700763);
na.setNode(4, 49.400342, 9.700451);
na.setNode(5, 49.400134, 9.700214);
na.setNode(6, 49.400500, 9.700904);
na.setNode(7, 49.400725, 9.700767);
na.setNode(8, 49.400187, 9.700324);
na.setNode(9, 49.400422, 9.700178);
na.setNode(10, 49.400011, 9.700771);
na.setNode(11, 49.400522, 9.700428);
na.setNode(12, 49.400859, 9.700973);
na.setNode(13, 49.400180, 9.700580);
na.setNode(14, 49.400277, 9.700832);
na.setNode(15, 49.400791, 9.700007);
na.setNode(16, 49.400404, 9.700665);
na.setNode(17, 49.400959, 9.700596);
na.setNode(18, 49.400342, 9.700043);
na.setNode(19, 49.400394, 9.700888);
graph.edge(5, 9, 32.149000, true);
graph.edge(10, 18, 64.246000, true);
graph.edge(1, 18, 91.069000, true);
graph.edge(11, 16, 21.681000, true);
graph.edge(13, 15, 79.653000, false);
graph.edge(4, 16, 16.919000, true);
graph.edge(13, 19, 32.633000, true);
graph.edge(3, 5, 71.345000, true);
graph.edge(4, 15, 59.933000, true);
graph.edge(1, 9, 77.684000, true);
graph.edge(8, 19, 46.998000, true);
graph.edge(0, 11, 29.725000, true);
graph.edge(8, 17, 88.056000, true);
graph.edge(5, 8, 10.012000, true);
graph.edge(0, 7, 56.749000, true);
graph.edge(0, 8, 47.373000, true);
graph.edge(11, 15, 42.872000, true);
graph.edge(8, 17, 88.858000, false);
graph.edge(12, 18, 89.130000, true);
graph.edge(15, 18, 50.247000, true);
graph.edge(1, 6, 42.415000, true);
graph.edge(11, 13, 39.781000, true);
graph.edge(0, 12, 76.254000, true);
graph.edge(0, 7, 57.141000, true);
graph.edge(15, 17, 46.968000, true);
graph.edge(11, 17, 50.258000, true);
graph.edge(8, 1, 91.164000, false);
graph.edge(3, 13, 55.562000, true);
graph.edge(0, 12, 76.889000, true);
graph.edge(15, 19, 78.108000, false);
graph.edge(15, 16, 64.499000, true);
graph.edge(8, 9, 28.246000, true);
graph.edge(5, 19, 57.230000, true);
graph.edge(10, 16, 44.497000, true);
graph.edge(3, 16, 29.676000, true);
graph.edge(6, 7, 27.120000, true);
graph.edge(2, 5, 10.381000, true);
graph.edge(17, 6, 55.935000, false);
graph.edge(1, 14, 67.560000, true);
graph.edge(7, 11, 33.596000, true);
graph.edge(12, 19, 52.411000, true);
graph.edge(8, 2, 11.898000, false);
graph.edge(16, 8, 34.746000, false);
graph.edge(6, 11, 34.803000, false);
graph.edge(11, 7, 33.350000, false);
graph.edge(8, 9, 28.158000, true);
graph.edge(1, 9, 78.178000, true);
graph.edge(8, 14, 38.299000, true);
graph.edge(5, 8, 10.042000, true);
graph.edge(2, 6, 61.637000, true);
graph.edge(13, 7, 62.150000, false);
graph.edge(1, 19, 53.890000, true);
graph.edge(7, 12, 21.312000, true);
graph.edge(1, 12, 2.138000, true);
graph.edge(4, 19, 32.167000, true);
graph.edge(11, 13, 39.585000, true);
graph.edge(9, 19, 51.996000, true);
graph.edge(7, 15, 55.714000, true);
na.setNode(0, 49.400563, 9.700023);
na.setNode(1, 49.400873, 9.700994);
na.setNode(2, 49.400222, 9.700169);
na.setNode(3, 49.400663, 9.700763);
na.setNode(4, 49.400342, 9.700451);
na.setNode(5, 49.400134, 9.700214);
na.setNode(6, 49.400500, 9.700904);
na.setNode(7, 49.400725, 9.700767);
na.setNode(8, 49.400187, 9.700324);
na.setNode(9, 49.400422, 9.700178);
na.setNode(10, 49.400011, 9.700771);
na.setNode(11, 49.400522, 9.700428);
na.setNode(12, 49.400859, 9.700973);
na.setNode(13, 49.400180, 9.700580);
na.setNode(14, 49.400277, 9.700832);
na.setNode(15, 49.400791, 9.700007);
na.setNode(16, 49.400404, 9.700665);
na.setNode(17, 49.400959, 9.700596);
na.setNode(18, 49.400342, 9.700043);
na.setNode(19, 49.400394, 9.700888);
graph.edge(5, 9, 32.149000, true);
graph.edge(10, 18, 64.246000, true);
graph.edge(1, 18, 91.069000, true);
graph.edge(11, 16, 21.681000, true);
graph.edge(13, 15, 79.653000, false);
graph.edge(4, 16, 16.919000, true);
graph.edge(13, 19, 32.633000, true);
graph.edge(3, 5, 71.345000, true);
graph.edge(4, 15, 59.933000, true);
graph.edge(1, 9, 77.684000, true);
graph.edge(8, 19, 46.998000, true);
graph.edge(0, 11, 29.725000, true);
graph.edge(8, 17, 88.056000, true);
graph.edge(5, 8, 10.012000, true);
graph.edge(0, 7, 56.749000, true);
graph.edge(0, 8, 47.373000, true);
graph.edge(11, 15, 42.872000, true);
graph.edge(8, 17, 88.858000, false);
graph.edge(12, 18, 89.130000, true);
graph.edge(15, 18, 50.247000, true);
graph.edge(1, 6, 42.415000, true);
graph.edge(11, 13, 39.781000, true);
graph.edge(0, 12, 76.254000, true);
graph.edge(0, 7, 57.141000, true);
graph.edge(15, 17, 46.968000, true);
graph.edge(11, 17, 50.258000, true);
graph.edge(8, 1, 91.164000, false);
graph.edge(3, 13, 55.562000, true);
graph.edge(0, 12, 76.889000, true);
graph.edge(15, 19, 78.108000, false);
graph.edge(15, 16, 64.499000, true);
graph.edge(8, 9, 28.246000, true);
graph.edge(5, 19, 57.230000, true);
graph.edge(10, 16, 44.497000, true);
graph.edge(3, 16, 29.676000, true);
graph.edge(6, 7, 27.120000, true);
graph.edge(2, 5, 10.381000, true);
graph.edge(17, 6, 55.935000, false);
graph.edge(1, 14, 67.560000, true);
graph.edge(7, 11, 33.596000, true);
graph.edge(12, 19, 52.411000, true);
graph.edge(8, 2, 11.898000, false);
graph.edge(16, 8, 34.746000, false);
graph.edge(6, 11, 34.803000, false);
graph.edge(11, 7, 33.350000, false);
graph.edge(8, 9, 28.158000, true);
graph.edge(1, 9, 78.178000, true);
graph.edge(8, 14, 38.299000, true);
graph.edge(5, 8, 10.042000, true);
graph.edge(2, 6, 61.637000, true);
graph.edge(13, 7, 62.150000, false);
graph.edge(1, 19, 53.890000, true);
graph.edge(7, 12, 21.312000, true);
graph.edge(1, 12, 2.138000, true);
graph.edge(4, 19, 32.167000, true);
graph.edge(11, 13, 39.585000, true);
graph.edge(9, 19, 51.996000, true);
graph.edge(7, 15, 55.714000, true);
na.setNode(0, 49.400563, 9.700023);
na.setNode(1, 49.400873, 9.700994);
na.setNode(2, 49.400222, 9.700169);
na.setNode(3, 49.400663, 9.700763);
na.setNode(4, 49.400342, 9.700451);
na.setNode(5, 49.400134, 9.700214);
na.setNode(6, 49.400500, 9.700904);
na.setNode(7, 49.400725, 9.700767);
na.setNode(8, 49.400187, 9.700324);
na.setNode(9, 49.400422, 9.700178);
na.setNode(10, 49.400011, 9.700771);
na.setNode(11, 49.400522, 9.700428);
na.setNode(12, 49.400859, 9.700973);
na.setNode(13, 49.400180, 9.700580);
na.setNode(14, 49.400277, 9.700832);
na.setNode(15, 49.400791, 9.700007);
na.setNode(16, 49.400404, 9.700665);
na.setNode(17, 49.400959, 9.700596);
na.setNode(18, 49.400342, 9.700043);
na.setNode(19, 49.400394, 9.700888);
graph.edge(5, 9, 32.149000, true);
graph.edge(10, 18, 64.246000, true);
graph.edge(1, 18, 91.069000, true);
graph.edge(11, 16, 21.681000, true);
graph.edge(13, 15, 79.653000, false);
graph.edge(4, 16, 16.919000, true);
graph.edge(13, 19, 32.633000, true);
graph.edge(3, 5, 71.345000, true);
graph.edge(4, 15, 59.933000, true);
graph.edge(1, 9, 77.684000, true);
graph.edge(8, 19, 46.998000, true);
graph.edge(0, 11, 29.725000, true);
graph.edge(8, 17, 88.056000, true);
graph.edge(5, 8, 10.012000, true);
graph.edge(0, 7, 56.749000, true);
graph.edge(0, 8, 47.373000, true);
graph.edge(11, 15, 42.872000, true);
graph.edge(8, 17, 88.858000, false);
graph.edge(12, 18, 89.130000, true);
graph.edge(15, 18, 50.247000, true);
graph.edge(1, 6, 42.415000, true);
graph.edge(11, 13, 39.781000, true);
graph.edge(0, 12, 76.254000, true);
graph.edge(0, 7, 57.141000, true);
graph.edge(15, 17, 46.968000, true);
graph.edge(11, 17, 50.258000, true);
graph.edge(8, 1, 91.164000, false);
graph.edge(3, 13, 55.562000, true);
graph.edge(0, 12, 76.889000, true);
graph.edge(15, 19, 78.108000, false);
graph.edge(15, 16, 64.499000, true);
graph.edge(8, 9, 28.246000, true);
graph.edge(5, 19, 57.230000, true);
graph.edge(10, 16, 44.497000, true);
graph.edge(3, 16, 29.676000, true);
graph.edge(6, 7, 27.120000, true);
graph.edge(2, 5, 10.381000, true);
graph.edge(17, 6, 55.935000, false);
graph.edge(1, 14, 67.560000, true);
graph.edge(7, 11, 33.596000, true);
graph.edge(12, 19, 52.411000, true);
graph.edge(8, 2, 11.898000, false);
graph.edge(16, 8, 34.746000, false);
graph.edge(6, 11, 34.803000, false);
graph.edge(11, 7, 33.350000, false);
graph.edge(8, 9, 28.158000, true);
graph.edge(1, 9, 78.178000, true);
graph.edge(8, 14, 38.299000, true);
graph.edge(5, 8, 10.042000, true);
graph.edge(2, 6, 61.637000, true);
graph.edge(13, 7, 62.150000, false);
graph.edge(1, 19, 53.890000, true);
graph.edge(7, 12, 21.312000, true);
graph.edge(1, 12, 2.138000, true);
graph.edge(4, 19, 32.167000, true);
graph.edge(11, 13, 39.585000, true);
graph.edge(9, 19, 51.996000, true);
graph.edge(7, 15, 55.714000, true);
na.setNode(0, 49.400563, 9.700023);
na.setNode(1, 49.400873, 9.700994);
na.setNode(2, 49.400222, 9.700169);
na.setNode(3, 49.400663, 9.700763);
na.setNode(4, 49.400342, 9.700451);
na.setNode(5, 49.400134, 9.700214);
na.setNode(6, 49.400500, 9.700904);
na.setNode(7, 49.400725, 9.700767);
na.setNode(8, 49.400187, 9.700324);
na.setNode(9, 49.400422, 9.700178);
na.setNode(10, 49.400011, 9.700771);
na.setNode(11, 49.400522, 9.700428);
na.setNode(12, 49.400859, 9.700973);
na.setNode(13, 49.400180, 9.700580);
na.setNode(14, 49.400277, 9.700832);
na.setNode(15, 49.400791, 9.700007);
na.setNode(16, 49.400404, 9.700665);
na.setNode(17, 49.400959, 9.700596);
na.setNode(18, 49.400342, 9.700043);
na.setNode(19, 49.400394, 9.700888);
graph.edge(5, 9, 32.149000, true);
graph.edge(10, 18, 64.246000, true);
graph.edge(1, 18, 91.069000, true);
graph.edge(11, 16, 21.681000, true);
graph.edge(13, 15, 79.653000, false);
graph.edge(4, 16, 16.919000, true);
graph.edge(13, 19, 32.633000, true);
graph.edge(3, 5, 71.345000, true);
graph.edge(4, 15, 59.933000, true);
graph.edge(1, 9, 77.684000, true);
graph.edge(8, 19, 46.998000, true);
graph.edge(0, 11, 29.725000, true);
graph.edge(8, 17, 88.056000, true);
graph.edge(5, 8, 10.012000, true);
graph.edge(0, 7, 56.749000, true);
graph.edge(0, 8, 47.373000, true);
graph.edge(11, 15, 42.872000, true);
graph.edge(8, 17, 88.858000, false);
graph.edge(12, 18, 89.130000, true);
graph.edge(15, 18, 50.247000, true);
graph.edge(1, 6, 42.415000, true);
graph.edge(11, 13, 39.781000, true);
graph.edge(0, 12, 76.254000, true);
graph.edge(0, 7, 57.141000, true);
graph.edge(15, 17, 46.968000, true);
graph.edge(11, 17, 50.258000, true);
graph.edge(8, 1, 91.164000, false);
graph.edge(3, 13, 55.562000, true);
graph.edge(0, 12, 76.889000, true);
graph.edge(15, 19, 78.108000, false);
graph.edge(15, 16, 64.499000, true);
graph.edge(8, 9, 28.246000, true);
graph.edge(5, 19, 57.230000, true);
graph.edge(10, 16, 44.497000, true);
graph.edge(3, 16, 29.676000, true);
graph.edge(6, 7, 27.120000, true);
graph.edge(2, 5, 10.381000, true);
graph.edge(17, 6, 55.935000, false);
graph.edge(1, 14, 67.560000, true);
graph.edge(7, 11, 33.596000, true);
graph.edge(12, 19, 52.411000, true);
graph.edge(8, 2, 11.898000, false);
graph.edge(16, 8, 34.746000, false);
graph.edge(6, 11, 34.803000, false);
graph.edge(11, 7, 33.350000, false);
graph.edge(8, 9, 28.158000, true);
graph.edge(1, 9, 78.178000, true);
graph.edge(8, 14, 38.299000, true);
graph.edge(5, 8, 10.042000, true);
graph.edge(2, 6, 61.637000, true);
graph.edge(13, 7, 62.150000, false);
graph.edge(1, 19, 53.890000, true);
graph.edge(7, 12, 21.312000, true);
graph.edge(1, 12, 2.138000, true);
graph.edge(4, 19, 32.167000, true);
graph.edge(11, 13, 39.585000, true);
graph.edge(9, 19, 51.996000, true);
graph.edge(7, 15, 55.714000, true);
na.setNode(0, 49.400563, 9.700023);
na.setNode(1, 49.400873, 9.700994);
na.setNode(2, 49.400222, 9.700169);
na.setNode(3, 49.400663, 9.700763);
na.setNode(4, 49.400342, 9.700451);
na.setNode(5, 49.400134, 9.700214);
na.setNode(6, 49.400500, 9.700904);
na.setNode(7, 49.400725, 9.700767);
na.setNode(8, 49.400187, 9.700324);
na.setNode(9, 49.400422, 9.700178);
na.setNode(10, 49.400011, 9.700771);
na.setNode(11, 49.400522, 9.700428);
na.setNode(12, 49.400859, 9.700973);
na.setNode(13, 49.400180, 9.700580);
na.setNode(14, 49.400277, 9.700832);
na.setNode(15, 49.400791, 9.700007);
na.setNode(16, 49.400404, 9.700665);
na.setNode(17, 49.400959, 9.700596);
na.setNode(18, 49.400342, 9.700043);
na.setNode(19, 49.400394, 9.700888);
graph.edge(5, 9, 32.149000, true);
graph.edge(10, 18, 64.246000, true);
graph.edge(1, 18, 91.069000, true);
graph.edge(11, 16, 21.681000, true);
graph.edge(13, 15, 79.653000, false);
graph.edge(4, 16, 16.919000, true);
graph.edge(13, 19, 32.633000, true);
graph.edge(3, 5, 71.345000, true);
graph.edge(4, 15, 59.933000, true);
graph.edge(1, 9, 77.684000, true);
graph.edge(8, 19, 46.998000, true);
graph.edge(0, 11, 29.725000, true);
graph.edge(8, 17, 88.056000, true);
graph.edge(5, 8, 10.012000, true);
graph.edge(0, 7, 56.749000, true);
graph.edge(0, 8, 47.373000, true);
graph.edge(11, 15, 42.872000, true);
graph.edge(8, 17, 88.858000, false);
graph.edge(12, 18, 89.130000, true);
graph.edge(15, 18, 50.247000, true);
graph.edge(1, 6, 42.415000, true);
graph.edge(11, 13, 39.781000, true);
graph.edge(0, 12, 76.254000, true);
graph.edge(0, 7, 57.141000, true);
graph.edge(15, 17, 46.968000, true);
graph.edge(11, 17, 50.258000, true);
graph.edge(8, 1, 91.164000, false);
graph.edge(3, 13, 55.562000, true);
graph.edge(0, 12, 76.889000, true);
graph.edge(15, 19, 78.108000, false);
graph.edge(15, 16, 64.499000, true);
graph.edge(8, 9, 28.246000, true);
graph.edge(5, 19, 57.230000, true);
graph.edge(10, 16, 44.497000, true);
graph.edge(3, 16, 29.676000, true);
graph.edge(6, 7, 27.120000, true);
graph.edge(2, 5, 10.381000, true);
graph.edge(17, 6, 55.935000, false);
graph.edge(1, 14, 67.560000, true);
graph.edge(7, 11, 33.596000, true);
graph.edge(12, 19, 52.411000, true);
graph.edge(8, 2, 11.898000, false);
graph.edge(16, 8, 34.746000, false);
graph.edge(6, 11, 34.803000, false);
graph.edge(11, 7, 33.350000, false);
graph.edge(8, 9, 28.158000, true);
graph.edge(1, 9, 78.178000, true);
graph.edge(8, 14, 38.299000, true);
graph.edge(5, 8, 10.042000, true);
graph.edge(2, 6, 61.637000, true);
graph.edge(13, 7, 62.150000, false);
graph.edge(1, 19, 53.890000, true);
graph.edge(7, 12, 21.312000, true);
graph.edge(1, 12, 2.138000, true);
graph.edge(4, 19, 32.167000, true);
graph.edge(11, 13, 39.585000, true);
graph.edge(9, 19, 51.996000, true);
graph.edge(7, 15, 55.714000, true);
na.setNode(0, 49.400563, 9.700023);
na.setNode(1, 49.400873, 9.700994);
na.setNode(2, 49.400222, 9.700169);
na.setNode(3, 49.400663, 9.700763);
na.setNode(4, 49.400342, 9.700451);
na.setNode(5, 49.400134, 9.700214);
na.setNode(6, 49.400500, 9.700904);
na.setNode(7, 49.400725, 9.700767);
na.setNode(8, 49.400187, 9.700324);
na.setNode(9, 49.400422, 9.700178);
na.setNode(10, 49.400011, 9.700771);
na.setNode(11, 49.400522, 9.700428);
na.setNode(12, 49.400859, 9.700973);
na.setNode(13, 49.400180, 9.700580);
na.setNode(14, 49.400277, 9.700832);
na.setNode(15, 49.400791, 9.700007);
na.setNode(16, 49.400404, 9.700665);
na.setNode(17, 49.400959, 9.700596);
na.setNode(18, 49.400342, 9.700043);
na.setNode(19, 49.400394, 9.700888);
graph.edge(5, 9, 32.149000, true);
graph.edge(10, 18, 64.246000, true);
graph.edge(1, 18, 91.069000, true);
graph.edge(11, 16, 21.681000, true);
graph.edge(13, 15, 79.653000, false);
graph.edge(4, 16, 16.919000, true);
graph.edge(13, 19, 32.633000, true);
graph.edge(3, 5, 71.345000, true);
graph.edge(4, 15, 59.933000, true);
graph.edge(1, 9, 77.684000, true);
graph.edge(8, 19, 46.998000, true);
graph.edge(0, 11, 29.725000, true);
graph.edge(8, 17, 88.056000, true);
graph.edge(5, 8, 10.012000, true);
graph.edge(0, 7, 56.749000, true);
graph.edge(0, 8, 47.373000, true);
graph.edge(11, 15, 42.872000, true);
graph.edge(8, 17, 88.858000, false);
graph.edge(12, 18, 89.130000, true);
graph.edge(15, 18, 50.247000, true);
graph.edge(1, 6, 42.415000, true);
graph.edge(11, 13, 39.781000, true);
graph.edge(0, 12, 76.254000, true);
graph.edge(0, 7, 57.141000, true);
graph.edge(15, 17, 46.968000, true);
graph.edge(11, 17, 50.258000, true);
graph.edge(8, 1, 91.164000, false);
graph.edge(3, 13, 55.562000, true);
graph.edge(0, 12, 76.889000, true);
graph.edge(15, 19, 78.108000, false);
graph.edge(15, 16, 64.499000, true);
graph.edge(8, 9, 28.246000, true);
graph.edge(5, 19, 57.230000, true);
graph.edge(10, 16, 44.497000, true);
graph.edge(3, 16, 29.676000, true);
graph.edge(6, 7, 27.120000, true);
graph.edge(2, 5, 10.381000, true);
graph.edge(17, 6, 55.935000, false);
graph.edge(1, 14, 67.560000, true);
graph.edge(7, 11, 33.596000, true);
graph.edge(12, 19, 52.411000, true);
graph.edge(8, 2, 11.898000, false);
graph.edge(16, 8, 34.746000, false);
graph.edge(6, 11, 34.803000, false);
graph.edge(11, 7, 33.350000, false);
graph.edge(8, 9, 28.158000, true);
graph.edge(1, 9, 78.178000, true);
graph.edge(8, 14, 38.299000, true);
graph.edge(5, 8, 10.042000, true);
graph.edge(2, 6, 61.637000, true);
graph.edge(13, 7, 62.150000, false);
graph.edge(1, 19, 53.890000, true);
graph.edge(7, 12, 21.312000, true);
graph.edge(1, 12, 2.138000, true);
graph.edge(4, 19, 32.167000, true);
graph.edge(11, 13, 39.585000, true);
graph.edge(9, 19, 51.996000, true);
graph.edge(7, 15, 55.714000, true);
na.setNode(0, 49.400563, 9.700023);
na.setNode(1, 49.400873, 9.700994);
na.setNode(2, 49.400222, 9.700169);
na.setNode(3, 49.400663, 9.700763);
na.setNode(4, 49.400342, 9.700451);
na.setNode(5, 49.400134, 9.700214);
na.setNode(6, 49.400500, 9.700904);
na.setNode(7, 49.400725, 9.700767);
na.setNode(8, 49.400187, 9.700324);
na.setNode(9, 49.400422, 9.700178);
na.setNode(10, 49.400011, 9.700771);
na.setNode(11, 49.400522, 9.700428);
na.setNode(12, 49.400859, 9.700973);
na.setNode(13, 49.400180, 9.700580);
na.setNode(14, 49.400277, 9.700832);
na.setNode(15, 49.400791, 9.700007);
na.setNode(16, 49.400404, 9.700665);
na.setNode(17, 49.400959, 9.700596);
na.setNode(18, 49.400342, 9.700043);
na.setNode(19, 49.400394, 9.700888);
graph.edge(5, 9, 32.149000, true);
graph.edge(10, 18, 64.246000, true);
graph.edge(1, 18, 91.069000, true);
graph.edge(11, 16, 21.681000, true);
graph.edge(13, 15, 79.653000, false);
graph.edge(4, 16, 16.919000, true);
graph.edge(13, 19, 32.633000, true);
graph.edge(3, 5, 71.345000, true);
graph.edge(4, 15, 59.933000, true);
graph.edge(1, 9, 77.684000, true);
graph.edge(8, 19, 46.998000, true);
graph.edge(0, 11, 29.725000, true);
graph.edge(8, 17, 88.056000, true);
graph.edge(5, 8, 10.012000, true);
graph.edge(0, 7, 56.749000, true);
graph.edge(0, 8, 47.373000, true);
graph.edge(11, 15, 42.872000, true);
graph.edge(8, 17, 88.858000, false);
graph.edge(12, 18, 89.130000, true);
graph.edge(15, 18, 50.247000, true);
graph.edge(1, 6, 42.415000, true);
graph.edge(11, 13, 39.781000, true);
graph.edge(0, 12, 76.254000, true);
graph.edge(0, 7, 57.141000, true);
graph.edge(15, 17, 46.968000, true);
graph.edge(11, 17, 50.258000, true);
graph.edge(8, 1, 91.164000, false);
graph.edge(3, 13, 55.562000, true);
graph.edge(0, 12, 76.889000, true);
graph.edge(15, 19, 78.108000, false);
graph.edge(15, 16, 64.499000, true);
graph.edge(8, 9, 28.246000, true);
graph.edge(5, 19, 57.230000, true);
graph.edge(10, 16, 44.497000, true);
graph.edge(3, 16, 29.676000, true);
graph.edge(6, 7, 27.120000, true);
graph.edge(2, 5, 10.381000, true);
graph.edge(17, 6, 55.935000, false);
graph.edge(1, 14, 67.560000, true);
graph.edge(7, 11, 33.596000, true);
graph.edge(12, 19, 52.411000, true);
graph.edge(8, 2, 11.898000, false);
graph.edge(16, 8, 34.746000, false);
graph.edge(6, 11, 34.803000, false);
graph.edge(11, 7, 33.350000, false);
graph.edge(8, 9, 28.158000, true);
graph.edge(1, 9, 78.178000, true);
graph.edge(8, 14, 38.299000, true);
graph.edge(5, 8, 10.042000, true);
graph.edge(2, 6, 61.637000, true);
graph.edge(13, 7, 62.150000, false);
graph.edge(1, 19, 53.890000, true);
graph.edge(7, 12, 21.312000, true);
graph.edge(1, 12, 2.138000, true);
graph.edge(4, 19, 32.167000, true);
graph.edge(11, 13, 39.585000, true);
graph.edge(9, 19, 51.996000, true);
graph.edge(7, 15, 55.714000, true);
            legacy         aggressive
searches    450               290
polls       15001               7250
shortcuts   130                50
Tests run: 54, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.54 sec - in com.graphhopper.routing.ch.EdgeBasedNodeContractorTest
Running com.graphhopper.routing.ch.PrepareContractionHierarchiesTest
Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.069 sec - in com.graphhopper.routing.ch.PrepareContractionHierarchiesTest
Running com.graphhopper.routing.ch.WitnessPathFinderTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.01 sec - in com.graphhopper.routing.ch.WitnessPathFinderTest
Running com.graphhopper.routing.ch.PrepareEncoderTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.routing.ch.PrepareEncoderTest
Running com.graphhopper.routing.ch.OnFlyStatisticsCalculatorTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.routing.ch.OnFlyStatisticsCalculatorTest
Running com.graphhopper.routing.ch.LegacyWitnessPathFinderTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 sec - in com.graphhopper.routing.ch.LegacyWitnessPathFinderTest
Running com.graphhopper.routing.util.spatialrules.SpatialRuleLookupArrayTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.029 sec - in com.graphhopper.routing.util.spatialrules.SpatialRuleLookupArrayTest
Running com.graphhopper.routing.util.EncodingManagerTest
Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.022 sec - in com.graphhopper.routing.util.EncodingManagerTest
Running com.graphhopper.routing.util.FootFlagEncoderTest
Tests run: 15, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.012 sec - in com.graphhopper.routing.util.FootFlagEncoderTest
Running com.graphhopper.routing.util.RacingBikeFlagEncoderTest
Tests run: 18, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.04 sec - in com.graphhopper.routing.util.RacingBikeFlagEncoderTest
Running com.graphhopper.routing.util.Car4WDFlagEncoderTest
Tests run: 22, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.01 sec - in com.graphhopper.routing.util.Car4WDFlagEncoderTest
Running com.graphhopper.routing.util.CarFlagEncoderTest
Tests run: 22, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 sec - in com.graphhopper.routing.util.CarFlagEncoderTest
Running com.graphhopper.routing.util.BikeFlagEncoderTest
Tests run: 25, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.012 sec - in com.graphhopper.routing.util.BikeFlagEncoderTest
Running com.graphhopper.routing.util.MotorcycleFlagEncoderTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 sec - in com.graphhopper.routing.util.MotorcycleFlagEncoderTest
Running com.graphhopper.routing.util.NameSimilarityEdgeFilterTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.008 sec - in com.graphhopper.routing.util.NameSimilarityEdgeFilterTest
Running com.graphhopper.routing.util.MountainBikeFlagEncoderTest
Tests run: 17, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 sec - in com.graphhopper.routing.util.MountainBikeFlagEncoderTest
Running com.graphhopper.routing.util.EncodedDoubleValueTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.routing.util.EncodedDoubleValueTest
Running com.graphhopper.routing.util.EncodedValueTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.routing.util.EncodedValueTest
Running com.graphhopper.routing.util.Bike2WeightFlagEncoderTest
Tests run: 29, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.014 sec - in com.graphhopper.routing.util.Bike2WeightFlagEncoderTest
Running com.graphhopper.routing.util.tour.SinglePointTourTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.routing.util.tour.SinglePointTourTest
Running com.graphhopper.routing.util.DefaultEdgeFilterTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec - in com.graphhopper.routing.util.DefaultEdgeFilterTest
Running com.graphhopper.routing.util.HikeFlagEncoderTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec - in com.graphhopper.routing.util.HikeFlagEncoderTest
Running com.graphhopper.routing.util.DataFlagEncoderTest
Tests run: 19, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.017 sec - in com.graphhopper.routing.util.DataFlagEncoderTest
Running com.graphhopper.routing.util.AbstractFlagEncoderTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.routing.util.AbstractFlagEncoderTest
Running com.graphhopper.routing.weighting.BlockAreaWeightingTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 sec - in com.graphhopper.routing.weighting.BlockAreaWeightingTest
Running com.graphhopper.routing.weighting.ShortFastestWeightingTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.routing.weighting.ShortFastestWeightingTest
Running com.graphhopper.routing.weighting.AbstractWeightingTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.routing.weighting.AbstractWeightingTest
Running com.graphhopper.routing.weighting.GenericWeightingTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.009 sec - in com.graphhopper.routing.weighting.GenericWeightingTest
Running com.graphhopper.routing.weighting.FastestWeightingTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 sec - in com.graphhopper.routing.weighting.FastestWeightingTest
Running com.graphhopper.routing.AStarBidirectionTest
Tests run: 116, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.199 sec - in com.graphhopper.routing.AStarBidirectionTest
Running com.graphhopper.routing.PathTest
Tests run: 29, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.809 sec - in com.graphhopper.routing.PathTest
Running com.graphhopper.routing.DijkstraTest
Tests run: 112, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.383 sec - in com.graphhopper.routing.DijkstraTest
Running com.graphhopper.routing.AlternativeRouteTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.019 sec - in com.graphhopper.routing.AlternativeRouteTest
Running com.graphhopper.routing.lm.PrepareLandmarksTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.058 sec - in com.graphhopper.routing.lm.PrepareLandmarksTest
Running com.graphhopper.routing.lm.LandmarkStorageTest
2018-04-27 13:01:42,014 [main] WARN  com.graphhopper.routing.lm.LandmarkStorage - next start node not found in big enough network of size 2, first element is 5, 0.0,0.0
Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.032 sec - in com.graphhopper.routing.lm.LandmarkStorageTest
Running com.graphhopper.routing.lm.LMAlgoFactoryDecoratorTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 sec - in com.graphhopper.routing.lm.LMAlgoFactoryDecoratorTest
Running com.graphhopper.routing.QueryGraphTest
Tests run: 17, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.044 sec - in com.graphhopper.routing.QueryGraphTest
Running com.graphhopper.routing.template.RoundTripRoutingTemplateTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.02 sec - in com.graphhopper.routing.template.RoundTripRoutingTemplateTest
Running com.graphhopper.routing.DijkstraOneToManyTest
Tests run: 34, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.064 sec - in com.graphhopper.routing.DijkstraOneToManyTest
Running com.graphhopper.routing.subnetwork.SubnetworkStorageTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.routing.subnetwork.SubnetworkStorageTest
Running com.graphhopper.routing.subnetwork.PrepareRoutingSubnetworksTest
Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.026 sec - in com.graphhopper.routing.subnetwork.PrepareRoutingSubnetworksTest
Running com.graphhopper.routing.DijkstraBidirectionRefTest
Tests run: 112, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.234 sec - in com.graphhopper.routing.DijkstraBidirectionRefTest
Running com.graphhopper.routing.AStarBidirectionEdgeCHTest
Tests run: 28, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 16.134 sec - in com.graphhopper.routing.AStarBidirectionEdgeCHTest
Running com.graphhopper.routing.CHQueryWithTurnCostsTest
Tests run: 19, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.179 sec - in com.graphhopper.routing.CHQueryWithTurnCostsTest
Running com.graphhopper.routing.AStarTest
Tests run: 112, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.378 sec - in com.graphhopper.routing.AStarTest
Running com.graphhopper.routing.PathBidirRefTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.017 sec - in com.graphhopper.routing.PathBidirRefTest
Running com.graphhopper.routing.DijkstraBidirectionCHTest
Tests run: 34, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.171 sec - in com.graphhopper.routing.DijkstraBidirectionCHTest
Running com.graphhopper.routing.EdgeBasedRoutingAlgorithmTest
Tests run: 20, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.19 sec - in com.graphhopper.routing.EdgeBasedRoutingAlgorithmTest
Running com.graphhopper.routing.DijkstraBidirectionEdgeCHTest
Tests run: 28, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 15.277 sec - in com.graphhopper.routing.DijkstraBidirectionEdgeCHTest
Running com.graphhopper.util.TranslationMapTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec - in com.graphhopper.util.TranslationMapTest
Running com.graphhopper.util.CHEdgeIteratorTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.util.CHEdgeIteratorTest
Running com.graphhopper.util.InstructionTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.util.InstructionTest
Running com.graphhopper.util.FinishInstructionTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.util.FinishInstructionTest
Running com.graphhopper.util.DouglasPeuckerTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.012 sec - in com.graphhopper.util.DouglasPeuckerTest
Running com.graphhopper.util.InstructionListTest
Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.7 sec - in com.graphhopper.util.InstructionListTest
Running com.graphhopper.util.BitUtilBigTest
Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.util.BitUtilBigTest
Running com.graphhopper.util.AngleCalcTest
Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec - in com.graphhopper.util.AngleCalcTest
Running com.graphhopper.util.GHUtilityTest
Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.022 sec - in com.graphhopper.util.GHUtilityTest
Running com.graphhopper.util.BreadthFirstSearchTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 sec - in com.graphhopper.util.BreadthFirstSearchTest
Running com.graphhopper.util.shapes.GHPoint3DTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.util.shapes.GHPoint3DTest
Running com.graphhopper.util.shapes.PolygonTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.util.shapes.PolygonTest
Running com.graphhopper.util.shapes.BBoxTest
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec - in com.graphhopper.util.shapes.BBoxTest
Running com.graphhopper.util.shapes.CircleTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec - in com.graphhopper.util.shapes.CircleTest
Running com.graphhopper.util.shapes.GHPointTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.util.shapes.GHPointTest
Running com.graphhopper.util.BitUtilLittleTest
Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec - in com.graphhopper.util.BitUtilLittleTest
Running com.graphhopper.util.DepthFirstSearchTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.007 sec - in com.graphhopper.util.DepthFirstSearchTest
Running com.graphhopper.util.DistanceCalcEarthTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.util.DistanceCalcEarthTest
Running com.graphhopper.util.PMapTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec - in com.graphhopper.util.PMapTest
Running com.graphhopper.util.HelperTest
Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec - in com.graphhopper.util.HelperTest
Running com.graphhopper.util.PathSimplificationTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec - in com.graphhopper.util.PathSimplificationTest
Running com.graphhopper.util.SimpleIntDequeTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.util.SimpleIntDequeTest
Running com.graphhopper.util.PointListTest
Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.013 sec - in com.graphhopper.util.PointListTest
Running com.graphhopper.reader.dem.GMTEDProviderTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.137 sec - in com.graphhopper.reader.dem.GMTEDProviderTest
Running com.graphhopper.reader.dem.SRTMProviderTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.136 sec - in com.graphhopper.reader.dem.SRTMProviderTest
Running com.graphhopper.reader.dem.TunnelElevationInterpolatorTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.013 sec - in com.graphhopper.reader.dem.TunnelElevationInterpolatorTest
Running com.graphhopper.reader.dem.SRTMGL1ProviderTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 sec - in com.graphhopper.reader.dem.SRTMGL1ProviderTest
Running com.graphhopper.reader.dem.GraphElevationSmoothingTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.reader.dem.GraphElevationSmoothingTest
Running com.graphhopper.reader.dem.ElevationInterpolatorTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.reader.dem.ElevationInterpolatorTest
Running com.graphhopper.reader.dem.MultiSourceElevationProviderTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec - in com.graphhopper.reader.dem.MultiSourceElevationProviderTest
Running com.graphhopper.reader.dem.BridgeElevationInterpolatorTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 sec - in com.graphhopper.reader.dem.BridgeElevationInterpolatorTest
Running com.graphhopper.reader.dem.CGIARProviderTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.115 sec - in com.graphhopper.reader.dem.CGIARProviderTest
Running com.graphhopper.reader.dem.HeightTileTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.reader.dem.HeightTileTest
Running com.graphhopper.reader.OSMElementTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.reader.OSMElementTest
Running com.graphhopper.reader.OSMNodeTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.reader.OSMNodeTest
Running com.graphhopper.reader.osm.conditional.DateRangeParserTest
Tests run: 18, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.012 sec - in com.graphhopper.reader.osm.conditional.DateRangeParserTest
Running com.graphhopper.reader.osm.conditional.ConditionalParserTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 sec - in com.graphhopper.reader.osm.conditional.ConditionalParserTest
Running com.graphhopper.reader.osm.conditional.ConditionalOSMTagInspectorTest
Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec - in com.graphhopper.reader.osm.conditional.ConditionalOSMTagInspectorTest
Running com.graphhopper.reader.PrincetonReaderTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.009 sec - in com.graphhopper.reader.PrincetonReaderTest
Running com.graphhopper.storage.index.LocationIndexTreeTest
Tests run: 20, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.765 sec - in com.graphhopper.storage.index.LocationIndexTreeTest
Running com.graphhopper.storage.index.Location2IDQuadtreeTest
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.721 sec - in com.graphhopper.storage.index.Location2IDQuadtreeTest
Running com.graphhopper.storage.index.Location2IDFullIndexTest
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.128 sec - in com.graphhopper.storage.index.Location2IDFullIndexTest
Running com.graphhopper.storage.index.LocationIndexTreeCHTest
Tests run: 23, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.729 sec - in com.graphhopper.storage.index.LocationIndexTreeCHTest
Running com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.504 sec - in com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest
Running com.graphhopper.storage.index.BresenhamLineTest
Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 sec - in com.graphhopper.storage.index.BresenhamLineTest
Running com.graphhopper.storage.VLongStorageTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.storage.VLongStorageTest
Running com.graphhopper.storage.EdgeTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.storage.EdgeTest
Running com.graphhopper.storage.MMapDirectoryTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.169 sec - in com.graphhopper.storage.MMapDirectoryTest
Running com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest
Tests run: 48, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.519 sec - in com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest
Running com.graphhopper.storage.GraphHopperStorageTest
Tests run: 47, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.507 sec - in com.graphhopper.storage.GraphHopperStorageTest
Running com.graphhopper.storage.StorablePropertiesTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.storage.StorablePropertiesTest
Running com.graphhopper.storage.SimpleFSLockFactoryTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec - in com.graphhopper.storage.SimpleFSLockFactoryTest
Running com.graphhopper.storage.MMapDataAccessTest
Tests run: 16, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.185 sec - in com.graphhopper.storage.MMapDataAccessTest
Running com.graphhopper.storage.GraphStorageViaMMapTest
Tests run: 39, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 10.388 sec - in com.graphhopper.storage.GraphStorageViaMMapTest
Running com.graphhopper.storage.RAMIntDataAccessTest
Tests run: 14, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.007 sec - in com.graphhopper.storage.RAMIntDataAccessTest
Running com.graphhopper.storage.GraphEdgeIdFinderTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.007 sec - in com.graphhopper.storage.GraphEdgeIdFinderTest
Running com.graphhopper.storage.RAMDataAccessTest
Tests run: 14, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.008 sec - in com.graphhopper.storage.RAMDataAccessTest
Running com.graphhopper.storage.UnsafeDataAccessTest
Tests run: 15, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.01 sec - in com.graphhopper.storage.UnsafeDataAccessTest
Running com.graphhopper.storage.TurnCostExtensionTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec - in com.graphhopper.storage.TurnCostExtensionTest
Running com.graphhopper.storage.GraphHopperStorageLMTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.094 sec - in com.graphhopper.storage.GraphHopperStorageLMTest
Running com.graphhopper.storage.RAMDirectoryTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 sec - in com.graphhopper.storage.RAMDirectoryTest
Running com.graphhopper.storage.GraphHopperStorageForDataFlagEncoderTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.054 sec - in com.graphhopper.storage.GraphHopperStorageForDataFlagEncoderTest
Running com.graphhopper.storage.GraphHopperStorageCHTest
2018-04-27 13:02:36,026 [main] WARN  com.graphhopper.storage.CHGraphImpl - Setting weights smaller than 0.001 is not allowed in CHGraphImpl#setWeight. You passed: 1.0E-5 for the edge 2 from 0.0,0.0 to 0.0,0.0
Tests run: 60, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.328 sec - in com.graphhopper.storage.GraphHopperStorageCHTest
Running com.graphhopper.storage.NativeFSLockFactoryTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.storage.NativeFSLockFactoryTest
Running com.graphhopper.coll.CompressedArrayTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.014 sec - in com.graphhopper.coll.CompressedArrayTest
Running com.graphhopper.coll.BitSetImplTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.coll.BitSetImplTest
Running com.graphhopper.coll.GHIntArrayListTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.coll.GHIntArrayListTest
Running com.graphhopper.coll.GHSortedCollectionTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.coll.GHSortedCollectionTest
Running com.graphhopper.coll.GHTreeMapComposedTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.coll.GHTreeMapComposedTest
Running com.graphhopper.coll.GHLongIntBTreeTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.coll.GHLongIntBTreeTest
Running com.graphhopper.coll.OSMIDMapTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.007 sec - in com.graphhopper.coll.OSMIDMapTest
Running com.graphhopper.coll.GHTBitSetTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.coll.GHTBitSetTest
Running com.graphhopper.geohash.LinearKeyAlgoTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.geohash.LinearKeyAlgoTest
Running com.graphhopper.geohash.SpatialKeyAlgoTest
Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.geohash.SpatialKeyAlgoTest
Running com.graphhopper.search.NameIndexTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 sec - in com.graphhopper.search.NameIndexTest
Running com.graphhopper.GraphHopperAPITest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.488 sec - in com.graphhopper.GraphHopperAPITest
Running com.graphhopper.apache.commons.lang3.StringUtilsTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.apache.commons.lang3.StringUtilsTest
Running com.graphhopper.apache.commons.collections.IntDoubleBinaryHeapTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.025 sec - in com.graphhopper.apache.commons.collections.IntDoubleBinaryHeapTest
Running com.graphhopper.GHRequestTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.GHRequestTest
Running com.graphhopper.GHResponseTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.graphhopper.GHResponseTest

Results :

Failed tests: 
  CHTurnCostTest.testFindPath_random_compareWithDijkstra:641->compareCHWithDijkstra:701->compareCHQueryWithDijkstra:713 Dijkstra and CH did not find equal shortest paths for route from 6 to 1
 dijkstra: weight: 80.702, nodes: [6, 7, 8, 0, 1]
       ch: weight: 93.747, nodes: [6, 7, 9, 1]

Tests run: 1613, Failures: 1, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] 
[INFO] GraphHopper Parent Project ......................... SUCCESS [  0.206 s]
[INFO] GraphHopper Core ................................... FAILURE [01:45 min]
[INFO] GraphHopper Reader for OpenStreetMap Data .......... SKIPPED
[INFO] GraphHopper Isochrone .............................. SKIPPED
[INFO] GraphHopper Reader for Gtfs Data ................... SKIPPED
[INFO] GraphHopper Reader JSON ............................ SKIPPED
[INFO] GraphHopper Tools .................................. SKIPPED
[INFO] GraphHopper Directions API hand-crafted Java Client. SKIPPED
[INFO] GraphHopper Web .................................... SKIPPED
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 01:46 min
[INFO] Finished at: 2018-04-27T13:02:37+02:00
[INFO] Final Memory: 17M/622M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.19.1:test (default-test) on project graphhopper-core: There are test failures.
[ERROR] 
[ERROR] Please refer to /root/workspace/graphhopper/graphhopper/371974529/core/target/surefire-reports for the individual test results.
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
[ERROR] 
[ERROR] After correcting the problems, you can resume the build with the command
[ERROR]   mvn <goals> -rf :graphhopper-core
