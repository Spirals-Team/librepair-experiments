[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO] 
[INFO] Airline - Parent
[INFO] Airline - IO Library
[INFO] Airline - Library
[INFO] Airline - Help - Parent
[INFO] Airline - Help - Bash
[INFO] Airline - Examples
[INFO] Airline - Help - Man Page (Troff)
[INFO] Airline - Help - HTML
[INFO] Airline - Help - Markdown
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Airline - Parent 2.5.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-enforcer-plugin:1.4.1:enforce (enforce-jdk7) @ airline-parent ---
[INFO] Skipping Rule Enforcement.
[INFO] 
[INFO] --- license-maven-plugin:2.11:check (default) @ airline-parent ---
[INFO] 
[INFO] --- buildnumber-maven-plugin:1.4:create (default) @ airline-parent ---
[INFO] Executing: /bin/sh -c cd '/root/workspace/rvesse/airline/423028380' && 'git' 'rev-parse' '--verify' 'HEAD'
[INFO] Working directory: /root/workspace/rvesse/airline/423028380
[INFO] Storing buildNumber: 9e5bca0780a2d5aba5fd83a490d2347c8841d6ea at timestamp: 2018-08-31 16:04:00
[WARNING] Cannot get the branch information from the git repository: 
Detecting the current branch failed: fatal: ref HEAD is not a symbolic ref

[INFO] Executing: /bin/sh -c cd '/root/workspace/rvesse/airline/423028380' && 'git' 'rev-parse' '--verify' 'HEAD'
[INFO] Working directory: /root/workspace/rvesse/airline/423028380
[INFO] Storing buildScmBranch: UNKNOWN
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.1:prepare-agent (prepare-agent) @ airline-parent ---
[INFO] argLine set to -javaagent:/root/./workspace/rvesse/airline/423028380/.m2/org/jacoco/org.jacoco.agent/0.8.1/org.jacoco.agent-0.8.1-runtime.jar=destfile=/root/workspace/rvesse/airline/423028380/target/jacoco.exec
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Airline - IO Library 2.5.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-enforcer-plugin:1.4.1:enforce (enforce-jdk7) @ airline-io ---
[INFO] Skipping Rule Enforcement.
[INFO] 
[INFO] --- license-maven-plugin:2.11:check (default) @ airline-io ---
[INFO] 
[INFO] --- buildnumber-maven-plugin:1.4:create (default) @ airline-io ---
[INFO] Executing: /bin/sh -c cd '/root/workspace/rvesse/airline/423028380/airline-io' && 'git' 'rev-parse' '--verify' 'HEAD'
[INFO] Working directory: /root/workspace/rvesse/airline/423028380/airline-io
[INFO] Storing buildNumber: 9e5bca0780a2d5aba5fd83a490d2347c8841d6ea at timestamp: 2018-08-31 16:04:00
[WARNING] Cannot get the branch information from the git repository: 
Detecting the current branch failed: fatal: ref HEAD is not a symbolic ref

[INFO] Executing: /bin/sh -c cd '/root/workspace/rvesse/airline/423028380/airline-io' && 'git' 'rev-parse' '--verify' 'HEAD'
[INFO] Working directory: /root/workspace/rvesse/airline/423028380/airline-io
[INFO] Storing buildScmBranch: UNKNOWN
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ airline-io ---
[INFO] Using 'utf-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /root/workspace/rvesse/airline/423028380/airline-io/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:compile (default-compile) @ airline-io ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ airline-io ---
[INFO] Using 'utf-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /root/workspace/rvesse/airline/423028380/airline-io/src/test/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:testCompile (default-testCompile) @ airline-io ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.1:prepare-agent (prepare-agent) @ airline-io ---
[INFO] argLine set to -javaagent:/root/./workspace/rvesse/airline/423028380/.m2/org/jacoco/org.jacoco.agent/0.8.1/org.jacoco.agent-0.8.1-runtime.jar=destfile=/root/workspace/rvesse/airline/423028380/airline-io/target/jacoco.exec
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.0:test (default-test) @ airline-io ---
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-testng/2.22.0/surefire-testng-2.22.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-testng/2.22.0/surefire-testng-2.22.0.pom (3 KB at 7.1 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.22.0/surefire-providers-2.22.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.22.0/surefire-providers-2.22.0.pom (3 KB at 121.5 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-java5/2.22.0/common-java5-2.22.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-java5/2.22.0/common-java5-2.22.0.pom (3 KB at 87.1 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-testng-utils/2.22.0/surefire-testng-utils-2.22.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-testng-utils/2.22.0/surefire-testng-utils-2.22.0.pom (4 KB at 118.4 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-grouper/2.22.0/surefire-grouper-2.22.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-grouper/2.22.0/surefire-grouper-2.22.0.pom (3 KB at 111.8 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-testng/2.22.0/surefire-testng-2.22.0.jar
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-testng-utils/2.22.0/surefire-testng-utils-2.22.0.jar
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-grouper/2.22.0/surefire-grouper-2.22.0.jar
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-java5/2.22.0/common-java5-2.22.0.jar
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-testng/2.22.0/surefire-testng-2.22.0.jar (43 KB at 649.3 KB/sec)
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-java5/2.22.0/common-java5-2.22.0.jar (50 KB at 909.0 KB/sec)
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-testng-utils/2.22.0/surefire-testng-utils-2.22.0.jar (27 KB at 387.6 KB/sec)
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-grouper/2.22.0/surefire-grouper-2.22.0.jar (40 KB at 482.0 KB/sec)
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running TestSuite
[INFO] Tests run: 29, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.26 s - in TestSuite
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 29, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Airline - Library 2.5.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-enforcer-plugin:1.4.1:enforce (enforce-jdk7) @ airline ---
[INFO] Skipping Rule Enforcement.
[INFO] 
[INFO] --- license-maven-plugin:2.11:check (default) @ airline ---
[INFO] 
[INFO] --- buildnumber-maven-plugin:1.4:create (default) @ airline ---
[INFO] Executing: /bin/sh -c cd '/root/workspace/rvesse/airline/423028380/airline-core' && 'git' 'rev-parse' '--verify' 'HEAD'
[INFO] Working directory: /root/workspace/rvesse/airline/423028380/airline-core
[INFO] Storing buildNumber: 9e5bca0780a2d5aba5fd83a490d2347c8841d6ea at timestamp: 2018-08-31 16:04:06
[WARNING] Cannot get the branch information from the git repository: 
Detecting the current branch failed: fatal: ref HEAD is not a symbolic ref

[INFO] Executing: /bin/sh -c cd '/root/workspace/rvesse/airline/423028380/airline-core' && 'git' 'rev-parse' '--verify' 'HEAD'
[INFO] Working directory: /root/workspace/rvesse/airline/423028380/airline-core
[INFO] Storing buildScmBranch: UNKNOWN
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ airline ---
[INFO] Using 'utf-8' encoding to copy filtered resources.
[INFO] Copying 5 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:compile (default-compile) @ airline ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ airline ---
[INFO] Using 'utf-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:testCompile (default-testCompile) @ airline ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.1:prepare-agent (prepare-agent) @ airline ---
[INFO] argLine set to -javaagent:/root/./workspace/rvesse/airline/423028380/.m2/org/jacoco/org.jacoco.agent/0.8.1/org.jacoco.agent-0.8.1-runtime.jar=destfile=/root/workspace/rvesse/airline/423028380/airline-core/target/jacoco.exec
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.0:test (default-test) @ airline ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running TestSuite
$ git add -p file
Add

$ git remote add origin git@github.com:airlift/airline.git
RemoteAdd

$ git -v remote show origin
RemoteShow

$ git remote
RemoteShow

$ git remote origin
RemoteShow

$ git remote -n origin
RemoteShow

$ git -v remote origin
RemoteShow

$ git 
usage: git [ -v ] <command> [ <args> ]

Commands are:
    add      Add file contents to the index
    help     Display help information
    remote   Manage set of tracked repositories

See 'git help <command>' for more information on a specific command.

$ git help
usage: git [ -v ] <command> [ <args> ]

Commands are:
    add      Add file contents to the index
    help     Display help information
    remote   Manage set of tracked repositories

See 'git help <command>' for more information on a specific command.

$ git help git
NAME
        git - the stupid content tracker

SYNOPSIS
        git [ -v ] <command> [ <args> ]

OPTIONS
        -v
            Verbose mode

COMMANDS
        add
            Add file contents to the index

        help
            Display help information

        remote add
            Adds a remote

        remote show
            Gives some information about the remote <name>


$ git help add
NAME
        git add - Add file contents to the index

SYNOPSIS
        git [ -v ] add [ -i ] [--] [ <patterns>... ]

OPTIONS
        -i
            Add modified contents interactively.

        -v
            Verbose mode

        --
            This option can be used to separate command-line options from the
            list of arguments (useful when arguments might be mistaken for
            command-line options)

        <patterns>
            Patterns of files to be added


$ git help remote
NAME
        git remote - Manage set of tracked repositories

SYNOPSIS
        git [ -v ] remote { add | show* } [--] [cmd-options] <cmd-args>

        Where command-specific options [cmd-options] are:
            add: [ -t <branch> ]
            show: [ -n ]

        Where command-specific arguments <cmd-args> are:
            add: [ <name> <url>... ]
            show: [ <remote> ]

        Where * indicates the default command(s)
        See 'git help remote <command>' for more information on a specific command.
OPTIONS
        -v
            Verbose mode


$ git help remote show
NAME
        git remote show - Gives some information about the remote <name>

SYNOPSIS
        git [ -v ] remote show [ -n ] [--] [ <remote> ]

OPTIONS
        -n
            Do not query remote heads

        -v
            Verbose mode

        --
            This option can be used to separate command-line options from the
            list of arguments (useful when arguments might be mistaken for
            command-line options)

        <remote>
            Remote to show


$ git rem
RemoteShow

$ git rem show
Unknown command rem show or an ambiguous abbreviation

$ git rem sh
Unknown command rem sh or an ambiguous abbreviation

$ git remote sh
Unknown command remote sh or an ambiguous abbreviation

$ git foo
RemoteShow

$ git rem
RemoteShow

$ git rem show
RemoteShow

$ git rem sh
RemoteShow

$ git remote sh
RemoteShow

Ran 25,000 test cases for class com.github.rvesse.airline.types.numerics.abbreviated.KiloAs1000 with settings (mult=1,000, min=-2,147,483,648, max=2,147,483,647, type=class java.lang.Integer, divisor=1,000, suffix=k) with 0 good values and 25,000 bad values
Ran 25,000 test cases for class com.github.rvesse.airline.types.numerics.abbreviated.KiloAs1000 with settings (mult=1,000, min=-2,147,483,648, max=2,147,483,647, type=class java.lang.Integer, divisor=1,000,000, suffix=m) with 0 good values and 25,000 bad values
Ran 25,000 test cases for class com.github.rvesse.airline.types.numerics.abbreviated.KiloAs1000 with settings (mult=1,000, min=-2,147,483,648, max=2,147,483,647, type=class java.lang.Integer, divisor=1,000,000,000, suffix=b) with 0 good values and 25,000 bad values
Ran 25,000 test cases for class com.github.rvesse.airline.types.numerics.abbreviated.KiloAs1000 with settings (mult=1,000, min=-9,223,372,036,854,775,808, max=9,223,372,036,854,775,807, type=class java.lang.Long, divisor=1,000, suffix=k) with 25,000 good values and 0 bad values
Ran 25,000 test cases for class com.github.rvesse.airline.types.numerics.abbreviated.KiloAs1000 with settings (mult=1,000, min=-9,223,372,036,854,775,808, max=9,223,372,036,854,775,807, type=class java.lang.Long, divisor=1,000,000, suffix=m) with 25,000 good values and 0 bad values
Ran 25,000 test cases for class com.github.rvesse.airline.types.numerics.abbreviated.KiloAs1000 with settings (mult=1,000, min=-9,223,372,036,854,775,808, max=9,223,372,036,854,775,807, type=class java.lang.Long, divisor=1,000,000,000, suffix=b) with 25,000 good values and 0 bad values
Ran 25,000 test cases for class com.github.rvesse.airline.types.numerics.abbreviated.KiloAs1000 with settings (mult=1,000, min=-9,223,372,036,854,775,808, max=9,223,372,036,854,775,807, type=class java.lang.Long, divisor=1,000,000,000,000, suffix=t) with 25,000 good values and 0 bad values
Ran 25,000 test cases for class com.github.rvesse.airline.types.numerics.abbreviated.KiloAs1000 with settings (mult=1,000, min=-32,768, max=32,767, type=class java.lang.Short, divisor=1,000, suffix=k) with 0 good values and 25,000 bad values
Ran 25,000 test cases for class com.github.rvesse.airline.types.numerics.abbreviated.KiloAs1000 with settings (mult=1,000, min=-32,768, max=32,767, type=class java.lang.Short, divisor=1,000,000, suffix=m) with 0 good values and 25,000 bad values
Ran 25,000 test cases for class com.github.rvesse.airline.types.numerics.abbreviated.KiloAs1024 with settings (mult=1,024, min=-2,147,483,648, max=2,147,483,647, type=class java.lang.Integer, divisor=1,024, suffix=k) with 0 good values and 25,000 bad values
Ran 25,000 test cases for class com.github.rvesse.airline.types.numerics.abbreviated.KiloAs1024 with settings (mult=1,024, min=-2,147,483,648, max=2,147,483,647, type=class java.lang.Integer, divisor=1,048,576, suffix=m) with 0 good values and 25,000 bad values
Ran 25,000 test cases for class com.github.rvesse.airline.types.numerics.abbreviated.KiloAs1024 with settings (mult=1,024, min=-2,147,483,648, max=2,147,483,647, type=class java.lang.Integer, divisor=1,073,741,824, suffix=g) with 0 good values and 25,000 bad values
Ran 25,000 test cases for class com.github.rvesse.airline.types.numerics.abbreviated.KiloAs1024 with settings (mult=1,024, min=-2,147,483,648, max=2,147,483,647, type=class java.lang.Integer, divisor=1,073,741,824, suffix=G) with 0 good values and 25,000 bad values
Ran 25,000 test cases for class com.github.rvesse.airline.types.numerics.abbreviated.KiloAs1024 with settings (mult=1,024, min=-9,223,372,036,854,775,808, max=9,223,372,036,854,775,807, type=class java.lang.Long, divisor=1,024, suffix=k) with 25,000 good values and 0 bad values
Ran 25,000 test cases for class com.github.rvesse.airline.types.numerics.abbreviated.KiloAs1024 with settings (mult=1,024, min=-9,223,372,036,854,775,808, max=9,223,372,036,854,775,807, type=class java.lang.Long, divisor=1,048,576, suffix=m) with 25,000 good values and 0 bad values
Ran 25,000 test cases for class com.github.rvesse.airline.types.numerics.abbreviated.KiloAs1024 with settings (mult=1,024, min=-9,223,372,036,854,775,808, max=9,223,372,036,854,775,807, type=class java.lang.Long, divisor=1,073,741,824, suffix=g) with 25,000 good values and 0 bad values
Ran 25,000 test cases for class com.github.rvesse.airline.types.numerics.abbreviated.KiloAs1024 with settings (mult=1,024, min=-9,223,372,036,854,775,808, max=9,223,372,036,854,775,807, type=class java.lang.Long, divisor=1,099,511,627,776, suffix=t) with 25,000 good values and 0 bad values
Ran 25,000 test cases for class com.github.rvesse.airline.types.numerics.abbreviated.KiloAs1024 with settings (mult=1,024, min=-32,768, max=32,767, type=class java.lang.Short, divisor=1,024, suffix=k) with 0 good values and 25,000 bad values
Ran 25,000 test cases for class com.github.rvesse.airline.types.numerics.abbreviated.KiloAs1024 with settings (mult=1,024, min=-32,768, max=32,767, type=class java.lang.Short, divisor=1,024, suffix=k) with 0 good values and 25,000 bad values
Ran 25,000 test cases for class com.github.rvesse.airline.types.numerics.bases.Hexadecimal with settings (radix=16, min=-9,223,372,036,854,775,808, max=9,223,372,036,854,775,807, type=class java.lang.Long) with 25,000 good values and 0 bad values
Ran 25,000 test cases for class com.github.rvesse.airline.types.numerics.bases.Hexadecimal with settings (radix=16, min=-2,147,483,648, max=2,147,483,647, type=class java.lang.Integer) with 0 good values and 25,000 bad values
Ran 25,000 test cases for class com.github.rvesse.airline.types.numerics.bases.Hexadecimal with settings (radix=16, min=-32,768, max=32,767, type=class java.lang.Short) with 0 good values and 25,000 bad values
Ran 25,000 test cases for class com.github.rvesse.airline.types.numerics.bases.Hexadecimal with settings (radix=16, min=-128, max=127, type=class java.lang.Byte) with 0 good values and 25,000 bad values
Ran 25,000 test cases for class com.github.rvesse.airline.types.numerics.bases.Binary with settings (radix=2, min=-9,223,372,036,854,775,808, max=9,223,372,036,854,775,807, type=class java.lang.Long) with 25,000 good values and 0 bad values
Ran 25,000 test cases for class com.github.rvesse.airline.types.numerics.bases.Binary with settings (radix=2, min=-2,147,483,648, max=2,147,483,647, type=class java.lang.Integer) with 0 good values and 25,000 bad values
Ran 25,000 test cases for class com.github.rvesse.airline.types.numerics.bases.Binary with settings (radix=2, min=-32,768, max=32,767, type=class java.lang.Short) with 0 good values and 25,000 bad values
Ran 25,000 test cases for class com.github.rvesse.airline.types.numerics.bases.Binary with settings (radix=2, min=-128, max=127, type=class java.lang.Byte) with 0 good values and 25,000 bad values
Ran 25,000 test cases for class com.github.rvesse.airline.types.numerics.bases.Octal with settings (radix=8, min=-9,223,372,036,854,775,808, max=9,223,372,036,854,775,807, type=class java.lang.Long) with 25,000 good values and 0 bad values
Ran 25,000 test cases for class com.github.rvesse.airline.types.numerics.bases.Octal with settings (radix=8, min=-2,147,483,648, max=2,147,483,647, type=class java.lang.Integer) with 0 good values and 25,000 bad values
Ran 25,000 test cases for class com.github.rvesse.airline.types.numerics.bases.Octal with settings (radix=8, min=-32,768, max=32,767, type=class java.lang.Short) with 0 good values and 25,000 bad values
Ran 25,000 test cases for class com.github.rvesse.airline.types.numerics.bases.Octal with settings (radix=8, min=-128, max=127, type=class java.lang.Byte) with 0 good values and 25,000 bad values
$ galaxy 
$ galaxy --debug
$ galaxy agent
$ galaxy 
usage: galaxy [ --coordinator <coordinator> ] [ --debug ] <command> [ <args> ]

Commands are:
    help              Display help information about galaxy
    install           Install software in a new slot
    reset-to-actual   Reset slot expected state to actual
    restart           Restart server
    show              Show state of all slots
    ssh               ssh to slot installation
    start             Start a server
    stop              Stop a server
    terminate         Terminate (remove) a slot
    upgrade           Upgrade software in a slot
    agent             Manage agents

See 'galaxy help <command>' for more information on a specific command.

$ galaxy help
usage: galaxy [ --coordinator <coordinator> ] [ --debug ] <command> [ <args> ]

Commands are:
    help              Display help information about galaxy
    install           Install software in a new slot
    reset-to-actual   Reset slot expected state to actual
    restart           Restart server
    show              Show state of all slots
    ssh               ssh to slot installation
    start             Start a server
    stop              Stop a server
    terminate         Terminate (remove) a slot
    upgrade           Upgrade software in a slot
    agent             Manage agents

See 'galaxy help <command>' for more information on a specific command.

$ galaxy help galaxy
NAME
        galaxy - cloud management system

SYNOPSIS
        galaxy [ --debug ] [ --coordinator <coordinator> ] <command> [ <args> ]

OPTIONS
        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

COMMANDS
        help
            Display help information about galaxy

        install
            Install software in a new slot

        reset-to-actual
            Reset slot expected state to actual

        restart
            Restart server

        show
            Show state of all slots

        ssh
            ssh to slot installation

        start
            Start a server

        stop
            Stop a server

        terminate
            Terminate (remove) a slot

        upgrade
            Upgrade software in a slot

        agent add
            Provision a new agent

        agent show
            Show agent details

        agent terminate
            Provision a new agent


$ galaxy help show
NAME
        galaxy show - Show state of all slots

SYNOPSIS
        galaxy [ --coordinator <coordinator> ] [ --debug ] show
                [ {-b | --binary} <binary>... ] [ {-c | --config} <config>... ]
                [ {-i | --host} <host>... ] [ {-I | --ip} <ip>... ]
                [ {-s | --state} <state>... ] [ {-u | --uuid} <uuid>... ]

OPTIONS
        -b <binary>, --binary <binary>
            Select slots with a given binary

        -c <config>, --config <config>
            Select slots with a given configuration

        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID


$ galaxy help install
NAME
        galaxy install - Install software in a new slot

SYNOPSIS
        galaxy [ --coordinator <coordinator> ] [ --debug ] install
                [ --count <count> ] [ {-i | --host} <host>... ]
                [ {-I | --ip} <ip>... ] [ {-s | --state} <state>... ]
                [ {-u | --uuid} <uuid>... ] [--] [ <assignment>... ]

OPTIONS
        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --count <count>
            Number of instances to install

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID

        --
            This option can be used to separate command-line options from the
            list of arguments (useful when arguments might be mistaken for
            command-line options)

        <assignment>
            The binary and @configuration to install. The default packaging is
            tar.gz


$ galaxy help upgrade
NAME
        galaxy upgrade - Upgrade software in a slot

SYNOPSIS
        galaxy [ --coordinator <coordinator> ] [ --debug ] upgrade
                [ {-b | --binary} <binary>... ] [ {-c | --config} <config>... ]
                [ {-i | --host} <host>... ] [ {-I | --ip} <ip>... ]
                [ {-s | --state} <state>... ] [ {-u | --uuid} <uuid>... ] [--]
                [ <versions>... ]

OPTIONS
        -b <binary>, --binary <binary>
            Select slots with a given binary

        -c <config>, --config <config>
            Select slots with a given configuration

        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID

        --
            This option can be used to separate command-line options from the
            list of arguments (useful when arguments might be mistaken for
            command-line options)

        <versions>
            Version of the binary and/or @configuration


$ galaxy help upgrade
NAME
        galaxy upgrade - Upgrade software in a slot

SYNOPSIS
        galaxy [ --coordinator <coordinator> ] [ --debug ] upgrade
                [ {-b | --binary} <binary>... ] [ {-c | --config} <config>... ]
                [ {-i | --host} <host>... ] [ {-I | --ip} <ip>... ]
                [ {-s | --state} <state>... ] [ {-u | --uuid} <uuid>... ] [--]
                [ <versions>... ]

OPTIONS
        -b <binary>, --binary <binary>
            Select slots with a given binary

        -c <config>, --config <config>
            Select slots with a given configuration

        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID

        --
            This option can be used to separate command-line options from the
            list of arguments (useful when arguments might be mistaken for
            command-line options)

        <versions>
            Version of the binary and/or @configuration


$ galaxy help terminate
NAME
        galaxy terminate - Terminate (remove) a slot

SYNOPSIS
        galaxy [ --coordinator <coordinator> ] [ --debug ] terminate
                [ {-b | --binary} <binary>... ] [ {-c | --config} <config>... ]
                [ {-i | --host} <host>... ] [ {-I | --ip} <ip>... ]
                [ {-s | --state} <state>... ] [ {-u | --uuid} <uuid>... ]

OPTIONS
        -b <binary>, --binary <binary>
            Select slots with a given binary

        -c <config>, --config <config>
            Select slots with a given configuration

        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID


$ galaxy help start
NAME
        galaxy start - Start a server

SYNOPSIS
        galaxy [ --coordinator <coordinator> ] [ --debug ] start
                [ {-b | --binary} <binary>... ] [ {-c | --config} <config>... ]
                [ {-i | --host} <host>... ] [ {-I | --ip} <ip>... ]
                [ {-s | --state} <state>... ] [ {-u | --uuid} <uuid>... ]

OPTIONS
        -b <binary>, --binary <binary>
            Select slots with a given binary

        -c <config>, --config <config>
            Select slots with a given configuration

        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID


$ galaxy help stop
NAME
        galaxy stop - Stop a server

SYNOPSIS
        galaxy [ --coordinator <coordinator> ] [ --debug ] stop
                [ {-b | --binary} <binary>... ] [ {-c | --config} <config>... ]
                [ {-i | --host} <host>... ] [ {-I | --ip} <ip>... ]
                [ {-s | --state} <state>... ] [ {-u | --uuid} <uuid>... ]

OPTIONS
        -b <binary>, --binary <binary>
            Select slots with a given binary

        -c <config>, --config <config>
            Select slots with a given configuration

        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID


$ galaxy help restart
NAME
        galaxy restart - Restart server

SYNOPSIS
        galaxy [ --coordinator <coordinator> ] [ --debug ] restart
                [ {-b | --binary} <binary>... ] [ {-c | --config} <config>... ]
                [ {-i | --host} <host>... ] [ {-I | --ip} <ip>... ]
                [ {-s | --state} <state>... ] [ {-u | --uuid} <uuid>... ]

OPTIONS
        -b <binary>, --binary <binary>
            Select slots with a given binary

        -c <config>, --config <config>
            Select slots with a given configuration

        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID


$ galaxy help reset-to-actual
NAME
        galaxy reset-to-actual - Reset slot expected state to actual

SYNOPSIS
        galaxy [ --coordinator <coordinator> ] [ --debug ] reset-to-actual
                [ {-b | --binary} <binary>... ] [ {-c | --config} <config>... ]
                [ {-i | --host} <host>... ] [ {-I | --ip} <ip>... ]
                [ {-s | --state} <state>... ] [ {-u | --uuid} <uuid>... ]

OPTIONS
        -b <binary>, --binary <binary>
            Select slots with a given binary

        -c <config>, --config <config>
            Select slots with a given configuration

        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID


$ galaxy help ssh
NAME
        galaxy ssh - ssh to slot installation

SYNOPSIS
        galaxy [ --coordinator <coordinator> ] [ --debug ] ssh
                [ {-b | --binary} <binary>... ] [ {-c | --config} <config>... ]
                [ {-i | --host} <host>... ] [ {-I | --ip} <ip>... ]
                [ {-s | --state} <state>... ] [ {-u | --uuid} <uuid>... ] [--]
                [ <command> ]

OPTIONS
        -b <binary>, --binary <binary>
            Select slots with a given binary

        -c <config>, --config <config>
            Select slots with a given configuration

        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID

        --
            This option can be used to separate command-line options from the
            list of arguments (useful when arguments might be mistaken for
            command-line options)

        <command>
            Command to execute on the remote host


$ galaxy help agent
NAME
        galaxy agent - Manage agents

SYNOPSIS
        galaxy [ --debug ] [ --coordinator <coordinator> ] agent { add | show*
                | terminate } [--] [cmd-options] <cmd-args>

        Where command-specific options [cmd-options] are:
            add: [ --count <count> ] [ --availability-zone <availabilityZone> ]
            show: [ {-i | --host} <host>... ] [ {-I | --ip} <ip>... ] [ {-u | --uuid} <uuid>... ]
                    [ {-s | --state} <state>... ]
            terminate:

        Where command-specific arguments <cmd-args> are:
            add: [ <instanceType> ]
            show:
            terminate: <agent-id>

        Where * indicates the default command(s)
        See 'galaxy help agent <command>' for more information on a specific command.
OPTIONS
        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages


$ galaxy help agent show
NAME
        galaxy agent show - Show agent details

SYNOPSIS
        galaxy [ --coordinator <coordinator> ] [ --debug ] agent show
                [ {-i | --host} <host>... ] [ {-I | --ip} <ip>... ]
                [ {-s | --state} <state>... ] [ {-u | --uuid} <uuid>... ]

OPTIONS
        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID


$ galaxy help agent add
NAME
        galaxy agent add - Provision a new agent

SYNOPSIS
        galaxy [ --coordinator <coordinator> ] [ --debug ] agent add
                [ --availability-zone <availabilityZone> ] [ --count <count> ]
                [--] [ <instanceType> ]

OPTIONS
        --availability-zone <availabilityZone>
            Availability zone to provision

        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --count <count>
            Number of agents to provision

        --debug
            Enable debug messages

        --
            This option can be used to separate command-line options from the
            list of arguments (useful when arguments might be mistaken for
            command-line options)

        <instanceType>
            Instance type to provision


$ galaxy --debug
usage: galaxy [ --coordinator <coordinator> ] [ --debug ] <command> [ <args> ]

Commands are:
    help              Display help information about galaxy
    install           Install software in a new slot
    reset-to-actual   Reset slot expected state to actual
    restart           Restart server
    show              Show state of all slots
    ssh               ssh to slot installation
    start             Start a server
    stop              Stop a server
    terminate         Terminate (remove) a slot
    upgrade           Upgrade software in a slot
    agent             Manage agents

See 'galaxy help <command>' for more information on a specific command.

$ galaxy --debug show -u b2 --state r
com.github.rvesse.airline.TestGalaxyCommandLineParser.ShowCommand
{
 slotFilter=com.github.rvesse.airline.TestGalaxyCommandLineParser.SlotFilter
{
 binary=null
 config=null
 host=null
 ip=null
 uuid=[b2]
 state=[r]

}
 globalOptions=com.github.rvesse.airline.TestGalaxyCommandLineParser.GlobalOptions
{
 debug=true
 coordinator=http://localhost:64000

}

}

$ galaxy --debug install com.proofpoint.discovery:discovery-server:1.1 @discovery:general:1.0
com.github.rvesse.airline.TestGalaxyCommandLineParser.InstallCommand
{
 count=1
 agentFilter=com.github.rvesse.airline.TestGalaxyCommandLineParser.AgentFilter
{
 host=[]
 ip=[]
 uuid=[]
 state=[]

}
 assignment=[com.proofpoint.discovery:discovery-server:1.1, @discovery:general:1.0]
 globalOptions=com.github.rvesse.airline.TestGalaxyCommandLineParser.GlobalOptions
{
 debug=true
 coordinator=http://localhost:64000

}

}

$ galaxy --debug upgrade -u b2 1.1 @1.0
com.github.rvesse.airline.TestGalaxyCommandLineParser.UpgradeCommand
{
 slotFilter=com.github.rvesse.airline.TestGalaxyCommandLineParser.SlotFilter
{
 binary=null
 config=null
 host=null
 ip=null
 uuid=[b2]
 state=null

}
 versions=[1.1, @1.0]
 globalOptions=com.github.rvesse.airline.TestGalaxyCommandLineParser.GlobalOptions
{
 debug=true
 coordinator=http://localhost:64000

}

}

$ galaxy --debug upgrade -u b2 1.1 @1.0 -s r
com.github.rvesse.airline.TestGalaxyCommandLineParser.UpgradeCommand
{
 slotFilter=com.github.rvesse.airline.TestGalaxyCommandLineParser.SlotFilter
{
 binary=null
 config=null
 host=null
 ip=null
 uuid=[b2]
 state=[r]

}
 versions=[1.1, @1.0]
 globalOptions=com.github.rvesse.airline.TestGalaxyCommandLineParser.GlobalOptions
{
 debug=true
 coordinator=http://localhost:64000

}

}

$ galaxy --debug terminate -u b2
com.github.rvesse.airline.TestGalaxyCommandLineParser.TerminateCommand
{
 slotFilter=com.github.rvesse.airline.TestGalaxyCommandLineParser.SlotFilter
{
 binary=null
 config=null
 host=null
 ip=null
 uuid=[b2]
 state=null

}
 globalOptions=com.github.rvesse.airline.TestGalaxyCommandLineParser.GlobalOptions
{
 debug=true
 coordinator=http://localhost:64000

}

}

$ galaxy --debug start -u b2
com.github.rvesse.airline.TestGalaxyCommandLineParser.StartCommand
{
 slotFilter=com.github.rvesse.airline.TestGalaxyCommandLineParser.SlotFilter
{
 binary=null
 config=null
 host=null
 ip=null
 uuid=[b2]
 state=null

}
 globalOptions=com.github.rvesse.airline.TestGalaxyCommandLineParser.GlobalOptions
{
 debug=true
 coordinator=http://localhost:64000

}

}

$ galaxy --debug stop -u b2
com.github.rvesse.airline.TestGalaxyCommandLineParser.StopCommand
{
 slotFilter=com.github.rvesse.airline.TestGalaxyCommandLineParser.SlotFilter
{
 binary=null
 config=null
 host=null
 ip=null
 uuid=[b2]
 state=null

}
 globalOptions=com.github.rvesse.airline.TestGalaxyCommandLineParser.GlobalOptions
{
 debug=true
 coordinator=http://localhost:64000

}

}

$ galaxy --debug restart -u b2
com.github.rvesse.airline.TestGalaxyCommandLineParser.RestartCommand
{
 slotFilter=com.github.rvesse.airline.TestGalaxyCommandLineParser.SlotFilter
{
 binary=null
 config=null
 host=null
 ip=null
 uuid=[b2]
 state=null

}
 globalOptions=com.github.rvesse.airline.TestGalaxyCommandLineParser.GlobalOptions
{
 debug=true
 coordinator=http://localhost:64000

}

}

$ galaxy --debug reset-to-actual -u b2
com.github.rvesse.airline.TestGalaxyCommandLineParser.ResetToActualCommand
{
 slotFilter=com.github.rvesse.airline.TestGalaxyCommandLineParser.SlotFilter
{
 binary=null
 config=null
 host=null
 ip=null
 uuid=[b2]
 state=null

}
 globalOptions=com.github.rvesse.airline.TestGalaxyCommandLineParser.GlobalOptions
{
 debug=true
 coordinator=http://localhost:64000

}

}

$ galaxy --debug ssh
com.github.rvesse.airline.TestGalaxyCommandLineParser.SshCommand
{
 slotFilter=com.github.rvesse.airline.TestGalaxyCommandLineParser.SlotFilter
{
 binary=null
 config=null
 host=null
 ip=null
 uuid=null
 state=null

}
 command=null

}

$ galaxy --debug ssh -u b2 --state r tail -F var/log/launcher.log
com.github.rvesse.airline.TestGalaxyCommandLineParser.SshCommand
{
 slotFilter=com.github.rvesse.airline.TestGalaxyCommandLineParser.SlotFilter
{
 binary=null
 config=null
 host=null
 ip=null
 uuid=[b2]
 state=[r]

}
 command=tail -F var/log/launcher.log

}

$ galaxy --debug agent
com.github.rvesse.airline.TestGalaxyCommandLineParser.AgentShowCommand
{
 agentFilter=com.github.rvesse.airline.TestGalaxyCommandLineParser.AgentFilter
{
 host=[]
 ip=[]
 uuid=[]
 state=[]

}
 globalOptions=com.github.rvesse.airline.TestGalaxyCommandLineParser.GlobalOptions
{
 debug=true
 coordinator=http://localhost:64000

}

}

$ galaxy --debug agent show
com.github.rvesse.airline.TestGalaxyCommandLineParser.AgentShowCommand
{
 agentFilter=com.github.rvesse.airline.TestGalaxyCommandLineParser.AgentFilter
{
 host=[]
 ip=[]
 uuid=[]
 state=[]

}
 globalOptions=com.github.rvesse.airline.TestGalaxyCommandLineParser.GlobalOptions
{
 debug=true
 coordinator=http://localhost:64000

}

}

$ galaxy --debug agent add --count 4 t1.micro
com.github.rvesse.airline.TestGalaxyCommandLineParser.AgentAddCommand
{
 count=4
 availabilityZone=null
 instanceType=t1.micro
 globalOptions=com.github.rvesse.airline.TestGalaxyCommandLineParser.GlobalOptions
{
 debug=true
 coordinator=http://localhost:64000

}

}

$ ping 
Ping count: 1

$ ping -c 5
Ping count: 5

$ ping --count 9
Ping count: 9

$ ping --count=8
Ping count: 8

$ ping -h
NAME
        ping - network test utility

SYNOPSIS
        ping [ {-c | --count} <count> ] [ {-h | --help} ]

OPTIONS
        -c <count>, --count <count>
            Send count packets

        -h, --help
            Display help information


$ ping --help
NAME
        ping - network test utility

SYNOPSIS
        ping [ {-c | --count} <count> ] [ {-h | --help} ]

OPTIONS
        -c <count>, --count <count>
            Send count packets

        -h, --help
            Display help information


NAME
        strings -

SYNOPSIS
        strings [ {-h | --help} ] [ --max <maxLength> ] [ --min <minLength> ]
                [ --not-blank <notBlank> ] [ --not-empty <notEmpty> ]
                [ --other <other> ] [ --tel <tel> ]

OPTIONS
        -h, --help
            Display help information

        --max <maxLength>


            This options value has a maximum length of 4 characters


        --min <minLength>


            This options value has a minimum length of 4 characters


        --not-blank <notBlank>


            This options value cannot be blank (empty or all whitespace)


        --not-empty <notEmpty>


            This options value cannot be empty


        --other <other>


            This options value must match the regular expression
            'foo|bar|foobar'.


        --tel <tel>


            This options value must match the regular expression
            '(\+1-)?\d{3}-\d{3}-\d{4}'. Must provide a telephone number in
            standard US format e.g. +1-800-123-4567


NAME
        test - TestCommand

SYNOPSIS
        test [ {-h | --help} ] [ -i ] [--] [ <patterns>... ]

OPTIONS
        -h, --help
            Display help information

        -i
            Interactive add mode

        --
            This option can be used to separate command-line options from the
            list of arguments (useful when arguments might be mistaken for
            command-line options)

        <patterns>
            Patterns of files to be added

$ galaxy 
$ galaxy --debug
$ galaxy agent
$ galaxy 
usage: galaxy [ --coordinator <coordinator> ] [ --debug ] <command> [ <args> ]

Commands are:
    help              Display help information about galaxy
    install           Install software in a new slot
    reset-to-actual   Reset slot expected state to actual
    restart           Restart server
    show              Show state of all slots
    ssh               ssh to slot installation
    start             Start a server
    stop              Stop a server
    terminate         Terminate (remove) a slot
    upgrade           Upgrade software in a slot
    agent             Manage agents

See 'galaxy help <command>' for more information on a specific command.

$ galaxy help
usage: galaxy [ --coordinator <coordinator> ] [ --debug ] <command> [ <args> ]

Commands are:
    help              Display help information about galaxy
    install           Install software in a new slot
    reset-to-actual   Reset slot expected state to actual
    restart           Restart server
    show              Show state of all slots
    ssh               ssh to slot installation
    start             Start a server
    stop              Stop a server
    terminate         Terminate (remove) a slot
    upgrade           Upgrade software in a slot
    agent             Manage agents

See 'galaxy help <command>' for more information on a specific command.

$ galaxy help galaxy
NAME
        galaxy - cloud management system

SYNOPSIS
        galaxy [ --debug ] [ --coordinator <coordinator> ] <command> [ <args> ]

OPTIONS
        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

COMMANDS
        help
            Display help information about galaxy

        install
            Install software in a new slot

        reset-to-actual
            Reset slot expected state to actual

        restart
            Restart server

        show
            Show state of all slots

        ssh
            ssh to slot installation

        start
            Start a server

        stop
            Stop a server

        terminate
            Terminate (remove) a slot

        upgrade
            Upgrade software in a slot

        agent add
            Provision a new agent

        agent show
            Show agent details

        agent terminate
            Provision a new agent


$ galaxy help show
NAME
        galaxy show - Show state of all slots

SYNOPSIS
        galaxy [ --coordinator <coordinator> ] [ --debug ] show
                [ {-b | --binary} <binary>... ] [ {-c | --config} <config>... ]
                [ {-i | --host} <host>... ] [ {-I | --ip} <ip>... ]
                [ {-s | --state} <state>... ] [ {-u | --uuid} <uuid>... ]

OPTIONS
        -b <binary>, --binary <binary>
            Select slots with a given binary

        -c <config>, --config <config>
            Select slots with a given configuration

        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID


$ galaxy help install
NAME
        galaxy install - Install software in a new slot

SYNOPSIS
        galaxy [ --coordinator <coordinator> ] [ --debug ] install
                [ --count <count> ] [ {-i | --host} <host>... ]
                [ {-I | --ip} <ip>... ] [ {-s | --state} <state>... ]
                [ {-u | --uuid} <uuid>... ] [--] [ <assignment>... ]

OPTIONS
        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --count <count>
            Number of instances to install

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID

        --
            This option can be used to separate command-line options from the
            list of arguments (useful when arguments might be mistaken for
            command-line options)

        <assignment>
            The binary and @configuration to install. The default packaging is
            tar.gz


$ galaxy help upgrade
NAME
        galaxy upgrade - Upgrade software in a slot

SYNOPSIS
        galaxy [ --coordinator <coordinator> ] [ --debug ] upgrade
                [ {-b | --binary} <binary>... ] [ {-c | --config} <config>... ]
                [ {-i | --host} <host>... ] [ {-I | --ip} <ip>... ]
                [ {-s | --state} <state>... ] [ {-u | --uuid} <uuid>... ] [--]
                [ <versions>... ]

OPTIONS
        -b <binary>, --binary <binary>
            Select slots with a given binary

        -c <config>, --config <config>
            Select slots with a given configuration

        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID

        --
            This option can be used to separate command-line options from the
            list of arguments (useful when arguments might be mistaken for
            command-line options)

        <versions>
            Version of the binary and/or @configuration


$ galaxy help upgrade
NAME
        galaxy upgrade - Upgrade software in a slot

SYNOPSIS
        galaxy [ --coordinator <coordinator> ] [ --debug ] upgrade
                [ {-b | --binary} <binary>... ] [ {-c | --config} <config>... ]
                [ {-i | --host} <host>... ] [ {-I | --ip} <ip>... ]
                [ {-s | --state} <state>... ] [ {-u | --uuid} <uuid>... ] [--]
                [ <versions>... ]

OPTIONS
        -b <binary>, --binary <binary>
            Select slots with a given binary

        -c <config>, --config <config>
            Select slots with a given configuration

        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID

        --
            This option can be used to separate command-line options from the
            list of arguments (useful when arguments might be mistaken for
            command-line options)

        <versions>
            Version of the binary and/or @configuration


$ galaxy help terminate
NAME
        galaxy terminate - Terminate (remove) a slot

SYNOPSIS
        galaxy [ --coordinator <coordinator> ] [ --debug ] terminate
                [ {-b | --binary} <binary>... ] [ {-c | --config} <config>... ]
                [ {-i | --host} <host>... ] [ {-I | --ip} <ip>... ]
                [ {-s | --state} <state>... ] [ {-u | --uuid} <uuid>... ]

OPTIONS
        -b <binary>, --binary <binary>
            Select slots with a given binary

        -c <config>, --config <config>
            Select slots with a given configuration

        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID


$ galaxy help start
NAME
        galaxy start - Start a server

SYNOPSIS
        galaxy [ --coordinator <coordinator> ] [ --debug ] start
                [ {-b | --binary} <binary>... ] [ {-c | --config} <config>... ]
                [ {-i | --host} <host>... ] [ {-I | --ip} <ip>... ]
                [ {-s | --state} <state>... ] [ {-u | --uuid} <uuid>... ]

OPTIONS
        -b <binary>, --binary <binary>
            Select slots with a given binary

        -c <config>, --config <config>
            Select slots with a given configuration

        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID


$ galaxy help stop
NAME
        galaxy stop - Stop a server

SYNOPSIS
        galaxy [ --coordinator <coordinator> ] [ --debug ] stop
                [ {-b | --binary} <binary>... ] [ {-c | --config} <config>... ]
                [ {-i | --host} <host>... ] [ {-I | --ip} <ip>... ]
                [ {-s | --state} <state>... ] [ {-u | --uuid} <uuid>... ]

OPTIONS
        -b <binary>, --binary <binary>
            Select slots with a given binary

        -c <config>, --config <config>
            Select slots with a given configuration

        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID


$ galaxy help restart
NAME
        galaxy restart - Restart server

SYNOPSIS
        galaxy [ --coordinator <coordinator> ] [ --debug ] restart
                [ {-b | --binary} <binary>... ] [ {-c | --config} <config>... ]
                [ {-i | --host} <host>... ] [ {-I | --ip} <ip>... ]
                [ {-s | --state} <state>... ] [ {-u | --uuid} <uuid>... ]

OPTIONS
        -b <binary>, --binary <binary>
            Select slots with a given binary

        -c <config>, --config <config>
            Select slots with a given configuration

        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID


$ galaxy help reset-to-actual
NAME
        galaxy reset-to-actual - Reset slot expected state to actual

SYNOPSIS
        galaxy [ --coordinator <coordinator> ] [ --debug ] reset-to-actual
                [ {-b | --binary} <binary>... ] [ {-c | --config} <config>... ]
                [ {-i | --host} <host>... ] [ {-I | --ip} <ip>... ]
                [ {-s | --state} <state>... ] [ {-u | --uuid} <uuid>... ]

OPTIONS
        -b <binary>, --binary <binary>
            Select slots with a given binary

        -c <config>, --config <config>
            Select slots with a given configuration

        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID


$ galaxy help ssh
NAME
        galaxy ssh - ssh to slot installation

SYNOPSIS
        galaxy [ --coordinator <coordinator> ] [ --debug ] ssh
                [ {-b | --binary} <binary>... ] [ {-c | --config} <config>... ]
                [ {-i | --host} <host>... ] [ {-I | --ip} <ip>... ]
                [ {-s | --state} <state>... ] [ {-u | --uuid} <uuid>... ] [--]
                [ <command> ]

OPTIONS
        -b <binary>, --binary <binary>
            Select slots with a given binary

        -c <config>, --config <config>
            Select slots with a given configuration

        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID

        --
            This option can be used to separate command-line options from the
            list of arguments (useful when arguments might be mistaken for
            command-line options)

        <command>
            Command to execute on the remote host


$ galaxy help agent
NAME
        galaxy agent - Manage agents

SYNOPSIS
        galaxy [ --debug ] [ --coordinator <coordinator> ] agent { add | show*
                | terminate } [--] [cmd-options] <cmd-args>

        Where command-specific options [cmd-options] are:
            add: [ --count <count> ] [ --availability-zone <availabilityZone> ]
            show: [ {-i | --host} <host>... ] [ {-I | --ip} <ip>... ] [ {-u | --uuid} <uuid>... ]
                    [ {-s | --state} <state>... ]
            terminate:

        Where command-specific arguments <cmd-args> are:
            add: [ <instanceType> ]
            show:
            terminate: <agent-id>

        Where * indicates the default command(s)
        See 'galaxy help agent <command>' for more information on a specific command.
OPTIONS
        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages


$ galaxy help agent show
NAME
        galaxy agent show - Show agent details

SYNOPSIS
        galaxy [ --coordinator <coordinator> ] [ --debug ] agent show
                [ {-i | --host} <host>... ] [ {-I | --ip} <ip>... ]
                [ {-s | --state} <state>... ] [ {-u | --uuid} <uuid>... ]

OPTIONS
        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID


$ galaxy help agent add
NAME
        galaxy agent add - Provision a new agent

SYNOPSIS
        galaxy [ --coordinator <coordinator> ] [ --debug ] agent add
                [ --availability-zone <availabilityZone> ] [ --count <count> ]
                [--] [ <instanceType> ]

OPTIONS
        --availability-zone <availabilityZone>
            Availability zone to provision

        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --count <count>
            Number of agents to provision

        --debug
            Enable debug messages

        --
            This option can be used to separate command-line options from the
            list of arguments (useful when arguments might be mistaken for
            command-line options)

        <instanceType>
            Instance type to provision


$ galaxy --debug
usage: galaxy [ --coordinator <coordinator> ] [ --debug ] <command> [ <args> ]

Commands are:
    help              Display help information about galaxy
    install           Install software in a new slot
    reset-to-actual   Reset slot expected state to actual
    restart           Restart server
    show              Show state of all slots
    ssh               ssh to slot installation
    start             Start a server
    stop              Stop a server
    terminate         Terminate (remove) a slot
    upgrade           Upgrade software in a slot
    agent             Manage agents

See 'galaxy help <command>' for more information on a specific command.

$ galaxy --debug show -u b2 --state r
com.github.rvesse.airline.TestGalaxyCommandLineParser.ShowCommand
{
 slotFilter=com.github.rvesse.airline.TestGalaxyCommandLineParser.SlotFilter
{
 binary=null
 config=null
 host=null
 ip=null
 uuid=[b2]
 state=[r]

}
 globalOptions=com.github.rvesse.airline.TestGalaxyCommandLineParser.GlobalOptions
{
 debug=true
 coordinator=http://localhost:64000

}

}

$ galaxy --debug install com.proofpoint.discovery:discovery-server:1.1 @discovery:general:1.0
com.github.rvesse.airline.TestGalaxyCommandLineParser.InstallCommand
{
 count=1
 agentFilter=com.github.rvesse.airline.TestGalaxyCommandLineParser.AgentFilter
{
 host=[]
 ip=[]
 uuid=[]
 state=[]

}
 assignment=[com.proofpoint.discovery:discovery-server:1.1, @discovery:general:1.0]
 globalOptions=com.github.rvesse.airline.TestGalaxyCommandLineParser.GlobalOptions
{
 debug=true
 coordinator=http://localhost:64000

}

}

$ galaxy --debug upgrade -u b2 1.1 @1.0
com.github.rvesse.airline.TestGalaxyCommandLineParser.UpgradeCommand
{
 slotFilter=com.github.rvesse.airline.TestGalaxyCommandLineParser.SlotFilter
{
 binary=null
 config=null
 host=null
 ip=null
 uuid=[b2]
 state=null

}
 versions=[1.1, @1.0]
 globalOptions=com.github.rvesse.airline.TestGalaxyCommandLineParser.GlobalOptions
{
 debug=true
 coordinator=http://localhost:64000

}

}

$ galaxy --debug upgrade -u b2 1.1 @1.0 -s r
com.github.rvesse.airline.TestGalaxyCommandLineParser.UpgradeCommand
{
 slotFilter=com.github.rvesse.airline.TestGalaxyCommandLineParser.SlotFilter
{
 binary=null
 config=null
 host=null
 ip=null
 uuid=[b2]
 state=[r]

}
 versions=[1.1, @1.0]
 globalOptions=com.github.rvesse.airline.TestGalaxyCommandLineParser.GlobalOptions
{
 debug=true
 coordinator=http://localhost:64000

}

}

$ galaxy --debug terminate -u b2
com.github.rvesse.airline.TestGalaxyCommandLineParser.TerminateCommand
{
 slotFilter=com.github.rvesse.airline.TestGalaxyCommandLineParser.SlotFilter
{
 binary=null
 config=null
 host=null
 ip=null
 uuid=[b2]
 state=null

}
 globalOptions=com.github.rvesse.airline.TestGalaxyCommandLineParser.GlobalOptions
{
 debug=true
 coordinator=http://localhost:64000

}

}

$ galaxy --debug start -u b2
com.github.rvesse.airline.TestGalaxyCommandLineParser.StartCommand
{
 slotFilter=com.github.rvesse.airline.TestGalaxyCommandLineParser.SlotFilter
{
 binary=null
 config=null
 host=null
 ip=null
 uuid=[b2]
 state=null

}
 globalOptions=com.github.rvesse.airline.TestGalaxyCommandLineParser.GlobalOptions
{
 debug=true
 coordinator=http://localhost:64000

}

}

$ galaxy --debug stop -u b2
com.github.rvesse.airline.TestGalaxyCommandLineParser.StopCommand
{
 slotFilter=com.github.rvesse.airline.TestGalaxyCommandLineParser.SlotFilter
{
 binary=null
 config=null
 host=null
 ip=null
 uuid=[b2]
 state=null

}
 globalOptions=com.github.rvesse.airline.TestGalaxyCommandLineParser.GlobalOptions
{
 debug=true
 coordinator=http://localhost:64000

}

}

$ galaxy --debug restart -u b2
com.github.rvesse.airline.TestGalaxyCommandLineParser.RestartCommand
{
 slotFilter=com.github.rvesse.airline.TestGalaxyCommandLineParser.SlotFilter
{
 binary=null
 config=null
 host=null
 ip=null
 uuid=[b2]
 state=null

}
 globalOptions=com.github.rvesse.airline.TestGalaxyCommandLineParser.GlobalOptions
{
 debug=true
 coordinator=http://localhost:64000

}

}

$ galaxy --debug reset-to-actual -u b2
com.github.rvesse.airline.TestGalaxyCommandLineParser.ResetToActualCommand
{
 slotFilter=com.github.rvesse.airline.TestGalaxyCommandLineParser.SlotFilter
{
 binary=null
 config=null
 host=null
 ip=null
 uuid=[b2]
 state=null

}
 globalOptions=com.github.rvesse.airline.TestGalaxyCommandLineParser.GlobalOptions
{
 debug=true
 coordinator=http://localhost:64000

}

}

$ galaxy --debug ssh
com.github.rvesse.airline.TestGalaxyCommandLineParser.SshCommand
{
 slotFilter=com.github.rvesse.airline.TestGalaxyCommandLineParser.SlotFilter
{
 binary=null
 config=null
 host=null
 ip=null
 uuid=null
 state=null

}
 command=null

}

$ galaxy --debug ssh -u b2 --state r tail -F var/log/launcher.log
com.github.rvesse.airline.TestGalaxyCommandLineParser.SshCommand
{
 slotFilter=com.github.rvesse.airline.TestGalaxyCommandLineParser.SlotFilter
{
 binary=null
 config=null
 host=null
 ip=null
 uuid=[b2]
 state=[r]

}
 command=tail -F var/log/launcher.log

}

$ galaxy --debug agent
com.github.rvesse.airline.TestGalaxyCommandLineParser.AgentShowCommand
{
 agentFilter=com.github.rvesse.airline.TestGalaxyCommandLineParser.AgentFilter
{
 host=[]
 ip=[]
 uuid=[]
 state=[]

}
 globalOptions=com.github.rvesse.airline.TestGalaxyCommandLineParser.GlobalOptions
{
 debug=true
 coordinator=http://localhost:64000

}

}

$ galaxy --debug agent show
com.github.rvesse.airline.TestGalaxyCommandLineParser.AgentShowCommand
{
 agentFilter=com.github.rvesse.airline.TestGalaxyCommandLineParser.AgentFilter
{
 host=[]
 ip=[]
 uuid=[]
 state=[]

}
 globalOptions=com.github.rvesse.airline.TestGalaxyCommandLineParser.GlobalOptions
{
 debug=true
 coordinator=http://localhost:64000

}

}

$ galaxy --debug agent add --count 4 t1.micro
com.github.rvesse.airline.TestGalaxyCommandLineParser.AgentAddCommand
{
 count=4
 availabilityZone=null
 instanceType=t1.micro
 globalOptions=com.github.rvesse.airline.TestGalaxyCommandLineParser.GlobalOptions
{
 debug=true
 coordinator=http://localhost:64000

}

}

NAME
        git remove - Remove file contents to the index

SYNOPSIS
        git [ -v ] remove [ -i ] [--] [ <patterns>... ]

OPTIONS
        -i


        -v
            Verbose mode

        --
            This option can be used to separate command-line options from the
            list of arguments (useful when arguments might be mistaken for
            command-line options)

        <patterns>
            Patterns of files to be added

DISCUSSION
        More details about how this removes files from the index.

EXAMPLES
        $ git remove -i myfile.java

            This is a usage example


$ git add -p file
Add

$ git remote add origin git@github.com:airlift/airline.git
RemoteAdd

$ git -v remote show origin
RemoteShow

$ git remote
RemoteShow

$ git remote origin
RemoteShow

$ git remote -n origin
RemoteShow

$ git -v remote origin
RemoteShow

$ git 
usage: git [ -v ] <command> [ <args> ]

Commands are:
    add      Add file contents to the index
    help     Display help information
    remote   Manage set of tracked repositories

See 'git help <command>' for more information on a specific command.

$ git help
usage: git [ -v ] <command> [ <args> ]

Commands are:
    add      Add file contents to the index
    help     Display help information
    remote   Manage set of tracked repositories

See 'git help <command>' for more information on a specific command.

$ git help git
NAME
        git - the stupid content tracker

SYNOPSIS
        git [ -v ] <command> [ <args> ]

OPTIONS
        -v
            Verbose mode

COMMANDS
        add
            Add file contents to the index

        help
            Display help information

        remote add
            Adds a remote

        remote show
            Gives some information about the remote <name>


$ git help add
NAME
        git add - Add file contents to the index

SYNOPSIS
        git [ -v ] add [ -i ] [--] [ <patterns>... ]

OPTIONS
        -i
            Add modified contents interactively.

        -v
            Verbose mode

        --
            This option can be used to separate command-line options from the
            list of arguments (useful when arguments might be mistaken for
            command-line options)

        <patterns>
            Patterns of files to be added


$ git help remote
NAME
        git remote - Manage set of tracked repositories

SYNOPSIS
        git [ -v ] remote { add | show* } [--] [cmd-options] <cmd-args>

        Where command-specific options [cmd-options] are:
            add: [ -t <branch> ]
            show: [ -n ]

        Where command-specific arguments <cmd-args> are:
            add: [ <name> <url>... ]
            show: [ <remote> ]

        Where * indicates the default command(s)
        See 'git help remote <command>' for more information on a specific command.
OPTIONS
        -v
            Verbose mode


$ git help remote show
NAME
        git remote show - Gives some information about the remote <name>

SYNOPSIS
        git [ -v ] remote show [ -n ] [--] [ <remote> ]

OPTIONS
        -n
            Do not query remote heads

        -v
            Verbose mode

        --
            This option can be used to separate command-line options from the
            list of arguments (useful when arguments might be mistaken for
            command-line options)

        <remote>
            Remote to show


[ERROR] Tests run: 509, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 22.338 s <<< FAILURE! - in TestSuite
[ERROR] path_restriction_readable_03(com.github.rvesse.airline.restrictions.TestPathRestriction)  Time elapsed: 0.019 s  <<< FAILURE!
org.testng.TestException: 

Method TestPathRestriction.path_restriction_readable_03()[pri:0, instance:com.github.rvesse.airline.restrictions.TestPathRestriction@176555c] should have thrown an exception of class com.github.rvesse.airline.parser.errors.ParseRestrictionViolatedException

[ERROR] path_restriction_writeable_03(com.github.rvesse.airline.restrictions.TestPathRestriction)  Time elapsed: 0.003 s  <<< FAILURE!
org.testng.TestException: 

Method TestPathRestriction.path_restriction_writeable_03()[pri:0, instance:com.github.rvesse.airline.restrictions.TestPathRestriction@176555c] should have thrown an exception of class com.github.rvesse.airline.parser.errors.ParseRestrictionViolatedException

[INFO] 
[INFO] Results:
[INFO] 
[ERROR] Failures: 
[ERROR]   TestPathRestriction.path_restriction_readable_03 » Test 
Method TestPathRestri...
[ERROR]   TestPathRestriction.path_restriction_writeable_03 » Test 
Method TestPathRestr...
[INFO] 
[ERROR] Tests run: 509, Failures: 2, Errors: 0, Skipped: 0
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] 
[INFO] Airline - Parent ................................... SUCCESS [  2.346 s]
[INFO] Airline - IO Library ............................... SUCCESS [  5.956 s]
[INFO] Airline - Library .................................. FAILURE [ 24.353 s]
[INFO] Airline - Help - Parent ............................ SKIPPED
[INFO] Airline - Help - Bash .............................. SKIPPED
[INFO] Airline - Examples ................................. SKIPPED
[INFO] Airline - Help - Man Page (Troff) .................. SKIPPED
[INFO] Airline - Help - HTML .............................. SKIPPED
[INFO] Airline - Help - Markdown .......................... SKIPPED
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 32.988 s
[INFO] Finished at: 2018-08-31T16:04:31+02:00
[INFO] Final Memory: 24M/384M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.22.0:test (default-test) on project airline: There are test failures.
[ERROR] 
[ERROR] Please refer to /root/workspace/rvesse/airline/423028380/airline-core/target/surefire-reports for the individual test results.
[ERROR] Please refer to dump files (if any exist) [date]-jvmRun[N].dump, [date].dumpstream and [date]-jvmRun[N].dumpstream.
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
[ERROR] 
[ERROR] After correcting the problems, you can resume the build with the command
[ERROR]   mvn <goals> -rf :airline
