[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for fr.inria.gforge.spoon:spoon-core:jar:6.3.0-SNAPSHOT
[WARNING] 'build.plugins.plugin.version' for org.pitest:pitest-maven is missing. @ line 520, column 15
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
[INFO] Inspecting build with total of 1 modules...
[INFO] Installing Nexus Staging features:
[INFO]   ... total of 1 executions of maven-deploy-plugin replaced with nexus-staging-maven-plugin
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Spoon Core 6.3.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-enforcer-plugin:1.0:enforce (enforce-maven) @ spoon-core ---
[INFO] Skipping Rule Enforcement.
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.1:prepare-agent (default) @ spoon-core ---
[INFO] argLine set to -javaagent:/root/./workspace/INRIA/spoon/397241434/.m2/org/jacoco/org.jacoco.agent/0.8.1/org.jacoco.agent-0.8.1-runtime.jar=destfile=/root/workspace/INRIA/spoon/397241434/target/jacoco.exec
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ spoon-core ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 3 resources
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:compile (default-compile) @ spoon-core ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ spoon-core ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 175 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:testCompile (default-testCompile) @ spoon-core ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.21.0:test (default-test) @ spoon-core ---
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.21.0/surefire-junit4-2.21.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.21.0/surefire-junit4-2.21.0.pom (4 KB at 10.4 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.21.0/surefire-providers-2.21.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.21.0/surefire-providers-2.21.0.pom (3 KB at 136.3 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.21.0/surefire-junit4-2.21.0.jar
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.21.0/surefire-junit4-2.21.0.jar (83 KB at 1878.6 KB/sec)
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running spoon.test.api.FileSystemFolderTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.66 s - in spoon.test.api.FileSystemFolderTest
[INFO] Running spoon.test.api.NoClasspathTest
[ERROR] Tests run: 5, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 1.346 s <<< FAILURE! - in spoon.test.api.NoClasspathTest
[ERROR] test(spoon.test.api.NoClasspathTest)  Time elapsed: 0.086 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<x.[]first().second().thi...> but was:<x.[method()x.]first().second().thi...>
	at spoon.test.api.NoClasspathTest.test(NoClasspathTest.java:87)

[INFO] Running spoon.test.api.MetamodelTest
[ERROR] Tests run: 14, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 8.931 s <<< FAILURE! - in spoon.test.api.MetamodelTest
[ERROR] testRoleOnField(spoon.test.api.MetamodelTest)  Time elapsed: 2.082 s  <<< FAILURE!
java.lang.AssertionError
	at spoon.test.api.MetamodelTest.testRoleOnField(MetamodelTest.java:183)

[INFO] Running spoon.test.api.APITest
./target/nooutput_e9026c95-27fa-4917-a4fc-112419e93e33
[INFO] Tests run: 21, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 12.764 s - in spoon.test.api.APITest
[INFO] Running spoon.test.exceptions.ExceptionTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.388 s - in spoon.test.exceptions.ExceptionTest
[INFO] Running spoon.test.module.TestModule
[WARNING] Tests run: 8, Failures: 0, Errors: 0, Skipped: 2, Time elapsed: 0.112 s - in spoon.test.module.TestModule
[INFO] Running spoon.test.imports.ImportScannerTest
2018-06-27 10:45:53,923 WARN spoon.Launcher - ImportScannerTest: Import scanner imports 579 unused imports and misses 5 imports
[ERROR] Tests run: 6, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 29.39 s <<< FAILURE! - in spoon.test.imports.ImportScannerTest
[ERROR] testImportOnSpoon(spoon.test.imports.ImportScannerTest)  Time elapsed: 28.905 s  <<< FAILURE!
java.lang.AssertionError: Import scanner missed 5 imports expected:<0> but was:<5>
	at spoon.test.imports.ImportScannerTest.testImportOnSpoon(ImportScannerTest.java:158)

[INFO] Running spoon.test.imports.ImportAndExtendWithPackageNameTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.056 s - in spoon.test.imports.ImportAndExtendWithPackageNameTest
[INFO] Running spoon.test.imports.ImportTest
[ERROR] Tests run: 44, Failures: 9, Errors: 0, Skipped: 0, Time elapsed: 10.095 s <<< FAILURE! - in spoon.test.imports.ImportTest
[ERROR] testAccessType(spoon.test.imports.ImportTest)  Time elapsed: 0.397 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]spoon.test.imports.t...> but was:<[ChildClass.InnerClassProtected]spoon.test.imports.t...>
	at spoon.test.imports.ImportTest.testAccessType(ImportTest.java:482)

[ERROR] testNewInnerClassDefinesInItsClassAndSuperClass(spoon.test.imports.ImportTest)  Time elapsed: 0.191 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]public class SubClas...> but was:<[new spoon.test.imports.testclasses.SubClass.Item("")]public class SubClas...>
	at spoon.test.imports.ImportTest.testNewInnerClassDefinesInItsClassAndSuperClass(ImportTest.java:204)

[ERROR] testImportOfAnInnerClassInASuperClassPackageFullQualified(spoon.test.imports.ImportTest)  Time elapsed: 0.205 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<[]spoon.test.imports.t...> but was:<[package spoon.test.imports.testclasses.internal;


class SuperClass {
    protected class InnerClassProtected {}

    interface PackageProtectedInterface {
        interface NestedOfPackageProtectedInterface {}

        public interface NestedPublicInterface {}
    }

    protected interface ProtectedInterface {
        interface NestedOfProtectedInterface {}

        public interface NestedPublicInterface {}
    }

    public interface PublicInterface {
        interface NestedOfPublicInterface {}

        public interface NestedPublicInterface {}
    }
}

]spoon.test.imports.t...>
	at spoon.test.imports.ImportTest.testImportOfAnInnerClassInASuperClassPackageFullQualified(ImportTest.java:131)

[ERROR] testImportOfAnInnerClassInASuperClassPackageAutoImport(spoon.test.imports.ImportTest)  Time elapsed: 0.323 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<[]spoon.test.imports.t...> but was:<[package spoon.test.imports.testclasses.internal;


class SuperClass {
    protected class InnerClassProtected {}

    interface PackageProtectedInterface {
        interface NestedOfPackageProtectedInterface {}

        public interface NestedPublicInterface {}
    }

    protected interface ProtectedInterface {
        interface NestedOfProtectedInterface {}

        public interface NestedPublicInterface {}
    }

    public interface PublicInterface {
        interface NestedOfPublicInterface {}

        public interface NestedPublicInterface {}
    }
}

]spoon.test.imports.t...>
	at spoon.test.imports.ImportTest.testImportOfAnInnerClassInASuperClassPackageAutoImport(ImportTest.java:98)

[ERROR] testNestedAccessPathWithTypedParameter(spoon.test.imports.ImportTest)  Time elapsed: 0.159 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<p[]rivate class Wrapped...> but was:<p[ackage spoon.test.imports.testclasses2;


abstract class AbstractMapBasedMultimap<K, V> {
    private class WrappedCollection {
        class WrappedIterator {}
    }

    private class WrappedList extends spoon.test.imports.testclasses2.AbstractMapBasedMultimap<K, V>.WrappedCollection {
        private class WrappedListIterator extends spoon.test.imports.testclasses2.AbstractMapBasedMultimap<K, V>.WrappedCollection.WrappedIterator {}
    }

    private class OtherWrappedList extends spoon.test.imports.testclasses2.AbstractMapBasedMultimap<K, V>.WrappedCollection {
        private class WrappedListIterator extends spoon.test.imports.testclasses2.AbstractMapBasedMultimap<K, V>.OtherWrappedList.WrappedIterator {}

        class WrappedIterator {}
    }
}

p]rivate class Wrapped...>
	at spoon.test.imports.ImportTest.testNestedAccessPathWithTypedParameter(ImportTest.java:585)

[ERROR] testNestedAccessPathWithTypedParameterWithImports(spoon.test.imports.ImportTest)  Time elapsed: 0.187 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<p[]rivate class Wrapped...> but was:<p[ackage spoon.test.imports.testclasses2;


abstract class AbstractMapBasedMultimap<K, V> {
    private class WrappedCollection {
        class WrappedIterator {}
    }

    private class WrappedList extends AbstractMapBasedMultimap<K, V>.WrappedCollection {
        private class WrappedListIterator extends AbstractMapBasedMultimap<K, V>.WrappedCollection.WrappedIterator {}
    }

    private class OtherWrappedList extends AbstractMapBasedMultimap<K, V>.WrappedCollection {
        private class WrappedListIterator extends AbstractMapBasedMultimap<K, V>.OtherWrappedList.WrappedIterator {}

        class WrappedIterator {}
    }
}

p]rivate class Wrapped...>
	at spoon.test.imports.ImportTest.testNestedAccessPathWithTypedParameterWithImports(ImportTest.java:609)

[ERROR] testNotImportExecutableType(spoon.test.imports.ImportTest)  Time elapsed: 0.087 s  <<< FAILURE!
java.lang.AssertionError: expected:<[java.io.File, spoon.test.imports.testclasses.internal3.Foo]> but was:<[spoon.test.imports.testclasses.internal3.Foojava.io.File, spoon.test.imports.testclasses.internal3.Foo]>
	at spoon.test.imports.ImportTest.testNotImportExecutableType(ImportTest.java:381)

[ERROR] testImportOfAnInnerClassInASuperClassAvailableInLibrary(spoon.test.imports.ImportTest)  Time elapsed: 0.083 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]org.yaml.snakeyaml.r...> but was:<[visibility.YamlRepresenter.RepresentConfigurationSection]org.yaml.snakeyaml.r...>
	at spoon.test.imports.ImportTest.testImportOfAnInnerClassInASuperClassAvailableInLibrary(ImportTest.java:161)

[ERROR] testStaticImportForInvocationInNoClasspath(spoon.test.imports.ImportTest)  Time elapsed: 0.06 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]pack1.A> but was:<[A]pack1.A>
	at spoon.test.imports.ImportTest.assertCorrectInvocation(ImportTest.java:702)
	at spoon.test.imports.ImportTest.testStaticImportForInvocationInNoClasspath(ImportTest.java:303)

[INFO] Running spoon.test.prettyprinter.LinesTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.604 s - in spoon.test.prettyprinter.LinesTest
[INFO] Running spoon.test.prettyprinter.QualifiedThisRefTest
[ERROR] Tests run: 3, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.457 s <<< FAILURE! - in spoon.test.prettyprinter.QualifiedThisRefTest
[ERROR] testCloneThisAccess(spoon.test.prettyprinter.QualifiedThisRefTest)  Time elapsed: 0.154 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<notify()[]> but was:<notify()[notify()]>
	at spoon.test.prettyprinter.QualifiedThisRefTest.testCloneThisAccess(QualifiedThisRefTest.java:84)

[INFO] Running spoon.test.prettyprinter.DefaultPrettyPrinterTest
[ERROR] Tests run: 11, Failures: 4, Errors: 2, Skipped: 0, Time elapsed: 1.19 s <<< FAILURE! - in spoon.test.prettyprinter.DefaultPrettyPrinterTest
[ERROR] testPrintAClassWithImports(spoon.test.prettyprinter.DefaultPrettyPrinterTest)  Time elapsed: 0.156 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<...
        return new [ArrayList<>();
    }

    public List<? extends ArrayList> aMethodWithGeneric() {
        return new ]ArrayList<>();
    }...> but was:<...
        return new [java.util.ArrayList<>();
    }

    public List<? extends ArrayList> aMethodWithGeneric() {
        return new java.util.]ArrayList<>();
    }...>
	at spoon.test.prettyprinter.DefaultPrettyPrinterTest.testPrintAClassWithImports(DefaultPrettyPrinterTest.java:100)

[ERROR] testPrintAMethodWithGeneric(spoon.test.prettyprinter.DefaultPrettyPrinterTest)  Time elapsed: 0.134 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<...() {
    return new []ArrayList<>();
}> but was:<...() {
    return new [java.util.]ArrayList<>();
}>
	at spoon.test.prettyprinter.DefaultPrettyPrinterTest.testPrintAMethodWithGeneric(DefaultPrettyPrinterTest.java:151)

[ERROR] testTernaryParenthesesOnLocalVariable(spoon.test.prettyprinter.DefaultPrettyPrinterTest)  Time elapsed: 0.223 s  <<< ERROR!
spoon.compiler.ModelBuildingException: 
snippet compilation error while compiling: class Wrapper {
    static void wrap() throws java.lang.Throwable {
        final int foo = (new Object() instanceof Object ? new Object().equals(null) : new Object().equals(new Object())) ? 0 : new Object().hashCode();;
    }
}final int foo = ((new java.lang.Object()) instanceof java.lang.Object ? new java.lang.Object().equals(null) : new java.lang.Object().equals(new java.lang.Object())) ? 0 : new java.lang.Object().hashCode()class Wrapper {
    static void wrap() throws java.lang.Throwable {
        class Wrapper {
            static void wrap() throws java.lang.Throwable {
                final int foo = (new Object() instanceof Object ? new Object().equals(null) : new Object().equals(new Object())) ? 0 : new Object().hashCode();;
            }
        }final int foo = ((new java.lang.Object()) instanceof java.lang.Object ? new java.lang.Object().equals(null) : new java.lang.Object().equals(new java.lang.Object())) ? 0 : new java.lang.Object().hashCode();
    }
}
	at spoon.test.prettyprinter.DefaultPrettyPrinterTest.testTernaryParenthesesOnLocalVariable(DefaultPrettyPrinterTest.java:291)
Caused by: java.lang.NullPointerException
	at spoon.test.prettyprinter.DefaultPrettyPrinterTest.testTernaryParenthesesOnLocalVariable(DefaultPrettyPrinterTest.java:291)

[ERROR] testPrintAMethodWithImports(spoon.test.prettyprinter.DefaultPrettyPrinterTest)  Time elapsed: 0.174 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<...() {
    return new []ArrayList<>();
}> but was:<...() {
    return new [java.util.]ArrayList<>();
}>
	at spoon.test.prettyprinter.DefaultPrettyPrinterTest.testPrintAMethodWithImports(DefaultPrettyPrinterTest.java:126)

[ERROR] importsFromMultipleTypesSupported(spoon.test.prettyprinter.DefaultPrettyPrinterTest)  Time elapsed: 0.082 s  <<< ERROR!
java.lang.NullPointerException
	at spoon.test.prettyprinter.DefaultPrettyPrinterTest.importsFromMultipleTypesSupported(DefaultPrettyPrinterTest.java:275)

[ERROR] autoImportUsesFullyQualifiedNameWhenImportedNameAlreadyPresent(spoon.test.prettyprinter.DefaultPrettyPrinterTest)  Time elapsed: 0.083 s  <<< FAILURE!
org.junit.ComparisonFailure: 
We use FQN for E1 expected:<... {
    localField = [spoon.test.prettyprinter.testclasses.sub.TypeIdentifierCollision.ENUM.]E1.ordinal();
}> but was:<... {
    localField = []E1.ordinal();
}>
	at spoon.test.prettyprinter.DefaultPrettyPrinterTest.autoImportUsesFullyQualifiedNameWhenImportedNameAlreadyPresent(DefaultPrettyPrinterTest.java:181)

[INFO] Running spoon.test.prettyprinter.PrinterTest
[ERROR] Tests run: 9, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 3.787 s <<< FAILURE! - in spoon.test.prettyprinter.PrinterTest
[ERROR] testChangeAutoImportModeWorks(spoon.test.prettyprinter.PrinterTest)  Time elapsed: 0.08 s  <<< FAILURE!
java.lang.AssertionError: 
The result should now contain imports: package spoon.test.prettyprinter.testclasses;


public class AClass {
    public java.util.List<?> aMethod() {
        return new java.util.ArrayList<>();
    }

    public java.util.List<? extends java.util.ArrayList> aMethodWithGeneric() {
        return new java.util.ArrayList<>();
    }
}


	at spoon.test.prettyprinter.PrinterTest.testChangeAutoImportModeWorks(PrinterTest.java:74)

[INFO] Running spoon.test.visitor.AssignmentsEqualsTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.057 s - in spoon.test.visitor.AssignmentsEqualsTest
[INFO] Running spoon.test.visitor.VisitorTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.057 s - in spoon.test.visitor.VisitorTest
[INFO] Running spoon.test.loop.LoopTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.109 s - in spoon.test.loop.LoopTest
[INFO] Running spoon.test.intercession.insertBefore.InsertMethodsTest
[ERROR] Tests run: 9, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.976 s <<< FAILURE! - in spoon.test.intercession.insertBefore.InsertMethodsTest
[ERROR] testInsertAfter(spoon.test.intercession.insertBefore.InsertMethodsTest)  Time elapsed: 0.1 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<[]int z = x + y> but was:<[class Wrapper {
    static void wrap() throws java.lang.Throwable {
        class X {public void foo() {  int x=0;  int y=0;  int z=x+y; }};;
    }
}]int z = x + y>
	at spoon.test.intercession.insertBefore.InsertMethodsTest.testInsertAfter(InsertMethodsTest.java:80)

[ERROR] testInsertBefore(spoon.test.intercession.insertBefore.InsertMethodsTest)  Time elapsed: 0.101 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<[]int z = x + y> but was:<[class Wrapper {
    static void wrap() throws java.lang.Throwable {
        class X {public void foo() {  int x=0;  int y=0;  int z=x+y; }};;
    }
}]int z = x + y>
	at spoon.test.intercession.insertBefore.InsertMethodsTest.testInsertBefore(InsertMethodsTest.java:61)

[INFO] Running spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest
[INFO] Tests run: 117, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.507 s - in spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest
[INFO] Running spoon.test.intercession.IntercessionTest
[ERROR] Tests run: 8, Failures: 3, Errors: 0, Skipped: 1, Time elapsed: 4.725 s <<< FAILURE! - in spoon.test.intercession.IntercessionTest
[ERROR] testInsertIfIntercession(spoon.test.intercession.IntercessionTest)  Time elapsed: 0.054 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<[]if (1 == 0)
    retu...> but was:<[class Wrapper {
    static void wrap() throws java.lang.Throwable {
        class X {public int bar() {if (1 == 0)
            return 1;
        else
            return 0;
        }};;
    }
}]if (1 == 0)
    retu...>
	at spoon.test.intercession.IntercessionTest.testInsertIfIntercession(IntercessionTest.java:140)

[ERROR] testInsertAfter(spoon.test.intercession.IntercessionTest)  Time elapsed: 0.049 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<[]int z = x + y> but was:<[class Wrapper {
    static void wrap() throws java.lang.Throwable {
        class X {public void foo() { int x=0; int y=0; int z=x+y;}};;
    }
}]int z = x + y>
	at spoon.test.intercession.IntercessionTest.testInsertAfter(IntercessionTest.java:172)

[ERROR] testEqualConstructor(spoon.test.intercession.IntercessionTest)  Time elapsed: 0.049 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<[]super()> but was:<[class Wrapper {
    static void wrap() throws java.lang.Throwable {
        class X { public X() {} };;
    }
}]super()>
	at spoon.test.intercession.IntercessionTest.testEqualConstructor(IntercessionTest.java:104)

[INFO] Running spoon.test.intercession.RemoveTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.049 s - in spoon.test.intercession.RemoveTest
[INFO] Running spoon.test.variable.AccessTest
[ERROR] Tests run: 8, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.413 s <<< FAILURE! - in spoon.test.variable.AccessTest
[ERROR] testVariableAccessInNoClasspath(spoon.test.variable.AccessTest)  Time elapsed: 0.068 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]java.lang.Class mcla...> but was:<[org.argouml.uml.ui.PropPanelModifiersorg.argouml.uml.ui.behavior.use_cases.UMLUseCaseExtensionPointListModelorg.argouml.uml.ui.behavior.use_cases.UMLUseCaseExtendListModelorg.argouml.uml.ui.behavior.use_cases.UMLUseCaseIncludeListModel]java.lang.Class mcla...>
	at spoon.test.variable.AccessTest.testVariableAccessInNoClasspath(AccessTest.java:198)

[ERROR] testAccessToStringOnPostIncrement(spoon.test.variable.AccessTest)  Time elapsed: 0.052 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<[](i++).toString()> but was:<[class Wrapper {
    static void wrap() throws java.lang.Throwable {
        class X {public void foo() { Integer i = 1; (i++).toString(); int k = 0; k++;}};;
    }
}](i++).toString()>
	at spoon.test.variable.AccessTest.testAccessToStringOnPostIncrement(AccessTest.java:215)

[INFO] Running spoon.test.variable.InferredVariableTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.145 s - in spoon.test.variable.InferredVariableTest
[INFO] Running spoon.test.variable.AccessFullyQualifiedFieldTest
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.931 s - in spoon.test.variable.AccessFullyQualifiedFieldTest
[INFO] Running spoon.test.pkg.PackageTest
[ERROR] Tests run: 12, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.91 s <<< FAILURE! - in spoon.test.pkg.PackageTest
[ERROR] testAddAnnotationToPackage(spoon.test.pkg.PackageTest)  Time elapsed: 0.115 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<@[]GlobalAnnotation> but was:<@[spoon.test.annotation.testclasses.]GlobalAnnotation>
	at spoon.test.pkg.PackageTest.testAddAnnotationToPackage(PackageTest.java:265)

[INFO] Running spoon.test.comment.CommentTest
[ERROR] Tests run: 19, Failures: 8, Errors: 1, Skipped: 0, Time elapsed: 4.382 s <<< FAILURE! - in spoon.test.comment.CommentTest
[ERROR] testJavaDocCommentOnUnix(spoon.test.comment.CommentTest)  Time elapsed: 0.088 s  <<< FAILURE!
java.lang.AssertionError: expected:<-1> but was:<56>
	at spoon.test.comment.CommentTest.testJavaDocComment(CommentTest.java:221)
	at spoon.test.comment.CommentTest.testJavaDocCommentOnUnix(CommentTest.java:129)

[ERROR] testAddCommentsToSnippet(spoon.test.comment.CommentTest)  Time elapsed: 0.001 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<// My comment on my []expression
"Caenorha...> but was:<// My comment on my [statement
System.out.println("Caenorhabditis")// My comment on my ]expression
"Caenorha...>
	at spoon.test.comment.CommentTest.testAddCommentsToSnippet(CommentTest.java:746)

[ERROR] testJavaDocCommentOnMac(spoon.test.comment.CommentTest)  Time elapsed: 0.054 s  <<< FAILURE!
java.lang.AssertionError: expected:<-1> but was:<56>
	at spoon.test.comment.CommentTest.testJavaDocComment(CommentTest.java:221)
	at spoon.test.comment.CommentTest.testJavaDocCommentOnMac(CommentTest.java:151)

[ERROR] testInsertNewComment(spoon.test.comment.CommentTest)  Time elapsed: 0.08 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<...() {
    // comment []local variable
    i...> but was:<...() {
    // comment [empty block
}// comment method
void newMethod() {
    // comment ]local variable
    i...>
	at spoon.test.comment.CommentTest.testInsertNewComment(CommentTest.java:645)

[ERROR] testInLineComment(spoon.test.comment.CommentTest)  Time elapsed: 0.081 s  <<< FAILURE!
java.lang.AssertionError: 
// comment class
// this comment 1 belongs to class too
// this comment 2 belongs to class too
// comment after class
public class InlineComment extends java.util.ArrayList<java.lang.String> {
    // Comment Field
    // comment field 2
    // comment in field
    private int field = 10;// after field


    // comment static block
    static {
        // comment inside static
    }

    // comment constructor
    public InlineComment() {
        // Comment in constructor
    }

    // comment method
    public void m() {
        // comment empty method block
    }

    public void m1() {
        // comment switch
        switch (1) {
            // before first case
            case 0 :
                // comment case 0: empty case
            case 1 :
                // comment case 1
                int i = 0;
            default :
                // comment default
        }
        // comment for
        for (int i = 0; i < 10; i++) {
            // comment for block
        }
        // comment if
        if ((1 % 2) == 0) {
            // comment unary operator
            (field)++;
        }
        // comment constructor call
        new spoon.test.comment.testclasses.InlineComment();
        // comment invocation
        this.m();
        // comment local variable
        int i = 0;
        // comment multi assignments
        int j = 2;
        // comment dowhile
        do {
            // comment in do while
            i++;
            // comment end do while
        } while (i < 10 );
        // comment try
        try {
            // comment in try
            i++;
        }// between
        // try/catch
         catch (java.lang.Exception e) {
            // comment in catch
        }
        // comment synchronized
        synchronized(this) {
            // comment in synchronized
        }
        java.lang.Double dou = (i == 1// comment after condition CtConditional
        ) ? // comment before then CtConditional
        null// comment after then CtConditional
         : // comment before else CtConditional
        new java.lang.Double((j / ((double) (i - 1))));// comment after else CtConditional

        int[] arr = // last comment at the end of array
        new int[]{ // comment before array value
        1// comment after array value
        , 2, 3 }// last comment at the end of array
        ;
        java.lang.String m = "" + (""// comment multi line string
         + "");// after statement

        boolean c = (i == 1) ? // comment before then boolean CtConditional
        i == 1// comment after then boolean CtConditional
         : i == 2;
        // comment return
        return;
    }

    // comment before type
    // comment after parameter
    // comment before throws
    // comment before exception 1
    // comment before exception 2
    // comment before block
    public void m2(// comment before name
    // comment before parameters
    // comment before type parameter
    // comment before name parameter
    int i) throws java.lang.Error, java.lang.Exception {
    }

    public void m3() {
        if (true) {
            // comment empty if
        }else // comment before else
        {
            // comment empty else
        }
        // comment if without block
        // comment then if without block
        if (true)
            m3();
        else// comment else without block
        // comment else if without block

            m3();

    }
}// Comment Field:// comment class
// this comment 1 belongs to class too
// this comment 2 belongs to class too
// comment after class
public class InlineComment extends java.util.ArrayList<java.lang.String> {
    // Comment Field
    // comment field 2
    // comment in field
    private int field = 10;// after field


    // comment static block
    static {
        // comment inside static
    }

    // comment constructor
    public InlineComment() {
        // Comment in constructor
    }

    // comment method
    public void m() {
        // comment empty method block
    }

    public void m1() {
        // comment switch
        switch (1) {
            // before first case
            case 0 :
                // comment case 0: empty case
            case 1 :
                // comment case 1
                int i = 0;
            default :
                // comment default
        }
        // comment for
        for (int i = 0; i < 10; i++) {
            // comment for block
        }
        // comment if
        if ((1 % 2) == 0) {
            // comment unary operator
            (field)++;
        }
        // comment constructor call
        new spoon.test.comment.testclasses.InlineComment();
        // comment invocation
        this.m();
        // comment local variable
        int i = 0;
        // comment multi assignments
        int j = 2;
        // comment dowhile
        do {
            // comment in do while
            i++;
            // comment end do while
        } while (i < 10 );
        // comment try
        try {
            // comment in try
            i++;
        }// between
        // try/catch
         catch (java.lang.Exception e) {
            // comment in catch
        }
        // comment synchronized
        synchronized(this) {
            // comment in synchronized
        }
        java.lang.Double dou = (i == 1// comment after condition CtConditional
        ) ? // comment before then CtConditional
        null// comment after then CtConditional
         : // comment before else CtConditional
        new java.lang.Double((j / ((double) (i - 1))));// comment after else CtConditional

        int[] arr = // last comment at the end of array
        new int[]{ // comment before array value
        1// comment after array value
        , 2, 3 }// last comment at the end of array
        ;
        java.lang.String m = "" + (""// comment multi line string
         + "");// after statement

        boolean c = (i == 1) ? // comment before then boolean CtConditional
        i == 1// comment after then boolean CtConditional
         : i == 2;
        // comment return
        return;
    }

    // comment before type
    // comment after parameter
    // comment before throws
    // comment before exception 1
    // comment before exception 2
    // comment before block
    public void m2(// comment before name
    // comment before parameters
    // comment before type parameter
    // comment before name parameter
    int i) throws java.lang.Error, java.lang.Exception {
    }

    public void m3() {
        if (true) {
            // comment empty if
        }else // comment before else
        {
            // comment empty else
        }
        // comment if without block
        // comment then if without block
        if (true)
            m3();
        else// comment else without block
        // comment else if without block

            m3();

    }
}// Comment Field// Comment Field
// comment field 2
// comment in field
private int field = 10;// after field
 is not printed
	at spoon.test.comment.CommentTest.testInLineComment(CommentTest.java:273)

[ERROR] testBlockComment(spoon.test.comment.CommentTest)  Time elapsed: 0.082 s  <<< FAILURE!
java.lang.AssertionError: 
/* comment class */
/**
 * JavaDoc class
 */
/* comment after class */
public class BlockComment {
    /* Comment Field */
    /* comment in field */
    private int field = 10;

    /* comment static block */
    static {
        /* comment inside static */
    }

    /* comment constructor */
    public BlockComment() {
        /* Comment in constructor */
    }

    /* comment method */
    public void m() {
        /* comment empty method block */
    }

    public void m1() {
        /* comment switch */
        switch (1) {
            /* before first case */
            case 0 :
                /* comment case 0: empty case */
            case 1 :
                /* comment case 1 */
                int i = 0;
            default :
                /* comment default */
        }
        /* comment for */
        for (int i = 0; i < 10; i++) {
            /* comment for block */
        }
        /* comment if */
        if ((1 % 2) == 0) {
            /* comment unary operator */
            (field)++;
        }
        /* comment constructor call */
        new spoon.test.comment.testclasses.BlockComment();
        /* comment invocation */
        this.m();
        /* comment local variable */
        int i = 0;
        /* comment multi assignments */
        int j = 2;
        /* comment dowhile */
        do {
            /* comment in do while */
            i++;
            /* comment end do while */
        } while (i < 10 );
        /* comment try */
        try {
            /* comment in try */
            i++;
        } catch (java.lang.Exception e) {
            /* comment in catch */
        }
        /* comment synchronized */
        synchronized(this) {
            /* comment in synchronized */
        }
        /* comment return */
        return;
    }

    /* comment before type */
    /* comment after parameter */
    /* comment before throws */
    /* comment before exception 1 */
    /* comment before exception 2 */
    /* comment before block */
    public void m2(/* comment before name */
    /* comment before parameters */
    /* comment before type parameter */
    /* comment before name parameter */
    int i) throws java.lang.Error, java.lang.Exception {
    }

    public void m3() {
        if (true) {
            /* comment empty if */
        }else /* comment before else */
        {
            /* comment empty else */
        }
        /* comment if without block */
        /* comment then if without block */
        if (true)
            m3();
        else/* comment else without block */
        /* comment else if without block */

            m3();

    }
}/* Comment Field */:/* comment class */
/**
 * JavaDoc class
 */
/* comment after class */
public class BlockComment {
    /* Comment Field */
    /* comment in field */
    private int field = 10;

    /* comment static block */
    static {
        /* comment inside static */
    }

    /* comment constructor */
    public BlockComment() {
        /* Comment in constructor */
    }

    /* comment method */
    public void m() {
        /* comment empty method block */
    }

    public void m1() {
        /* comment switch */
        switch (1) {
            /* before first case */
            case 0 :
                /* comment case 0: empty case */
            case 1 :
                /* comment case 1 */
                int i = 0;
            default :
                /* comment default */
        }
        /* comment for */
        for (int i = 0; i < 10; i++) {
            /* comment for block */
        }
        /* comment if */
        if ((1 % 2) == 0) {
            /* comment unary operator */
            (field)++;
        }
        /* comment constructor call */
        new spoon.test.comment.testclasses.BlockComment();
        /* comment invocation */
        this.m();
        /* comment local variable */
        int i = 0;
        /* comment multi assignments */
        int j = 2;
        /* comment dowhile */
        do {
            /* comment in do while */
            i++;
            /* comment end do while */
        } while (i < 10 );
        /* comment try */
        try {
            /* comment in try */
            i++;
        } catch (java.lang.Exception e) {
            /* comment in catch */
        }
        /* comment synchronized */
        synchronized(this) {
            /* comment in synchronized */
        }
        /* comment return */
        return;
    }

    /* comment before type */
    /* comment after parameter */
    /* comment before throws */
    /* comment before exception 1 */
    /* comment before exception 2 */
    /* comment before block */
    public void m2(/* comment before name */
    /* comment before parameters */
    /* comment before type parameter */
    /* comment before name parameter */
    int i) throws java.lang.Error, java.lang.Exception {
    }

    public void m3() {
        if (true) {
            /* comment empty if */
        }else /* comment before else */
        {
            /* comment empty else */
        }
        /* comment if without block */
        /* comment then if without block */
        if (true)
            m3();
        else/* comment else without block */
        /* comment else if without block */

            m3();

    }
}/* Comment Field *//* Comment Field */
/* comment in field */
private int field = 10; is not printed
	at spoon.test.comment.CommentTest.testBlockComment(CommentTest.java:472)

[ERROR] testCodeFactory(spoon.test.comment.CommentTest)  Time elapsed: 0.079 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<// comment[]> but was:<// comment[// comment]>
	at spoon.test.comment.CommentTest.testCodeFactory(CommentTest.java:679)

[ERROR] testCoreFactory(spoon.test.comment.CommentTest)  Time elapsed: 0.078 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:</* []comment */> but was:</* [ *//* ]comment */>
	at spoon.test.comment.CommentTest.testCoreFactory(CommentTest.java:660)

[ERROR] testDocumentationContract(spoon.test.comment.CommentTest)  Time elapsed: 3.133 s  <<< ERROR!
spoon.compiler.ModelBuildingException: 
snippet compilation error while compiling: class Wrapper {
    static void wrap() throws java.lang.Throwable {

            int[] array = new int[10];
            System.out.println(
            array[0] // <-- array read
            );
        ;
    }
}class Wrapper {
    static void wrap() throws java.lang.Throwable {

            Object[] array = new Object[10];
            // array write
            array[0] = "new value";
        ;
    }
}
	at spoon.test.comment.CommentTest.lambda$testDocumentationContract$0(CommentTest.java:806)
	at spoon.test.comment.CommentTest.testDocumentationContract(CommentTest.java:765)
Caused by: spoon.compiler.ModelBuildingException: The type Wrapper is already defined
	at spoon.test.comment.CommentTest.lambda$testDocumentationContract$0(CommentTest.java:806)
	at spoon.test.comment.CommentTest.testDocumentationContract(CommentTest.java:765)

[INFO] Running spoon.test.annotation.AnnotationTest
[ERROR] Tests run: 52, Failures: 7, Errors: 0, Skipped: 0, Time elapsed: 2.975 s <<< FAILURE! - in spoon.test.annotation.AnnotationTest
[ERROR] testModelBuildingAnnotationBoundUsage(spoon.test.annotation.AnnotationTest)  Time elapsed: 0.051 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]8> but was:<[10]8>
	at spoon.test.annotation.AnnotationTest.testModelBuildingAnnotationBoundUsage(AnnotationTest.java:175)

[ERROR] testAnnotationWithDefaultArrayValue(spoon.test.annotation.AnnotationTest)  Time elapsed: 0.05 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...alue() default {  };[]> but was:<...alue() default {  };[java.lang.Class<?>[] value() default {  };]>
	at spoon.test.annotation.AnnotationTest.testAnnotationWithDefaultArrayValue(AnnotationTest.java:429)

[ERROR] testUsageOfTypeAnnotationWithGenericTypesInStatements(spoon.test.annotation.AnnotationTest)  Time elapsed: 0.065 s  <<< FAILURE!
org.junit.ComparisonFailure: 
Type annotation on generic parameter declared in the method expected:<[]java.util.List<@spoo...> but was:<[@spoon.test.annotation.testclasses.TypeAnnotation
T]java.util.List<@spoo...>
	at spoon.test.annotation.AnnotationTest.testUsageOfTypeAnnotationWithGenericTypesInStatements(AnnotationTest.java:696)

[ERROR] testFieldAndMethodInAnnotation(spoon.test.annotation.AnnotationTest)  Time elapsed: 0.048 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...va.lang.String value[]() default spoon.tes...> but was:<...va.lang.String value[ = "";java.lang.String value]() default spoon.tes...>
	at spoon.test.annotation.AnnotationTest.testFieldAndMethodInAnnotation(AnnotationTest.java:1003)

[ERROR] testUsageOfTypeAnnotationWithGenericTypesInClassDeclaration(spoon.test.annotation.AnnotationTest)  Time elapsed: 0.068 s  <<< FAILURE!
org.junit.ComparisonFailure: 
Second generic type must have type annotation expected:<...sses.TypeAnnotation
[]K> but was:<...sses.TypeAnnotation
[T@spoon.test.annotation.testclasses.TypeAnnotation
]K>
	at spoon.test.annotation.AnnotationTest.testUsageOfTypeAnnotationWithGenericTypesInClassDeclaration(AnnotationTest.java:669)

[ERROR] testUsageOfTypeAnnotationInExtendsImplementsOfAClass(spoon.test.annotation.AnnotationTest)  Time elapsed: 0.062 s  <<< FAILURE!
org.junit.ComparisonFailure: 
Extends with an type annotation must be well printed expected:<...sses.TypeAnnotation
[]BasicAnnotation> but was:<...sses.TypeAnnotation
[AnnotArrayInnerClassspoon.test.annotation.testclasses.@spoon.test.annotation.testclasses.TypeAnnotation
]BasicAnnotation>
	at spoon.test.annotation.AnnotationTest.testUsageOfTypeAnnotationInExtendsImplementsOfAClass(AnnotationTest.java:632)

[ERROR] testUsageOfParametersInTypeAnnotation(spoon.test.annotation.AnnotationTest)  Time elapsed: 0.06 s  <<< FAILURE!
org.junit.ComparisonFailure: 
array of integers parameter in type annotation expected:<...peAnnotation(integer[]s = { 1 })
T> list2> but was:<...peAnnotation(integer[ = 1)
T> listjava.util.List<@spoon.test.annotation.testclasses.TypeAnnotation(integer]s = { 1 })
T> list2>
	at spoon.test.annotation.AnnotationTest.testUsageOfParametersInTypeAnnotation(AnnotationTest.java:739)

[INFO] Running spoon.test.annotation.AnnotationLoopTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.043 s - in spoon.test.annotation.AnnotationLoopTest
[INFO] Running spoon.test.annotation.AnnotationValuesTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.162 s - in spoon.test.annotation.AnnotationValuesTest
[INFO] Running spoon.test.factory.ExecutableFactoryTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.test.factory.ExecutableFactoryTest
[INFO] Running spoon.test.factory.FactoryTest
[ERROR] Tests run: 5, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.204 s <<< FAILURE! - in spoon.test.factory.FactoryTest
[ERROR] testClassAccessCreatedFromFactories(spoon.test.factory.FactoryTest)  Time elapsed: 0.049 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...estclasses.Foo.class[]> but was:<...estclasses.Foo.class[spoon.test.factory.testclasses.Foo.class]>
	at spoon.test.factory.FactoryTest.testClassAccessCreatedFromFactories(FactoryTest.java:99)

[INFO] Running spoon.test.factory.AnnotationFactoryTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.047 s - in spoon.test.factory.AnnotationFactoryTest
[INFO] Running spoon.test.factory.TypeFactoryTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.173 s - in spoon.test.factory.TypeFactoryTest
[INFO] Running spoon.test.factory.FieldFactoryTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.188 s - in spoon.test.factory.FieldFactoryTest
[INFO] Running spoon.test.factory.ConstructorFactoryTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.063 s - in spoon.test.factory.ConstructorFactoryTest
[INFO] Running spoon.test.factory.CodeFactoryTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.test.factory.CodeFactoryTest
[INFO] Running spoon.test.factory.ClassFactoryTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.test.factory.ClassFactoryTest
[INFO] Running spoon.test.labels.TestLabels
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.05 s - in spoon.test.labels.TestLabels
[INFO] Running spoon.test.template.TemplateTest
0
[ERROR] Tests run: 24, Failures: 12, Errors: 0, Skipped: 0, Time elapsed: 2.982 s <<< FAILURE! - in spoon.test.template.TemplateTest
[ERROR] substituteSubString(spoon.test.template.TemplateTest)  Time elapsed: 0.087 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<java.lang.String []p_A> but was:<java.lang.String [m_A = "A is here more times: A";java.lang.String ]p_A>
	at spoon.test.template.TemplateTest.substituteSubString(TemplateTest.java:995)

[ERROR] testFieldAccessNameSubstitutionInInnerClass(spoon.test.template.TemplateTest)  Time elapsed: 0.077 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]value = 7> but was:<[int value;]value = 7>
	at spoon.test.template.TemplateTest.testFieldAccessNameSubstitutionInInnerClass(TemplateTest.java:1090)

[ERROR] testExtensionBlock(spoon.test.template.TemplateTest)  Time elapsed: 0.318 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...sses.logger.Logger.e[]nter("Logger", "ente...> but was:<...sses.logger.Logger.e[xit("enter")spoon.test.template.testclasses.logger.Logger.e]nter("Logger", "ente...>
	at spoon.test.template.TemplateTest.testExtensionBlock(TemplateTest.java:643)

[ERROR] testExpressionTemplate(spoon.test.template.TemplateTest)  Time elapsed: 0.066 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...ew java.lang.String([]"Spoon is cool!")> but was:<...ew java.lang.String([exp.S())new java.lang.String(]"Spoon is cool!")>
	at spoon.test.template.TemplateTest.testExpressionTemplate(TemplateTest.java:885)

[ERROR] substituteTypeAccessReference(spoon.test.template.TemplateTest)  Time elapsed: 0.151 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...mple<java.util.Date>[]> but was:<...mple<java.util.Date>[spoon.test.template.TypeReferenceClassAccess.Example<java.util.Date>]>
	at spoon.test.template.TemplateTest.substituteTypeAccessReference(TemplateTest.java:1133)

[ERROR] testTemplateMatcher(spoon.test.template.TemplateTest)  Time elapsed: 0.122 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]l> but was:<[new java.util.ArrayList<>()]l>
	at spoon.test.template.TemplateTest.checkParameters(TemplateTest.java:610)
	at spoon.test.template.TemplateTest.lambda$testTemplateMatcher$3(TemplateTest.java:442)
	at spoon.test.template.TemplateTest.testTemplateMatcher(TemplateTest.java:440)

[ERROR] testFieldAccessNameSubstitution(spoon.test.template.TemplateTest)  Time elapsed: 0.071 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]value = 7> but was:<[int value;]value = 7>
	at spoon.test.template.TemplateTest.testFieldAccessNameSubstitution(TemplateTest.java:1071)

[ERROR] testTemplateInheritance(spoon.test.template.TemplateTest)  Time elapsed: 0.287 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]int x> but was:<[super.toBeOverriden()]int x>
	at spoon.test.template.TemplateTest.testTemplateInheritance(TemplateTest.java:156)

[ERROR] testAnotherFieldAccessNameSubstitution(spoon.test.template.TemplateTest)  Time elapsed: 0.076 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<int []m_x;> but was:<int [x;int ]m_x;>
	at spoon.test.template.TemplateTest.testAnotherFieldAccessNameSubstitution(TemplateTest.java:1107)

[ERROR] testTemplateC1(spoon.test.template.TemplateTest)  Time elapsed: 0.142 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]return "testparam"> but was:<[java.util.List<java.util.Date> toBeInserted = new java.util.ArrayList<java.util.Date>();]return "testparam">
	at spoon.test.template.TemplateTest.testTemplateC1(TemplateTest.java:337)

[ERROR] substituteStringLiteral(spoon.test.template.TemplateTest)  Time elapsed: 0.074 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...g.String stringField[]2 = "Substring value...> but was:<...g.String stringField[1 = "value1";java.lang.String stringField]2 = "Substring value...>
	at spoon.test.template.TemplateTest.substituteStringLiteral(TemplateTest.java:950)

[ERROR] testTemplateArrayAccess(spoon.test.template.TemplateTest)  Time elapsed: 0.074 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]java.lang.String s =...> but was:<[int i = 0]java.lang.String s =...>
	at spoon.test.template.TemplateTest.testTemplateArrayAccess(TemplateTest.java:821)

[INFO] Running spoon.test.template.TemplateClassAccessTest
[ERROR] Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.088 s <<< FAILURE! - in spoon.test.template.TemplateClassAccessTest
[ERROR] testClassAccessTest(spoon.test.template.TemplateClassAccessTest)  Time elapsed: 0.088 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]null.getName()> but was:<[java.lang.String.class.getName()]null.getName()>
	at spoon.test.template.TemplateClassAccessTest.testClassAccessTest(TemplateClassAccessTest.java:31)

[INFO] Running spoon.test.template.TemplateArrayAccessTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.112 s - in spoon.test.template.TemplateArrayAccessTest
[INFO] Running spoon.test.template.core.ParameterInfoTest
[INFO] Tests run: 21, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 s - in spoon.test.template.core.ParameterInfoTest
[INFO] Running spoon.test.template.TemplateInvocationSubstitutionTest
[ERROR] Tests run: 3, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.218 s <<< FAILURE! - in spoon.test.template.TemplateInvocationSubstitutionTest
[ERROR] testInvocationSubstitutionByExpression(spoon.test.template.TemplateInvocationSubstitutionTest)  Time elapsed: 0.089 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...("abc".substring(1))[]> but was:<...("abc".substring(1))[java.lang.System.out.println("abc".substring(1))]>
	at spoon.test.template.TemplateInvocationSubstitutionTest.testInvocationSubstitutionByExpression(TemplateInvocationSubstitutionTest.java:49)

[INFO] Running spoon.test.template.TemplateReplaceReturnTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.216 s - in spoon.test.template.TemplateReplaceReturnTest
[INFO] Running spoon.test.template.TemplateEnumAccessTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.126 s - in spoon.test.template.TemplateEnumAccessTest
[INFO] Running spoon.test.template.PatternTest
[ERROR] Tests run: 31, Failures: 23, Errors: 0, Skipped: 0, Time elapsed: 2.538 s <<< FAILURE! - in spoon.test.template.PatternTest
[ERROR] testGenerateMultiValues(spoon.test.template.PatternTest)  Time elapsed: 0.14 s  <<< FAILURE!
java.lang.AssertionError: expected:<[int foo = 0, foo++, java.lang.System.out.println("does it work?")]> but was:<[int foo = 0, int foo = 0foo++, java.lang.System.out.println("does it work?")]>
	at spoon.test.template.PatternTest.testGenerateMultiValues(PatternTest.java:282)

[ERROR] testMatchGreedyMultiValueMaxCountLimit(spoon.test.template.PatternTest)  Time elapsed: 0.128 s  <<< FAILURE!
java.lang.AssertionError: expected:<[int i = 0, i++, java.lang.System.out.println(i), java.lang.System.out.println("Xxxx")]> but was:<[int i = 0, int i = 0i++, int i = 0i++java.lang.System.out.println(i), int i = 0i++java.lang.System.out.println(i)java.lang.System.out.println("Xxxx")]>
	at spoon.test.template.PatternTest.testMatchGreedyMultiValueMaxCountLimit(PatternTest.java:340)

[ERROR] testMatchReluctantMultivalueExactly2(spoon.test.template.PatternTest)  Time elapsed: 0.124 s  <<< FAILURE!
java.lang.AssertionError: expected:<[i++, java.lang.System.out.println(i), java.lang.System.out.println("Xxxx")]> but was:<[i++, i++java.lang.System.out.println(i), i++java.lang.System.out.println(i)java.lang.System.out.println("Xxxx")]>
	at spoon.test.template.PatternTest.testMatchReluctantMultivalueExactly2(PatternTest.java:482)

[ERROR] testMatchForeachWithOuterSubstitution(spoon.test.template.PatternTest)  Time elapsed: 0.069 s  <<< FAILURE!
java.lang.AssertionError: expected:<[int cc = 0, java.lang.System.out.println("Xxxx"), cc++, java.lang.System.out.println(((java.lang.String) (null))), cc++]> but was:<[int var = 0int cc = 0, int var = 0int cc = 0java.lang.System.out.println("Xxxx"), int var = 0int cc = 0java.lang.System.out.println("Xxxx")cc++, int var = 0int cc = 0java.lang.System.out.println("Xxxx")cc++java.lang.System.out.println(((java.lang.String) (null))), int var = 0int cc = 0java.lang.System.out.println("Xxxx")cc++java.lang.System.out.println(((java.lang.String) (null)))cc++]>
	at spoon.test.template.PatternTest.testMatchForeachWithOuterSubstitution(PatternTest.java:150)

[ERROR] testMatchOfMapAttribute(spoon.test.template.PatternTest)  Time elapsed: 0.084 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<"[]abc"> but was:<"[xyz""]abc">
	at spoon.test.template.PatternTest.testMatchOfMapAttribute(PatternTest.java:952)

[ERROR] testMatchReluctantMultivalue(spoon.test.template.PatternTest)  Time elapsed: 0.121 s  <<< FAILURE!
java.lang.AssertionError: expected:<[int i = 0, i++, java.lang.System.out.println(i), java.lang.System.out.println("Xxxx")]> but was:<[int i = 0, int i = 0i++, int i = 0i++java.lang.System.out.println(i), int i = 0i++java.lang.System.out.println(i)java.lang.System.out.println("Xxxx")]>
	at spoon.test.template.PatternTest.testMatchReluctantMultivalue(PatternTest.java:386)

[ERROR] testMatchOfMapAttributeAndOtherAnnotations(spoon.test.template.PatternTest)  Time elapsed: 0.054 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]@java.lang.Deprecate...> but was:<[4567]@java.lang.Deprecate...>
	at spoon.test.template.PatternTest.testMatchOfMapAttributeAndOtherAnnotations(PatternTest.java:992)

[ERROR] testPatternMatchOfMultipleElements(spoon.test.template.PatternTest)  Time elapsed: 0.055 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<"[]b"> but was:<"[a""]b">
	at spoon.test.template.PatternTest.testPatternMatchOfMultipleElements(PatternTest.java:1452)

[ERROR] testMatchParameterValue(spoon.test.template.PatternTest)  Time elapsed: 0.054 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<...lue
}
----------
1) []java.lang.System.out...> but was:<...lue
}
----------
1) [value]java.lang.System.out...>
	at spoon.test.template.PatternTest.testMatchParameterValue(PatternTest.java:702)

[ERROR] testMatchSample1(spoon.test.template.PatternTest)  Time elapsed: 0.083 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]false> but was:<["extends"]false>
	at spoon.test.template.PatternTest.testMatchSample1(PatternTest.java:1266)

[ERROR] testMatchPossesiveMultiValueMaxCount4(spoon.test.template.PatternTest)  Time elapsed: 0.123 s  <<< FAILURE!
java.lang.AssertionError: expected:<[int i = 0, i++, java.lang.System.out.println(i), java.lang.System.out.println("Xxxx"), java.lang.System.out.println(((java.lang.String) (null)))]> but was:<[int i = 0, int i = 0i++, int i = 0i++java.lang.System.out.println(i), int i = 0i++java.lang.System.out.println(i)java.lang.System.out.println("Xxxx"), int i = 0i++java.lang.System.out.println(i)java.lang.System.out.println("Xxxx")java.lang.System.out.println(((java.lang.String) (null)))]>
	at spoon.test.template.PatternTest.testMatchPossesiveMultiValueMaxCount4(PatternTest.java:532)

[ERROR] testExtensionDecoupledSubstitutionVisitor(spoon.test.template.PatternTest)  Time elapsed: 0.103 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...sses.logger.Logger.e[]nter("Logger", "ente...> but was:<...sses.logger.Logger.e[xit("enter")spoon.test.template.testclasses.logger.Logger.e]nter("Logger", "ente...>
	at spoon.test.template.PatternTest.testExtensionDecoupledSubstitutionVisitor(PatternTest.java:1551)

[ERROR] testGenerateIfElse(spoon.test.template.PatternTest)  Time elapsed: 0.054 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...ang.System.out.print[]ln(2.1)> but was:<...ang.System.out.print[("spoon")java.lang.System.out.print]ln(2.1)>
	at spoon.test.template.PatternTest.testGenerateIfElse(PatternTest.java:250)

[ERROR] testMatchGreedyMultiValueUnlimited(spoon.test.template.PatternTest)  Time elapsed: 0.116 s  <<< FAILURE!
java.lang.AssertionError: expected:<[int i = 0, i++, java.lang.System.out.println(i), java.lang.System.out.println("Xxxx"), java.lang.System.out.println(((java.lang.String) (null))), java.lang.System.out.println("last one")]> but was:<[int i = 0, int i = 0i++, int i = 0i++java.lang.System.out.println(i), int i = 0i++java.lang.System.out.println(i)java.lang.System.out.println("Xxxx"), int i = 0i++java.lang.System.out.println(i)java.lang.System.out.println("Xxxx")java.lang.System.out.println(((java.lang.String) (null))), int i = 0i++java.lang.System.out.println(i)java.lang.System.out.println("Xxxx")java.lang.System.out.println(((java.lang.String) (null)))java.lang.System.out.println("last one")]>
	at spoon.test.template.PatternTest.testMatchGreedyMultiValueUnlimited(PatternTest.java:304)

[ERROR] testMatchIfElse(spoon.test.template.PatternTest)  Time elapsed: 0.06 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]"a"> but was:<[java.lang.System.out.println("a")]"a">
	at spoon.test.template.PatternTest.testMatchIfElse(PatternTest.java:200)

[ERROR] testMatchOfMapKeySubstring(spoon.test.template.PatternTest)  Time elapsed: 0.057 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]4567> but was:<["xyz"]4567>
	at spoon.test.template.PatternTest.testMatchOfMapKeySubstring(PatternTest.java:1036)

[ERROR] testPatternToString(spoon.test.template.PatternTest)  Time elapsed: 0.081 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<...()).writeSpace();
}
[]try (final spoon.ref...> but was:<...()).writeSpace();
}
[if (/* CtInvocation
    / <= ${useStartKeyword}
 */
useStartKeyword()) {
    /* CtInvocation
        /argument/ <= ${startKeyword}
     */
    /* CtInvocation
        /target/ <= ${printer}
     */
    /* CtInvocation
        / <= ${printer}
     */
    printer().writeSpace().writeKeyword(/* CtInvocation
        / <= ${startKeyword}
     */
    startKeyword()).writeSpace();
}]try (final spoon.ref...>
	at spoon.test.template.PatternTest.testPatternToString(PatternTest.java:1161)

[ERROR] testMatchInSet(spoon.test.template.PatternTest)  Time elapsed: 0.076 s  <<< FAILURE!
java.lang.AssertionError: expected:<[java.lang.UnsupportedOperationException, java.lang.IllegalArgumentException]> but was:<[java.lang.IllegalArgumentExceptionjava.lang.UnsupportedOperationException, java.lang.IllegalArgumentException]>
	at spoon.test.template.PatternTest.testMatchInSet(PatternTest.java:1080)

[ERROR] testMatchOfAttribute(spoon.test.template.PatternTest)  Time elapsed: 0.054 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]java.lang.System.out...> but was:<[this.getClass()]java.lang.System.out...>
	at spoon.test.template.PatternTest.testMatchOfAttribute(PatternTest.java:890)

[ERROR] testMatchReluctantMultivalueMinCount1(spoon.test.template.PatternTest)  Time elapsed: 0.13 s  <<< FAILURE!
java.lang.AssertionError: expected:<[int i = 0, i++, java.lang.System.out.println(i), java.lang.System.out.println("Xxxx")]> but was:<[int i = 0, int i = 0i++, int i = 0i++java.lang.System.out.println(i), int i = 0i++java.lang.System.out.println(i)java.lang.System.out.println("Xxxx")]>
	at spoon.test.template.PatternTest.testMatchReluctantMultivalueMinCount1(PatternTest.java:439)

[ERROR] testMatchForeach(spoon.test.template.PatternTest)  Time elapsed: 0.056 s  <<< FAILURE!
java.lang.AssertionError: expected:<[java.lang.System.out.println("a"), java.lang.System.out.println("Xxxx"), java.lang.System.out.println(((java.lang.String) (null))), java.lang.System.out.println(java.lang.Long.class.toString())]> but was:<[java.lang.System.out.println(value)java.lang.System.out.println("a"), java.lang.System.out.println(value)java.lang.System.out.println("a")java.lang.System.out.println("Xxxx"), java.lang.System.out.println(value)java.lang.System.out.println("a")java.lang.System.out.println("Xxxx")java.lang.System.out.println(((java.lang.String) (null))), java.lang.System.out.println(value)java.lang.System.out.println("a")java.lang.System.out.println("Xxxx")java.lang.System.out.println(((java.lang.String) (null)))java.lang.System.out.println(java.lang.Long.class.toString())]>
	at spoon.test.template.PatternTest.testMatchForeach(PatternTest.java:111)

[ERROR] testMatchParameterCondition(spoon.test.template.PatternTest)  Time elapsed: 0.065 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]"a"> but was:<[java.lang.System.out.println("a")]"a">
	at spoon.test.template.PatternTest.testMatchParameterCondition(PatternTest.java:804)

[ERROR] testMatchParameterValueType(spoon.test.template.PatternTest)  Time elapsed: 0.071 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]"a"> but was:<[java.lang.System.out.println("a")]"a">
	at spoon.test.template.PatternTest.testMatchParameterValueType(PatternTest.java:745)

[INFO] Running spoon.test.reference.VariableAccessTest
2018-06-27 10:46:34,717 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable e at (/root/workspace/INRIA/spoon/397241434/src/test/resources/noclasspath/org/elasticsearch/indices/analysis/HunspellService.java:100)
[INFO] Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.666 s - in spoon.test.reference.VariableAccessTest
[INFO] Running spoon.test.reference.AnnotationFieldReferenceTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.05 s - in spoon.test.reference.AnnotationFieldReferenceTest
[INFO] Running spoon.test.reference.ElasticsearchStackoverflowTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.095 s - in spoon.test.reference.ElasticsearchStackoverflowTest
[INFO] Running spoon.test.reference.TypeReferenceTest
[ERROR] Tests run: 28, Failures: 6, Errors: 0, Skipped: 0, Time elapsed: 1.83 s <<< FAILURE! - in spoon.test.reference.TypeReferenceTest
[ERROR] testAnonymousClassesHaveAnEmptyStringForItsNameInNoClasspath(spoon.test.reference.TypeReferenceTest)  Time elapsed: 0.06 s  <<< FAILURE!
java.lang.AssertionError
	at spoon.test.reference.TypeReferenceTest.testAnonymousClassesHaveAnEmptyStringForItsNameInNoClasspath(TypeReferenceTest.java:467)

[ERROR] testTypeReferenceSpecifiedInClassDeclarationInNoClasspath(spoon.test.reference.TypeReferenceTest)  Time elapsed: 0.057 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<java.lang.String[]> but was:<java.lang.String[java.lang.String]>
	at spoon.test.reference.TypeReferenceTest.testTypeReferenceSpecifiedInClassDeclarationInNoClasspath(TypeReferenceTest.java:347)

[ERROR] testConstructorCallInNoClasspath(spoon.test.reference.TypeReferenceTest)  Time elapsed: 0.069 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<A.B[]<C>> but was:<A.B[A.B<C>A.B<C>A.B<C>DDDA.B]<C>>
	at spoon.test.reference.TypeReferenceTest.testConstructorCallInNoClasspath(TypeReferenceTest.java:487)

[ERROR] testUnknownSuperClassWithSameNameInNoClasspath(spoon.test.reference.TypeReferenceTest)  Time elapsed: 0.071 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...o.android.omninotes.[]commons.models.Attac...> but was:<...o.android.omninotes.[models.Attachmentit.feio.android.omninotes.models.Attachmentandroid.os.Parcelable.Creator<Attachment>android.os.Parcelable.Creator<Attachment>android.os.Parcelable.Creator<Attachment>android.os.Parcelable.Creator<Attachment>it.feio.android.omninotes.models.Attachmentandroid.os.Parcelit.feio.android.omninotes.models.Attachmentit.feio.android.omninotes.models.Attachmentit.feio.android.omninotes.models.Attachment[]it.feio.android.omninotes.models.Attachmentit.feio.android.omninotes.]commons.models.Attac...>
	at spoon.test.reference.TypeReferenceTest.testUnknownSuperClassWithSameNameInNoClasspath(TypeReferenceTest.java:293)

[ERROR] testTypeReferenceSpecifiedInClassDeclarationInNoClasspathWithGenerics(spoon.test.reference.TypeReferenceTest)  Time elapsed: 0.052 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<... ? extends Tacos<?>>[]> but was:<... ? extends Tacos<?>>[example.FooBar<?, ? extends Tacos<?>>.Bar<?, ? extends Tacos<?>>example.FooBar<?, ? extends Tacos<?>>.Bar<?, ? extends Tacos<?>>]>
	at spoon.test.reference.TypeReferenceTest.testTypeReferenceSpecifiedInClassDeclarationInNoClasspathWithGenerics(TypeReferenceTest.java:385)

[ERROR] testPackageInNoClasspath(spoon.test.reference.TypeReferenceTest)  Time elapsed: 0.052 s  <<< FAILURE!
java.lang.AssertionError: Reference to Demo is missing
	at spoon.test.reference.TypeReferenceTest.testPackageInNoClasspath(TypeReferenceTest.java:326)

[INFO] Running spoon.test.reference.ExecutableReferenceTest
[ERROR] Tests run: 8, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.476 s <<< FAILURE! - in spoon.test.reference.ExecutableReferenceTest
[ERROR] testCallMethodOfClassNotPresent(spoon.test.reference.ExecutableReferenceTest)  Time elapsed: 0.056 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]m()> but was:<[BarBarBar]m()>
	at spoon.test.reference.ExecutableReferenceTest.testCallMethodOfClassNotPresent(ExecutableReferenceTest.java:61)

[INFO] Running spoon.test.reference.CloneReferenceTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.109 s - in spoon.test.reference.CloneReferenceTest
[INFO] Running spoon.test.reference.ExecutableReferenceGenericTest
[ERROR] Tests run: 12, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.656 s <<< FAILURE! - in spoon.test.reference.ExecutableReferenceGenericTest
[ERROR] testExecutableReferences(spoon.test.reference.ExecutableReferenceGenericTest)  Time elapsed: 0.057 s  <<< FAILURE!
java.lang.AssertionError
	at spoon.test.reference.ExecutableReferenceGenericTest.testExecutableReferences(ExecutableReferenceGenericTest.java:252)

[INFO] Running spoon.test.targeted.TargetedExpressionTest
[ERROR] Tests run: 17, Failures: 14, Errors: 0, Skipped: 0, Time elapsed: 0.977 s <<< FAILURE! - in spoon.test.targeted.TargetedExpressionTest
[ERROR] testStaticTargetsOfInv(spoon.test.targeted.TargetedExpressionTest)  Time elapsed: 0.06 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]foo.staticMethod()> but was:<[new spoon.test.targeted.testclasses.Foo(0, 0).staticMethod()]foo.staticMethod()>
	at spoon.test.targeted.TargetedExpressionTest.assertEqualsInvocation(TargetedExpressionTest.java:474)
	at spoon.test.targeted.TargetedExpressionTest.testStaticTargetsOfInv(TargetedExpressionTest.java:317)

[ERROR] testTargetsOfFieldAccess(spoon.test.targeted.TargetedExpressionTest)  Time elapsed: 0.061 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]i> but was:<[this.i]i>
	at spoon.test.targeted.TargetedExpressionTest.assertEqualsFieldAccess(TargetedExpressionTest.java:465)
	at spoon.test.targeted.TargetedExpressionTest.testTargetsOfFieldAccess(TargetedExpressionTest.java:137)

[ERROR] testStaticTargetsOfFieldAccessNoClasspath(spoon.test.targeted.TargetedExpressionTest)  Time elapsed: 0.052 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]foo.i> but was:<[new Foo().i]foo.i>
	at spoon.test.targeted.TargetedExpressionTest.assertEqualsFieldAccess(TargetedExpressionTest.java:465)
	at spoon.test.targeted.TargetedExpressionTest.testStaticTargetsOfFieldAccessNoClasspath(TargetedExpressionTest.java:256)

[ERROR] testCtThisAccess(spoon.test.targeted.TargetedExpressionTest)  Time elapsed: 0.05 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<this.[]b = b> but was:<this.[method()this.]b = b>
	at spoon.test.targeted.TargetedExpressionTest.testCtThisAccess(TargetedExpressionTest.java:79)

[ERROR] testCtSuperAccess(spoon.test.targeted.TargetedExpressionTest)  Time elapsed: 0.049 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]return super.toStrin...> but was:<[spoon.test.targeted.testclasses.InternalSuperCall.super.toString()]return super.toStrin...>
	at spoon.test.targeted.TargetedExpressionTest.testCtSuperAccess(TargetedExpressionTest.java:60)

[ERROR] testTargetsOfFieldAccessInInnerClass(spoon.test.targeted.TargetedExpressionTest)  Time elapsed: 0.065 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]i> but was:<[this.i]i>
	at spoon.test.targeted.TargetedExpressionTest.assertEqualsFieldAccess(TargetedExpressionTest.java:465)
	at spoon.test.targeted.TargetedExpressionTest.testTargetsOfFieldAccessInInnerClass(TargetedExpressionTest.java:201)

[ERROR] testTargetsOfStaticFieldAccess(spoon.test.targeted.TargetedExpressionTest)  Time elapsed: 0.062 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]spoon.test.targeted....> but was:<[this.k]spoon.test.targeted....>
	at spoon.test.targeted.TargetedExpressionTest.assertEqualsFieldAccess(TargetedExpressionTest.java:465)
	at spoon.test.targeted.TargetedExpressionTest.testTargetsOfStaticFieldAccess(TargetedExpressionTest.java:163)

[ERROR] testClassDeclaredInALambda(spoon.test.targeted.TargetedExpressionTest)  Time elapsed: 0.063 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<this.index[]> but was:<this.index[this.index]>
	at spoon.test.targeted.TargetedExpressionTest.assertEqualsFieldAccess(TargetedExpressionTest.java:465)
	at spoon.test.targeted.TargetedExpressionTest.testClassDeclaredInALambda(TargetedExpressionTest.java:446)

[ERROR] testNotTargetedExpression(spoon.test.targeted.TargetedExpressionTest)  Time elapsed: 0.054 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]i> but was:<[this.i]i>
	at spoon.test.targeted.TargetedExpressionTest.testNotTargetedExpression(TargetedExpressionTest.java:108)

[ERROR] testTargetsOfFieldInAnonymousClass(spoon.test.targeted.TargetedExpressionTest)  Time elapsed: 0.065 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<this.i[]> but was:<this.i[this.i]>
	at spoon.test.targeted.TargetedExpressionTest.assertEqualsFieldAccess(TargetedExpressionTest.java:465)
	at spoon.test.targeted.TargetedExpressionTest.testTargetsOfFieldInAnonymousClass(TargetedExpressionTest.java:233)

[ERROR] testTargetsOfInv(spoon.test.targeted.TargetedExpressionTest)  Time elapsed: 0.067 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]foo.method()> but was:<[new spoon.test.targeted.testclasses.Foo(0, 0).method()]foo.method()>
	at spoon.test.targeted.TargetedExpressionTest.assertEqualsInvocation(TargetedExpressionTest.java:474)
	at spoon.test.targeted.TargetedExpressionTest.testTargetsOfInv(TargetedExpressionTest.java:288)

[ERROR] testTargetsOfInvInInnerClass(spoon.test.targeted.TargetedExpressionTest)  Time elapsed: 0.061 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]this.inv()> but was:<[inv()]this.inv()>
	at spoon.test.targeted.TargetedExpressionTest.assertEqualsInvocation(TargetedExpressionTest.java:474)
	at spoon.test.targeted.TargetedExpressionTest.testTargetsOfInvInInnerClass(TargetedExpressionTest.java:350)

[ERROR] testTargetsOfInvInAnonymousClass(spoon.test.targeted.TargetedExpressionTest)  Time elapsed: 0.061 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<this.invStatic()[]> but was:<this.invStatic()[this.invStatic()]>
	at spoon.test.targeted.TargetedExpressionTest.assertEqualsInvocation(TargetedExpressionTest.java:474)
	at spoon.test.targeted.TargetedExpressionTest.testTargetsOfInvInAnonymousClass(TargetedExpressionTest.java:384)

[ERROR] testStaticTargetsOfInvNoClasspath(spoon.test.targeted.TargetedExpressionTest)  Time elapsed: 0.051 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]foo.staticMethod()> but was:<[new Foo(0, 0).staticMethod()]foo.staticMethod()>
	at spoon.test.targeted.TargetedExpressionTest.assertEqualsInvocation(TargetedExpressionTest.java:474)
	at spoon.test.targeted.TargetedExpressionTest.testStaticTargetsOfInvNoClasspath(TargetedExpressionTest.java:407)

[INFO] Running spoon.test.ctClass.CtClassTest
2018-06-27 10:46:39,672 ERROR spoon.Launcher - cannot load class: daikon.Runtime
spoon.support.SpoonClassNotFoundException: cannot load class: daikon.Runtime
	at spoon.support.reflect.reference.CtTypeReferenceImpl.findClass(CtTypeReferenceImpl.java:160)
	at spoon.support.reflect.reference.CtTypeReferenceImpl.getActualClass(CtTypeReferenceImpl.java:142)
	at spoon.support.reflect.reference.CtFieldReferenceImpl.getActualField(CtFieldReferenceImpl.java:65)
	at spoon.support.reflect.reference.CtFieldReferenceImpl.getModifiers(CtFieldReferenceImpl.java:223)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.isInitializeStaticFinalField(DefaultJavaPrettyPrinter.java:888)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.printCtFieldAccess(DefaultJavaPrettyPrinter.java:835)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.visitCtFieldWrite(DefaultJavaPrettyPrinter.java:786)
	at spoon.support.reflect.code.CtFieldWriteImpl.accept(CtFieldWriteImpl.java:27)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.scan(DefaultJavaPrettyPrinter.java:340)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.visitCtAssignment(DefaultJavaPrettyPrinter.java:488)
	at spoon.support.reflect.code.CtAssignmentImpl.accept(CtAssignmentImpl.java:55)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.scan(DefaultJavaPrettyPrinter.java:340)
	at spoon.reflect.visitor.ElementPrinterHelper.writeStatement(ElementPrinterHelper.java:181)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.visitCtBlock(DefaultJavaPrettyPrinter.java:520)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:67)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.scan(DefaultJavaPrettyPrinter.java:340)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.visitCtAnonymousExecutable(DefaultJavaPrettyPrinter.java:439)
	at spoon.support.reflect.declaration.CtAnonymousExecutableImpl.accept(CtAnonymousExecutableImpl.java:46)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.scan(DefaultJavaPrettyPrinter.java:340)
	at spoon.reflect.visitor.ElementPrinterHelper.writeElementList(ElementPrinterHelper.java:195)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.visitCtClass(DefaultJavaPrettyPrinter.java:612)
	at spoon.support.reflect.declaration.CtClassImpl.accept(CtClassImpl.java:68)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.scan(DefaultJavaPrettyPrinter.java:340)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.calculate(DefaultJavaPrettyPrinter.java:1952)
	at spoon.support.JavaOutputProcessor.createJavaFile(JavaOutputProcessor.java:118)
	at spoon.support.JavaOutputProcessor.process(JavaOutputProcessor.java:153)
	at spoon.support.JavaOutputProcessor.process(JavaOutputProcessor.java:46)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:74)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:174)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:148)
	at spoon.reflect.visitor.CtScanner.visitCtPackage(CtScanner.java:650)
	at spoon.support.reflect.declaration.CtPackageImpl.accept(CtPackageImpl.java:102)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:182)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:174)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:148)
	at spoon.reflect.visitor.CtScanner.visitCtPackage(CtScanner.java:649)
	at spoon.support.reflect.declaration.CtPackageImpl.accept(CtPackageImpl.java:102)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:182)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:174)
	at spoon.reflect.visitor.CtScanner.visitCtModule(CtScanner.java:925)
	at spoon.reflect.factory.ModuleFactory$CtUnnamedModule.accept(ModuleFactory.java:105)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:182)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.support.QueueProcessingManager.process(QueueProcessingManager.java:124)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.generateProcessedSourceFilesUsingTypes(JDTBasedSpoonCompiler.java:519)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.generateProcessedSourceFiles(JDTBasedSpoonCompiler.java:212)
	at spoon.Launcher.prettyprint(Launcher.java:776)
	at spoon.Launcher.run(Launcher.java:714)
	at spoon.test.ctClass.CtClassTest.testParentOfTheEnclosingClassOfStaticClass(CtClassTest.java:100)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
Caused by: java.lang.ClassNotFoundException: daikon.Runtime
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at spoon.support.reflect.reference.CtTypeReferenceImpl.findClass(CtTypeReferenceImpl.java:158)
	... 75 more
[ERROR] Tests run: 8, Failures: 3, Errors: 0, Skipped: 0, Time elapsed: 3.028 s <<< FAILURE! - in spoon.test.ctClass.CtClassTest
[ERROR] testCloneAnonymousClassInvocationWithAutoimports(spoon.test.ctClass.CtClassTest)  Time elapsed: 0.058 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<...   return 0;
    }
}[]> but was:<...   return 0;
    }
}[new Comparator<Integer>() {
    @Override
    public int compare(Integer o1, Integer o2) {
        return 0;
    }
}]>
	at spoon.test.ctClass.CtClassTest.testCloneAnonymousClassInvocationWithAutoimports(CtClassTest.java:265)

[ERROR] testCloneAnonymousClassInvocation(spoon.test.ctClass.CtClassTest)  Time elapsed: 0.053 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<...   return 0;
    }
}[]> but was:<...   return 0;
    }
}[new java.util.Comparator<java.lang.Integer>() {
    @java.lang.Override
    public int compare(java.lang.Integer o1, java.lang.Integer o2) {
        return 0;
    }
}]>
	at spoon.test.ctClass.CtClassTest.testCloneAnonymousClassInvocation(CtClassTest.java:237)

[ERROR] testAllTypeReferencesToALocalTypeShouldNotStartWithNumber(spoon.test.ctClass.CtClassTest)  Time elapsed: 0.051 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<[]final java.lang.Clas...> but was:<[public Cook() {
}]final java.lang.Clas...>
	at spoon.test.ctClass.CtClassTest.testAllTypeReferencesToALocalTypeShouldNotStartWithNumber(CtClassTest.java:145)

[INFO] Running spoon.test.executable.ExecutableRefTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.3 s - in spoon.test.executable.ExecutableRefTest
[INFO] Running spoon.test.executable.ExecutableTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.205 s - in spoon.test.executable.ExecutableTest
[INFO] Running spoon.test.fieldaccesses.FieldAccessTest
[ERROR] Tests run: 16, Failures: 7, Errors: 1, Skipped: 0, Time elapsed: 0.859 s <<< FAILURE! - in spoon.test.fieldaccesses.FieldAccessTest
[ERROR] testFieldAccessNoClasspath(spoon.test.fieldaccesses.FieldAccessTest)  Time elapsed: 0.051 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[](game.board.width)> but was:<[Gamefr.inria.internal.Abcd](game.board.width)>
	at spoon.test.fieldaccesses.FieldAccessTest.testFieldAccessNoClasspath(FieldAccessTest.java:217)

[ERROR] testFieldAccessAutoExplicit(spoon.test.fieldaccesses.FieldAccessTest)  Time elapsed: 0.109 s  <<< ERROR!
spoon.compiler.ModelBuildingException: 
snippet compilation error while compiling: ageclass Wrapper {
    static void wrap() throws java.lang.Throwable {
        int age = 1;
    }
}
	at spoon.test.fieldaccesses.FieldAccessTest.testFieldAccessAutoExplicit(FieldAccessTest.java:412)
Caused by: spoon.support.compiler.SnippetCompilationError: Syntax error on token "ageclass", interface expectedat line 1
	at spoon.test.fieldaccesses.FieldAccessTest.testFieldAccessAutoExplicit(FieldAccessTest.java:412)

[ERROR] testFieldAccessDeclaredInADefaultClass(spoon.test.fieldaccesses.FieldAccessTest)  Time elapsed: 0.053 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...sses.internal.Foo.i)[]> but was:<...sses.internal.Foo.i)[inv(spoon.test.fieldaccesses.testclasses.internal.Foo.i)]>
	at spoon.test.fieldaccesses.FieldAccessTest.testFieldAccessDeclaredInADefaultClass(FieldAccessTest.java:318)

[ERROR] testFieldWriteWithPlusEqualsOperation(spoon.test.fieldaccesses.FieldAccessTest)  Time elapsed: 0.049 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<i[]> but was:<i[ += 0i]>
	at spoon.test.fieldaccesses.FieldAccessTest.testFieldWriteWithPlusEqualsOperation(FieldAccessTest.java:269)

[ERROR] testGetReference(spoon.test.fieldaccesses.FieldAccessTest)  Time elapsed: 0.058 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]finalField> but was:<[A.myField]finalField>
	at spoon.test.fieldaccesses.FieldAccessTest.testGetReference(FieldAccessTest.java:401)

[ERROR] testIncrementationOnAVarIsAUnaryOperator(spoon.test.fieldaccesses.FieldAccessTest)  Time elapsed: 0.049 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]++(i)> but was:<[(i)++]++(i)>
	at spoon.test.fieldaccesses.FieldAccessTest.testIncrementationOnAVarIsAUnaryOperator(FieldAccessTest.java:256)

[ERROR] testFieldAccessInAnonymousClass(spoon.test.fieldaccesses.FieldAccessTest)  Time elapsed: 0.049 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<ingredient[].next> but was:<ingredient[ingredient].next>
	at spoon.test.fieldaccesses.FieldAccessTest.testFieldAccessInAnonymousClass(FieldAccessTest.java:201)

[ERROR] testBCUBug20140402(spoon.test.fieldaccesses.FieldAccessTest)  Time elapsed: 0.053 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]data> but was:<[length]data>
	at spoon.test.fieldaccesses.FieldAccessTest.testBCUBug20140402(FieldAccessTest.java:120)

[INFO] Running spoon.test.generics.GenericsTest
[ERROR] Tests run: 45, Failures: 15, Errors: 0, Skipped: 0, Time elapsed: 3.149 s <<< FAILURE! - in spoon.test.generics.GenericsTest
[ERROR] testConstructorCallGenerics(spoon.test.generics.GenericsTest)  Time elapsed: 0.123 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<java.util.List[] l2> but was:<java.util.List[<java.lang.String> l = new java.util.ArrayList<>()java.util.List] l2>
	at spoon.test.generics.GenericsTest.testConstructorCallGenerics(GenericsTest.java:388)

[ERROR] testRecursiveTypeAdapting(spoon.test.generics.GenericsTest)  Time elapsed: 0.049 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...List<java.util.List<[]P>>> but was:<...List<java.util.List<[M>>java.util.List<java.util.List<]P>>>
	at spoon.test.generics.GenericsTest.testRecursiveTypeAdapting(GenericsTest.java:993)

[ERROR] testBugCommonCollection(spoon.test.generics.GenericsTest)  Time elapsed: 0.058 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...s.ACLass<?> INSTANCE[]2 = new spoon.test.g...> but was:<...s.ACLass<?> INSTANCE[ = new spoon.test.generics.ACLass();public static final spoon.test.generics.ACLass<?> INSTANCE]2 = new spoon.test.g...>
	at spoon.test.generics.GenericsTest.testBugCommonCollection(GenericsTest.java:253)

[ERROR] testGenericWithExtendsInDeclaration(spoon.test.generics.GenericsTest)  Time elapsed: 0.048 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<? []extends java.lang.Lo...> but was:<? [super java.lang.Object? ]extends java.lang.Lo...>
	at spoon.test.generics.GenericsTest.testGenericWithExtendsInDeclaration(GenericsTest.java:513)

[ERROR] testGenericsInQualifiedNameInConstructorCall(spoon.test.generics.GenericsTest)  Time elapsed: 0.126 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<new []Burritos<K, V>()> but was:<new [Pozole()new ]Burritos<K, V>()>
	at spoon.test.generics.GenericsTest.testGenericsInQualifiedNameInConstructorCall(GenericsTest.java:551)

[ERROR] testNewClassGenerics(spoon.test.generics.GenericsTest)  Time elapsed: 0.119 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...java.lang.Void>() {}[]> but was:<...java.lang.Void>() {}[new javax.lang.model.util.SimpleTypeVisitor7<spoon.test.generics.testclasses.Tacos, java.lang.Void>() {}]>
	at spoon.test.generics.GenericsTest.testNewClassGenerics(GenericsTest.java:463)

[ERROR] testTypeParameterReferenceAsActualTypeArgument(spoon.test.generics.GenericsTest)  Time elapsed: 0.047 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...inesANewTypeArgument[]<T>> but was:<...inesANewTypeArgument[spoon.test.generics.ClassThatDefinesANewTypeArgument]<T>>
	at spoon.test.generics.GenericsTest.testTypeParameterReferenceAsActualTypeArgument(GenericsTest.java:636)

[ERROR] testGenericsInConstructorCall(spoon.test.generics.GenericsTest)  Time elapsed: 0.048 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<java.lang.[]String> but was:<java.lang.[Integerjava.lang.]String>
	at spoon.test.generics.GenericsTest.testGenericsInConstructorCall(GenericsTest.java:581)

[ERROR] testDiamond1(spoon.test.generics.GenericsTest)  Time elapsed: 0.054 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<[]> but was:<[class Wrapper {
    static void wrap() throws java.lang.Throwable {
        class Diamond {
        	java.util.List<String> f = new java.util.ArrayList<>();
        };
    }
}]>
	at spoon.test.generics.GenericsTest.testDiamond1(GenericsTest.java:154)

[ERROR] testInvocationGenerics(spoon.test.generics.GenericsTest)  Time elapsed: 0.118 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]this.<java.lang.Stri...> but was:<[<java.lang.String>this(1)]this.<java.lang.Stri...>
	at spoon.test.generics.GenericsTest.testInvocationGenerics(GenericsTest.java:435)

[ERROR] testIsGenericTypeEqual(spoon.test.generics.GenericsTest)  Time elapsed: 0.049 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...tclasses2.AnType<T>>[]> but was:<...tclasses2.AnType<T>>[java.util.Set<spoon.test.generics.testclasses2.AnType<T>>]>
	at spoon.test.generics.GenericsTest.testIsGenericTypeEqual(GenericsTest.java:1383)

[ERROR] testModelBuildingTree(spoon.test.generics.GenericsTest)  Time elapsed: 0.051 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<....Serializable, java.[]lang.Comparable<V>]> but was:<....Serializable, java.[io.Serializablejava.]lang.Comparable<V>]>
	at spoon.test.generics.GenericsTest.testModelBuildingTree(GenericsTest.java:111)

[ERROR] testMethodsWithGenericsWhoExtendsObject(spoon.test.generics.GenericsTest)  Time elapsed: 0.121 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...s.testclasses.Tacos.[]makeTacos()> but was:<...s.testclasses.Tacos.[<V, C>makeTacos()spoon.test.generics.testclasses.Tacos.]makeTacos()>
	at spoon.test.generics.GenericsTest.testMethodsWithGenericsWhoExtendsObject(GenericsTest.java:485)

[ERROR] testGenericMethodCallWithExtend(spoon.test.generics.GenericsTest)  Time elapsed: 0.074 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]A extends java.lang....> but was:<[E extends java.lang.Enum<E>]A extends java.lang....>
	at spoon.test.generics.GenericsTest.testGenericMethodCallWithExtend(GenericsTest.java:234)

[ERROR] testCtTypeReference_getSuperclass(spoon.test.generics.GenericsTest)  Time elapsed: 0.104 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...es.CelebrationLunch<[]spoon.test.generics....> but was:<...es.CelebrationLunch<[java.lang.Integer, java.lang.Long, java.lang.Double>.WeddingLunch<spoon.test.generics.testclasses.Mole>spoon.test.generics.testclasses.CelebrationLunch<]spoon.test.generics....>
	at spoon.test.generics.GenericsTest.testCtTypeReference_getSuperclass(GenericsTest.java:851)

[INFO] Running spoon.test.main.MainTest
[INFO] Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 220.646 s - in spoon.test.main.MainTest
[INFO] Running spoon.test.jdtimportbuilder.ImportBuilderTest
[ERROR] Tests run: 8, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.439 s <<< FAILURE! - in spoon.test.jdtimportbuilder.ImportBuilderTest
[ERROR] testWithImportFromItf(spoon.test.jdtimportbuilder.ImportBuilderTest)  Time elapsed: 0.091 s  <<< FAILURE!
java.lang.AssertionError: expected:<ALL_STATIC_MEMBERS> but was:<TYPE>
	at spoon.test.jdtimportbuilder.ImportBuilderTest.testWithImportFromItf(ImportBuilderTest.java:175)

[ERROR] testWithStaticInheritedImport(spoon.test.jdtimportbuilder.ImportBuilderTest)  Time elapsed: 0.095 s  <<< FAILURE!
java.lang.AssertionError: expected:<1> but was:<2>
	at spoon.test.jdtimportbuilder.ImportBuilderTest.testWithStaticInheritedImport(ImportBuilderTest.java:152)

[INFO] Running spoon.test.secondaryclasses.ClassesTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.256 s - in spoon.test.secondaryclasses.ClassesTest
[INFO] Running spoon.test.processing.ProcessingTest
[ERROR] Tests run: 10, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.389 s <<< FAILURE! - in spoon.test.processing.ProcessingTest
[ERROR] testInsertBegin(spoon.test.processing.ProcessingTest)  Time elapsed: 0.042 s  <<< FAILURE!
org.junit.ComparisonFailure: insert failed for method method2 expected:<int i = 0;[]> but was:<int i = 0;[int i = 0;]>
	at spoon.test.processing.ProcessingTest.testInsertBegin(ProcessingTest.java:59)

[ERROR] testInsertEnd(spoon.test.processing.ProcessingTest)  Time elapsed: 0.041 s  <<< FAILURE!
org.junit.ComparisonFailure: insert failed for method method2 expected:<int i = 0[]> but was:<int i = 0[int i = 0]>
	at spoon.test.processing.ProcessingTest.testInsertEnd(ProcessingTest.java:98)

[INFO] Running spoon.test.ctElement.ElementTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.test.ctElement.ElementTest
[INFO] Running spoon.test.ctElement.MetadataTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.035 s - in spoon.test.ctElement.MetadataTest
[INFO] Running spoon.test.trycatch.TryCatchTest
[ERROR] Tests run: 12, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.662 s <<< FAILURE! - in spoon.test.trycatch.TryCatchTest
[ERROR] testExceptionJava7(spoon.test.trycatch.TryCatchTest)  Time elapsed: 0.043 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<[]java.lang.System.exi...> but was:<[class Wrapper {
    static void wrap() throws java.lang.Throwable {
        class X {public void foo() { try{}catch(RuntimeException | Error e){System.exit(0);}}};;
    }
}]java.lang.System.exi...>
	at spoon.test.trycatch.TryCatchTest.testExceptionJava7(TryCatchTest.java:124)

[ERROR] testCatchOrder(spoon.test.trycatch.TryCatchTest)  Time elapsed: 0.067 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<[]java.lang.System.exi...> but was:<[class Wrapper {
    static void wrap() throws java.lang.Throwable {
        class X {public void foo() { try{}catch(RuntimeException e){java.lang.System.exit(0);}      catch(Exception e){}}};;
    }
}]java.lang.System.exi...>
	at spoon.test.trycatch.TryCatchTest.testCatchOrder(TryCatchTest.java:90)

[INFO] Running spoon.test.initializers.InitializerTest
[ERROR] Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.081 s <<< FAILURE! - in spoon.test.initializers.InitializerTest
[ERROR] testModelBuildingInitializer(spoon.test.initializers.InitializerTest)  Time elapsed: 0.044 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]x = 3> but was:<[5]x = 3>
	at spoon.test.initializers.InitializerTest.testModelBuildingInitializer(InitializerTest.java:63)

[INFO] Running spoon.test.literal.LiteralTest
2018-06-27 10:50:29,363 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable Longs at (/root/workspace/INRIA/spoon/397241434/src/test/resources/noclasspath/SecondaryIndexManager.java:611)
[ERROR] Tests run: 5, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.398 s <<< FAILURE! - in spoon.test.literal.LiteralTest
[ERROR] testCharLiteralInNoClasspath(spoon.test.literal.LiteralTest)  Time elapsed: 0.274 s  <<< FAILURE!
java.lang.AssertionError: expected:<:> but was:<,>
	at spoon.test.literal.LiteralTest.testCharLiteralInNoClasspath(LiteralTest.java:43)

[INFO] Running spoon.test.position.PositionTest
[INFO] Tests run: 19, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.864 s - in spoon.test.position.PositionTest
[INFO] Running spoon.test.type.TypeTest
[ERROR] Tests run: 13, Failures: 4, Errors: 0, Skipped: 0, Time elapsed: 0.543 s <<< FAILURE! - in spoon.test.type.TypeTest
[ERROR] testTypeAccessForTypeAccessInInstanceOf(spoon.test.type.TypeTest)  Time elapsed: 0.052 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<a instanceof java.[]util.Collection<?>> but was:<a instanceof java.[lang.Stringa instanceof java.]util.Collection<?>>
	at spoon.test.type.TypeTest.testTypeAccessForTypeAccessInInstanceOf(TypeTest.java:135)

[ERROR] testTypeReferenceInGenericsAndCasts(spoon.test.type.TypeTest)  Time elapsed: 0.05 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<java.lang.Runnable[]> but was:<java.lang.Runnable[java.lang.Runnable]>
	at spoon.test.type.TypeTest.testTypeReferenceInGenericsAndCasts(TypeTest.java:253)

[ERROR] testIntersectionTypeReferenceInGenericsAndCasts(spoon.test.type.TypeTest)  Time elapsed: 0.05 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...java.io.Serializable[]> but was:<...java.io.Serializable[java.lang.Runnable & java.io.Serializable]>
	at spoon.test.type.TypeTest.testIntersectionTypeReferenceInGenericsAndCasts(TypeTest.java:210)

[ERROR] testTypeAccessOfArrayObjectInFullyQualifiedName(spoon.test.type.TypeTest)  Time elapsed: 0.07 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<...nstanceof java.lang.[]Object[]> but was:<...nstanceof java.lang.[@spoon.test.annotation.testclasses.TypeAnnotation(integer = 1)
Object[]a instanceof java.lang.]Object[]>
	at spoon.test.type.TypeTest.testTypeAccessOfArrayObjectInFullyQualifiedName(TypeTest.java:160)

[INFO] Running spoon.test.constructor.ConstructorTest
[ERROR] Tests run: 7, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.459 s <<< FAILURE! - in spoon.test.constructor.ConstructorTest
[ERROR] testConstructorCallFactory(spoon.test.constructor.ConstructorTest)  Time elapsed: 0.051 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...java.util.ArrayList([]new java.util.ArrayL...> but was:<...java.util.ArrayList([)new java.util.ArrayList(]new java.util.ArrayL...>
	at spoon.test.constructor.ConstructorTest.testConstructorCallFactory(ConstructorTest.java:98)

[INFO] Running spoon.test.methodreference.MethodReferenceTest
[ERROR] Tests run: 13, Failures: 1, Errors: 6, Skipped: 0, Time elapsed: 1.321 s <<< FAILURE! - in spoon.test.methodreference.MethodReferenceTest
[ERROR] testReferenceToAConstructor(spoon.test.methodreference.MethodReferenceTest)  Time elapsed: 0.083 s  <<< ERROR!
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at spoon.test.methodreference.MethodReferenceTest.getCtExecutableReferenceExpression(MethodReferenceTest.java:297)
	at spoon.test.methodreference.MethodReferenceTest.testReferenceToAConstructor(MethodReferenceTest.java:120)

[ERROR] testReferenceToAnInstanceMethodOfMultiParticularObject(spoon.test.methodreference.MethodReferenceTest)  Time elapsed: 0.084 s  <<< ERROR!
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at spoon.test.methodreference.MethodReferenceTest.getCtExecutableReferenceExpression(MethodReferenceTest.java:297)
	at spoon.test.methodreference.MethodReferenceTest.testReferenceToAnInstanceMethodOfMultiParticularObject(MethodReferenceTest.java:94)

[ERROR] testReferenceToAClassParametrizedConstructor(spoon.test.methodreference.MethodReferenceTest)  Time elapsed: 0.084 s  <<< ERROR!
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at spoon.test.methodreference.MethodReferenceTest.getCtExecutableReferenceExpression(MethodReferenceTest.java:297)
	at spoon.test.methodreference.MethodReferenceTest.testReferenceToAClassParametrizedConstructor(MethodReferenceTest.java:133)

[ERROR] testReferenceToAnInstanceMethodOfAParticularObject(spoon.test.methodreference.MethodReferenceTest)  Time elapsed: 0.084 s  <<< ERROR!
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at spoon.test.methodreference.MethodReferenceTest.getCtExecutableReferenceExpression(MethodReferenceTest.java:297)
	at spoon.test.methodreference.MethodReferenceTest.testReferenceToAnInstanceMethodOfAParticularObject(MethodReferenceTest.java:81)

[ERROR] testReferenceToAJavaUtilClassConstructor(spoon.test.methodreference.MethodReferenceTest)  Time elapsed: 0.083 s  <<< ERROR!
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at spoon.test.methodreference.MethodReferenceTest.getCtExecutableReferenceExpression(MethodReferenceTest.java:297)
	at spoon.test.methodreference.MethodReferenceTest.testReferenceToAJavaUtilClassConstructor(MethodReferenceTest.java:146)

[ERROR] testReferenceToAStaticMethod(spoon.test.methodreference.MethodReferenceTest)  Time elapsed: 0.085 s  <<< FAILURE!
org.junit.ComparisonFailure: Target reference correspond to the enclosing class. expected:<...stclasses.Foo.Person[]> but was:<...stclasses.Foo.Person[::compareByAgetarzan.phone::compareByNumbersmyComparisonProvider::compareByNamejava.lang.String::compareToIgnoreCasejava.util.HashSet<spoon.test.methodreference.testclasses.Foo.Person>::newspoon.test.methodreference.testclasses.Foo.Person::newspoon.test.methodreference.testclasses.Foo.Type<java.lang.String>::newspoon.test.methodreference.testclasses.Foo.Person]>
	at spoon.test.methodreference.MethodReferenceTest.assertTargetedBy(MethodReferenceTest.java:275)
	at spoon.test.methodreference.MethodReferenceTest.testReferenceToAStaticMethod(MethodReferenceTest.java:71)

[ERROR] testReferenceToAnInstanceMethodOfAnArbitraryObjectOfAParticularType(spoon.test.methodreference.MethodReferenceTest)  Time elapsed: 0.083 s  <<< ERROR!
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at spoon.test.methodreference.MethodReferenceTest.getCtExecutableReferenceExpression(MethodReferenceTest.java:297)
	at spoon.test.methodreference.MethodReferenceTest.testReferenceToAnInstanceMethodOfAnArbitraryObjectOfAParticularType(MethodReferenceTest.java:107)

[INFO] Running spoon.test.refactoring.CtRenameLocalVariableRefactoringTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 11.285 s - in spoon.test.refactoring.CtRenameLocalVariableRefactoringTest
[INFO] Running spoon.test.refactoring.MethodsRefactoringTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.754 s - in spoon.test.refactoring.MethodsRefactoringTest
[INFO] Running spoon.test.refactoring.RefactoringTest
[ERROR] Tests run: 4, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.509 s <<< FAILURE! - in spoon.test.refactoring.RefactoringTest
[ERROR] testTransformedInstanceofAfterATransformation(spoon.test.refactoring.RefactoringTest)  Time elapsed: 0.096 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]spoon.test.refactori...> but was:<[o]spoon.test.refactori...>
	at spoon.test.refactoring.RefactoringTest.testTransformedInstanceofAfterATransformation(RefactoringTest.java:111)

[INFO] Running spoon.test.change.ChangeCollectorTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.042 s - in spoon.test.change.ChangeCollectorTest
[INFO] Running spoon.test.method_overriding.MethodOverriddingTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.143 s - in spoon.test.method_overriding.MethodOverriddingTest
[INFO] Running spoon.test.control.ControlTest
[ERROR] Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.077 s <<< FAILURE! - in spoon.test.control.ControlTest
[ERROR] testModelBuildingFor(spoon.test.control.ControlTest)  Time elapsed: 0.041 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<i[] < 2> but was:<i[nt i = 0i] < 2>
	at spoon.test.control.ControlTest.testModelBuildingFor(ControlTest.java:35)

[INFO] Running spoon.test.method.MethodTest
[ERROR] Tests run: 5, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.185 s <<< FAILURE! - in spoon.test.method.MethodTest
[ERROR] testSearchMethodWithGeneric(spoon.test.method.MethodTest)  Time elapsed: 0.04 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<...T extends java.lang.[]String> void method1...> but was:<...T extends java.lang.[Integer> void method1(T t) {
}public <T extends java.lang.]String> void method1...>
	at spoon.test.method.MethodTest.testSearchMethodWithGeneric(MethodTest.java:62)

[INFO] Running spoon.test.serializable.SourcePositionTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.076 s - in spoon.test.serializable.SourcePositionTest
[INFO] Running spoon.test.serializable.SerializableTest
[ERROR] Tests run: 3, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.148 s <<< FAILURE! - in spoon.test.serializable.SerializableTest
[ERROR] testSerialCtStatement(spoon.test.serializable.SerializableTest)  Time elapsed: 0.06 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...m.out.println(hello)[]> but was:<...m.out.println(hello)[java.lang.System.out.println(hello)]>
	at spoon.test.serializable.SerializableTest.testSerialCtStatement(SerializableTest.java:47)

[INFO] Running spoon.test.parameters.ParameterTest
2018-06-27 10:50:46,222 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable typeRatingFilters at (/root/workspace/INRIA/spoon/397241434/src/test/resources/noclasspath/Tacos.java:4)
[ERROR] Tests run: 3, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.156 s <<< FAILURE! - in spoon.test.parameters.ParameterTest
[ERROR] testParameterInNoClasspath(spoon.test.parameters.ParameterTest)  Time elapsed: 0.069 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...se.swt.graphics.Font[] font> but was:<...se.swt.graphics.Font[org.eclipse.swt.graphics.Font] font>
	at spoon.test.parameters.ParameterTest.testParameterInNoClasspath(ParameterTest.java:33)

[INFO] Running spoon.test.visibility.VisibilityTest
[ERROR] Tests run: 5, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.426 s <<< FAILURE! - in spoon.test.visibility.VisibilityTest
[ERROR] testFullyQualifiedNameOfTypeReferenceWithGeneric(spoon.test.visibility.VisibilityTest)  Time elapsed: 0.049 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]spoon.test.visibilit...> but was:<[(spoon.test.visibility.testclasses.A.B.i)]spoon.test.visibilit...>
	at spoon.test.visibility.VisibilityTest.testFullyQualifiedNameOfTypeReferenceWithGeneric(VisibilityTest.java:93)

[ERROR] testInvocationVisibilityInFieldDeclaration(spoon.test.visibility.VisibilityTest)  Time elapsed: 0.184 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]bound()> but was:<[Vec<Constr>Vec<Constr>org.sat4j.core.VecIntorg.sat4j.core.VecIntorg.sat4j.minisat.core.ActivityComparatororg.sat4j.minisat.core.SolverStatsorg.sat4j.core.VecIntorg.sat4j.minisat.core.VoidTracingorg.sat4j.core.VecIntorg.sat4j.core.VecIntorg.sat4j.core.VecIntorg.sat4j.minisat.core.ISimplifierorg.sat4j.minisat.core.ISimplifierorg.sat4j.minisat.core.ISimplifierorg.sat4j.minisat.core.ISimplifierorg.sat4j.core.VecIntorg.sat4j.core.VecIntVec<Propagatable>org.sat4j.minisat.core.Pairorg.sat4j.core.VecIntorg.sat4j.core.VecIntorg.sat4j.minisat.core.ConflictTimerAdapterorg.sat4j.minisat.core.ConflictTimerAdapterorg.sat4j.minisat.core.SearchParamsorg.sat4j.core.VecIntorg.sat4j.core.ConstrGrouporg.sat4j.core.VecIntorg.sat4j.core.VecIntorg.sat4j.minisat.core.LearnedConstraintsDeletionStrategyorg.sat4j.minisat.core.ConflictTimerAdapterorg.sat4j.minisat.core.LearnedConstraintsDeletionStrategyorg.sat4j.minisat.core.ConflictTimerContainerorg.sat4j.minisat.core.ConflictTimerAdapterorg.sat4j.specs.TimeoutExceptionorg.sat4j.specs.TimeoutExceptionorg.sat4j.minisat.core.Counterorg.sat4j.minisat.core.Counterorg.sat4j.minisat.core.Counterorg.sat4j.core.VecIntorg.sat4j.core.VecIntorg.sat4j.core.VecIntorg.sat4j.core.VecIntorg.sat4j.core.VecInt]bound()>
	at spoon.test.visibility.VisibilityTest.testInvocationVisibilityInFieldDeclaration(VisibilityTest.java:158)

[INFO] Running spoon.test.interfaces.TestInterfaceWithoutSetup
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.124 s - in spoon.test.interfaces.TestInterfaceWithoutSetup
[INFO] Running spoon.test.interfaces.InterfaceTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.269 s - in spoon.test.interfaces.InterfaceTest
[INFO] Running spoon.test.filters.FilterTest
2018-06-27 10:50:47,136 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-06-27 10:50:47,136 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-06-27 10:50:47,137 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-27 10:50:47,137 INFO spoon.Launcher - running Spoon...
2018-06-27 10:50:47,137 INFO spoon.Launcher - start processing...
2018-06-27 10:50:47,184 INFO spoon.Launcher - end of processing: 
2018-06-27 10:50:47,184 INFO spoon.Launcher - no errors, no warnings
2018-06-27 10:50:47,367 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-06-27 10:50:47,367 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-06-27 10:50:47,368 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-27 10:50:47,368 INFO spoon.Launcher - running Spoon...
2018-06-27 10:50:47,368 INFO spoon.Launcher - start processing...
2018-06-27 10:50:47,415 INFO spoon.Launcher - end of processing: 
2018-06-27 10:50:47,415 INFO spoon.Launcher - no errors, no warnings
2018-06-27 10:50:47,614 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-06-27 10:50:47,614 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-06-27 10:50:47,615 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-27 10:50:47,615 INFO spoon.Launcher - running Spoon...
2018-06-27 10:50:47,615 INFO spoon.Launcher - start processing...
2018-06-27 10:50:47,661 INFO spoon.Launcher - end of processing: 
2018-06-27 10:50:47,662 INFO spoon.Launcher - no errors, no warnings
2018-06-27 10:50:47,958 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-06-27 10:50:47,958 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-06-27 10:50:47,959 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-27 10:50:47,959 INFO spoon.Launcher - running Spoon...
2018-06-27 10:50:47,959 INFO spoon.Launcher - start processing...
2018-06-27 10:50:48,005 INFO spoon.Launcher - end of processing: 
2018-06-27 10:50:48,006 INFO spoon.Launcher - no errors, no warnings
2018-06-27 10:50:48,092 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-06-27 10:50:48,092 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-06-27 10:50:48,093 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-27 10:50:48,093 INFO spoon.Launcher - running Spoon...
2018-06-27 10:50:48,093 INFO spoon.Launcher - start processing...
2018-06-27 10:50:48,139 INFO spoon.Launcher - end of processing: 
2018-06-27 10:50:48,139 INFO spoon.Launcher - no errors, no warnings
2018-06-27 10:50:48,562 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-06-27 10:50:48,562 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-06-27 10:50:48,562 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-27 10:50:48,562 INFO spoon.Launcher - running Spoon...
2018-06-27 10:50:48,563 INFO spoon.Launcher - start processing...
2018-06-27 10:50:48,609 INFO spoon.Launcher - end of processing: 
2018-06-27 10:50:48,609 INFO spoon.Launcher - no errors, no warnings
2018-06-27 10:50:48,652 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-06-27 10:50:48,652 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-06-27 10:50:48,875 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-06-27 10:50:48,876 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-06-27 10:50:48,876 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-27 10:50:48,876 INFO spoon.Launcher - running Spoon...
2018-06-27 10:50:48,876 INFO spoon.Launcher - start processing...
2018-06-27 10:50:48,922 INFO spoon.Launcher - end of processing: 
2018-06-27 10:50:48,923 INFO spoon.Launcher - no errors, no warnings
2018-06-27 10:50:49,133 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-06-27 10:50:49,134 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-06-27 10:50:49,134 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-27 10:50:49,134 INFO spoon.Launcher - running Spoon...
2018-06-27 10:50:49,134 INFO spoon.Launcher - start processing...
2018-06-27 10:50:49,180 INFO spoon.Launcher - end of processing: 
2018-06-27 10:50:49,181 INFO spoon.Launcher - no errors, no warnings
2018-06-27 10:50:49,224 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-06-27 10:50:49,224 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-06-27 10:50:49,225 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-27 10:50:49,225 INFO spoon.Launcher - running Spoon...
2018-06-27 10:50:49,225 INFO spoon.Launcher - start processing...
2018-06-27 10:50:49,271 INFO spoon.Launcher - end of processing: 
2018-06-27 10:50:49,271 INFO spoon.Launcher - no errors, no warnings
2018-06-27 10:50:49,393 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-06-27 10:50:49,393 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-06-27 10:50:49,393 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-27 10:50:49,394 INFO spoon.Launcher - running Spoon...
2018-06-27 10:50:49,394 INFO spoon.Launcher - start processing...
2018-06-27 10:50:49,440 INFO spoon.Launcher - end of processing: 
2018-06-27 10:50:49,440 INFO spoon.Launcher - no errors, no warnings
2018-06-27 10:50:49,564 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-06-27 10:50:49,565 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-06-27 10:50:49,565 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-27 10:50:49,565 INFO spoon.Launcher - running Spoon...
2018-06-27 10:50:49,565 INFO spoon.Launcher - start processing...
2018-06-27 10:50:49,612 INFO spoon.Launcher - end of processing: 
2018-06-27 10:50:49,612 INFO spoon.Launcher - no errors, no warnings
2018-06-27 10:50:49,654 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-06-27 10:50:49,654 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-06-27 10:50:49,655 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-27 10:50:49,655 INFO spoon.Launcher - running Spoon...
2018-06-27 10:50:49,655 INFO spoon.Launcher - start processing...
2018-06-27 10:50:49,701 INFO spoon.Launcher - end of processing: 
2018-06-27 10:50:49,701 INFO spoon.Launcher - no errors, no warnings
2018-06-27 10:50:50,091 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-06-27 10:50:50,091 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-06-27 10:50:50,092 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-27 10:50:50,092 INFO spoon.Launcher - running Spoon...
2018-06-27 10:50:50,092 INFO spoon.Launcher - start processing...
2018-06-27 10:50:50,138 INFO spoon.Launcher - end of processing: 
2018-06-27 10:50:50,138 INFO spoon.Launcher - no errors, no warnings
2018-06-27 10:50:50,179 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-06-27 10:50:50,179 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-06-27 10:50:50,180 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-27 10:50:50,180 INFO spoon.Launcher - running Spoon...
2018-06-27 10:50:50,180 INFO spoon.Launcher - start processing...
2018-06-27 10:50:50,226 INFO spoon.Launcher - end of processing: 
2018-06-27 10:50:50,226 INFO spoon.Launcher - no errors, no warnings
2018-06-27 10:50:50,527 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-06-27 10:50:50,528 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-06-27 10:50:50,528 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-27 10:50:50,528 INFO spoon.Launcher - running Spoon...
2018-06-27 10:50:50,528 INFO spoon.Launcher - start processing...
2018-06-27 10:50:50,578 INFO spoon.Launcher - end of processing: 
2018-06-27 10:50:50,579 INFO spoon.Launcher - no errors, no warnings
2018-06-27 10:50:50,585 INFO spoon.Launcher - Step filter CtClass only) spoon.reflect.CtModelImpl$CtRootPackage cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtRootPackage: unnamed package
2018-06-27 10:50:50,585 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtPackageImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageImpl: spoon
2018-06-27 10:50:50,585 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtPackageImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageImpl: spoon.test
2018-06-27 10:50:50,585 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtPackageImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageImpl: spoon.test.filters
2018-06-27 10:50:50,585 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtPackageImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageImpl: spoon.test.filters.testclasses
2018-06-27 10:50:50,587 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-06-27 10:50:50,587 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,587 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}
2018-06-27 10:50:50,587 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}
2018-06-27 10:50:50,587 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()
2018-06-27 10:50:50,587 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()
2018-06-27 10:50:50,588 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Object
2018-06-27 10:50:50,588 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.lang
2018-06-27 10:50:50,588 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Object
2018-06-27 10:50:50,588 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang
2018-06-27 10:50:50,590 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}
2018-06-27 10:50:50,590 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Override
2018-06-27 10:50:50,590 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Override
2018-06-27 10:50:50,590 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.lang
2018-06-27 10:50:50,590 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Override
2018-06-27 10:50:50,591 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.lang
2018-06-27 10:50:50,591 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostada
2018-06-27 10:50:50,591 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,592 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}
2018-06-27 10:50:50,592 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}
2018-06-27 10:50:50,592 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtNewClassImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtNewClassImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}
2018-06-27 10:50:50,592 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()
2018-06-27 10:50:50,594 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1
2018-06-27 10:50:50,594 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostada
2018-06-27 10:50:50,594 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,594 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostada
2018-06-27 10:50:50,594 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,595 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostada
2018-06-27 10:50:50,595 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,595 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}
2018-06-27 10:50:50,595 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}
2018-06-27 10:50:50,595 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()
2018-06-27 10:50:50,595 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()
2018-06-27 10:50:50,595 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostada
2018-06-27 10:50:50,596 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,596 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostada
2018-06-27 10:50:50,596 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,596 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}
2018-06-27 10:50:50,596 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Override
2018-06-27 10:50:50,596 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Override
2018-06-27 10:50:50,597 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.lang
2018-06-27 10:50:50,597 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Override
2018-06-27 10:50:50,597 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.lang
2018-06-27 10:50:50,597 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid
2018-06-27 10:50:50,597 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}
2018-06-27 10:50:50,597 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()
2018-06-27 10:50:50,597 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()super
2018-06-27 10:50:50,598 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()super
2018-06-27 10:50:50,598 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostada
2018-06-27 10:50:50,598 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,598 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()
2018-06-27 10:50:50,598 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostada
2018-06-27 10:50:50,598 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,598 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid
2018-06-27 10:50:50,599 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}
2018-06-27 10:50:50,599 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Override
2018-06-27 10:50:50,599 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Override
2018-06-27 10:50:50,599 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.lang
2018-06-27 10:50:50,599 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Override
2018-06-27 10:50:50,599 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.lang
2018-06-27 10:50:50,599 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostada
2018-06-27 10:50:50,600 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,600 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}
2018-06-27 10:50:50,600 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()
2018-06-27 10:50:50,600 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()
2018-06-27 10:50:50,600 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()super
2018-06-27 10:50:50,600 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()super
2018-06-27 10:50:50,600 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostada
2018-06-27 10:50:50,601 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,601 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()
2018-06-27 10:50:50,601 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostada
2018-06-27 10:50:50,601 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,601 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada
2018-06-27 10:50:50,601 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,601 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();
2018-06-27 10:50:50,602 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();void
2018-06-27 10:50:50,602 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}
2018-06-27 10:50:50,602 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void
2018-06-27 10:50:50,602 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}
2018-06-27 10:50:50,602 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
2018-06-27 10:50:50,602 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostada
2018-06-27 10:50:50,603 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,603 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}
2018-06-27 10:50:50,603 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}
2018-06-27 10:50:50,603 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()
2018-06-27 10:50:50,603 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()
2018-06-27 10:50:50,604 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostada
2018-06-27 10:50:50,604 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,604 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostada
2018-06-27 10:50:50,604 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,605 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}
2018-06-27 10:50:50,605 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Override
2018-06-27 10:50:50,605 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Override
2018-06-27 10:50:50,605 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.lang
2018-06-27 10:50:50,605 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Override
2018-06-27 10:50:50,605 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.lang
2018-06-27 10:50:50,606 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid
2018-06-27 10:50:50,606 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}
2018-06-27 10:50:50,606 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")
2018-06-27 10:50:50,606 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.out
2018-06-27 10:50:50,607 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.System
2018-06-27 10:50:50,607 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.System
2018-06-27 10:50:50,607 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.lang
2018-06-27 10:50:50,607 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.out
2018-06-27 10:50:50,607 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.System
2018-06-27 10:50:50,607 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.lang
2018-06-27 10:50:50,608 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStream
2018-06-27 10:50:50,608 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.io
2018-06-27 10:50:50,608 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)
2018-06-27 10:50:50,608 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStream
2018-06-27 10:50:50,608 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.io
2018-06-27 10:50:50,608 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoid
2018-06-27 10:50:50,609 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.String
2018-06-27 10:50:50,609 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang
2018-06-27 10:50:50,609 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"
2018-06-27 10:50:50,609 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.String
2018-06-27 10:50:50,609 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.lang
2018-06-27 10:50:50,609 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}
2018-06-27 10:50:50,610 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}void
2018-06-27 10:50:50,610 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtParameterImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtParameterImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredient
2018-06-27 10:50:50,610 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.String
2018-06-27 10:50:50,610 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang
2018-06-27 10:50:50,610 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}
2018-06-27 10:50:50,611 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
2018-06-27 10:50:50,611 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayList
2018-06-27 10:50:50,611 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.util
2018-06-27 10:50:50,612 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtFieldImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;
2018-06-27 10:50:50,612 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int
2018-06-27 10:50:50,612 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0
2018-06-27 10:50:50,612 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0int
2018-06-27 10:50:50,613 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}
2018-06-27 10:50:50,613 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}
2018-06-27 10:50:50,613 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()
2018-06-27 10:50:50,613 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()
2018-06-27 10:50:50,614 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayList
2018-06-27 10:50:50,614 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.util
2018-06-27 10:50:50,614 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList
2018-06-27 10:50:50,614 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.util
2018-06-27 10:50:50,614 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtAssignmentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAssignmentImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0
2018-06-27 10:50:50,615 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0int
2018-06-27 10:50:50,615 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldWriteImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldWriteImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfield
2018-06-27 10:50:50,615 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThisAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThisAccessImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthis
2018-06-27 10:50:50,615 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacos
2018-06-27 10:50:50,615 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses
2018-06-27 10:50:50,616 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacos
2018-06-27 10:50:50,616 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacos
2018-06-27 10:50:50,616 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses
2018-06-27 10:50:50,616 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfield
2018-06-27 10:50:50,616 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacos
2018-06-27 10:50:50,617 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses
2018-06-27 10:50:50,617 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint
2018-06-27 10:50:50,617 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0
2018-06-27 10:50:50,617 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0int
2018-06-27 10:50:50,618 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}
2018-06-27 10:50:50,618 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void
2018-06-27 10:50:50,618 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}
2018-06-27 10:50:50,619 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtAssignmentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAssignmentImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()
2018-06-27 10:50:50,619 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()int
2018-06-27 10:50:50,619 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldWriteImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldWriteImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfield
2018-06-27 10:50:50,619 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThisAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThisAccessImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfield
2018-06-27 10:50:50,620 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacos
2018-06-27 10:50:50,620 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses
2018-06-27 10:50:50,620 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacos
2018-06-27 10:50:50,620 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacos
2018-06-27 10:50:50,620 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses
2018-06-27 10:50:50,620 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfield
2018-06-27 10:50:50,621 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacos
2018-06-27 10:50:50,621 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses
2018-06-27 10:50:50,621 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint
2018-06-27 10:50:50,621 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()
2018-06-27 10:50:50,622 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()super
2018-06-27 10:50:50,622 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()super
2018-06-27 10:50:50,622 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayList
2018-06-27 10:50:50,622 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.util
2018-06-27 10:50:50,622 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()
2018-06-27 10:50:50,623 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayList
2018-06-27 10:50:50,623 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.util
2018-06-27 10:50:50,623 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilint
2018-06-27 10:50:50,623 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)
2018-06-27 10:50:50,623 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Object
2018-06-27 10:50:50,624 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.lang
2018-06-27 10:50:50,624 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)
2018-06-27 10:50:50,624 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)super
2018-06-27 10:50:50,624 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)super
2018-06-27 10:50:50,625 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayList
2018-06-27 10:50:50,625 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.util
2018-06-27 10:50:50,625 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)
2018-06-27 10:50:50,625 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayList
2018-06-27 10:50:50,625 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.util
2018-06-27 10:50:50,626 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Object
2018-06-27 10:50:50,626 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.lang
2018-06-27 10:50:50,626 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langint
2018-06-27 10:50:50,626 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfield
2018-06-27 10:50:50,626 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThisAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThisAccessImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfield
2018-06-27 10:50:50,627 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacos
2018-06-27 10:50:50,627 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses
2018-06-27 10:50:50,627 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacos
2018-06-27 10:50:50,627 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacos
2018-06-27 10:50:50,627 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses
2018-06-27 10:50:50,628 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfield
2018-06-27 10:50:50,628 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacos
2018-06-27 10:50:50,628 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses
2018-06-27 10:50:50,628 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint
2018-06-27 10:50:50,629 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
2018-06-27 10:50:50,629 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtInterfaceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInterfaceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}
2018-06-27 10:50:50,629 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtInterfaceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInterfaceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}
2018-06-27 10:50:50,629 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();
2018-06-27 10:50:50,630 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();void
2018-06-27 10:50:50,630 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtInterfaceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInterfaceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}
2018-06-27 10:50:50,630 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foo
2018-06-27 10:50:50,630 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclasses
2018-06-27 10:50:50,631 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();
2018-06-27 10:50:50,631 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostada
2018-06-27 10:50:50,631 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,631 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
2018-06-27 10:50:50,632 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostada
2018-06-27 10:50:50,632 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,632 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}
2018-06-27 10:50:50,633 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}
2018-06-27 10:50:50,633 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()
2018-06-27 10:50:50,634 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()
2018-06-27 10:50:50,634 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostada
2018-06-27 10:50:50,634 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,635 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostada
2018-06-27 10:50:50,635 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,635 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}
2018-06-27 10:50:50,636 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Override
2018-06-27 10:50:50,636 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Override
2018-06-27 10:50:50,636 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.lang
2018-06-27 10:50:50,637 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Override
2018-06-27 10:50:50,637 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.lang
2018-06-27 10:50:50,637 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid
2018-06-27 10:50:50,637 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}
2018-06-27 10:50:50,638 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")
2018-06-27 10:50:50,638 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.out
2018-06-27 10:50:50,639 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.System
2018-06-27 10:50:50,639 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.System
2018-06-27 10:50:50,639 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.lang
2018-06-27 10:50:50,639 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.out
2018-06-27 10:50:50,640 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.System
2018-06-27 10:50:50,640 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.lang
2018-06-27 10:50:50,640 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStream
2018-06-27 10:50:50,641 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.io
2018-06-27 10:50:50,641 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)
2018-06-27 10:50:50,641 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStream
2018-06-27 10:50:50,641 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.io
2018-06-27 10:50:50,642 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoid
2018-06-27 10:50:50,642 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.String
2018-06-27 10:50:50,642 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang
2018-06-27 10:50:50,643 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"
2018-06-27 10:50:50,643 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.String
2018-06-27 10:50:50,643 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.lang
2018-06-27 10:50:50,644 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()
2018-06-27 10:50:50,644 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()super
2018-06-27 10:50:50,645 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()super
2018-06-27 10:50:50,645 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostada
2018-06-27 10:50:50,645 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,646 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()
2018-06-27 10:50:50,646 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostada
2018-06-27 10:50:50,646 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,647 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid
2018-06-27 10:50:50,647 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
2018-06-27 10:50:50,648 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostada
2018-06-27 10:50:50,648 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,648 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}
2018-06-27 10:50:50,649 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}
2018-06-27 10:50:50,649 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()
2018-06-27 10:50:50,650 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()
2018-06-27 10:50:50,650 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Object
2018-06-27 10:50:50,650 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.lang
2018-06-27 10:50:50,651 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Object
2018-06-27 10:50:50,651 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang
2018-06-27 10:50:50,651 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}
2018-06-27 10:50:50,652 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Override
2018-06-27 10:50:50,652 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Override
2018-06-27 10:50:50,653 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.lang
2018-06-27 10:50:50,653 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Override
2018-06-27 10:50:50,653 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.lang
2018-06-27 10:50:50,654 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostada
2018-06-27 10:50:50,654 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,654 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}
2018-06-27 10:50:50,655 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return null
2018-06-27 10:50:50,655 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull
2018-06-27 10:50:50,655 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>
2018-06-27 10:50:50,655 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}
2018-06-27 10:50:50,656 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void
2018-06-27 10:50:50,656 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}
2018-06-27 10:50:50,656 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()
2018-06-27 10:50:50,656 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>
2018-06-27 10:50:50,657 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.util
2018-06-27 10:50:50,657 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.String
2018-06-27 10:50:50,657 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.lang
2018-06-27 10:50:50,657 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtConstructorCallImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorCallImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()
2018-06-27 10:50:50,658 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()
2018-06-27 10:50:50,658 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayList
2018-06-27 10:50:50,658 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.util
2018-06-27 10:50:50,658 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>
2018-06-27 10:50:50,658 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.util
2018-06-27 10:50:50,659 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.String
2018-06-27 10:50:50,659 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.lang
2018-06-27 10:50:50,659 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()
2018-06-27 10:50:50,659 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()strings
2018-06-27 10:50:50,660 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstrings
2018-06-27 10:50:50,660 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>
2018-06-27 10:50:50,660 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.util
2018-06-27 10:50:50,660 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.String
2018-06-27 10:50:50,661 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.lang
2018-06-27 10:50:50,661 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()
2018-06-27 10:50:50,661 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayList
2018-06-27 10:50:50,661 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.util
2018-06-27 10:50:50,661 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint
2018-06-27 10:50:50,661 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
2018-06-27 10:50:50,662 INFO spoon.Launcher - Step 6) Skipped element, because CtFunction#accept(input) returned false
Parameter 1) CtMethodImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();
2018-06-27 10:50:50,662 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostada
2018-06-27 10:50:50,662 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,663 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honey
2018-06-27 10:50:50,663 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclasses
2018-06-27 10:50:50,663 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}
2018-06-27 10:50:50,663 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}
2018-06-27 10:50:50,663 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()
2018-06-27 10:50:50,664 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()
2018-06-27 10:50:50,664 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostada
2018-06-27 10:50:50,664 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,664 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostada
2018-06-27 10:50:50,664 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,665 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}
2018-06-27 10:50:50,665 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Override
2018-06-27 10:50:50,665 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Override
2018-06-27 10:50:50,665 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.lang
2018-06-27 10:50:50,665 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Override
2018-06-27 10:50:50,666 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.lang
2018-06-27 10:50:50,666 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostada
2018-06-27 10:50:50,666 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,666 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}
2018-06-27 10:50:50,666 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}
2018-06-27 10:50:50,667 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtNewClassImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtNewClassImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}
2018-06-27 10:50:50,667 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()
2018-06-27 10:50:50,668 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1
2018-06-27 10:50:50,668 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostada
2018-06-27 10:50:50,668 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,668 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostada
2018-06-27 10:50:50,668 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,669 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostada
2018-06-27 10:50:50,669 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,669 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}
2018-06-27 10:50:50,669 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}
2018-06-27 10:50:50,669 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()
2018-06-27 10:50:50,670 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()
2018-06-27 10:50:50,670 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostada
2018-06-27 10:50:50,670 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,670 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostada
2018-06-27 10:50:50,671 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,671 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}
2018-06-27 10:50:50,671 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Override
2018-06-27 10:50:50,671 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Override
2018-06-27 10:50:50,671 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.lang
2018-06-27 10:50:50,672 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Override
2018-06-27 10:50:50,672 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.lang
2018-06-27 10:50:50,672 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid
2018-06-27 10:50:50,672 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}
2018-06-27 10:50:50,672 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3
2018-06-27 10:50:50,673 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int
2018-06-27 10:50:50,673 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3
2018-06-27 10:50:50,673 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3int
2018-06-27 10:50:50,673 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()
2018-06-27 10:50:50,674 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()super
2018-06-27 10:50:50,674 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()super
2018-06-27 10:50:50,674 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostada
2018-06-27 10:50:50,674 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,674 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()
2018-06-27 10:50:50,675 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostada
2018-06-27 10:50:50,675 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses
2018-06-27 10:50:50,675 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid
2018-06-27 10:50:50,675 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}
2018-06-27 10:50:50,675 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}@java.lang.Override
2018-06-27 10:50:50,676 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}@java.lang.Overridejava.lang.Override
2018-06-27 10:50:50,676 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}@java.lang.Overridejava.lang.Overridejava.lang
2018-06-27 10:50:50,676 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Override
2018-06-27 10:50:50,676 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.lang
2018-06-27 10:50:50,676 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid
2018-06-27 10:50:50,677 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
}
2018-06-27 10:50:50,677 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
}@java.lang.Override
public java.lang.String toString() {
    return "";
}
2018-06-27 10:50:50,677 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
}@java.lang.Override
public java.lang.String toString() {
    return "";
}@java.lang.Override
2018-06-27 10:50:50,677 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
}@java.lang.Override
public java.lang.String toString() {
    return "";
}@java.lang.Overridejava.lang.Override
2018-06-27 10:50:50,678 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
}@java.lang.Override
public java.lang.String toString() {
    return "";
}@java.lang.Overridejava.lang.Overridejava.lang
2018-06-27 10:50:50,678 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
}@java.lang.Override
public java.lang.String toString() {
    return "";
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Override
2018-06-27 10:50:50,678 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
}@java.lang.Override
public java.lang.String toString() {
    return "";
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.lang
2018-06-27 10:50:50,679 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
}@java.lang.Override
public java.lang.String toString() {
    return "";
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langjava.lang.String
2018-06-27 10:50:50,679 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
}@java.lang.Override
public java.lang.String toString() {
    return "";
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langjava.lang.Stringjava.lang
2018-06-27 10:50:50,679 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
}@java.lang.Override
public java.lang.String toString() {
    return "";
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langjava.lang.Stringjava.lang{
    return "";
}
2018-06-27 10:50:50,679 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
}@java.lang.Override
public java.lang.String toString() {
    return "";
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langjava.lang.Stringjava.lang{
    return "";
}return ""
2018-06-27 10:50:50,679 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
}@java.lang.Override
public java.lang.String toString() {
    return "";
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langjava.lang.Stringjava.lang{
    return "";
}return """"
2018-06-27 10:50:50,680 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
}@java.lang.Override
public java.lang.String toString() {
    return "";
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langjava.lang.Stringjava.lang{
    return "";
}return """"java.lang.String
2018-06-27 10:50:50,680 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
}@java.lang.Override
public java.lang.String toString() {
    return "";
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langjava.lang.Stringjava.lang{
    return "";
}return """"java.lang.Stringjava.lang
2018-06-27 10:50:50,680 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
}@java.lang.Override
public java.lang.String toString() {
    return "";
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langjava.lang.Stringjava.lang{
    return "";
}return """"java.lang.Stringjava.lang@java.lang.Override
public void honey() {
}
2018-06-27 10:50:50,680 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
}@java.lang.Override
public java.lang.String toString() {
    return "";
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langjava.lang.Stringjava.lang{
    return "";
}return """"java.lang.Stringjava.lang@java.lang.Override
public void honey() {
}@java.lang.Override
2018-06-27 10:50:50,680 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
}@java.lang.Override
public java.lang.String toString() {
    return "";
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langjava.lang.Stringjava.lang{
    return "";
}return """"java.lang.Stringjava.lang@java.lang.Override
public void honey() {
}@java.lang.Overridejava.lang.Override
2018-06-27 10:50:50,681 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
}@java.lang.Override
public java.lang.String toString() {
    return "";
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langjava.lang.Stringjava.lang{
    return "";
}return """"java.lang.Stringjava.lang@java.lang.Override
public void honey() {
}@java.lang.Overridejava.lang.Overridejava.lang
2018-06-27 10:50:50,681 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
}@java.lang.Override
public java.lang.String toString() {
    return "";
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langjava.lang.Stringjava.lang{
    return "";
}return """"java.lang.Stringjava.lang@java.lang.Override
public void honey() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Override
2018-06-27 10:50:50,681 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
}@java.lang.Override
public java.lang.String toString() {
    return "";
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langjava.lang.Stringjava.lang{
    return "";
}return """"java.lang.Stringjava.lang@java.lang.Override
public void honey() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.lang
2018-06-27 10:50:50,681 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
}@java.lang.Override
public java.lang.String toString() {
    return "";
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langjava.lang.Stringjava.lang{
    return "";
}return """"java.lang.Stringjava.lang@java.lang.Override
public void honey() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid
2018-06-27 10:50:50,682 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
}@java.lang.Override
public java.lang.String toString() {
    return "";
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langjava.lang.Stringjava.lang{
    return "";
}return """"java.lang.Stringjava.lang@java.lang.Override
public void honey() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
}
2018-06-27 10:50:50,682 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
}@java.lang.Override
public java.lang.String toString() {
    return "";
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langjava.lang.Stringjava.lang{
    return "";
}return """"java.lang.Stringjava.lang@java.lang.Override
public void honey() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
}public void foo() {
}
2018-06-27 10:50:50,682 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
}@java.lang.Override
public java.lang.String toString() {
    return "";
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langjava.lang.Stringjava.lang{
    return "";
}return """"java.lang.Stringjava.lang@java.lang.Override
public void honey() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
}public void foo() {
}void
2018-06-27 10:50:50,682 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
}@java.lang.Override
public java.lang.String toString() {
    return "";
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langjava.lang.Stringjava.lang{
    return "";
}return """"java.lang.Stringjava.lang@java.lang.Override
public void honey() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
}public void foo() {
}void{
}
2018-06-27 10:50:50,682 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesAbstractTostada() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}spoon.test.filters.testclasses.AbstractTostada$1()spoon.test.filters.testclasses.AbstractTostada.1spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    super.prepare();
}super.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return super.make();
}return super.make()super.make()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesmake()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassespublic abstract void prepare();voidpublic void honey() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesAntojito() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("Antojito");
}java.lang.System.out.println("Antojito")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"Antojito"java.lang.Stringjava.langpublic void prepare(java.lang.String ingredient) {
}voidjava.lang.String ingredientjava.lang.Stringjava.lang{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */java.util.ArrayListjava.utilprivate int myfield = 0;int0intFieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}{
    super();
    this.myfield = 0;
}super()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayListjava.utilthis.myfield = 0intthis.myfieldthisspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint0intpublic void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}void{
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}myfield = super.size()intmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesintsuper.size()superjava.util.ArrayListjava.utilsize()java.util.ArrayListjava.utilintjava.lang.Object o = super.get(myfield)java.lang.Objectjava.langsuper.get(myfield)superjava.util.ArrayListjava.utilget(int)java.util.ArrayListjava.utiljava.lang.Objectjava.langintmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesmyfieldspoon.test.filters.testclasses.FieldAccessFilterTacosspoon.test.filters.testclassesint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */interface Foo {}interface Honey {
    void honey();
}void honey();voidpublic interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}spoon.test.filters.testclasses.Foospoon.test.filters.testclassesspoon.test.filters.testclasses.ITostada make();spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesSubTostada() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    java.lang.System.out.println("SubTostada");
    super.prepare();
}java.lang.System.out.println("SubTostada")java.lang.System.outjava.lang.Systemjava.lang.Systemjava.langjava.lang.System.outjava.lang.Systemjava.langjava.io.PrintStreamjava.ioprintln(java.lang.String)java.io.PrintStreamjava.iovoidjava.lang.Stringjava.lang"SubTostada"java.lang.Stringjava.langsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */spoon.test.filters.testclasses.ITostadaspoon.test.filters.testclassesTacos() {
}{
}super()java.lang.Object()java.lang.Objectjava.langjava.lang.Objectjava.lang@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return null;
}return nullnull<nulltype>public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}void{
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()java.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langnew java.util.ArrayList<java.lang.String>()java.util.ArrayList()java.util.ArrayListjava.utiljava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langstrings.size()stringsstringsjava.util.ArrayList<java.lang.String>java.utiljava.lang.Stringjava.langsize()java.util.ArrayListjava.utilint/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */void honey();spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Honeyspoon.test.filters.testclassesTostada() {
}{
}super()spoon.test.filters.testclasses.AbstractTostada()spoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.AbstractTostadaspoon.test.filters.testclasses@java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langspoon.test.filters.testclasses.ITostadaspoon.test.filters.testclasses{
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}spoon.test.filters.testclasses.Tostada$1()spoon.test.filters.testclasses.Tostada.1spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses1() {
}{
}super()spoon.test.filters.testclasses.Tostada()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclasses@java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
    int a = 3;
    super.prepare();
}int a = 3int3intsuper.prepare()superspoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesprepare()spoon.test.filters.testclasses.Tostadaspoon.test.filters.testclassesvoid@java.lang.Override
public void prepare() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
}@java.lang.Override
public java.lang.String toString() {
    return "";
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langjava.lang.Stringjava.lang{
    return "";
}return """"java.lang.Stringjava.lang@java.lang.Override
public void honey() {
}@java.lang.Overridejava.lang.Overridejava.langjava.lang.Overridejava.langvoid{
}public void foo() {
}void{
}/**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
[ERROR] Tests run: 43, Failures: 2, Errors: 1, Skipped: 0, Time elapsed: 3.836 s <<< FAILURE! - in spoon.test.filters.FilterTest
[ERROR] testFilters(spoon.test.filters.FilterTest)  Time elapsed: 0.043 s  <<< FAILURE!
java.lang.AssertionError: expected:<2> but was:<0>
	at spoon.test.filters.FilterTest.testFilters(FilterTest.java:97)

[ERROR] testOverridingMethodFromAbstractClass(spoon.test.filters.FilterTest)  Time elapsed: 0.098 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...ilters.testclasses.A[bstractTostada$1]> but was:<...ilters.testclasses.A[ntojito]>
	at spoon.test.filters.FilterTest.testOverridingMethodFromAbstractClass(FilterTest.java:271)

[ERROR] testOverridingMethodFromInterface(spoon.test.filters.FilterTest)  Time elapsed: 0.097 s  <<< ERROR!
java.lang.NullPointerException
	at spoon.test.filters.FilterTest.testOverridingMethodFromInterface(FilterTest.java:320)

[INFO] Running spoon.test.filters.CUFilterTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 s - in spoon.test.filters.CUFilterTest
[INFO] Running spoon.test.constructorcallnewclass.ConstructorCallTest
[ERROR] Tests run: 6, Failures: 5, Errors: 0, Skipped: 0, Time elapsed: 0.306 s <<< FAILURE! - in spoon.test.constructorcallnewclass.ConstructorCallTest
[ERROR] testCoreConstructorCall(spoon.test.constructorcallnewclass.ConstructorCallTest)  Time elapsed: 0.053 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<new []Bar()> but was:<new [Foo()new ]Bar()>
	at spoon.test.constructorcallnewclass.ConstructorCallTest.testCoreConstructorCall(ConstructorCallTest.java:123)

[ERROR] testConstructorCallStringWithoutParameters(spoon.test.constructorcallnewclass.ConstructorCallTest)  Time elapsed: 0.05 s  <<< FAILURE!
java.lang.AssertionError: Constructor call is typed by the class of the constructor expected:<class java.lang.String> but was:<interface spoon.test.constructorcallnewclass.testclasses.Foo$Bar>
	at spoon.test.constructorcallnewclass.ConstructorCallTest.assertConstructorCallWithType(ConstructorCallTest.java:110)
	at spoon.test.constructorcallnewclass.ConstructorCallTest.testConstructorCallStringWithoutParameters(ConstructorCallTest.java:53)

[ERROR] testConstructorCallWithGenericArray(spoon.test.constructorcallnewclass.ConstructorCallTest)  Time elapsed: 0.051 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]> but was:<[new java.lang.String()new java.lang.String()new java.lang.String("")new java.lang.String()new spoon.test.constructorcallnewclass.testclasses.Foo()new java.lang.String()new spoon.test.constructorcallnewclass.testclasses.Foo()new java.lang.String("")new spoon.test.constructorcallnewclass.testclasses.Foo(42)new java.lang.String("")new spoon.test.constructorcallnewclass.testclasses.Foo(42)new spoon.test.constructorcallnewclass.testclasses.Foo()new java.lang.Object() {}new java.lang.String("")new java.lang.Object() {}new spoon.test.constructorcallnewclass.testclasses.Foo()new java.lang.Object() {}new spoon.test.constructorcallnewclass.testclasses.Foo(42)new spoon.test.constructorcallnewclass.testclasses.Foo.Bar() {}new java.lang.String("")new spoon.test.constructorcallnewclass.testclasses.Foo.Bar() {}new spoon.test.constructorcallnewclass.testclasses.Foo(42)new spoon.test.constructorcallnewclass.testclasses.Foo.Bar() {}new java.lang.Object() {}new spoon.test.constructorcallnewclass.testclasses.Foo.Tacos<java.lang.String>() {}new java.lang.String("")new spoon.test.constructorcallnewclass.testclasses.Foo.Tacos<java.lang.String>() {}new spoon.test.constructorcallnewclass.testclasses.Foo(42)new spoon.test.constructorcallnewclass.testclasses.Foo.Tacos<java.lang.String>() {}new java.lang.Object() {}new spoon.test.constructorcallnewclass.testclasses.Foo.Tacos<java.lang.String>() {}new spoon.test.constructorcallnewclass.testclasses.Foo.Bar() {}new spoon.test.constructorcallnewclass.testclasses.Foo.BarImpl(1) {}new java.lang.String("")new spoon.test.constructorcallnewclass.testclasses.Foo.BarImpl(1) {}new spoon.test.constructorcallnewclass.testclasses.Foo(42)new spoon.test.constructorcallnewclass.testclasses.Foo.BarImpl(1) {}new spoon.test.constructorcallnewclass.testclasses.Foo.Bar() {}new spoon.test.constructorcallnewclass.testclasses.Foo.BarImpl(1) {}new spoon.test.constructorcallnewclass.testclasses.Foo.Tacos<java.lang.String>() {}]>
	at spoon.test.constructorcallnewclass.ConstructorCallTest.testConstructorCallWithGenericArray(ConstructorCallTest.java:90)

[ERROR] testConstructorCallStringWithParameters(spoon.test.constructorcallnewclass.ConstructorCallTest)  Time elapsed: 0.051 s  <<< FAILURE!
java.lang.AssertionError: Constructor call is typed by the class of the constructor expected:<class java.lang.String> but was:<interface spoon.test.constructorcallnewclass.testclasses.Foo$Tacos>
	at spoon.test.constructorcallnewclass.ConstructorCallTest.assertConstructorCallWithType(ConstructorCallTest.java:110)
	at spoon.test.constructorcallnewclass.ConstructorCallTest.testConstructorCallStringWithParameters(ConstructorCallTest.java:61)

[ERROR] testConstructorCallObjectWithoutParameters(spoon.test.constructorcallnewclass.ConstructorCallTest)  Time elapsed: 0.05 s  <<< FAILURE!
java.lang.AssertionError: Constructor call is typed by the class of the constructor expected:<class spoon.test.constructorcallnewclass.testclasses.Foo> but was:<class java.lang.Object>
	at spoon.test.constructorcallnewclass.ConstructorCallTest.assertConstructorCallWithType(ConstructorCallTest.java:110)
	at spoon.test.constructorcallnewclass.ConstructorCallTest.testConstructorCallObjectWithoutParameters(ConstructorCallTest.java:69)

[INFO] Running spoon.test.constructorcallnewclass.NewClassTest
[ERROR] Tests run: 7, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.464 s <<< FAILURE! - in spoon.test.constructorcallnewclass.NewClassTest
[ERROR] testCtNewClassInNoClasspath(spoon.test.constructorcallnewclass.NewClassTest)  Time elapsed: 0.137 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]org.apache.lucene.st...> but was:<[SegmentInfosorg.apache.lucene.store.RAMDirectoryorg.apache.lucene.store.Lock.Withorg.apache.lucene.store.Lock.Withorg.apache.lucene.store.Lock.Withorg.apache.lucene.store.Lock.WithSegmentInfosorg.apache.lucene.store.Lock.Withorg.apache.lucene.store.Lock.Withorg.apache.lucene.store.Lock.Withorg.apache.lucene.store.Lock.With]org.apache.lucene.st...>
	at spoon.test.constructorcallnewclass.NewClassTest.testCtNewClassInNoClasspath(NewClassTest.java:167)

[INFO] Running spoon.test.signature.SignatureTest
[ERROR] Tests run: 8, Failures: 3, Errors: 2, Skipped: 0, Time elapsed: 0.486 s <<< FAILURE! - in spoon.test.signature.SignatureTest
[ERROR] testMethodInvocationSignatureStaticFieldsVariables(spoon.test.signature.SignatureTest)  Time elapsed: 0.114 s  <<< ERROR!
spoon.compiler.ModelBuildingException: 
snippet compilation error while compiling: class Wrapper {
    static void wrap() throws java.lang.Throwable {
        Integer.toBinaryString(Integer.MAX_VALUE);
    }
}class Wrapper {
    static void wrap() throws java.lang.Throwable {
        Integer.toBinaryString(Integer.MIN_VALUE);
    }
}
	at spoon.test.signature.SignatureTest.testMethodInvocationSignatureStaticFieldsVariables(SignatureTest.java:142)
Caused by: spoon.compiler.ModelBuildingException: The type Wrapper is already defined
	at spoon.test.signature.SignatureTest.testMethodInvocationSignatureStaticFieldsVariables(SignatureTest.java:142)

[ERROR] testUnboundFieldSignature(spoon.test.signature.SignatureTest)  Time elapsed: 0.042 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<this.mfield[] = p> but was:<this.mfield[this.mfield] = p>
	at spoon.test.signature.SignatureTest.testUnboundFieldSignature(SignatureTest.java:283)

[ERROR] testLiteralSignature(spoon.test.signature.SignatureTest)  Time elapsed: 0.084 s  <<< ERROR!
spoon.compiler.ModelBuildingException: 
snippet compilation error while compiling: class Wrapper {
    static void wrap() throws java.lang.Throwable {
        System.out.println("hello");
    }
}class Wrapper {
    static void wrap() throws java.lang.Throwable {
        String hello ="t1"; System.out.println(hello);
    }
}
	at spoon.test.signature.SignatureTest.testLiteralSignature(SignatureTest.java:123)
Caused by: spoon.compiler.ModelBuildingException: The type Wrapper is already defined
	at spoon.test.signature.SignatureTest.testLiteralSignature(SignatureTest.java:123)

[ERROR] testMethodInvocationSignatureWithVariableAccess(spoon.test.signature.SignatureTest)  Time elapsed: 0.043 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<foo([int])> but was:<foo([java.lang.String])>
	at spoon.test.signature.SignatureTest.testMethodInvocationSignatureWithVariableAccess(SignatureTest.java:210)

[ERROR] testNullSignature(spoon.test.signature.SignatureTest)  Time elapsed: 0.05 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<[]null> but was:<[class Wrapper {
    static void wrap() throws java.lang.Throwable {
        class X {public Object foo() { return null;}};;
    }
}]null>
	at spoon.test.signature.SignatureTest.testNullSignature(SignatureTest.java:63)

[INFO] Running spoon.test.eval.EvalTest
[ERROR] Tests run: 9, Failures: 3, Errors: 2, Skipped: 0, Time elapsed: 0.507 s <<< FAILURE! - in spoon.test.eval.EvalTest
[ERROR] testVisitorPartialEvaluator_binary(spoon.test.eval.EvalTest)  Time elapsed: 0.097 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<[]1> but was:<[class Wrapper {
    static java.lang.Object wrap() throws java.lang.Throwable {
        return 0+1;
    }
}]1>
	at spoon.test.eval.EvalTest.testVisitorPartialEvaluator_binary(EvalTest.java:100)

[ERROR] testVisitorPartialEvaluator_if(spoon.test.eval.EvalTest)  Time elapsed: 0.058 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<[]{
    java.lang.Syst...> but was:<[class Wrapper {
    static void wrap() throws java.lang.Throwable {
        if (false) {System.out.println("foo");} else {System.out.println("bar");} ;
    }
}]{
    java.lang.Syst...>
	at spoon.test.eval.EvalTest.testVisitorPartialEvaluator_if(EvalTest.java:133)

[ERROR] testDoNotSimplifyToExpressionWhenStatementIsExpected(spoon.test.eval.EvalTest)  Time elapsed: 0.051 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]java.lang.System.out...> but was:<[spoon.test.eval.ToEvaluate.class.getName()]java.lang.System.out...>
	at spoon.test.eval.EvalTest.testDoNotSimplifyToExpressionWhenStatementIsExpected(EvalTest.java:88)

[ERROR] testDoNotSimplifyCasts(spoon.test.eval.EvalTest)  Time elapsed: 0.047 s  <<< ERROR!
java.lang.UnsupportedOperationException: PartialSourcePosition only contains a CompilationUnit
	at spoon.test.eval.EvalTest.testDoNotSimplifyCasts(EvalTest.java:65)

[ERROR] testVisitorPartialEvaluatorScanner(spoon.test.eval.EvalTest)  Time elapsed: 0.053 s  <<< ERROR!
java.lang.UnsupportedOperationException: PartialSourcePosition only contains a CompilationUnit
	at spoon.test.eval.EvalTest.testVisitorPartialEvaluatorScanner(EvalTest.java:148)

[INFO] Running spoon.test.lambda.LambdaTest
2018-06-27 10:50:54,135 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable Strings at (/root/workspace/INRIA/spoon/397241434/src/test/resources/noclasspath/lambdas/TypeAccessInLambda.java:6)
[INFO] Tests run: 23, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.051 s - in spoon.test.lambda.LambdaTest
[INFO] Running spoon.test.field.FieldTest
[ERROR] Tests run: 5, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.167 s <<< FAILURE! - in spoon.test.field.FieldTest
[ERROR] testFieldImplicitTarget(spoon.test.field.FieldTest)  Time elapsed: 0.04 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]this.i> but was:<[i]this.i>
	at spoon.test.field.FieldTest.testFieldImplicitTarget(FieldTest.java:115)

[INFO] Running spoon.test.comparison.EqualTest
[ERROR] Tests run: 5, Failures: 1, Errors: 1, Skipped: 0, Time elapsed: 0.285 s <<< FAILURE! - in spoon.test.comparison.EqualTest
[ERROR] testEqualsActualTypeRef(spoon.test.comparison.EqualTest)  Time elapsed: 0.096 s  <<< ERROR!
spoon.compiler.ModelBuildingException: 
snippet compilation error while compiling: class Wrapper {
    static void wrap() throws java.lang.Throwable {
        java.util.List<String> l ;
    }
}class Wrapper {
    static void wrap() throws java.lang.Throwable {
        java.util.List<Object> l ;
    }
}
	at spoon.test.comparison.EqualTest.testEqualsActualTypeRef(EqualTest.java:99)
Caused by: spoon.compiler.ModelBuildingException: The type Wrapper is already defined
	at spoon.test.comparison.EqualTest.testEqualsActualTypeRef(EqualTest.java:99)

[ERROR] testEqualsEmptyException(spoon.test.comparison.EqualTest)  Time elapsed: 0.047 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<""[]> but was:<""[""]>
	at spoon.test.comparison.EqualTest.testEqualsEmptyException(EqualTest.java:60)

[INFO] Running spoon.test.parent.ContractOnSettersParametrizedTest
[INFO] Tests run: 67, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.788 s - in spoon.test.parent.ContractOnSettersParametrizedTest
[INFO] Running spoon.test.parent.SetParentTest
[INFO] Tests run: 67, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.408 s - in spoon.test.parent.SetParentTest
[INFO] Running spoon.test.parent.NullParentTest
[ERROR] Tests run: 8, Failures: 8, Errors: 0, Skipped: 0, Time elapsed: 0.067 s <<< FAILURE! - in spoon.test.parent.NullParentTest
[ERROR] testLocalVariableNullDefaultExpression(spoon.test.parent.NullParentTest)  Time elapsed: 0 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<int i[]> but was:<int i[ = 0int i]>
	at spoon.test.parent.NullParentTest.testLocalVariableNullDefaultExpression(NullParentTest.java:96)

[ERROR] testTargetedAccessNullTarget(spoon.test.parent.NullParentTest)  Time elapsed: 0 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]bar> but was:<[foo.bar]bar>
	at spoon.test.parent.NullParentTest.testTargetedAccessNullTarget(NullParentTest.java:48)

[ERROR] testFieldNullDefaultExpression(spoon.test.parent.NullParentTest)  Time elapsed: 0 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<int bar[];> but was:<int bar[ = 0;int bar];>
	at spoon.test.parent.NullParentTest.testFieldNullDefaultExpression(NullParentTest.java:104)

[ERROR] testReturnNullExpression(spoon.test.parent.NullParentTest)  Time elapsed: 0 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<return[]> but was:<return[ 0return]>
	at spoon.test.parent.NullParentTest.testReturnNullExpression(NullParentTest.java:112)

[ERROR] testAssertNullExpression(spoon.test.parent.NullParentTest)  Time elapsed: 0 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<assert true[]> but was:<assert true[ : "message"assert true]>
	at spoon.test.parent.NullParentTest.testAssertNullExpression(NullParentTest.java:64)

[ERROR] testForLoopNullChildren(spoon.test.parent.NullParentTest)  Time elapsed: 0 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<for(inti=0;[];i++){}> but was:<for(inti=0;[i<10;i++){}for(inti=0;];i++){}>
	at spoon.test.parent.NullParentTest.testForLoopNullChildren(NullParentTest.java:76)

[ERROR] testIfNullBranches(spoon.test.parent.NullParentTest)  Time elapsed: 0.018 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<if(true)[];else{}> but was:<if(true)[{}else{}if(true)];else{}>
	at spoon.test.parent.NullParentTest.testIfNullBranches(NullParentTest.java:86)

[ERROR] testTargetedExpressionNullTarget(spoon.test.parent.NullParentTest)  Time elapsed: 0.049 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<foo[]()> but was:<foo[.foo()foo]()>
	at spoon.test.parent.NullParentTest.testTargetedExpressionNullTarget(NullParentTest.java:56)

[INFO] Running spoon.test.parent.ParentTest
[WARNING] Tests run: 11, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 0.814 s - in spoon.test.parent.ParentTest
[INFO] Running spoon.test.parent.TopLevelTypeTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.045 s - in spoon.test.parent.TopLevelTypeTest
[INFO] Running spoon.test.compilation.CompilationTest
>> Hello: Bar <<
>> Hello: FooEx <<
>> Hello: IBar <<
>> Hello: SimpleProcessor <<
[INFO] Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 6.162 s - in spoon.test.compilation.CompilationTest
[INFO] Running spoon.test.limits.utils.InternalTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.097 s - in spoon.test.limits.utils.InternalTest
[INFO] Running spoon.test.snippets.SnippetTest
[ERROR] Tests run: 6, Failures: 1, Errors: 1, Skipped: 0, Time elapsed: 0.351 s <<< FAILURE! - in spoon.test.snippets.SnippetTest
[ERROR] testCompileSnippetSeveralTimes(spoon.test.snippets.SnippetTest)  Time elapsed: 0.101 s  <<< ERROR!
spoon.compiler.ModelBuildingException: 
snippet compilation error while compiling: class Wrapper {
    static java.lang.Object wrap() throws java.lang.Throwable {
        return 1 > 2;
    }
}class Wrapper {
    static java.lang.Object wrap() throws java.lang.Throwable {
        return 1 > 2;
    }
}
	at spoon.test.snippets.SnippetTest.testCompileSnippetSeveralTimes(SnippetTest.java:59)
Caused by: spoon.compiler.ModelBuildingException: The type Wrapper is already defined
	at spoon.test.snippets.SnippetTest.testCompileSnippetSeveralTimes(SnippetTest.java:59)

[ERROR] testCompileStatementWithReturn(spoon.test.snippets.SnippetTest)  Time elapsed: 0.051 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<[]return 3> but was:<[class Wrapper {
    static java.lang.Integer wrap() throws java.lang.Throwable {
        return 3;
    }
}]return 3>
	at spoon.test.snippets.SnippetTest.testCompileStatementWithReturn(SnippetTest.java:94)

[INFO] Running spoon.test.condition.ConditionalTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.22 s - in spoon.test.condition.ConditionalTest
[INFO] Running spoon.test.enums.EnumsTypeTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.072 s - in spoon.test.enums.EnumsTypeTest
[INFO] Running spoon.test.enums.EnumsTest
[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.369 s - in spoon.test.enums.EnumsTest
[INFO] Running spoon.test.ctType.CtTypeParameterTest
[ERROR] Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.121 s <<< FAILURE! - in spoon.test.ctType.CtTypeParameterTest
[ERROR] testTypeErasure(spoon.test.ctType.CtTypeParameterTest)  Time elapsed: 0.053 s  <<< FAILURE!
org.junit.ComparisonFailure: TypeErasure of executable param spoon.test.ctType.testclasses.ErasureModelA#<J> expected:<java.lang.[]Exception> but was:<java.lang.[Objectjava.lang.]Exception>
	at spoon.test.ctType.CtTypeParameterTest.checkTypeParamErasureOfExecutable(CtTypeParameterTest.java:84)
	at spoon.test.ctType.CtTypeParameterTest.checkType(CtTypeParameterTest.java:51)
	at spoon.test.ctType.CtTypeParameterTest.testTypeErasure(CtTypeParameterTest.java:35)

[INFO] Running spoon.test.ctType.CtTypeTest
[ERROR] Tests run: 8, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.574 s <<< FAILURE! - in spoon.test.ctType.CtTypeTest
[ERROR] testHasMethodNotHasMethod(spoon.test.ctType.CtTypeTest)  Time elapsed: 0.174 s  <<< ERROR!
spoon.compiler.ModelBuildingException: 
snippet compilation error while compiling: class Wrapper {
    static void wrap() throws java.lang.Throwable {
        class X { public void foo() {} };
    }
}class Wrapper {
    static void wrap() throws java.lang.Throwable {
        class Y { public void foo2() {} };
    }
}
	at spoon.test.ctType.CtTypeTest.testHasMethodNotHasMethod(CtTypeTest.java:47)
Caused by: spoon.compiler.ModelBuildingException: The type Wrapper is already defined
	at spoon.test.ctType.CtTypeTest.testHasMethodNotHasMethod(CtTypeTest.java:47)

[INFO] Running spoon.test.strings.StringLiteralTest
[ERROR] Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.05 s <<< FAILURE! - in spoon.test.strings.StringLiteralTest
[ERROR] testSnippetFullClass(spoon.test.strings.StringLiteralTest)  Time elapsed: 0.05 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<[]java.lang.String f0 ...> but was:<[class Wrapper {
    static void wrap() throws java.lang.Throwable {
        class StringValueUTF {
        	String f0 = "toto";
        	String f1 = "\n";
        	char c1 = '\n';
        	String f2 = "\u20ac";
        	char c2 = '\u20ac';
        	String f3 = "€";
        	char c3 = '€';
        	String f4 = "\t";
        	char c4 = '\t';
        	String f5 = "	";
        	char c5 = '	';
        	String f6 = "€\u20ac";
        };
    }
}]java.lang.String f0 ...>
	at spoon.test.strings.StringLiteralTest.testSnippetFullClass(StringLiteralTest.java:45)

[INFO] Running spoon.test.strings.StringTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.041 s - in spoon.test.strings.StringTest
[INFO] Running spoon.test.arrays.ArraysTest
[ERROR] Tests run: 8, Failures: 4, Errors: 0, Skipped: 0, Time elapsed: 0.5 s <<< FAILURE! - in spoon.test.arrays.ArraysTest
[ERROR] testInitializeWithNewArray(spoon.test.arrays.ArraysTest)  Time elapsed: 0.05 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]new java.lang.String...> but was:<[com.example.Bar.Inner<Type>com.example.Bar.Inner<Type>com.example.Bar.Inner<Type>com.example.Bar.Inner<Type>java.lang.OverrideList<Type>com.example.Typecom.example.Typecom.example.Type[]com.example.Type]new java.lang.String...>
	at spoon.test.arrays.ArraysTest.testInitializeWithNewArray(ArraysTest.java:61)

[ERROR] testParameterizedArrayVarargReference(spoon.test.arrays.ArraysTest)  Time elapsed: 0.047 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<java.util.List<?>[][]> but was:<java.util.List<?>[][[]java.util.List<?>[]]>
	at spoon.test.arrays.ArraysTest.testParameterizedArrayVarargReference(ArraysTest.java:130)

[ERROR] testParameterizedArrayReference(spoon.test.arrays.ArraysTest)  Time elapsed: 0.048 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<java.util.List<?>[]> but was:<java.util.List<?>[[]java.util.List<?>]>
	at spoon.test.arrays.ArraysTest.testParameterizedArrayReference(ArraysTest.java:118)

[ERROR] testParameterizedVarargReference(spoon.test.arrays.ArraysTest)  Time elapsed: 0.048 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<java.util.List<?>[]> but was:<java.util.List<?>[[]java.util.List<?>]>
	at spoon.test.arrays.ArraysTest.testParameterizedVarargReference(ArraysTest.java:106)

[INFO] Running spoon.test.ctCase.SwitchCaseTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.124 s - in spoon.test.ctCase.SwitchCaseTest
[INFO] Running spoon.test.properties.PropertiesTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.051 s - in spoon.test.properties.PropertiesTest
[INFO] Running spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest
[INFO] Tests run: 16, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.992 s - in spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest
[INFO] Running spoon.test.logging.LogTest
2018-06-27 10:51:09,710 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-06-27 10:51:09,711 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-06-27 10:51:09,711 DEBUG spoon.Launcher - destination: /root/workspace/INRIA/spoon/397241434/spooned-classes
2018-06-27 10:51:09,711 DEBUG spoon.Launcher - source classpath: null
2018-06-27 10:51:09,711 DEBUG spoon.Launcher - template classpath: []
2018-06-27 10:51:09,712 INFO spoon.Launcher - Log info
2018-06-27 10:51:09,712 WARN spoon.Launcher - Log warn
2018-06-27 10:51:09,712 ERROR spoon.Launcher - Log error
2018-06-27 10:51:09,712 DEBUG spoon.Launcher - Log debug
2018-06-27 10:51:09,713 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-06-27 10:51:09,713 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-06-27 10:51:09,713 DEBUG spoon.Launcher - destination: /root/workspace/INRIA/spoon/397241434/spooned-classes
2018-06-27 10:51:09,713 DEBUG spoon.Launcher - source classpath: null
2018-06-27 10:51:09,713 DEBUG spoon.Launcher - template classpath: []
2018-06-27 10:51:09,714 INFO spoon.Launcher - Log info
2018-06-27 10:51:09,714 WARN spoon.Launcher - Log warn
2018-06-27 10:51:09,714 ERROR spoon.Launcher - Log error
2018-06-27 10:51:09,714 DEBUG spoon.Launcher - Log debug
2018-06-27 10:51:09,715 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-06-27 10:51:09,715 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-06-27 10:51:09,716 INFO spoon.Launcher - Log info
2018-06-27 10:51:09,716 WARN spoon.Launcher - Log warn
2018-06-27 10:51:09,716 ERROR spoon.Launcher - Log error
2018-06-27 10:51:09,716 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-06-27 10:51:09,716 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-06-27 10:51:09,717 WARN spoon.Launcher - Log warn
2018-06-27 10:51:09,717 ERROR spoon.Launcher - Log error
2018-06-27 10:51:09,719 ERROR spoon.Launcher - Log error
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.015 s - in spoon.test.logging.LogTest
[INFO] Running spoon.test.compilationunit.TestCompilationUnit
[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.267 s - in spoon.test.compilationunit.TestCompilationUnit
[INFO] Running spoon.test.compilationunit.GetBinaryFilesTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.72 s - in spoon.test.compilationunit.GetBinaryFilesTest
[INFO] Running spoon.test.path.PathTest
[INFO] Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.709 s - in spoon.test.path.PathTest
[INFO] Running spoon.test.replace.ReplaceTest
[ERROR] Tests run: 17, Failures: 4, Errors: 0, Skipped: 0, Time elapsed: 1.543 s <<< FAILURE! - in spoon.test.replace.ReplaceTest
[ERROR] testReplaceAPackageReferenceByAnotherOne(spoon.test.replace.ReplaceTest)  Time elapsed: 0.137 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<com.awesome[].Burritos> but was:<com.awesome[com.awesome].Burritos>
	at spoon.test.replace.ReplaceTest.testReplaceAPackageReferenceByAnotherOne(ReplaceTest.java:357)

[ERROR] testReplaceExecutableReferenceByAnotherOne(spoon.test.replace.ReplaceTest)  Time elapsed: 0.148 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]java.io.PrintStream> but was:<[print(java.lang.String)]java.io.PrintStream>
	at spoon.test.replace.ReplaceTest.testReplaceExecutableReferenceByAnotherOne(ReplaceTest.java:401)

[ERROR] testReplaceAParameterReferenceToFieldReference(spoon.test.replace.ReplaceTest)  Time elapsed: 0.145 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<....System.err.println([]field)> but was:<....System.err.println([param)java.lang.System.err.println(]field)>
	at spoon.test.replace.ReplaceTest.testReplaceAParameterReferenceToFieldReference(ReplaceTest.java:382)

[ERROR] testReplaceBlock(spoon.test.replace.ReplaceTest)  Time elapsed: 0.052 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]x + 1> but was:<[z = x + 1]x + 1>
	at spoon.test.replace.ReplaceTest.testReplaceBlock(ReplaceTest.java:106)

[INFO] Running spoon.test.replace.ReplaceParametrizedTest
[INFO] Tests run: 80, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.256 s - in spoon.test.replace.ReplaceParametrizedTest
[INFO] Running spoon.test.delete.DeleteTest
[INFO] Tests run: 14, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.694 s - in spoon.test.delete.DeleteTest
[INFO] Running spoon.test.modifiers.TestModifiers
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.454 s - in spoon.test.modifiers.TestModifiers
[INFO] Running spoon.test.model.BlockTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.1 s - in spoon.test.model.BlockTest
[INFO] Running spoon.test.model.TypeTest
[ERROR] Tests run: 8, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.447 s <<< FAILURE! - in spoon.test.model.TypeTest
[ERROR] testGetUsedTypesForTypeInRootPackage(spoon.test.model.TypeTest)  Time elapsed: 0.05 s  <<< FAILURE!
java.lang.AssertionError: expected:<0> but was:<1>
	at spoon.test.model.TypeTest.testGetUsedTypesForTypeInRootPackage(TypeTest.java:67)

[ERROR] testGetUsedTypes(spoon.test.model.TypeTest)  Time elapsed: 0.051 s  <<< FAILURE!
java.lang.AssertionError: expected:<3> but was:<4>
	at spoon.test.model.TypeTest.testGetUsedTypes(TypeTest.java:45)

[INFO] Running spoon.test.model.SwitchCaseTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.099 s - in spoon.test.model.SwitchCaseTest
[INFO] Running spoon.test.model.IncrementalLauncherTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.466 s - in spoon.test.model.IncrementalLauncherTest
[INFO] Running spoon.test.model.AnonymousExecutableTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.057 s - in spoon.test.model.AnonymousExecutableTest
[INFO] Running spoon.test.role.TestCtRole
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in spoon.test.role.TestCtRole
[INFO] Running spoon.test.javadoc.JavaDocTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.257 s - in spoon.test.javadoc.JavaDocTest
[INFO] Running spoon.test.architecture.SpoonArchitectureEnforcerTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 31.328 s - in spoon.test.architecture.SpoonArchitectureEnforcerTest
[INFO] Running spoon.test.invocations.InvocationTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.18 s - in spoon.test.invocations.InvocationTest
[INFO] Running spoon.test.OutputTypeTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.test.OutputTypeTest
[INFO] Running spoon.test.reflect.visitor.ReferenceQueryTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.045 s - in spoon.test.reflect.visitor.ReferenceQueryTest
[INFO] Running spoon.test.varargs.VarArgsTest
[ERROR] Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.045 s <<< FAILURE! - in spoon.test.varargs.VarArgsTest
[ERROR] testModelBuildingInitializer(spoon.test.varargs.VarArgsTest)  Time elapsed: 0.045 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<java.lang.String[]> but was:<java.lang.String[[]java.lang.String]>
	at spoon.test.varargs.VarArgsTest.testModelBuildingInitializer(VarArgsTest.java:30)

[INFO] Running spoon.test.staticFieldAccess.StaticAccessTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.155 s - in spoon.test.staticFieldAccess.StaticAccessTest
[INFO] Running spoon.test.sourcePosition.SourcePositionTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.226 s - in spoon.test.sourcePosition.SourcePositionTest
[INFO] Running spoon.test.ctBlock.TestCtBlock
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.126 s - in spoon.test.ctBlock.TestCtBlock
[INFO] Running spoon.test.jar.JarTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.126 s - in spoon.test.jar.JarTest
[INFO] Running spoon.test.query_function.testclasses.VariableReferencesModelTest
[INFO] Tests run: 15, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 s - in spoon.test.query_function.testclasses.VariableReferencesModelTest
[INFO] Running spoon.test.query_function.VariableReferencesTest
2018-06-27 10:51:51,091 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-06-27 10:51:51,092 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-06-27 10:51:51,093 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-27 10:51:51,093 INFO spoon.Launcher - running Spoon...
2018-06-27 10:51:51,093 INFO spoon.Launcher - start processing...
2018-06-27 10:51:51,147 INFO spoon.Launcher - end of processing: 
2018-06-27 10:51:51,147 INFO spoon.Launcher - no errors, no warnings
2018-06-27 10:51:51,181 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-06-27 10:51:51,181 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-06-27 10:51:51,182 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-27 10:51:51,182 INFO spoon.Launcher - running Spoon...
2018-06-27 10:51:51,182 INFO spoon.Launcher - start processing...
2018-06-27 10:51:51,238 INFO spoon.Launcher - end of processing: 
2018-06-27 10:51:51,238 INFO spoon.Launcher - no errors, no warnings
2018-06-27 10:51:51,277 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-06-27 10:51:51,277 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-06-27 10:51:51,277 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-27 10:51:51,278 INFO spoon.Launcher - running Spoon...
2018-06-27 10:51:51,278 INFO spoon.Launcher - start processing...
2018-06-27 10:51:51,335 INFO spoon.Launcher - end of processing: 
2018-06-27 10:51:51,336 INFO spoon.Launcher - no errors, no warnings
2018-06-27 10:51:51,339 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-06-27 10:51:51,339 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-06-27 10:51:51,340 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-27 10:51:51,340 INFO spoon.Launcher - running Spoon...
2018-06-27 10:51:51,340 INFO spoon.Launcher - start processing...
2018-06-27 10:51:51,397 INFO spoon.Launcher - end of processing: 
2018-06-27 10:51:51,397 INFO spoon.Launcher - no errors, no warnings
2018-06-27 10:51:51,433 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-06-27 10:51:51,433 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-06-27 10:51:51,433 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-27 10:51:51,433 INFO spoon.Launcher - running Spoon...
2018-06-27 10:51:51,433 INFO spoon.Launcher - start processing...
2018-06-27 10:51:51,490 INFO spoon.Launcher - end of processing: 
2018-06-27 10:51:51,490 INFO spoon.Launcher - no errors, no warnings
2018-06-27 10:51:51,499 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-06-27 10:51:51,499 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-06-27 10:51:51,499 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-27 10:51:51,499 INFO spoon.Launcher - running Spoon...
2018-06-27 10:51:51,499 INFO spoon.Launcher - start processing...
2018-06-27 10:51:51,555 INFO spoon.Launcher - end of processing: 
2018-06-27 10:51:51,555 INFO spoon.Launcher - no errors, no warnings
2018-06-27 10:51:51,561 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-06-27 10:51:51,561 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-06-27 10:51:51,561 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-27 10:51:51,561 INFO spoon.Launcher - running Spoon...
2018-06-27 10:51:51,561 INFO spoon.Launcher - start processing...
2018-06-27 10:51:51,617 INFO spoon.Launcher - end of processing: 
2018-06-27 10:51:51,617 INFO spoon.Launcher - no errors, no warnings
2018-06-27 10:51:51,671 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-06-27 10:51:51,672 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-06-27 10:51:51,672 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-27 10:51:51,672 INFO spoon.Launcher - running Spoon...
2018-06-27 10:51:51,672 INFO spoon.Launcher - start processing...
2018-06-27 10:51:51,731 INFO spoon.Launcher - end of processing: 
2018-06-27 10:51:51,731 INFO spoon.Launcher - no errors, no warnings
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.709 s - in spoon.test.query_function.VariableReferencesTest
[INFO] Running spoon.test.ctBodyHolder.CtBodyHolderTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.434 s - in spoon.test.ctBodyHolder.CtBodyHolderTest
[INFO] Running spoon.test.casts.CastTest
[ERROR] Tests run: 5, Failures: 3, Errors: 0, Skipped: 0, Time elapsed: 0.255 s <<< FAILURE! - in spoon.test.casts.CastTest
[ERROR] testCast1(spoon.test.casts.CastTest)  Time elapsed: 0.051 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<[]java.lang.String x =...> but was:<[class Wrapper {
    static void wrap() throws java.lang.Throwable {
        class X {public void foo() { String x=(String) new Object();}};;
    }
}]java.lang.String x =...>
	at spoon.test.casts.CastTest.testCast1(CastTest.java:33)

[ERROR] testCast2(spoon.test.casts.CastTest)  Time elapsed: 0.05 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<[]java.lang.Class<java...> but was:<[class Wrapper {
    static void wrap() throws java.lang.Throwable {
        class X {public void foo() { Class<String> x=(Class<String>) new Object();}};;
    }
}]java.lang.Class<java...>
	at spoon.test.casts.CastTest.testCast2(CastTest.java:49)

[ERROR] testCast3(spoon.test.casts.CastTest)  Time elapsed: 0.05 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<[]addConsumedAnnotatio...> but was:<[class Wrapper {
    static void wrap() throws java.lang.Throwable {
        class X<A> {void addConsumedAnnotationType(Class<? extends A> annotationType) {}
        public void foo() { Class<?> x = null; addConsumedAnnotationType((Class<A>) x);}};;
    }
}]addConsumedAnnotatio...>
	at spoon.test.casts.CastTest.testCast3(CastTest.java:70)

[INFO] Running spoon.test.support.ResourceTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.214 s - in spoon.test.support.ResourceTest
[INFO] Running spoon.reflect.visitor.CtInheritanceScannerTest
[INFO] Tests run: 82, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.419 s - in spoon.reflect.visitor.CtInheritanceScannerTest
[INFO] Running spoon.reflect.visitor.CtInheritanceScannerMethodsTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.962 s - in spoon.reflect.visitor.CtInheritanceScannerMethodsTest
[INFO] Running spoon.reflect.visitor.CtVisitorTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.906 s - in spoon.reflect.visitor.CtVisitorTest
[INFO] Running spoon.reflect.visitor.CtScannerTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 6.008 s - in spoon.reflect.visitor.CtScannerTest
[INFO] Running spoon.reflect.visitor.CtIteratorTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.163 s - in spoon.reflect.visitor.CtIteratorTest
[INFO] Running spoon.reflect.declaration.CtTypeInformationTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.511 s - in spoon.reflect.declaration.CtTypeInformationTest
[INFO] Running spoon.reflect.declaration.UnknownDeclarationTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.047 s - in spoon.reflect.declaration.UnknownDeclarationTest
[INFO] Running spoon.reflect.ast.AstCheckerTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.626 s - in spoon.reflect.ast.AstCheckerTest
[INFO] Running spoon.reflect.ast.CloneTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 32.885 s - in spoon.reflect.ast.CloneTest
[INFO] Running spoon.testing.AbstractAssertTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.317 s - in spoon.testing.AbstractAssertTest
[INFO] Running spoon.testing.CtPackageAssertTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.122 s - in spoon.testing.CtPackageAssertTest
[INFO] Running spoon.testing.FileAssertTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.19 s - in spoon.testing.FileAssertTest
[INFO] Running spoon.testing.CtElementAssertTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.213 s - in spoon.testing.CtElementAssertTest
[INFO] Running spoon.support.compiler.jdt.JDTBuilderTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in spoon.support.compiler.jdt.JDTBuilderTest
[INFO] Running spoon.support.compiler.jdt.JDTBatchCompilerTest
[ERROR] Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.047 s <<< FAILURE! - in spoon.support.compiler.jdt.JDTBatchCompilerTest
[ERROR] testCompileGeneratedJavaFile(spoon.support.compiler.jdt.JDTBatchCompilerTest)  Time elapsed: 0.047 s  <<< FAILURE!
java.lang.AssertionError
	at spoon.support.compiler.jdt.JDTBatchCompilerTest.testCompileGeneratedJavaFile(JDTBatchCompilerTest.java:22)

[INFO] Running spoon.support.compiler.jdt.JDTBasedSpoonCompilerTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.5 s - in spoon.support.compiler.jdt.JDTBasedSpoonCompilerTest
[INFO] Running spoon.support.compiler.jdt.ExtendedStringLiteralTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.043 s - in spoon.support.compiler.jdt.ExtendedStringLiteralTest
[INFO] Running spoon.support.compiler.classpath.ComputeClasspathTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.support.compiler.classpath.ComputeClasspathTest
[INFO] Running spoon.support.visitor.java.JavaReflectionTreeBuilderTest
[ERROR] Tests run: 18, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 1.71 s <<< FAILURE! - in spoon.support.visitor.java.JavaReflectionTreeBuilderTest
[ERROR] testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)  Time elapsed: 0.002 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[]? super E> but was:<[E extends java.lang.Comparable<? super E>]? super E>
	at spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(JavaReflectionTreeBuilderTest.java:140)

[INFO] Running spoon.LauncherTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.192 s - in spoon.LauncherTest
[INFO] Running spoon.processing.CtGenerationTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 45.936 s - in spoon.processing.CtGenerationTest
[INFO] Running spoon.processing.ProcessingTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.063 s - in spoon.processing.ProcessingTest
[INFO] Running spoon.MavenLauncherTest
2018-06-27 10:53:30,682 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-cas/3.0.0-SNAPSHOT
2018-06-27 10:53:30,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-saml/3.0.0-SNAPSHOT
2018-06-27 10:53:30,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oauth/3.0.0-SNAPSHOT
2018-06-27 10:53:30,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oidc/3.0.0-SNAPSHOT
2018-06-27 10:53:30,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-ldap/3.0.0-SNAPSHOT
2018-06-27 10:53:30,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-http/3.0.0-SNAPSHOT
2018-06-27 10:53:30,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/zaxxer/HikariCP/2.6.1
2018-06-27 10:53:30,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-sql/3.0.0-SNAPSHOT
2018-06-27 10:53:30,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/security/spring-security-crypto/4.2.2.RELEASE
2018-06-27 10:53:30,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-06-27 10:53:30,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-27 10:53:30,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-27 10:53:30,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-ldap/3.0.0-SNAPSHOT
2018-06-27 10:53:30,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/unboundid/unboundid-ldapsdk/3.2.1
2018-06-27 10:53:30,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-sql/3.0.0-SNAPSHOT
2018-06-27 10:53:30,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-config/3.0.0-SNAPSHOT
2018-06-27 10:53:30,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oauth/3.0.0-SNAPSHOT
2018-06-27 10:53:30,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-cas/3.0.0-SNAPSHOT
2018-06-27 10:53:30,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-openid/3.0.0-SNAPSHOT
2018-06-27 10:53:30,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-http/3.0.0-SNAPSHOT
2018-06-27 10:53:30,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-saml/3.0.0-SNAPSHOT
2018-06-27 10:53:30,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-gae/3.0.0-SNAPSHOT
2018-06-27 10:53:30,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oidc/3.0.0-SNAPSHOT
2018-06-27 10:53:30,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-jwt/3.0.0-SNAPSHOT
2018-06-27 10:53:30,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-ldap/3.0.0-SNAPSHOT
2018-06-27 10:53:30,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-sql/3.0.0-SNAPSHOT
2018-06-27 10:53:30,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-mongo/3.0.0-SNAPSHOT
2018-06-27 10:53:30,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-couch/3.0.0-SNAPSHOT
2018-06-27 10:53:30,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-kerberos/3.0.0-SNAPSHOT
2018-06-27 10:53:30,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/slf4j/slf4j-api/1.7.25
2018-06-27 10:53:30,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-06-27 10:53:30,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/guava/guava/21.0
2018-06-27 10:53:30,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/security/spring-security-crypto/4.2.2.RELEASE
2018-06-27 10:53:30,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-06-27 10:53:30,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-27 10:53:30,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-test/4.3.7.RELEASE
2018-06-27 10:53:30,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.25
2018-06-27 10:53:30,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-27 10:53:30,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mockito/mockito-core/2.7.19
2018-06-27 10:53:30,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-cas/3.0.0-SNAPSHOT
2018-06-27 10:53:30,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-saml/3.0.0-SNAPSHOT
2018-06-27 10:53:30,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oauth/3.0.0-SNAPSHOT
2018-06-27 10:53:30,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oidc/3.0.0-SNAPSHOT
2018-06-27 10:53:30,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-ldap/3.0.0-SNAPSHOT
2018-06-27 10:53:30,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-http/3.0.0-SNAPSHOT
2018-06-27 10:53:30,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/zaxxer/HikariCP/2.6.1
2018-06-27 10:53:30,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-sql/3.0.0-SNAPSHOT
2018-06-27 10:53:30,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/security/spring-security-crypto/4.2.2.RELEASE
2018-06-27 10:53:30,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-06-27 10:53:30,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-27 10:53:30,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-27 10:53:30,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-ldap/3.0.0-SNAPSHOT
2018-06-27 10:53:30,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/unboundid/unboundid-ldapsdk/3.2.1
2018-06-27 10:53:30,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-sql/3.0.0-SNAPSHOT
2018-06-27 10:53:30,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/commons-codec/commons-codec/1.10
2018-06-27 10:53:30,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/github/scribejava/scribejava-apis/3.3.0
2018-06-27 10:53:30,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.7
2018-06-27 10:53:30,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-06-27 10:53:30,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-27 10:53:30,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-27 10:53:30,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/jasig/cas/client/cas-client-core/3.4.1
2018-06-27 10:53:30,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/jasig/cas/client/cas-client-support-saml/3.4.1
2018-06-27 10:53:30,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-06-27 10:53:30,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/guava/guava/21.0
2018-06-27 10:53:30,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-27 10:53:30,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-27 10:53:30,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/openid4java/openid4java/1.0.0
2018-06-27 10:53:30,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.25
2018-06-27 10:53:30,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/xml-apis/xml-apis/2.0.2
2018-06-27 10:53:30,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-06-27 10:53:30,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-27 10:53:30,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-27 10:53:30,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/commons-codec/commons-codec/1.10
2018-06-27 10:53:30,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.7
2018-06-27 10:53:30,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-27 10:53:30,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-27 10:53:30,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mockito/mockito-core/2.7.19
2018-06-27 10:53:30,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/guava/guava/21.0
2018-06-27 10:53:30,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/nanohttpd/nanohttpd/2.3.1
2018-06-27 10:53:30,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-core/3.3.0
2018-06-27 10:53:30,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/net/shibboleth/utilities/java-support/7.3.0
2018-06-27 10:53:30,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-saml-api/3.3.0
2018-06-27 10:53:30,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-saml-impl/3.3.0
2018-06-27 10:53:30,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-soap-api/3.3.0
2018-06-27 10:53:30,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-xmlsec-api/3.3.0
2018-06-27 10:53:30,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-security-api/3.3.0
2018-06-27 10:53:30,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-security-impl/3.3.0
2018-06-27 10:53:30,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-profile-api/3.3.0
2018-06-27 10:53:30,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-profile-impl/3.3.0
2018-06-27 10:53:30,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-messaging-api/3.3.0
2018-06-27 10:53:30,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-messaging-impl/3.3.0
2018-06-27 10:53:30,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-xmlsec-impl/3.3.0
2018-06-27 10:53:30,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/guava/guava/21.0
2018-06-27 10:53:30,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/cryptacular/cryptacular/1.1.0
2018-06-27 10:53:30,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/joda-time/joda-time/2.9.2
2018-06-27 10:53:30,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/xalan/xalan/2.7.2
2018-06-27 10:53:30,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/velocity/velocity/1.7
2018-06-27 10:53:30,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/commons-collections/commons-collections/3.2.2
2018-06-27 10:53:30,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.25
2018-06-27 10:53:30,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-06-27 10:53:30,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-core/4.3.7.RELEASE
2018-06-27 10:53:30,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-27 10:53:30,688 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-27 10:53:30,688 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-test/4.3.7.RELEASE
2018-06-27 10:53:30,688 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-web/4.3.7.RELEASE
2018-06-27 10:53:30,688 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mockito/mockito-core/2.7.19
2018-06-27 10:53:30,688 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,688 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-api-1.0-sdk/1.9.50
2018-06-27 10:53:30,688 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-jsr107cache/1.9.50
2018-06-27 10:53:30,688 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/net/sf/jsr107cache/jsr107cache/1.1
2018-06-27 10:53:30,688 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-06-27 10:53:30,688 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,688 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-27 10:53:30,688 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-27 10:53:30,688 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-testing/1.9.50
2018-06-27 10:53:30,688 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-api-labs/1.9.50
2018-06-27 10:53:30,688 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-api-stubs/1.9.50
2018-06-27 10:53:30,688 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,688 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/nimbusds/oauth2-oidc-sdk/5.24.2
2018-06-27 10:53:30,688 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/nimbusds/nimbus-jose-jwt/4.35
2018-06-27 10:53:30,688 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,688 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-27 10:53:30,688 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-27 10:53:30,688 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,688 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/nimbusds/nimbus-jose-jwt/4.35
2018-06-27 10:53:30,688 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.56
2018-06-27 10:53:30,688 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,688 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-27 10:53:30,689 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-27 10:53:30,689 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oauth/3.0.0-SNAPSHOT
2018-06-27 10:53:30,689 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,689 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/ldaptive/ldaptive/1.2.1
2018-06-27 10:53:30,689 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,689 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-27 10:53:30,689 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-27 10:53:30,689 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/unboundid/unboundid-ldapsdk/3.2.1
2018-06-27 10:53:30,689 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,689 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/jdbi/jdbi/2.78
2018-06-27 10:53:30,689 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,689 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-27 10:53:30,689 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/security/spring-security-crypto/4.2.2.RELEASE
2018-06-27 10:53:30,689 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/h2database/h2/1.4.194
2018-06-27 10:53:30,689 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,689 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mongodb/mongo-java-driver/3.4.2
2018-06-27 10:53:30,689 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,689 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-27 10:53:30,689 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-27 10:53:30,689 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-06-27 10:53:30,689 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/de/flapdoodle/embed/de.flapdoodle.embed.mongo/2.0.0
2018-06-27 10:53:30,689 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,689 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/ektorp/org.ektorp/1.4.4
2018-06-27 10:53:30,689 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.3.3
2018-06-27 10:53:30,689 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,689 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/io/bdrc/mcouch-ektorp/1.0.0
2018-06-27 10:53:30,689 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-27 10:53:30,690 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-27 10:53:30,690 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-06-27 10:53:30,690 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,690 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-core/4.3.7.RELEASE
2018-06-27 10:53:30,690 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,690 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-27 10:53:30,690 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-27 10:53:30,690 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mockito/mockito-core/2.7.19
2018-06-27 10:53:30,690 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-06-27 10:53:30,690 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/kerby-kdc/1.0.0
2018-06-27 10:53:30,690 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/kerb-simplekdc/1.0.0
2018-06-27 10:53:30,690 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/kerb-client/1.0.0
2018-06-27 10:53:30,690 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/token-provider/1.0.0
2018-06-27 10:53:30,690 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/integration-test/1.0.0
2018-06-27 10:53:30,701 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,701 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-config/3.0.0-SNAPSHOT
2018-06-27 10:53:30,701 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oauth/3.0.0-SNAPSHOT
2018-06-27 10:53:30,701 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-cas/3.0.0-SNAPSHOT
2018-06-27 10:53:30,701 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-openid/3.0.0-SNAPSHOT
2018-06-27 10:53:30,701 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-http/3.0.0-SNAPSHOT
2018-06-27 10:53:30,701 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-saml/3.0.0-SNAPSHOT
2018-06-27 10:53:30,701 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-gae/3.0.0-SNAPSHOT
2018-06-27 10:53:30,701 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oidc/3.0.0-SNAPSHOT
2018-06-27 10:53:30,701 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-jwt/3.0.0-SNAPSHOT
2018-06-27 10:53:30,701 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-ldap/3.0.0-SNAPSHOT
2018-06-27 10:53:30,701 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-sql/3.0.0-SNAPSHOT
2018-06-27 10:53:30,701 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-mongo/3.0.0-SNAPSHOT
2018-06-27 10:53:30,701 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-couch/3.0.0-SNAPSHOT
2018-06-27 10:53:30,702 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-kerberos/3.0.0-SNAPSHOT
2018-06-27 10:53:30,702 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/slf4j/slf4j-api/1.7.25
2018-06-27 10:53:30,702 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-06-27 10:53:30,702 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/guava/guava/21.0
2018-06-27 10:53:30,702 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/security/spring-security-crypto/4.2.2.RELEASE
2018-06-27 10:53:30,702 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-06-27 10:53:30,702 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-27 10:53:30,702 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-test/4.3.7.RELEASE
2018-06-27 10:53:30,702 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.25
2018-06-27 10:53:30,702 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-27 10:53:30,702 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mockito/mockito-core/2.7.19
2018-06-27 10:53:30,702 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,702 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-cas/3.0.0-SNAPSHOT
2018-06-27 10:53:30,702 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-saml/3.0.0-SNAPSHOT
2018-06-27 10:53:30,702 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oauth/3.0.0-SNAPSHOT
2018-06-27 10:53:30,702 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oidc/3.0.0-SNAPSHOT
2018-06-27 10:53:30,702 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-ldap/3.0.0-SNAPSHOT
2018-06-27 10:53:30,702 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-http/3.0.0-SNAPSHOT
2018-06-27 10:53:30,702 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/zaxxer/HikariCP/2.6.1
2018-06-27 10:53:30,702 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-sql/3.0.0-SNAPSHOT
2018-06-27 10:53:30,702 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/security/spring-security-crypto/4.2.2.RELEASE
2018-06-27 10:53:30,702 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-06-27 10:53:30,702 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,702 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-27 10:53:30,702 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-27 10:53:30,702 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-ldap/3.0.0-SNAPSHOT
2018-06-27 10:53:30,703 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/unboundid/unboundid-ldapsdk/3.2.1
2018-06-27 10:53:30,703 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-sql/3.0.0-SNAPSHOT
2018-06-27 10:53:30,703 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,703 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/commons-codec/commons-codec/1.10
2018-06-27 10:53:30,703 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/github/scribejava/scribejava-apis/3.3.0
2018-06-27 10:53:30,703 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.7
2018-06-27 10:53:30,703 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-06-27 10:53:30,703 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,703 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-27 10:53:30,703 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-27 10:53:30,703 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,703 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/jasig/cas/client/cas-client-core/3.4.1
2018-06-27 10:53:30,703 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/jasig/cas/client/cas-client-support-saml/3.4.1
2018-06-27 10:53:30,703 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-06-27 10:53:30,703 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/guava/guava/21.0
2018-06-27 10:53:30,703 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,703 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-27 10:53:30,703 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-27 10:53:30,703 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,703 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/openid4java/openid4java/1.0.0
2018-06-27 10:53:30,703 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.25
2018-06-27 10:53:30,703 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/xml-apis/xml-apis/2.0.2
2018-06-27 10:53:30,703 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-06-27 10:53:30,703 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,703 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-27 10:53:30,703 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-27 10:53:30,704 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,704 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/commons-codec/commons-codec/1.10
2018-06-27 10:53:30,704 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.7
2018-06-27 10:53:30,704 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,704 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-27 10:53:30,704 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-27 10:53:30,704 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mockito/mockito-core/2.7.19
2018-06-27 10:53:30,704 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/guava/guava/21.0
2018-06-27 10:53:30,704 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/nanohttpd/nanohttpd/2.3.1
2018-06-27 10:53:30,704 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,704 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-core/3.3.0
2018-06-27 10:53:30,704 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/net/shibboleth/utilities/java-support/7.3.0
2018-06-27 10:53:30,704 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-saml-api/3.3.0
2018-06-27 10:53:30,704 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-saml-impl/3.3.0
2018-06-27 10:53:30,704 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-soap-api/3.3.0
2018-06-27 10:53:30,704 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-xmlsec-api/3.3.0
2018-06-27 10:53:30,704 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-security-api/3.3.0
2018-06-27 10:53:30,704 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-security-impl/3.3.0
2018-06-27 10:53:30,704 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-profile-api/3.3.0
2018-06-27 10:53:30,704 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-profile-impl/3.3.0
2018-06-27 10:53:30,704 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-messaging-api/3.3.0
2018-06-27 10:53:30,704 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-messaging-impl/3.3.0
2018-06-27 10:53:30,704 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-xmlsec-impl/3.3.0
2018-06-27 10:53:30,704 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/guava/guava/21.0
2018-06-27 10:53:30,704 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/cryptacular/cryptacular/1.1.0
2018-06-27 10:53:30,704 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/joda-time/joda-time/2.9.2
2018-06-27 10:53:30,705 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/xalan/xalan/2.7.2
2018-06-27 10:53:30,705 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/velocity/velocity/1.7
2018-06-27 10:53:30,705 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/commons-collections/commons-collections/3.2.2
2018-06-27 10:53:30,705 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.25
2018-06-27 10:53:30,705 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-06-27 10:53:30,705 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-core/4.3.7.RELEASE
2018-06-27 10:53:30,705 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,705 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-27 10:53:30,705 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-27 10:53:30,705 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-test/4.3.7.RELEASE
2018-06-27 10:53:30,705 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-web/4.3.7.RELEASE
2018-06-27 10:53:30,705 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mockito/mockito-core/2.7.19
2018-06-27 10:53:30,705 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,705 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-api-1.0-sdk/1.9.50
2018-06-27 10:53:30,705 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-jsr107cache/1.9.50
2018-06-27 10:53:30,705 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/net/sf/jsr107cache/jsr107cache/1.1
2018-06-27 10:53:30,705 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-06-27 10:53:30,705 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,705 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-27 10:53:30,705 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-27 10:53:30,705 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-testing/1.9.50
2018-06-27 10:53:30,705 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-api-labs/1.9.50
2018-06-27 10:53:30,705 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-api-stubs/1.9.50
2018-06-27 10:53:30,705 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,705 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/nimbusds/oauth2-oidc-sdk/5.24.2
2018-06-27 10:53:30,705 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/nimbusds/nimbus-jose-jwt/4.35
2018-06-27 10:53:30,706 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,706 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-27 10:53:30,706 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-27 10:53:30,706 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,706 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/nimbusds/nimbus-jose-jwt/4.35
2018-06-27 10:53:30,706 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.56
2018-06-27 10:53:30,706 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,706 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-27 10:53:30,706 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-27 10:53:30,706 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oauth/3.0.0-SNAPSHOT
2018-06-27 10:53:30,706 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,706 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/ldaptive/ldaptive/1.2.1
2018-06-27 10:53:30,706 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,706 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-27 10:53:30,706 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-27 10:53:30,706 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/unboundid/unboundid-ldapsdk/3.2.1
2018-06-27 10:53:30,706 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,706 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/jdbi/jdbi/2.78
2018-06-27 10:53:30,706 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,706 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-27 10:53:30,706 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/security/spring-security-crypto/4.2.2.RELEASE
2018-06-27 10:53:30,706 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/h2database/h2/1.4.194
2018-06-27 10:53:30,706 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,706 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mongodb/mongo-java-driver/3.4.2
2018-06-27 10:53:30,706 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,706 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-27 10:53:30,706 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-27 10:53:30,706 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-06-27 10:53:30,707 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/de/flapdoodle/embed/de.flapdoodle.embed.mongo/2.0.0
2018-06-27 10:53:30,707 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,707 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/ektorp/org.ektorp/1.4.4
2018-06-27 10:53:30,707 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.3.3
2018-06-27 10:53:30,707 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,707 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/io/bdrc/mcouch-ektorp/1.0.0
2018-06-27 10:53:30,707 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-27 10:53:30,707 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-27 10:53:30,707 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-06-27 10:53:30,707 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,707 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-core/4.3.7.RELEASE
2018-06-27 10:53:30,707 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-27 10:53:30,707 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-27 10:53:30,707 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-27 10:53:30,707 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mockito/mockito-core/2.7.19
2018-06-27 10:53:30,707 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-06-27 10:53:30,707 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/kerby-kdc/1.0.0
2018-06-27 10:53:30,707 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/kerb-simplekdc/1.0.0
2018-06-27 10:53:30,707 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/kerb-client/1.0.0
2018-06-27 10:53:30,707 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/token-provider/1.0.0
2018-06-27 10:53:30,707 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/integration-test/1.0.0
2018-06-27 10:53:30,748 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/eclipse/jdt/org.eclipse.jdt.core/3.13.102
2018-06-27 10:53:30,748 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/martiansoftware/jsap/2.1
2018-06-27 10:53:30,748 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/log4j/log4j/1.2.17
2018-06-27 10:53:30,748 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/commons-io/commons-io/2.5
2018-06-27 10:53:30,748 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/maven/maven-model/3.3.9
2018-06-27 10:53:30,748 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/commons/commons-lang3/3.5
2018-06-27 10:53:30,749 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.9.2
[ERROR] Tests run: 6, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.11 s <<< FAILURE! - in spoon.MavenLauncherTest
[ERROR] mavenLauncherTestMultiModulesAndVariables(spoon.MavenLauncherTest)  Time elapsed: 0.051 s  <<< FAILURE!
java.lang.AssertionError: Content of classpath: 
	at spoon.MavenLauncherTest.mavenLauncherTestMultiModulesAndVariables(MavenLauncherTest.java:73)

[ERROR] spoonMavenLauncherTest(spoon.MavenLauncherTest)  Time elapsed: 0.041 s  <<< FAILURE!
java.lang.AssertionError: expected:<23> but was:<0>
	at spoon.MavenLauncherTest.spoonMavenLauncherTest(MavenLauncherTest.java:18)

[INFO] 
[INFO] Results:
[INFO] 
[ERROR] Failures: 
[ERROR]   MavenLauncherTest.mavenLauncherTestMultiModulesAndVariables:73 Content of classpath: 
[ERROR]   MavenLauncherTest.spoonMavenLauncherTest:18 expected:<23> but was:<0>
[ERROR]   JDTBatchCompilerTest.testCompileGeneratedJavaFile:22
[ERROR]   JavaReflectionTreeBuilderTest.testScannerGenericsInClass:140 expected:<[]? super E> but was:<[E extends java.lang.Comparable<? super E>]? super E>
[ERROR]   AnnotationTest.testAnnotationWithDefaultArrayValue:429 expected:<...alue() default {  };[]> but was:<...alue() default {  };[java.lang.Class<?>[] value() default {  };]>
[ERROR]   AnnotationTest.testFieldAndMethodInAnnotation:1003 expected:<...va.lang.String value[]() default spoon.tes...> but was:<...va.lang.String value[ = "";java.lang.String value]() default spoon.tes...>
[ERROR]   AnnotationTest.testModelBuildingAnnotationBoundUsage:175 expected:<[]8> but was:<[10]8>
[ERROR]   AnnotationTest.testUsageOfParametersInTypeAnnotation:739 array of integers parameter in type annotation expected:<...peAnnotation(integer[]s = { 1 })
T> list2> but was:<...peAnnotation(integer[ = 1)
T> listjava.util.List<@spoon.test.annotation.testclasses.TypeAnnotation(integer]s = { 1 })
T> list2>
[ERROR]   AnnotationTest.testUsageOfTypeAnnotationInExtendsImplementsOfAClass:632 Extends with an type annotation must be well printed expected:<...sses.TypeAnnotation
[]BasicAnnotation> but was:<...sses.TypeAnnotation
[AnnotArrayInnerClassspoon.test.annotation.testclasses.@spoon.test.annotation.testclasses.TypeAnnotation
]BasicAnnotation>
[ERROR]   AnnotationTest.testUsageOfTypeAnnotationWithGenericTypesInClassDeclaration:669 Second generic type must have type annotation expected:<...sses.TypeAnnotation
[]K> but was:<...sses.TypeAnnotation
[T@spoon.test.annotation.testclasses.TypeAnnotation
]K>
[ERROR]   AnnotationTest.testUsageOfTypeAnnotationWithGenericTypesInStatements:696 Type annotation on generic parameter declared in the method expected:<[]java.util.List<@spoo...> but was:<[@spoon.test.annotation.testclasses.TypeAnnotation
T]java.util.List<@spoo...>
[ERROR]   MetamodelTest.testRoleOnField:183
[ERROR]   NoClasspathTest.test:87 expected:<x.[]first().second().thi...> but was:<x.[method()x.]first().second().thi...>
[ERROR]   ArraysTest.testInitializeWithNewArray:61 expected:<[]new java.lang.String...> but was:<[com.example.Bar.Inner<Type>com.example.Bar.Inner<Type>com.example.Bar.Inner<Type>com.example.Bar.Inner<Type>java.lang.OverrideList<Type>com.example.Typecom.example.Typecom.example.Type[]com.example.Type]new java.lang.String...>
[ERROR]   ArraysTest.testParameterizedArrayReference:118 expected:<java.util.List<?>[]> but was:<java.util.List<?>[[]java.util.List<?>]>
[ERROR]   ArraysTest.testParameterizedArrayVarargReference:130 expected:<java.util.List<?>[][]> but was:<java.util.List<?>[][[]java.util.List<?>[]]>
[ERROR]   ArraysTest.testParameterizedVarargReference:106 expected:<java.util.List<?>[]> but was:<java.util.List<?>[[]java.util.List<?>]>
[ERROR]   CastTest.testCast1:33 expected:<[]java.lang.String x =...> but was:<[class Wrapper {
    static void wrap() throws java.lang.Throwable {
        class X {public void foo() { String x=(String) new Object();}};;
    }
}]java.lang.String x =...>
[ERROR]   CastTest.testCast2:49 expected:<[]java.lang.Class<java...> but was:<[class Wrapper {
    static void wrap() throws java.lang.Throwable {
        class X {public void foo() { Class<String> x=(Class<String>) new Object();}};;
    }
}]java.lang.Class<java...>
[ERROR]   CastTest.testCast3:70 expected:<[]addConsumedAnnotatio...> but was:<[class Wrapper {
    static void wrap() throws java.lang.Throwable {
        class X<A> {void addConsumedAnnotationType(Class<? extends A> annotationType) {}
        public void foo() { Class<?> x = null; addConsumedAnnotationType((Class<A>) x);}};;
    }
}]addConsumedAnnotatio...>
[ERROR]   CommentTest.testAddCommentsToSnippet:746 expected:<// My comment on my []expression
"Caenorha...> but was:<// My comment on my [statement
System.out.println("Caenorhabditis")// My comment on my ]expression
"Caenorha...>
[ERROR]   CommentTest.testBlockComment:472 /* comment class */
/**
 * JavaDoc class
 */
/* comment after class */
public class BlockComment {
    /* Comment Field */
    /* comment in field */
    private int field = 10;

    /* comment static block */
    static {
        /* comment inside static */
    }

    /* comment constructor */
    public BlockComment() {
        /* Comment in constructor */
    }

    /* comment method */
    public void m() {
        /* comment empty method block */
    }

    public void m1() {
        /* comment switch */
        switch (1) {
            /* before first case */
            case 0 :
                /* comment case 0: empty case */
            case 1 :
                /* comment case 1 */
                int i = 0;
            default :
                /* comment default */
        }
        /* comment for */
        for (int i = 0; i < 10; i++) {
            /* comment for block */
        }
        /* comment if */
        if ((1 % 2) == 0) {
            /* comment unary operator */
            (field)++;
        }
        /* comment constructor call */
        new spoon.test.comment.testclasses.BlockComment();
        /* comment invocation */
        this.m();
        /* comment local variable */
        int i = 0;
        /* comment multi assignments */
        int j = 2;
        /* comment dowhile */
        do {
            /* comment in do while */
            i++;
            /* comment end do while */
        } while (i < 10 );
        /* comment try */
        try {
            /* comment in try */
            i++;
        } catch (java.lang.Exception e) {
            /* comment in catch */
        }
        /* comment synchronized */
        synchronized(this) {
            /* comment in synchronized */
        }
        /* comment return */
        return;
    }

    /* comment before type */
    /* comment after parameter */
    /* comment before throws */
    /* comment before exception 1 */
    /* comment before exception 2 */
    /* comment before block */
    public void m2(/* comment before name */
    /* comment before parameters */
    /* comment before type parameter */
    /* comment before name parameter */
    int i) throws java.lang.Error, java.lang.Exception {
    }

    public void m3() {
        if (true) {
            /* comment empty if */
        }else /* comment before else */
        {
            /* comment empty else */
        }
        /* comment if without block */
        /* comment then if without block */
        if (true)
            m3();
        else/* comment else without block */
        /* comment else if without block */

            m3();

    }
}/* Comment Field */:/* comment class */
/**
 * JavaDoc class
 */
/* comment after class */
public class BlockComment {
    /* Comment Field */
    /* comment in field */
    private int field = 10;

    /* comment static block */
    static {
        /* comment inside static */
    }

    /* comment constructor */
    public BlockComment() {
        /* Comment in constructor */
    }

    /* comment method */
    public void m() {
        /* comment empty method block */
    }

    public void m1() {
        /* comment switch */
        switch (1) {
            /* before first case */
            case 0 :
                /* comment case 0: empty case */
            case 1 :
                /* comment case 1 */
                int i = 0;
            default :
                /* comment default */
        }
        /* comment for */
        for (int i = 0; i < 10; i++) {
            /* comment for block */
        }
        /* comment if */
        if ((1 % 2) == 0) {
            /* comment unary operator */
            (field)++;
        }
        /* comment constructor call */
        new spoon.test.comment.testclasses.BlockComment();
        /* comment invocation */
        this.m();
        /* comment local variable */
        int i = 0;
        /* comment multi assignments */
        int j = 2;
        /* comment dowhile */
        do {
            /* comment in do while */
            i++;
            /* comment end do while */
        } while (i < 10 );
        /* comment try */
        try {
            /* comment in try */
            i++;
        } catch (java.lang.Exception e) {
            /* comment in catch */
        }
        /* comment synchronized */
        synchronized(this) {
            /* comment in synchronized */
        }
        /* comment return */
        return;
    }

    /* comment before type */
    /* comment after parameter */
    /* comment before throws */
    /* comment before exception 1 */
    /* comment before exception 2 */
    /* comment before block */
    public void m2(/* comment before name */
    /* comment before parameters */
    /* comment before type parameter */
    /* comment before name parameter */
    int i) throws java.lang.Error, java.lang.Exception {
    }

    public void m3() {
        if (true) {
            /* comment empty if */
        }else /* comment before else */
        {
            /* comment empty else */
        }
        /* comment if without block */
        /* comment then if without block */
        if (true)
            m3();
        else/* comment else without block */
        /* comment else if without block */

            m3();

    }
}/* Comment Field *//* Comment Field */
/* comment in field */
private int field = 10; is not printed
[ERROR]   CommentTest.testCodeFactory:679 expected:<// comment[]> but was:<// comment[// comment]>
[ERROR]   CommentTest.testCoreFactory:660 expected:</* []comment */> but was:</* [ *//* ]comment */>
[ERROR]   CommentTest.testInLineComment:273 // comment class
// this comment 1 belongs to class too
// this comment 2 belongs to class too
// comment after class
public class InlineComment extends java.util.ArrayList<java.lang.String> {
    // Comment Field
    // comment field 2
    // comment in field
    private int field = 10;// after field


    // comment static block
    static {
        // comment inside static
    }

    // comment constructor
    public InlineComment() {
        // Comment in constructor
    }

    // comment method
    public void m() {
        // comment empty method block
    }

    public void m1() {
        // comment switch
        switch (1) {
            // before first case
            case 0 :
                // comment case 0: empty case
            case 1 :
                // comment case 1
                int i = 0;
            default :
                // comment default
        }
        // comment for
        for (int i = 0; i < 10; i++) {
            // comment for block
        }
        // comment if
        if ((1 % 2) == 0) {
            // comment unary operator
            (field)++;
        }
        // comment constructor call
        new spoon.test.comment.testclasses.InlineComment();
        // comment invocation
        this.m();
        // comment local variable
        int i = 0;
        // comment multi assignments
        int j = 2;
        // comment dowhile
        do {
            // comment in do while
            i++;
            // comment end do while
        } while (i < 10 );
        // comment try
        try {
            // comment in try
            i++;
        }// between
        // try/catch
         catch (java.lang.Exception e) {
            // comment in catch
        }
        // comment synchronized
        synchronized(this) {
            // comment in synchronized
        }
        java.lang.Double dou = (i == 1// comment after condition CtConditional
        ) ? // comment before then CtConditional
        null// comment after then CtConditional
         : // comment before else CtConditional
        new java.lang.Double((j / ((double) (i - 1))));// comment after else CtConditional

        int[] arr = // last comment at the end of array
        new int[]{ // comment before array value
        1// comment after array value
        , 2, 3 }// last comment at the end of array
        ;
        java.lang.String m = "" + (""// comment multi line string
         + "");// after statement

        boolean c = (i == 1) ? // comment before then boolean CtConditional
        i == 1// comment after then boolean CtConditional
         : i == 2;
        // comment return
        return;
    }

    // comment before type
    // comment after parameter
    // comment before throws
    // comment before exception 1
    // comment before exception 2
    // comment before block
    public void m2(// comment before name
    // comment before parameters
    // comment before type parameter
    // comment before name parameter
    int i) throws java.lang.Error, java.lang.Exception {
    }

    public void m3() {
        if (true) {
            // comment empty if
        }else // comment before else
        {
            // comment empty else
        }
        // comment if without block
        // comment then if without block
        if (true)
            m3();
        else// comment else without block
        // comment else if without block

            m3();

    }
}// Comment Field:// comment class
// this comment 1 belongs to class too
// this comment 2 belongs to class too
// comment after class
public class InlineComment extends java.util.ArrayList<java.lang.String> {
    // Comment Field
    // comment field 2
    // comment in field
    private int field = 10;// after field


    // comment static block
    static {
        // comment inside static
    }

    // comment constructor
    public InlineComment() {
        // Comment in constructor
    }

    // comment method
    public void m() {
        // comment empty method block
    }

    public void m1() {
        // comment switch
        switch (1) {
            // before first case
            case 0 :
                // comment case 0: empty case
            case 1 :
                // comment case 1
                int i = 0;
            default :
                // comment default
        }
        // comment for
        for (int i = 0; i < 10; i++) {
            // comment for block
        }
        // comment if
        if ((1 % 2) == 0) {
            // comment unary operator
            (field)++;
        }
        // comment constructor call
        new spoon.test.comment.testclasses.InlineComment();
        // comment invocation
        this.m();
        // comment local variable
        int i = 0;
        // comment multi assignments
        int j = 2;
        // comment dowhile
        do {
            // comment in do while
            i++;
            // comment end do while
        } while (i < 10 );
        // comment try
        try {
            // comment in try
            i++;
        }// between
        // try/catch
         catch (java.lang.Exception e) {
            // comment in catch
        }
        // comment synchronized
        synchronized(this) {
            // comment in synchronized
        }
        java.lang.Double dou = (i == 1// comment after condition CtConditional
        ) ? // comment before then CtConditional
        null// comment after then CtConditional
         : // comment before else CtConditional
        new java.lang.Double((j / ((double) (i - 1))));// comment after else CtConditional

        int[] arr = // last comment at the end of array
        new int[]{ // comment before array value
        1// comment after array value
        , 2, 3 }// last comment at the end of array
        ;
        java.lang.String m = "" + (""// comment multi line string
         + "");// after statement

        boolean c = (i == 1) ? // comment before then boolean CtConditional
        i == 1// comment after then boolean CtConditional
         : i == 2;
        // comment return
        return;
    }

    // comment before type
    // comment after parameter
    // comment before throws
    // comment before exception 1
    // comment before exception 2
    // comment before block
    public void m2(// comment before name
    // comment before parameters
    // comment before type parameter
    // comment before name parameter
    int i) throws java.lang.Error, java.lang.Exception {
    }

    public void m3() {
        if (true) {
            // comment empty if
        }else // comment before else
        {
            // comment empty else
        }
        // comment if without block
        // comment then if without block
        if (true)
            m3();
        else// comment else without block
        // comment else if without block

            m3();

    }
}// Comment Field// Comment Field
// comment field 2
// comment in field
private int field = 10;// after field
 is not printed
[ERROR]   CommentTest.testInsertNewComment:645 expected:<...() {
    // comment []local variable
    i...> but was:<...() {
    // comment [empty block
}// comment method
void newMethod() {
    // comment ]local variable
    i...>
[ERROR]   CommentTest.testJavaDocCommentOnMac:151->testJavaDocComment:221 expected:<-1> but was:<56>
[ERROR]   CommentTest.testJavaDocCommentOnUnix:129->testJavaDocComment:221 expected:<-1> but was:<56>
[ERROR]   EqualTest.testEqualsEmptyException:60 expected:<""[]> but was:<""[""]>
[ERROR]   ConstructorTest.testConstructorCallFactory:98 expected:<...java.util.ArrayList([]new java.util.ArrayL...> but was:<...java.util.ArrayList([)new java.util.ArrayList(]new java.util.ArrayL...>
[ERROR]   ConstructorCallTest.testConstructorCallObjectWithoutParameters:69->assertConstructorCallWithType:110 Constructor call is typed by the class of the constructor expected:<class spoon.test.constructorcallnewclass.testclasses.Foo> but was:<class java.lang.Object>
[ERROR]   ConstructorCallTest.testConstructorCallStringWithParameters:61->assertConstructorCallWithType:110 Constructor call is typed by the class of the constructor expected:<class java.lang.String> but was:<interface spoon.test.constructorcallnewclass.testclasses.Foo$Tacos>
[ERROR]   ConstructorCallTest.testConstructorCallStringWithoutParameters:53->assertConstructorCallWithType:110 Constructor call is typed by the class of the constructor expected:<class java.lang.String> but was:<interface spoon.test.constructorcallnewclass.testclasses.Foo$Bar>
[ERROR]   ConstructorCallTest.testConstructorCallWithGenericArray:90 expected:<[]> but was:<[new java.lang.String()new java.lang.String()new java.lang.String("")new java.lang.String()new spoon.test.constructorcallnewclass.testclasses.Foo()new java.lang.String()new spoon.test.constructorcallnewclass.testclasses.Foo()new java.lang.String("")new spoon.test.constructorcallnewclass.testclasses.Foo(42)new java.lang.String("")new spoon.test.constructorcallnewclass.testclasses.Foo(42)new spoon.test.constructorcallnewclass.testclasses.Foo()new java.lang.Object() {}new java.lang.String("")new java.lang.Object() {}new spoon.test.constructorcallnewclass.testclasses.Foo()new java.lang.Object() {}new spoon.test.constructorcallnewclass.testclasses.Foo(42)new spoon.test.constructorcallnewclass.testclasses.Foo.Bar() {}new java.lang.String("")new spoon.test.constructorcallnewclass.testclasses.Foo.Bar() {}new spoon.test.constructorcallnewclass.testclasses.Foo(42)new spoon.test.constructorcallnewclass.testclasses.Foo.Bar() {}new java.lang.Object() {}new spoon.test.constructorcallnewclass.testclasses.Foo.Tacos<java.lang.String>() {}new java.lang.String("")new spoon.test.constructorcallnewclass.testclasses.Foo.Tacos<java.lang.String>() {}new spoon.test.constructorcallnewclass.testclasses.Foo(42)new spoon.test.constructorcallnewclass.testclasses.Foo.Tacos<java.lang.String>() {}new java.lang.Object() {}new spoon.test.constructorcallnewclass.testclasses.Foo.Tacos<java.lang.String>() {}new spoon.test.constructorcallnewclass.testclasses.Foo.Bar() {}new spoon.test.constructorcallnewclass.testclasses.Foo.BarImpl(1) {}new java.lang.String("")new spoon.test.constructorcallnewclass.testclasses.Foo.BarImpl(1) {}new spoon.test.constructorcallnewclass.testclasses.Foo(42)new spoon.test.constructorcallnewclass.testclasses.Foo.BarImpl(1) {}new spoon.test.constructorcallnewclass.testclasses.Foo.Bar() {}new spoon.test.constructorcallnewclass.testclasses.Foo.BarImpl(1) {}new spoon.test.constructorcallnewclass.testclasses.Foo.Tacos<java.lang.String>() {}]>
[ERROR]   ConstructorCallTest.testCoreConstructorCall:123 expected:<new []Bar()> but was:<new [Foo()new ]Bar()>
[ERROR]   NewClassTest.testCtNewClassInNoClasspath:167 expected:<[]org.apache.lucene.st...> but was:<[SegmentInfosorg.apache.lucene.store.RAMDirectoryorg.apache.lucene.store.Lock.Withorg.apache.lucene.store.Lock.Withorg.apache.lucene.store.Lock.Withorg.apache.lucene.store.Lock.WithSegmentInfosorg.apache.lucene.store.Lock.Withorg.apache.lucene.store.Lock.Withorg.apache.lucene.store.Lock.Withorg.apache.lucene.store.Lock.With]org.apache.lucene.st...>
[ERROR]   ControlTest.testModelBuildingFor:35 expected:<i[] < 2> but was:<i[nt i = 0i] < 2>
[ERROR]   CtClassTest.testAllTypeReferencesToALocalTypeShouldNotStartWithNumber:145 expected:<[]final java.lang.Clas...> but was:<[public Cook() {
}]final java.lang.Clas...>
[ERROR]   CtClassTest.testCloneAnonymousClassInvocation:237 expected:<...   return 0;
    }
}[]> but was:<...   return 0;
    }
}[new java.util.Comparator<java.lang.Integer>() {
    @java.lang.Override
    public int compare(java.lang.Integer o1, java.lang.Integer o2) {
        return 0;
    }
}]>
[ERROR]   CtClassTest.testCloneAnonymousClassInvocationWithAutoimports:265 expected:<...   return 0;
    }
}[]> but was:<...   return 0;
    }
}[new Comparator<Integer>() {
    @Override
    public int compare(Integer o1, Integer o2) {
        return 0;
    }
}]>
[ERROR]   CtTypeParameterTest.testTypeErasure:35->checkType:51->checkTypeParamErasureOfExecutable:84 TypeErasure of executable param spoon.test.ctType.testclasses.ErasureModelA#<J> expected:<java.lang.[]Exception> but was:<java.lang.[Objectjava.lang.]Exception>
[ERROR]   EvalTest.testDoNotSimplifyToExpressionWhenStatementIsExpected:88 expected:<[]java.lang.System.out...> but was:<[spoon.test.eval.ToEvaluate.class.getName()]java.lang.System.out...>
[ERROR]   EvalTest.testVisitorPartialEvaluator_binary:100 expected:<[]1> but was:<[class Wrapper {
    static java.lang.Object wrap() throws java.lang.Throwable {
        return 0+1;
    }
}]1>
[ERROR]   EvalTest.testVisitorPartialEvaluator_if:133 expected:<[]{
    java.lang.Syst...> but was:<[class Wrapper {
    static void wrap() throws java.lang.Throwable {
        if (false) {System.out.println("foo");} else {System.out.println("bar");} ;
    }
}]{
    java.lang.Syst...>
[ERROR]   FactoryTest.testClassAccessCreatedFromFactories:99 expected:<...estclasses.Foo.class[]> but was:<...estclasses.Foo.class[spoon.test.factory.testclasses.Foo.class]>
[ERROR]   FieldTest.testFieldImplicitTarget:115 expected:<[]this.i> but was:<[i]this.i>
[ERROR]   FieldAccessTest.testBCUBug20140402:120 expected:<[]data> but was:<[length]data>
[ERROR]   FieldAccessTest.testFieldAccessDeclaredInADefaultClass:318 expected:<...sses.internal.Foo.i)[]> but was:<...sses.internal.Foo.i)[inv(spoon.test.fieldaccesses.testclasses.internal.Foo.i)]>
[ERROR]   FieldAccessTest.testFieldAccessInAnonymousClass:201 expected:<ingredient[].next> but was:<ingredient[ingredient].next>
[ERROR]   FieldAccessTest.testFieldAccessNoClasspath:217 expected:<[](game.board.width)> but was:<[Gamefr.inria.internal.Abcd](game.board.width)>
[ERROR]   FieldAccessTest.testFieldWriteWithPlusEqualsOperation:269 expected:<i[]> but was:<i[ += 0i]>
[ERROR]   FieldAccessTest.testGetReference:401 expected:<[]finalField> but was:<[A.myField]finalField>
[ERROR]   FieldAccessTest.testIncrementationOnAVarIsAUnaryOperator:256 expected:<[]++(i)> but was:<[(i)++]++(i)>
[ERROR]   FilterTest.testFilters:97 expected:<2> but was:<0>
[ERROR]   FilterTest.testOverridingMethodFromAbstractClass:271 expected:<...ilters.testclasses.A[bstractTostada$1]> but was:<...ilters.testclasses.A[ntojito]>
[ERROR]   GenericsTest.testBugCommonCollection:253 expected:<...s.ACLass<?> INSTANCE[]2 = new spoon.test.g...> but was:<...s.ACLass<?> INSTANCE[ = new spoon.test.generics.ACLass();public static final spoon.test.generics.ACLass<?> INSTANCE]2 = new spoon.test.g...>
[ERROR]   GenericsTest.testConstructorCallGenerics:388 expected:<java.util.List[] l2> but was:<java.util.List[<java.lang.String> l = new java.util.ArrayList<>()java.util.List] l2>
[ERROR]   GenericsTest.testCtTypeReference_getSuperclass:851 expected:<...es.CelebrationLunch<[]spoon.test.generics....> but was:<...es.CelebrationLunch<[java.lang.Integer, java.lang.Long, java.lang.Double>.WeddingLunch<spoon.test.generics.testclasses.Mole>spoon.test.generics.testclasses.CelebrationLunch<]spoon.test.generics....>
[ERROR]   GenericsTest.testDiamond1:154 expected:<[]> but was:<[class Wrapper {
    static void wrap() throws java.lang.Throwable {
        class Diamond {
        	java.util.List<String> f = new java.util.ArrayList<>();
        };
    }
}]>
[ERROR]   GenericsTest.testGenericMethodCallWithExtend:234 expected:<[]A extends java.lang....> but was:<[E extends java.lang.Enum<E>]A extends java.lang....>
[ERROR]   GenericsTest.testGenericWithExtendsInDeclaration:513 expected:<? []extends java.lang.Lo...> but was:<? [super java.lang.Object? ]extends java.lang.Lo...>
[ERROR]   GenericsTest.testGenericsInConstructorCall:581 expected:<java.lang.[]String> but was:<java.lang.[Integerjava.lang.]String>
[ERROR]   GenericsTest.testGenericsInQualifiedNameInConstructorCall:551 expected:<new []Burritos<K, V>()> but was:<new [Pozole()new ]Burritos<K, V>()>
[ERROR]   GenericsTest.testInvocationGenerics:435 expected:<[]this.<java.lang.Stri...> but was:<[<java.lang.String>this(1)]this.<java.lang.Stri...>
[ERROR]   GenericsTest.testIsGenericTypeEqual:1383 expected:<...tclasses2.AnType<T>>[]> but was:<...tclasses2.AnType<T>>[java.util.Set<spoon.test.generics.testclasses2.AnType<T>>]>
[ERROR]   GenericsTest.testMethodsWithGenericsWhoExtendsObject:485 expected:<...s.testclasses.Tacos.[]makeTacos()> but was:<...s.testclasses.Tacos.[<V, C>makeTacos()spoon.test.generics.testclasses.Tacos.]makeTacos()>
[ERROR]   GenericsTest.testModelBuildingTree:111 expected:<....Serializable, java.[]lang.Comparable<V>]> but was:<....Serializable, java.[io.Serializablejava.]lang.Comparable<V>]>
[ERROR]   GenericsTest.testNewClassGenerics:463 expected:<...java.lang.Void>() {}[]> but was:<...java.lang.Void>() {}[new javax.lang.model.util.SimpleTypeVisitor7<spoon.test.generics.testclasses.Tacos, java.lang.Void>() {}]>
[ERROR]   GenericsTest.testRecursiveTypeAdapting:993 expected:<...List<java.util.List<[]P>>> but was:<...List<java.util.List<[M>>java.util.List<java.util.List<]P>>>
[ERROR]   GenericsTest.testTypeParameterReferenceAsActualTypeArgument:636 expected:<...inesANewTypeArgument[]<T>> but was:<...inesANewTypeArgument[spoon.test.generics.ClassThatDefinesANewTypeArgument]<T>>
[ERROR]   ImportScannerTest.testImportOnSpoon:158 Import scanner missed 5 imports expected:<0> but was:<5>
[ERROR]   ImportTest.testAccessType:482 expected:<[]spoon.test.imports.t...> but was:<[ChildClass.InnerClassProtected]spoon.test.imports.t...>
[ERROR]   ImportTest.testImportOfAnInnerClassInASuperClassAvailableInLibrary:161 expected:<[]org.yaml.snakeyaml.r...> but was:<[visibility.YamlRepresenter.RepresentConfigurationSection]org.yaml.snakeyaml.r...>
[ERROR]   ImportTest.testImportOfAnInnerClassInASuperClassPackageAutoImport:98 expected:<[]spoon.test.imports.t...> but was:<[package spoon.test.imports.testclasses.internal;


class SuperClass {
    protected class InnerClassProtected {}

    interface PackageProtectedInterface {
        interface NestedOfPackageProtectedInterface {}

        public interface NestedPublicInterface {}
    }

    protected interface ProtectedInterface {
        interface NestedOfProtectedInterface {}

        public interface NestedPublicInterface {}
    }

    public interface PublicInterface {
        interface NestedOfPublicInterface {}

        public interface NestedPublicInterface {}
    }
}

]spoon.test.imports.t...>
[ERROR]   ImportTest.testImportOfAnInnerClassInASuperClassPackageFullQualified:131 expected:<[]spoon.test.imports.t...> but was:<[package spoon.test.imports.testclasses.internal;


class SuperClass {
    protected class InnerClassProtected {}

    interface PackageProtectedInterface {
        interface NestedOfPackageProtectedInterface {}

        public interface NestedPublicInterface {}
    }

    protected interface ProtectedInterface {
        interface NestedOfProtectedInterface {}

        public interface NestedPublicInterface {}
    }

    public interface PublicInterface {
        interface NestedOfPublicInterface {}

        public interface NestedPublicInterface {}
    }
}

]spoon.test.imports.t...>
[ERROR]   ImportTest.testNestedAccessPathWithTypedParameter:585 expected:<p[]rivate class Wrapped...> but was:<p[ackage spoon.test.imports.testclasses2;


abstract class AbstractMapBasedMultimap<K, V> {
    private class WrappedCollection {
        class WrappedIterator {}
    }

    private class WrappedList extends spoon.test.imports.testclasses2.AbstractMapBasedMultimap<K, V>.WrappedCollection {
        private class WrappedListIterator extends spoon.test.imports.testclasses2.AbstractMapBasedMultimap<K, V>.WrappedCollection.WrappedIterator {}
    }

    private class OtherWrappedList extends spoon.test.imports.testclasses2.AbstractMapBasedMultimap<K, V>.WrappedCollection {
        private class WrappedListIterator extends spoon.test.imports.testclasses2.AbstractMapBasedMultimap<K, V>.OtherWrappedList.WrappedIterator {}

        class WrappedIterator {}
    }
}

p]rivate class Wrapped...>
[ERROR]   ImportTest.testNestedAccessPathWithTypedParameterWithImports:609 expected:<p[]rivate class Wrapped...> but was:<p[ackage spoon.test.imports.testclasses2;


abstract class AbstractMapBasedMultimap<K, V> {
    private class WrappedCollection {
        class WrappedIterator {}
    }

    private class WrappedList extends AbstractMapBasedMultimap<K, V>.WrappedCollection {
        private class WrappedListIterator extends AbstractMapBasedMultimap<K, V>.WrappedCollection.WrappedIterator {}
    }

    private class OtherWrappedList extends AbstractMapBasedMultimap<K, V>.WrappedCollection {
        private class WrappedListIterator extends AbstractMapBasedMultimap<K, V>.OtherWrappedList.WrappedIterator {}

        class WrappedIterator {}
    }
}

p]rivate class Wrapped...>
[ERROR]   ImportTest.testNewInnerClassDefinesInItsClassAndSuperClass:204 expected:<[]public class SubClas...> but was:<[new spoon.test.imports.testclasses.SubClass.Item("")]public class SubClas...>
[ERROR]   ImportTest.testNotImportExecutableType:381 expected:<[java.io.File, spoon.test.imports.testclasses.internal3.Foo]> but was:<[spoon.test.imports.testclasses.internal3.Foojava.io.File, spoon.test.imports.testclasses.internal3.Foo]>
[ERROR]   ImportTest.testStaticImportForInvocationInNoClasspath:303->assertCorrectInvocation:702 expected:<[]pack1.A> but was:<[A]pack1.A>
[ERROR]   InitializerTest.testModelBuildingInitializer:63 expected:<[]x = 3> but was:<[5]x = 3>
[ERROR]   IntercessionTest.testEqualConstructor:104 expected:<[]super()> but was:<[class Wrapper {
    static void wrap() throws java.lang.Throwable {
        class X { public X() {} };;
    }
}]super()>
[ERROR]   IntercessionTest.testInsertAfter:172 expected:<[]int z = x + y> but was:<[class Wrapper {
    static void wrap() throws java.lang.Throwable {
        class X {public void foo() { int x=0; int y=0; int z=x+y;}};;
    }
}]int z = x + y>
[ERROR]   IntercessionTest.testInsertIfIntercession:140 expected:<[]if (1 == 0)
    retu...> but was:<[class Wrapper {
    static void wrap() throws java.lang.Throwable {
        class X {public int bar() {if (1 == 0)
            return 1;
        else
            return 0;
        }};;
    }
}]if (1 == 0)
    retu...>
[ERROR]   InsertMethodsTest.testInsertAfter:80 expected:<[]int z = x + y> but was:<[class Wrapper {
    static void wrap() throws java.lang.Throwable {
        class X {public void foo() {  int x=0;  int y=0;  int z=x+y; }};;
    }
}]int z = x + y>
[ERROR]   InsertMethodsTest.testInsertBefore:61 expected:<[]int z = x + y> but was:<[class Wrapper {
    static void wrap() throws java.lang.Throwable {
        class X {public void foo() {  int x=0;  int y=0;  int z=x+y; }};;
    }
}]int z = x + y>
[ERROR]   ImportBuilderTest.testWithImportFromItf:175 expected:<ALL_STATIC_MEMBERS> but was:<TYPE>
[ERROR]   ImportBuilderTest.testWithStaticInheritedImport:152 expected:<1> but was:<2>
[ERROR]   LiteralTest.testCharLiteralInNoClasspath:43 expected:<:> but was:<,>
[ERROR]   MethodTest.testSearchMethodWithGeneric:62 expected:<...T extends java.lang.[]String> void method1...> but was:<...T extends java.lang.[Integer> void method1(T t) {
}public <T extends java.lang.]String> void method1...>
[ERROR]   MethodReferenceTest.testReferenceToAStaticMethod:71->assertTargetedBy:275 Target reference correspond to the enclosing class. expected:<...stclasses.Foo.Person[]> but was:<...stclasses.Foo.Person[::compareByAgetarzan.phone::compareByNumbersmyComparisonProvider::compareByNamejava.lang.String::compareToIgnoreCasejava.util.HashSet<spoon.test.methodreference.testclasses.Foo.Person>::newspoon.test.methodreference.testclasses.Foo.Person::newspoon.test.methodreference.testclasses.Foo.Type<java.lang.String>::newspoon.test.methodreference.testclasses.Foo.Person]>
[ERROR]   TypeTest.testGetUsedTypes:45 expected:<3> but was:<4>
[ERROR]   TypeTest.testGetUsedTypesForTypeInRootPackage:67 expected:<0> but was:<1>
[ERROR]   ParameterTest.testParameterInNoClasspath:33 expected:<...se.swt.graphics.Font[] font> but was:<...se.swt.graphics.Font[org.eclipse.swt.graphics.Font] font>
[ERROR]   NullParentTest.testAssertNullExpression:64 expected:<assert true[]> but was:<assert true[ : "message"assert true]>
[ERROR]   NullParentTest.testFieldNullDefaultExpression:104 expected:<int bar[];> but was:<int bar[ = 0;int bar];>
[ERROR]   NullParentTest.testForLoopNullChildren:76 expected:<for(inti=0;[];i++){}> but was:<for(inti=0;[i<10;i++){}for(inti=0;];i++){}>
[ERROR]   NullParentTest.testIfNullBranches:86 expected:<if(true)[];else{}> but was:<if(true)[{}else{}if(true)];else{}>
[ERROR]   NullParentTest.testLocalVariableNullDefaultExpression:96 expected:<int i[]> but was:<int i[ = 0int i]>
[ERROR]   NullParentTest.testReturnNullExpression:112 expected:<return[]> but was:<return[ 0return]>
[ERROR]   NullParentTest.testTargetedAccessNullTarget:48 expected:<[]bar> but was:<[foo.bar]bar>
[ERROR]   NullParentTest.testTargetedExpressionNullTarget:56 expected:<foo[]()> but was:<foo[.foo()foo]()>
[ERROR]   PackageTest.testAddAnnotationToPackage:265 expected:<@[]GlobalAnnotation> but was:<@[spoon.test.annotation.testclasses.]GlobalAnnotation>
[ERROR]   DefaultPrettyPrinterTest.autoImportUsesFullyQualifiedNameWhenImportedNameAlreadyPresent:181 We use FQN for E1 expected:<... {
    localField = [spoon.test.prettyprinter.testclasses.sub.TypeIdentifierCollision.ENUM.]E1.ordinal();
}> but was:<... {
    localField = []E1.ordinal();
}>
[ERROR]   DefaultPrettyPrinterTest.testPrintAClassWithImports:100 expected:<...
        return new [ArrayList<>();
    }

    public List<? extends ArrayList> aMethodWithGeneric() {
        return new ]ArrayList<>();
    }...> but was:<...
        return new [java.util.ArrayList<>();
    }

    public List<? extends ArrayList> aMethodWithGeneric() {
        return new java.util.]ArrayList<>();
    }...>
[ERROR]   DefaultPrettyPrinterTest.testPrintAMethodWithGeneric:151 expected:<...() {
    return new []ArrayList<>();
}> but was:<...() {
    return new [java.util.]ArrayList<>();
}>
[ERROR]   DefaultPrettyPrinterTest.testPrintAMethodWithImports:126 expected:<...() {
    return new []ArrayList<>();
}> but was:<...() {
    return new [java.util.]ArrayList<>();
}>
[ERROR]   PrinterTest.testChangeAutoImportModeWorks:74 The result should now contain imports: package spoon.test.prettyprinter.testclasses;


public class AClass {
    public java.util.List<?> aMethod() {
        return new java.util.ArrayList<>();
    }

    public java.util.List<? extends java.util.ArrayList> aMethodWithGeneric() {
        return new java.util.ArrayList<>();
    }
}


[ERROR]   QualifiedThisRefTest.testCloneThisAccess:84 expected:<notify()[]> but was:<notify()[notify()]>
[ERROR]   ProcessingTest.testInsertBegin:59 insert failed for method method2 expected:<int i = 0;[]> but was:<int i = 0;[int i = 0;]>
[ERROR]   ProcessingTest.testInsertEnd:98 insert failed for method method2 expected:<int i = 0[]> but was:<int i = 0[int i = 0]>
[ERROR]   RefactoringTest.testTransformedInstanceofAfterATransformation:111 expected:<[]spoon.test.refactori...> but was:<[o]spoon.test.refactori...>
[ERROR]   ExecutableReferenceGenericTest.testExecutableReferences:252
[ERROR]   ExecutableReferenceTest.testCallMethodOfClassNotPresent:61 expected:<[]m()> but was:<[BarBarBar]m()>
[ERROR]   TypeReferenceTest.testAnonymousClassesHaveAnEmptyStringForItsNameInNoClasspath:467
[ERROR]   TypeReferenceTest.testConstructorCallInNoClasspath:487 expected:<A.B[]<C>> but was:<A.B[A.B<C>A.B<C>A.B<C>DDDA.B]<C>>
[ERROR]   TypeReferenceTest.testPackageInNoClasspath:326 Reference to Demo is missing
[ERROR]   TypeReferenceTest.testTypeReferenceSpecifiedInClassDeclarationInNoClasspath:347 expected:<java.lang.String[]> but was:<java.lang.String[java.lang.String]>
[ERROR]   TypeReferenceTest.testTypeReferenceSpecifiedInClassDeclarationInNoClasspathWithGenerics:385 expected:<... ? extends Tacos<?>>[]> but was:<... ? extends Tacos<?>>[example.FooBar<?, ? extends Tacos<?>>.Bar<?, ? extends Tacos<?>>example.FooBar<?, ? extends Tacos<?>>.Bar<?, ? extends Tacos<?>>]>
[ERROR]   TypeReferenceTest.testUnknownSuperClassWithSameNameInNoClasspath:293 expected:<...o.android.omninotes.[]commons.models.Attac...> but was:<...o.android.omninotes.[models.Attachmentit.feio.android.omninotes.models.Attachmentandroid.os.Parcelable.Creator<Attachment>android.os.Parcelable.Creator<Attachment>android.os.Parcelable.Creator<Attachment>android.os.Parcelable.Creator<Attachment>it.feio.android.omninotes.models.Attachmentandroid.os.Parcelit.feio.android.omninotes.models.Attachmentit.feio.android.omninotes.models.Attachmentit.feio.android.omninotes.models.Attachment[]it.feio.android.omninotes.models.Attachmentit.feio.android.omninotes.]commons.models.Attac...>
[ERROR]   ReplaceTest.testReplaceAPackageReferenceByAnotherOne:357 expected:<com.awesome[].Burritos> but was:<com.awesome[com.awesome].Burritos>
[ERROR]   ReplaceTest.testReplaceAParameterReferenceToFieldReference:382 expected:<....System.err.println([]field)> but was:<....System.err.println([param)java.lang.System.err.println(]field)>
[ERROR]   ReplaceTest.testReplaceBlock:106 expected:<[]x + 1> but was:<[z = x + 1]x + 1>
[ERROR]   ReplaceTest.testReplaceExecutableReferenceByAnotherOne:401 expected:<[]java.io.PrintStream> but was:<[print(java.lang.String)]java.io.PrintStream>
[ERROR]   SerializableTest.testSerialCtStatement:47 expected:<...m.out.println(hello)[]> but was:<...m.out.println(hello)[java.lang.System.out.println(hello)]>
[ERROR]   SignatureTest.testMethodInvocationSignatureWithVariableAccess:210 expected:<foo([int])> but was:<foo([java.lang.String])>
[ERROR]   SignatureTest.testNullSignature:63 expected:<[]null> but was:<[class Wrapper {
    static void wrap() throws java.lang.Throwable {
        class X {public Object foo() { return null;}};;
    }
}]null>
[ERROR]   SignatureTest.testUnboundFieldSignature:283 expected:<this.mfield[] = p> but was:<this.mfield[this.mfield] = p>
[ERROR]   SnippetTest.testCompileStatementWithReturn:94 expected:<[]return 3> but was:<[class Wrapper {
    static java.lang.Integer wrap() throws java.lang.Throwable {
        return 3;
    }
}]return 3>
[ERROR]   StringLiteralTest.testSnippetFullClass:45 expected:<[]java.lang.String f0 ...> but was:<[class Wrapper {
    static void wrap() throws java.lang.Throwable {
        class StringValueUTF {
        	String f0 = "toto";
        	String f1 = "\n";
        	char c1 = '\n';
        	String f2 = "\u20ac";
        	char c2 = '\u20ac';
        	String f3 = "€";
        	char c3 = '€';
        	String f4 = "\t";
        	char c4 = '\t';
        	String f5 = "	";
        	char c5 = '	';
        	String f6 = "€\u20ac";
        };
    }
}]java.lang.String f0 ...>
[ERROR]   TargetedExpressionTest.testClassDeclaredInALambda:446->assertEqualsFieldAccess:465 expected:<this.index[]> but was:<this.index[this.index]>
[ERROR]   TargetedExpressionTest.testCtSuperAccess:60 expected:<[]return super.toStrin...> but was:<[spoon.test.targeted.testclasses.InternalSuperCall.super.toString()]return super.toStrin...>
[ERROR]   TargetedExpressionTest.testCtThisAccess:79 expected:<this.[]b = b> but was:<this.[method()this.]b = b>
[ERROR]   TargetedExpressionTest.testNotTargetedExpression:108 expected:<[]i> but was:<[this.i]i>
[ERROR]   TargetedExpressionTest.testStaticTargetsOfFieldAccessNoClasspath:256->assertEqualsFieldAccess:465 expected:<[]foo.i> but was:<[new Foo().i]foo.i>
[ERROR]   TargetedExpressionTest.testStaticTargetsOfInv:317->assertEqualsInvocation:474 expected:<[]foo.staticMethod()> but was:<[new spoon.test.targeted.testclasses.Foo(0, 0).staticMethod()]foo.staticMethod()>
[ERROR]   TargetedExpressionTest.testStaticTargetsOfInvNoClasspath:407->assertEqualsInvocation:474 expected:<[]foo.staticMethod()> but was:<[new Foo(0, 0).staticMethod()]foo.staticMethod()>
[ERROR]   TargetedExpressionTest.testTargetsOfFieldAccess:137->assertEqualsFieldAccess:465 expected:<[]i> but was:<[this.i]i>
[ERROR]   TargetedExpressionTest.testTargetsOfFieldAccessInInnerClass:201->assertEqualsFieldAccess:465 expected:<[]i> but was:<[this.i]i>
[ERROR]   TargetedExpressionTest.testTargetsOfFieldInAnonymousClass:233->assertEqualsFieldAccess:465 expected:<this.i[]> but was:<this.i[this.i]>
[ERROR]   TargetedExpressionTest.testTargetsOfInv:288->assertEqualsInvocation:474 expected:<[]foo.method()> but was:<[new spoon.test.targeted.testclasses.Foo(0, 0).method()]foo.method()>
[ERROR]   TargetedExpressionTest.testTargetsOfInvInAnonymousClass:384->assertEqualsInvocation:474 expected:<this.invStatic()[]> but was:<this.invStatic()[this.invStatic()]>
[ERROR]   TargetedExpressionTest.testTargetsOfInvInInnerClass:350->assertEqualsInvocation:474 expected:<[]this.inv()> but was:<[inv()]this.inv()>
[ERROR]   TargetedExpressionTest.testTargetsOfStaticFieldAccess:163->assertEqualsFieldAccess:465 expected:<[]spoon.test.targeted....> but was:<[this.k]spoon.test.targeted....>
[ERROR]   PatternTest.testExtensionDecoupledSubstitutionVisitor:1551 expected:<...sses.logger.Logger.e[]nter("Logger", "ente...> but was:<...sses.logger.Logger.e[xit("enter")spoon.test.template.testclasses.logger.Logger.e]nter("Logger", "ente...>
[ERROR]   PatternTest.testGenerateIfElse:250 expected:<...ang.System.out.print[]ln(2.1)> but was:<...ang.System.out.print[("spoon")java.lang.System.out.print]ln(2.1)>
[ERROR]   PatternTest.testGenerateMultiValues:282 expected:<[int foo = 0, foo++, java.lang.System.out.println("does it work?")]> but was:<[int foo = 0, int foo = 0foo++, java.lang.System.out.println("does it work?")]>
[ERROR]   PatternTest.testMatchForeach:111 expected:<[java.lang.System.out.println("a"), java.lang.System.out.println("Xxxx"), java.lang.System.out.println(((java.lang.String) (null))), java.lang.System.out.println(java.lang.Long.class.toString())]> but was:<[java.lang.System.out.println(value)java.lang.System.out.println("a"), java.lang.System.out.println(value)java.lang.System.out.println("a")java.lang.System.out.println("Xxxx"), java.lang.System.out.println(value)java.lang.System.out.println("a")java.lang.System.out.println("Xxxx")java.lang.System.out.println(((java.lang.String) (null))), java.lang.System.out.println(value)java.lang.System.out.println("a")java.lang.System.out.println("Xxxx")java.lang.System.out.println(((java.lang.String) (null)))java.lang.System.out.println(java.lang.Long.class.toString())]>
[ERROR]   PatternTest.testMatchForeachWithOuterSubstitution:150 expected:<[int cc = 0, java.lang.System.out.println("Xxxx"), cc++, java.lang.System.out.println(((java.lang.String) (null))), cc++]> but was:<[int var = 0int cc = 0, int var = 0int cc = 0java.lang.System.out.println("Xxxx"), int var = 0int cc = 0java.lang.System.out.println("Xxxx")cc++, int var = 0int cc = 0java.lang.System.out.println("Xxxx")cc++java.lang.System.out.println(((java.lang.String) (null))), int var = 0int cc = 0java.lang.System.out.println("Xxxx")cc++java.lang.System.out.println(((java.lang.String) (null)))cc++]>
[ERROR]   PatternTest.testMatchGreedyMultiValueMaxCountLimit:340 expected:<[int i = 0, i++, java.lang.System.out.println(i), java.lang.System.out.println("Xxxx")]> but was:<[int i = 0, int i = 0i++, int i = 0i++java.lang.System.out.println(i), int i = 0i++java.lang.System.out.println(i)java.lang.System.out.println("Xxxx")]>
[ERROR]   PatternTest.testMatchGreedyMultiValueUnlimited:304 expected:<[int i = 0, i++, java.lang.System.out.println(i), java.lang.System.out.println("Xxxx"), java.lang.System.out.println(((java.lang.String) (null))), java.lang.System.out.println("last one")]> but was:<[int i = 0, int i = 0i++, int i = 0i++java.lang.System.out.println(i), int i = 0i++java.lang.System.out.println(i)java.lang.System.out.println("Xxxx"), int i = 0i++java.lang.System.out.println(i)java.lang.System.out.println("Xxxx")java.lang.System.out.println(((java.lang.String) (null))), int i = 0i++java.lang.System.out.println(i)java.lang.System.out.println("Xxxx")java.lang.System.out.println(((java.lang.String) (null)))java.lang.System.out.println("last one")]>
[ERROR]   PatternTest.testMatchIfElse:200 expected:<[]"a"> but was:<[java.lang.System.out.println("a")]"a">
[ERROR]   PatternTest.testMatchInSet:1080 expected:<[java.lang.UnsupportedOperationException, java.lang.IllegalArgumentException]> but was:<[java.lang.IllegalArgumentExceptionjava.lang.UnsupportedOperationException, java.lang.IllegalArgumentException]>
[ERROR]   PatternTest.testMatchOfAttribute:890 expected:<[]java.lang.System.out...> but was:<[this.getClass()]java.lang.System.out...>
[ERROR]   PatternTest.testMatchOfMapAttribute:952 expected:<"[]abc"> but was:<"[xyz""]abc">
[ERROR]   PatternTest.testMatchOfMapAttributeAndOtherAnnotations:992 expected:<[]@java.lang.Deprecate...> but was:<[4567]@java.lang.Deprecate...>
[ERROR]   PatternTest.testMatchOfMapKeySubstring:1036 expected:<[]4567> but was:<["xyz"]4567>
[ERROR]   PatternTest.testMatchParameterCondition:804 expected:<[]"a"> but was:<[java.lang.System.out.println("a")]"a">
[ERROR]   PatternTest.testMatchParameterValue:702 expected:<...lue
}
----------
1) []java.lang.System.out...> but was:<...lue
}
----------
1) [value]java.lang.System.out...>
[ERROR]   PatternTest.testMatchParameterValueType:745 expected:<[]"a"> but was:<[java.lang.System.out.println("a")]"a">
[ERROR]   PatternTest.testMatchPossesiveMultiValueMaxCount4:532 expected:<[int i = 0, i++, java.lang.System.out.println(i), java.lang.System.out.println("Xxxx"), java.lang.System.out.println(((java.lang.String) (null)))]> but was:<[int i = 0, int i = 0i++, int i = 0i++java.lang.System.out.println(i), int i = 0i++java.lang.System.out.println(i)java.lang.System.out.println("Xxxx"), int i = 0i++java.lang.System.out.println(i)java.lang.System.out.println("Xxxx")java.lang.System.out.println(((java.lang.String) (null)))]>
[ERROR]   PatternTest.testMatchReluctantMultivalue:386 expected:<[int i = 0, i++, java.lang.System.out.println(i), java.lang.System.out.println("Xxxx")]> but was:<[int i = 0, int i = 0i++, int i = 0i++java.lang.System.out.println(i), int i = 0i++java.lang.System.out.println(i)java.lang.System.out.println("Xxxx")]>
[ERROR]   PatternTest.testMatchReluctantMultivalueExactly2:482 expected:<[i++, java.lang.System.out.println(i), java.lang.System.out.println("Xxxx")]> but was:<[i++, i++java.lang.System.out.println(i), i++java.lang.System.out.println(i)java.lang.System.out.println("Xxxx")]>
[ERROR]   PatternTest.testMatchReluctantMultivalueMinCount1:439 expected:<[int i = 0, i++, java.lang.System.out.println(i), java.lang.System.out.println("Xxxx")]> but was:<[int i = 0, int i = 0i++, int i = 0i++java.lang.System.out.println(i), int i = 0i++java.lang.System.out.println(i)java.lang.System.out.println("Xxxx")]>
[ERROR]   PatternTest.testMatchSample1:1266 expected:<[]false> but was:<["extends"]false>
[ERROR]   PatternTest.testPatternMatchOfMultipleElements:1452 expected:<"[]b"> but was:<"[a""]b">
[ERROR]   PatternTest.testPatternToString:1161 expected:<...()).writeSpace();
}
[]try (final spoon.ref...> but was:<...()).writeSpace();
}
[if (/* CtInvocation
    / <= ${useStartKeyword}
 */
useStartKeyword()) {
    /* CtInvocation
        /argument/ <= ${startKeyword}
     */
    /* CtInvocation
        /target/ <= ${printer}
     */
    /* CtInvocation
        / <= ${printer}
     */
    printer().writeSpace().writeKeyword(/* CtInvocation
        / <= ${startKeyword}
     */
    startKeyword()).writeSpace();
}]try (final spoon.ref...>
[ERROR]   TemplateClassAccessTest.testClassAccessTest:31 expected:<[]null.getName()> but was:<[java.lang.String.class.getName()]null.getName()>
[ERROR]   TemplateInvocationSubstitutionTest.testInvocationSubstitutionByExpression:49 expected:<...("abc".substring(1))[]> but was:<...("abc".substring(1))[java.lang.System.out.println("abc".substring(1))]>
[ERROR]   TemplateTest.substituteStringLiteral:950 expected:<...g.String stringField[]2 = "Substring value...> but was:<...g.String stringField[1 = "value1";java.lang.String stringField]2 = "Substring value...>
[ERROR]   TemplateTest.substituteSubString:995 expected:<java.lang.String []p_A> but was:<java.lang.String [m_A = "A is here more times: A";java.lang.String ]p_A>
[ERROR]   TemplateTest.substituteTypeAccessReference:1133 expected:<...mple<java.util.Date>[]> but was:<...mple<java.util.Date>[spoon.test.template.TypeReferenceClassAccess.Example<java.util.Date>]>
[ERROR]   TemplateTest.testAnotherFieldAccessNameSubstitution:1107 expected:<int []m_x;> but was:<int [x;int ]m_x;>
[ERROR]   TemplateTest.testExpressionTemplate:885 expected:<...ew java.lang.String([]"Spoon is cool!")> but was:<...ew java.lang.String([exp.S())new java.lang.String(]"Spoon is cool!")>
[ERROR]   TemplateTest.testExtensionBlock:643 expected:<...sses.logger.Logger.e[]nter("Logger", "ente...> but was:<...sses.logger.Logger.e[xit("enter")spoon.test.template.testclasses.logger.Logger.e]nter("Logger", "ente...>
[ERROR]   TemplateTest.testFieldAccessNameSubstitution:1071 expected:<[]value = 7> but was:<[int value;]value = 7>
[ERROR]   TemplateTest.testFieldAccessNameSubstitutionInInnerClass:1090 expected:<[]value = 7> but was:<[int value;]value = 7>
[ERROR]   TemplateTest.testTemplateArrayAccess:821 expected:<[]java.lang.String s =...> but was:<[int i = 0]java.lang.String s =...>
[ERROR]   TemplateTest.testTemplateC1:337 expected:<[]return "testparam"> but was:<[java.util.List<java.util.Date> toBeInserted = new java.util.ArrayList<java.util.Date>();]return "testparam">
[ERROR]   TemplateTest.testTemplateInheritance:156 expected:<[]int x> but was:<[super.toBeOverriden()]int x>
[ERROR]   TemplateTest.testTemplateMatcher:440->lambda$testTemplateMatcher$3:442->checkParameters:610 expected:<[]l> but was:<[new java.util.ArrayList<>()]l>
[ERROR]   TryCatchTest.testCatchOrder:90 expected:<[]java.lang.System.exi...> but was:<[class Wrapper {
    static void wrap() throws java.lang.Throwable {
        class X {public void foo() { try{}catch(RuntimeException e){java.lang.System.exit(0);}      catch(Exception e){}}};;
    }
}]java.lang.System.exi...>
[ERROR]   TryCatchTest.testExceptionJava7:124 expected:<[]java.lang.System.exi...> but was:<[class Wrapper {
    static void wrap() throws java.lang.Throwable {
        class X {public void foo() { try{}catch(RuntimeException | Error e){System.exit(0);}}};;
    }
}]java.lang.System.exi...>
[ERROR]   TypeTest.testIntersectionTypeReferenceInGenericsAndCasts:210 expected:<...java.io.Serializable[]> but was:<...java.io.Serializable[java.lang.Runnable & java.io.Serializable]>
[ERROR]   TypeTest.testTypeAccessForTypeAccessInInstanceOf:135 expected:<a instanceof java.[]util.Collection<?>> but was:<a instanceof java.[lang.Stringa instanceof java.]util.Collection<?>>
[ERROR]   TypeTest.testTypeAccessOfArrayObjectInFullyQualifiedName:160 expected:<...nstanceof java.lang.[]Object[]> but was:<...nstanceof java.lang.[@spoon.test.annotation.testclasses.TypeAnnotation(integer = 1)
Object[]a instanceof java.lang.]Object[]>
[ERROR]   TypeTest.testTypeReferenceInGenericsAndCasts:253 expected:<java.lang.Runnable[]> but was:<java.lang.Runnable[java.lang.Runnable]>
[ERROR]   VarArgsTest.testModelBuildingInitializer:30 expected:<java.lang.String[]> but was:<java.lang.String[[]java.lang.String]>
[ERROR]   AccessTest.testAccessToStringOnPostIncrement:215 expected:<[](i++).toString()> but was:<[class Wrapper {
    static void wrap() throws java.lang.Throwable {
        class X {public void foo() { Integer i = 1; (i++).toString(); int k = 0; k++;}};;
    }
}](i++).toString()>
[ERROR]   AccessTest.testVariableAccessInNoClasspath:198 expected:<[]java.lang.Class mcla...> but was:<[org.argouml.uml.ui.PropPanelModifiersorg.argouml.uml.ui.behavior.use_cases.UMLUseCaseExtensionPointListModelorg.argouml.uml.ui.behavior.use_cases.UMLUseCaseExtendListModelorg.argouml.uml.ui.behavior.use_cases.UMLUseCaseIncludeListModel]java.lang.Class mcla...>
[ERROR]   VisibilityTest.testFullyQualifiedNameOfTypeReferenceWithGeneric:93 expected:<[]spoon.test.visibilit...> but was:<[(spoon.test.visibility.testclasses.A.B.i)]spoon.test.visibilit...>
[ERROR]   VisibilityTest.testInvocationVisibilityInFieldDeclaration:158 expected:<[]bound()> but was:<[Vec<Constr>Vec<Constr>org.sat4j.core.VecIntorg.sat4j.core.VecIntorg.sat4j.minisat.core.ActivityComparatororg.sat4j.minisat.core.SolverStatsorg.sat4j.core.VecIntorg.sat4j.minisat.core.VoidTracingorg.sat4j.core.VecIntorg.sat4j.core.VecIntorg.sat4j.core.VecIntorg.sat4j.minisat.core.ISimplifierorg.sat4j.minisat.core.ISimplifierorg.sat4j.minisat.core.ISimplifierorg.sat4j.minisat.core.ISimplifierorg.sat4j.core.VecIntorg.sat4j.core.VecIntVec<Propagatable>org.sat4j.minisat.core.Pairorg.sat4j.core.VecIntorg.sat4j.core.VecIntorg.sat4j.minisat.core.ConflictTimerAdapterorg.sat4j.minisat.core.ConflictTimerAdapterorg.sat4j.minisat.core.SearchParamsorg.sat4j.core.VecIntorg.sat4j.core.ConstrGrouporg.sat4j.core.VecIntorg.sat4j.core.VecIntorg.sat4j.minisat.core.LearnedConstraintsDeletionStrategyorg.sat4j.minisat.core.ConflictTimerAdapterorg.sat4j.minisat.core.LearnedConstraintsDeletionStrategyorg.sat4j.minisat.core.ConflictTimerContainerorg.sat4j.minisat.core.ConflictTimerAdapterorg.sat4j.specs.TimeoutExceptionorg.sat4j.specs.TimeoutExceptionorg.sat4j.minisat.core.Counterorg.sat4j.minisat.core.Counterorg.sat4j.minisat.core.Counterorg.sat4j.core.VecIntorg.sat4j.core.VecIntorg.sat4j.core.VecIntorg.sat4j.core.VecIntorg.sat4j.core.VecInt]bound()>
[ERROR] Errors: 
[ERROR]   CommentTest.testDocumentationContract:765->lambda$testDocumentationContract$0:806 » ModelBuilding
[ERROR]   EqualTest.testEqualsActualTypeRef:99 » ModelBuilding snippet compilation error...
[ERROR]   CtTypeTest.testHasMethodNotHasMethod:47 » ModelBuilding snippet compilation er...
[ERROR]   EvalTest.testDoNotSimplifyCasts:65 » UnsupportedOperation PartialSourcePositio...
[ERROR]   EvalTest.testVisitorPartialEvaluatorScanner:148 » UnsupportedOperation Partial...
[ERROR]   FieldAccessTest.testFieldAccessAutoExplicit:412 » ModelBuilding snippet compil...
[ERROR]   FilterTest.testOverridingMethodFromInterface:320 NullPointer
[ERROR]   MethodReferenceTest.testReferenceToAClassParametrizedConstructor:133->getCtExecutableReferenceExpression:297 » IndexOutOfBounds
[ERROR]   MethodReferenceTest.testReferenceToAConstructor:120->getCtExecutableReferenceExpression:297 » IndexOutOfBounds
[ERROR]   MethodReferenceTest.testReferenceToAJavaUtilClassConstructor:146->getCtExecutableReferenceExpression:297 » IndexOutOfBounds
[ERROR]   MethodReferenceTest.testReferenceToAnInstanceMethodOfAParticularObject:81->getCtExecutableReferenceExpression:297 » IndexOutOfBounds
[ERROR]   MethodReferenceTest.testReferenceToAnInstanceMethodOfAnArbitraryObjectOfAParticularType:107->getCtExecutableReferenceExpression:297 » IndexOutOfBounds
[ERROR]   MethodReferenceTest.testReferenceToAnInstanceMethodOfMultiParticularObject:94->getCtExecutableReferenceExpression:297 » IndexOutOfBounds
[ERROR]   DefaultPrettyPrinterTest.importsFromMultipleTypesSupported:275 » NullPointer
[ERROR]   DefaultPrettyPrinterTest.testTernaryParenthesesOnLocalVariable:291 » ModelBuilding
[ERROR]   SignatureTest.testLiteralSignature:123 » ModelBuilding snippet compilation err...
[ERROR]   SignatureTest.testMethodInvocationSignatureStaticFieldsVariables:142 » ModelBuilding
[ERROR]   SnippetTest.testCompileSnippetSeveralTimes:59 » ModelBuilding snippet compilat...
[INFO] 
[ERROR] Tests run: 1520, Failures: 192, Errors: 18, Skipped: 4
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 08:35 min
[INFO] Finished at: 2018-06-27T10:53:32+02:00
[INFO] Final Memory: 23M/1148M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.21.0:test (default-test) on project spoon-core: There are test failures.
[ERROR] 
[ERROR] Please refer to /root/workspace/INRIA/spoon/397241434/target/surefire-reports for the individual test results.
[ERROR] Please refer to dump files (if any exist) [date]-jvmRun[N].dump, [date].dumpstream and [date]-jvmRun[N].dumpstream.
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
