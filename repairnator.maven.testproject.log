[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building neo4j-graphql 3.3.0.1
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ neo4j-graphql ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.5.1:compile (default-compile) @ neo4j-graphql ---
[INFO] No sources to compile
[INFO] 
[INFO] --- kotlin-maven-plugin:1.1.51:compile (compile) @ neo4j-graphql ---
[INFO] Kotlin version 1.1.51 (JRE 1.8.0_121-8u121-b13-1~bpo8+1-b13)
[WARNING] Source root doesn't exist: /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/java
[INFO] Compiling Kotlin sources from [/root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin]
[INFO] Module name is neo4j-graphql
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/GraphQLExtensions.kt: (26, 64) Unchecked cast: Any? to Map<String, Any>?
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/GraphQLProcedure.kt: (48, 27) Calls to static methods in Java interfaces are deprecated in JVM target 1.6. Recompile with '-jvm-target 1.8'
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/GraphQLProcedure.kt: (63, 27) Calls to static methods in Java interfaces are deprecated in JVM target 1.6. Recompile with '-jvm-target 1.8'
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/GraphQLProcedure.kt: (66, 27) Calls to static methods in Java interfaces are deprecated in JVM target 1.6. Recompile with '-jvm-target 1.8'
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/GraphQLProcedure.kt: (85, 23) Calls to static methods in Java interfaces are deprecated in JVM target 1.6. Recompile with '-jvm-target 1.8'
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/GraphQLProcedure.kt: (106, 50) Unchecked cast: Any? to List<String>?
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/GraphQLProcedure.kt: (120, 20) Calls to static methods in Java interfaces are deprecated in JVM target 1.6. Recompile with '-jvm-target 1.8'
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/GraphQLProcedure.kt: (140, 39) This class shouldn't be used in Kotlin. Use kotlin.collections.List or kotlin.collections.MutableList instead.
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/GraphQLProcedure.kt: (141, 74) This class shouldn't be used in Kotlin. Use kotlin.collections.List or kotlin.collections.MutableList instead.
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/GraphQLProcedure.kt: (147, 38) Unchecked cast: ArrayList<Map<String, Any>!> to List<Map<String, Comparable<Any>>>
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/GraphQLProcedure.kt: (185, 70) Unnecessary non-null assertion (!!) on a non-null receiver of type VirtualNode
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/GraphQLProcedure.kt: (185, 87) Unnecessary non-null assertion (!!) on a non-null receiver of type VirtualNode
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/GraphQLProcedure.kt: (190, 23) Calls to static methods in Java interfaces are deprecated in JVM target 1.6. Recompile with '-jvm-target 1.8'
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/GraphQLResource.kt: (33, 26) Parameter 'headers' is never used
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/GraphQLSchemaBuilder.kt: (204, 36) Unchecked cast: Any! to Map<String, Any>
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/GraphQLSchemaBuilder.kt: (205, 32) Unnecessary safe call on a non-null receiver of type Map<String, Any>
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/GraphQLSchemaBuilder.kt: (205, 49) Unchecked cast: Any? to List<String>?
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/GraphQLSchemaBuilder.kt: (210, 21) Name shadowed: builder
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/GraphQLSchemaBuilder.kt: (570, 56) Parameter 'inputs' is never used
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/GraphQLSchemaBuilder.kt: (625, 32) Parameter 'md' is never used
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/GraphQLSchemaBuilder.kt: (628, 13) Variable 'fragments' is never used
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/GraphQLSchemaBuilder.kt: (648, 44) Parameter 'generator' is never used
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/Introspection.kt: (18, 53) Unchecked cast: Any? to Map<String, Any>
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/Introspection.kt: (19, 49) Unchecked cast: Any? to Map<String, Any>
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/Introspection.kt: (27, 37) Unchecked cast: Any? to Map<String, Map<String, Any>>
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/Introspection.kt: (27, 94) Unchecked cast: Any? to List<Map<String, Any>>
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/Introspection.kt: (31, 64) Unchecked cast: Any to List<Map<String, Any>>
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/Introspection.kt: (38, 44) Unchecked cast: Any to Map<String, Any>
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/MetaData.kt: (27, 36) Name shadowed: name
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/MetaData.kt: (31, 36) Name shadowed: name
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/MetaData.kt: (39, 35) Name shadowed: name
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/MetaData.kt: (43, 35) Name shadowed: name
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/MetaData.kt: (48, 45) Name shadowed: name
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/MetaData.kt: (48, 45) Parameter 'name' is never used, could be renamed to _
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/MetaData.kt: (49, 48) Name shadowed: name
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/MetaData.kt: (49, 48) Parameter 'name' is never used, could be renamed to _
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/MetaData.kt: (56, 46) Name shadowed: name
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/MetaData.kt: (112, 49) Name shadowed: name
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/MetaData.kt: (112, 49) Parameter 'name' is never used, could be renamed to _
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/MetaData.kt: (113, 52) Name shadowed: name
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/MetaData.kt: (113, 52) Parameter 'name' is never used, could be renamed to _
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/Operators.kt: (35, 65) Calls to static methods in Java interfaces are deprecated in JVM target 1.6. Recompile with '-jvm-target 1.8'
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/main/kotlin/org/neo4j/graphql/procedure/VirtualEntities.kt: (60, 75) Calls to static methods in Java interfaces are deprecated in JVM target 1.6. Recompile with '-jvm-target 1.8'
[INFO] 
[INFO] --- maven-compiler-plugin:3.5.1:compile (compile) @ neo4j-graphql ---
[INFO] No sources to compile
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ neo4j-graphql ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.5.1:testCompile (default-testCompile) @ neo4j-graphql ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- kotlin-maven-plugin:1.1.51:test-compile (test-compile) @ neo4j-graphql ---
[INFO] Kotlin version 1.1.51 (JRE 1.8.0_121-8u121-b13-1~bpo8+1-b13)
[INFO] Compiling Kotlin sources from [/root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java, /root/workspace/neo4j-contrib/neo4j-graphql/373155107/target/generated-test-sources/test-annotations]
[INFO] Module name is neo4j-graphql
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/DynamicTypesTest.kt: (51, 30) 'execute(String!, Any!): ExecutionResult!' is deprecated. Deprecated in Java
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/DynamicTypesTest.kt: (69, 30) 'execute(String!, Any!): ExecutionResult!' is deprecated. Deprecated in Java
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/DynamicTypesTest.kt: (89, 30) 'execute(String!, Any!): ExecutionResult!' is deprecated. Deprecated in Java
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/DynamicTypesTest.kt: (109, 30) 'execute(String!, Any!): ExecutionResult!' is deprecated. Deprecated in Java
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/DynamicTypesTest.kt: (129, 30) 'execute(String!, Any!): ExecutionResult!' is deprecated. Deprecated in Java
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/DynamicTypesTest.kt: (147, 30) 'execute(String!, Any!): ExecutionResult!' is deprecated. Deprecated in Java
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/EndToEndTest.kt: (3, 24) 'Assert' is deprecated. Deprecated in Java
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/EndToEndTest.kt: (4, 24) 'Assert' is deprecated. Deprecated in Java
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/EndToEndTest.kt: (170, 47) Unchecked cast: Any? to List<Map<String, Any>>
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/EndToEndTest.kt: (172, 29) Unnecessary safe call on a non-null receiver of type List<Map<String, Any>>
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/EndToEndTest.kt: (174, 30) Unnecessary non-null assertion (!!) on a non-null receiver of type List<Map<String, Any>>
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/EndToEndTest.kt: (178, 62) Unchecked cast: Any? to List<Map<*, *>>
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/EndToEndTest.kt: (183, 44) Unchecked cast: Any? to List<Map<*, *>>
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/EndToEndTest.kt: (188, 75) Unchecked cast: Any? to List<Map<*, *>>
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/EndToEndTest.kt: (205, 73) Unchecked cast: Any? to List<Map<String, Any>>?
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/EndToEndTest.kt: (318, 45) Unchecked cast: Any? to Map<String, Any>
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/FilterTest.kt: (70, 32) 'execute(String!, Any!, (Mutable)Map<String!, Any!>!): ExecutionResult!' is deprecated. Deprecated in Java
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/GraphQLSchemaBuilderTest.kt: (157, 17) Variable 'document' is never used
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/MutationTest.kt: (74, 32) 'execute(String!, Any!): ExecutionResult!' is deprecated. Deprecated in Java
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/MutationTest.kt: (81, 32) 'execute(String!, Any!): ExecutionResult!' is deprecated. Deprecated in Java
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/MutationTest.kt: (88, 32) 'execute(String!, Any!): ExecutionResult!' is deprecated. Deprecated in Java
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/MutationTest.kt: (95, 32) 'execute(String!, Any!): ExecutionResult!' is deprecated. Deprecated in Java
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/MutationTest.kt: (108, 32) 'execute(String!, Any!): ExecutionResult!' is deprecated. Deprecated in Java
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/NestedNonNullTest.kt: (57, 34) 'execute(String!, Any!): ExecutionResult!' is deprecated. Deprecated in Java
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/ScalarTest.kt: (47, 32) 'execute(String!, Any!): ExecutionResult!' is deprecated. Deprecated in Java
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/ScalarTest.kt: (54, 32) 'execute(String!, Any!): ExecutionResult!' is deprecated. Deprecated in Java
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/ScalarTest.kt: (63, 32) 'execute(String!, Any!): ExecutionResult!' is deprecated. Deprecated in Java
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/ScalarTest.kt: (72, 32) 'execute(String!, Any!): ExecutionResult!' is deprecated. Deprecated in Java
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/ScalarTest.kt: (74, 28) 'execute(String!, Any!): ExecutionResult!' is deprecated. Deprecated in Java
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/ScalarTest.kt: (81, 32) 'execute(String!, Any!): ExecutionResult!' is deprecated. Deprecated in Java
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/TypeNamingTest.kt: (44, 30) 'execute(String!, Any!): ExecutionResult!' is deprecated. Deprecated in Java
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/TypeNamingTest.kt: (53, 30) 'execute(String!, Any!): ExecutionResult!' is deprecated. Deprecated in Java
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/TypeNamingTest.kt: (90, 30) 'execute(String!, Any!): ExecutionResult!' is deprecated. Deprecated in Java
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/TypeNamingTest.kt: (110, 30) 'execute(String!, Any!): ExecutionResult!' is deprecated. Deprecated in Java
[WARNING] /root/workspace/neo4j-contrib/neo4j-graphql/373155107/src/test/java/org/neo4j/graphql/TypeNamingTest.kt: (131, 30) 'execute(String!, Any!): ExecutionResult!' is deprecated. Deprecated in Java
[INFO] 
[INFO] --- maven-compiler-plugin:3.5.1:testCompile (testCompile) @ neo4j-graphql ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ neo4j-graphql ---
[INFO] Surefire report directory: /root/workspace/neo4j-contrib/neo4j-graphql/373155107/target/surefire-reports
Downloading: http://dl.bintray.com/kotlin/kotlin-eap/org/apache/maven/surefire/surefire-junit4/2.12.4/surefire-junit4-2.12.4.pom

Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.12.4/surefire-junit4-2.12.4.pom
3/3 KB   
3/3 KB   
         
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.12.4/surefire-junit4-2.12.4.pom (3 KB at 11.7 KB/sec)
Downloading: http://dl.bintray.com/kotlin/kotlin-eap/org/apache/maven/surefire/surefire-providers/2.12.4/surefire-providers-2.12.4.pom
         
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.12.4/surefire-providers-2.12.4.pom
3/3 KB   
3/3 KB   
         
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.12.4/surefire-providers-2.12.4.pom (3 KB at 104.2 KB/sec)
Downloading: http://dl.bintray.com/kotlin/kotlin-eap/org/apache/maven/surefire/surefire-junit4/2.12.4/surefire-junit4-2.12.4.jar
         
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.12.4/surefire-junit4-2.12.4.jar
3/37 KB   
5/37 KB   
8/37 KB   
11/37 KB   
13/37 KB   
16/37 KB   
19/37 KB   
21/37 KB   
24/37 KB   
27/37 KB   
29/37 KB   
32/37 KB   
35/37 KB   
37/37 KB   
           
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.12.4/surefire-junit4-2.12.4.jar (37 KB at 1001.6 KB/sec)

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.neo4j.graphql.IDLResourceTest
result = {"Person":{"type":"Person","description":null,"properties":{"name":{"fieldName":"name","type":{"name":"String","array":false,"nonNull":0,"enum":false,"inputType":false,"scalar":false,"basic":true},"id":false,"indexed":false,"cypher":null,"defaultValue":null,"unique":false,"enum":false,"parameters":null,"description":null,"computed":false,"graphQLId":false,"idProperty":false},"born":{"fieldName":"born","type":{"name":"Int","array":false,"nonNull":0,"enum":false,"inputType":false,"scalar":false,"basic":true},"id":false,"indexed":false,"cypher":null,"defaultValue":null,"unique":false,"enum":false,"parameters":null,"description":null,"computed":false,"graphQLId":false,"idProperty":false}},"relationships":{},"labels":[]}}
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.994 sec
Running org.neo4j.graphql.GraphQLResourceTest
row = {row={name=Meg Ryan, born=1961}}
result = {data={Person=[{name=Meg Ryan, born=1961}]}, extensions={type=READ_ONLY}}
result = {data={Person=[{name=Kevin Bacon, born=1958}, {name=Meg Ryan, born=1961}]}, extensions={type=READ_ONLY}}
result = {data={Person=[{name=Meg Ryan, born=1961}]}, extensions={type=READ_ONLY}}
row = {_labels=[Person], row={name=Meg Ryan, born=1961}}
row = {result={Person=[{name=Meg Ryan, born=1961}]}}
row = {row={name=Meg Ryan, born=1961}}
Tests run: 15, Failures: 0, Errors: 0, Skipped: 2, Time elapsed: 15.418 sec
Running org.neo4j.graphql.MetaDataTest
query = query UserWithLocationQuery { User(id:3) {name,livesIn(name:"Bärlin") {name} } }
data = {User=[{name=John 3, livesIn=null}]}
errors = []
extensions = {type=READ_ONLY}
query = query LocationQuery { Location {name} }
data = {Location=[{name=Berlin}]}
errors = []
extensions = {type=READ_ONLY}
query = query { Location { coord } }
data = {Location=[{coord=[13.4, 52.5]}]}
errors = []
extensions = {type=READ_ONLY}
query = query UserWithLocationQuery { User {name,livesIn {name} } }
data = {User=[{name=John 1, livesIn={name=Berlin}}, {name=John 2, livesIn={name=Berlin}}, {name=John 3, livesIn={name=Berlin}}, {name=John 4, livesIn={name=Berlin}}, {name=John 5, livesIn={name=Berlin}}]}
errors = []
extensions = {type=READ_ONLY}
query = query($id:Long) { User(_id:$id) {_id, id} }
data = {User=[{_id=2, id=1}]}
errors = []
extensions = {type=READ_ONLY}
query = { User(id:1) {_id,id} }
data = {User=[{_id=2, id=1}]}
errors = []
extensions = {type=READ_ONLY}
query = query LocationQuery { Location(latitude:52.5) { name} }
data = {Location=[{name=Berlin}]}
errors = []
extensions = {type=READ_ONLY}
query = query UserQuery($name: String!) { User(name:$name) {id,name,age} }
data = {User=[{id=2, name=John 2, age=2}]}
errors = []
extensions = {type=READ_ONLY}
query = query LocationQuery { Location(name:"Berlin") { name} }
data = {Location=[{name=Berlin}]}
errors = []
extensions = {type=READ_ONLY}
query = { Location {name} }
data = {Location=[{name=Berlin}]}
errors = []
extensions = {type=READ_ONLY}
query = { User(first:2,offset:1) {id,name,age} }
data = {User=[{id=2, name=John 2, age=2}, {id=3, name=John 3, age=3}]}
errors = []
extensions = {type=READ_ONLY}
query = query ($skip:Int!,$limit:Int!) { User(first:$limit,offset:$skip) {id,name,age} }
data = {User=[{id=2, name=John 2, age=2}, {id=3, name=John 3, age=3}]}
errors = []
extensions = {type=READ_ONLY}
query = query LocationQuery { Location(name:"Bärlin") { name} }
data = {Location=[]}
errors = []
extensions = {type=READ_ONLY}
query = { User(_id:2) {_id, id} }
data = {User=[{_id=2, id=1}]}
errors = []
extensions = {type=READ_ONLY}
query = query LocationWithUserQuery { Location {name, livesIn(orderBy:[age_desc]) {name,age} } }
data = {Location=[{name=Berlin, livesIn=[{name=John 5, age=5}, {name=John 4, age=4}, {name=John 3, age=3}, {name=John 2, age=2}, {name=John 1, age=1}]}]}
errors = []
extensions = {type=READ_ONLY}
query = query LocationWithUserQuery { Location {name, livesIn {name,age} } }
data = {Location=[{name=Berlin, livesIn=[{name=John 5, age=5}, {name=John 4, age=4}, {name=John 3, age=3}, {name=John 2, age=2}, {name=John 1, age=1}]}]}
errors = []
extensions = {type=READ_ONLY}
query = { Location { name, livesIn(orderBy:name_desc) { name, age } } }
data = {Location=[{name=Berlin, livesIn=[{name=John 5, age=5}, {name=John 4, age=4}, {name=John 3, age=3}, {name=John 2, age=2}, {name=John 1, age=1}]}]}
errors = []
extensions = {type=READ_ONLY}
result = {Location=[{name=Berlin, livesIn=[{name=John 5, age=5}, {name=John 4, age=4}, {name=John 3, age=3}, {name=John 2, age=2}, {name=John 1, age=1}]}]}
query = query UserQuery($name: String!, $loc: String) { User(name:$name) {id, livesIn(name:$loc) { name } } }
data = {User=[{id=2, livesIn={name=Berlin}}]}
errors = []
extensions = {type=READ_ONLY}
query = query LocationQuery { Location { loc : name} }
data = {Location=[{loc=Berlin}]}
errors = []
extensions = {type=READ_ONLY}
query = query LocationWithPersonQuery { Location {name, livesIn {name,age} } }
data = {Location=[{name=Berlin, livesIn=[{name=John 5, age=5}, {name=John 4, age=4}, {name=John 3, age=3}, {name=John 2, age=2}, {name=John 1, age=1}]}]}
errors = []
extensions = {type=READ_ONLY}
query = query UserQuery { User @explain {name} }
data = {User=[]}
errors = []
extensions = {columns=[_labels, name], query=MATCH (`User`:`User`)
RETURN graphql.labels(`User`) AS `_labels`,
`User`.`name` AS `name`, warnings=[], type=READ_ONLY, plan=Compiler CYPHER 3.3

Planner COST

Runtime INTERPRETED

+------------------+----------------+-----------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Operator         | Estimated Rows | Variables             | Other                                                                                                                                                               |
+------------------+----------------+-----------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| +ProduceResults  |              5 | User, _labels, name   |                                                                                                                                                                     |
| |                +----------------+-----------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| +Projection      |              5 | _labels, name -- User | {_labels : ResolvedFunctionInvocation(graphql.labels,Some(graphql.labels(entity :: ANY?) :: LIST? OF ANY?),Vector(CoerceTo(Variable(User),Any))), name : User.name} |
| |                +----------------+-----------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| +NodeByLabelScan |              5 | User                  | :User                                                                                                                                                               |
+------------------+----------------+-----------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Total database accesses: ?
}
query = query UserWithLocationQuery { User(id:3) {name,livesIn {name} } }
data = {User=[{name=John 3, livesIn={name=Berlin}}]}
errors = []
extensions = {type=READ_ONLY}
query = { Location(first:1) { User:livesIn(_id:2) {_id, id} }}
data = {Location=[{User=[{_id=2, id=1}]}]}
errors = []
extensions = {type=READ_ONLY}
query = query LocationQuery { Loc: Location { name} }
data = {Loc=[{name=Berlin}]}
errors = []
extensions = {type=READ_ONLY}
query = query UserWithLocationQuery { User(id:3) {name,livesIn {name, livesIn {name} } } }
data = {User=[{name=John 3, livesIn={name=Berlin, livesIn=[{name=John 5}, {name=John 4}, {name=John 3}, {name=John 2}, {name=John 1}]}}]}
errors = []
extensions = {type=READ_ONLY}
query = { Location { name, livesIn(orderBy:[name_desc]) { name, age } } }
data = {Location=[{name=Berlin, livesIn=[{name=John 5, age=5}, {name=John 4, age=4}, {name=John 3, age=3}, {name=John 2, age=2}, {name=John 1, age=1}]}]}
errors = []
extensions = {type=READ_ONLY}
result = {Location=[{name=Berlin, livesIn=[{name=John 5, age=5}, {name=John 4, age=4}, {name=John 3, age=3}, {name=John 2, age=2}, {name=John 1, age=1}]}]}
query = query UserQuery { User(id:3) {id,name,age} }
data = {User=[{id=3, name=John 3, age=3}]}
errors = []
extensions = {type=READ_ONLY}
query = query UserWithLocationWithUserQuery { User(id:3) {name,livesIn { name, livesIn { name } } } }
data = {User=[{name=John 3, livesIn={name=Berlin, livesIn=[{name=John 5}, {name=John 4}, {name=John 3}, {name=John 2}, {name=John 1}]}}]}
errors = []
extensions = {type=READ_ONLY}
query = query UserQuery { User(ids:[3,4]) {id,name,age} }
data = {User=[{id=3, name=John 3, age=3}, {id=4, name=John 4, age=4}]}
errors = []
extensions = {type=READ_ONLY}
query = query UserQuery { User @profile {name} }
data = {User=[{name=John 1}, {name=John 2}, {name=John 3}, {name=John 4}, {name=John 5}]}
errors = []
extensions = {columns=[_labels, name], query=MATCH (`User`:`User`)
RETURN graphql.labels(`User`) AS `_labels`,
`User`.`name` AS `name`, warnings=[], type=READ_ONLY, plan=Compiler CYPHER 3.3

Planner COST

Runtime INTERPRETED

+------------------+----------------+------+---------+-----------------+-------------------+----------------------+-----------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Operator         | Estimated Rows | Rows | DB Hits | Page Cache Hits | Page Cache Misses | Page Cache Hit Ratio | Variables             | Other                                                                                                                                                               |
+------------------+----------------+------+---------+-----------------+-------------------+----------------------+-----------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| +ProduceResults  |              5 |    5 |       0 |               0 |                 0 |               0.0000 | User, _labels, name   |                                                                                                                                                                     |
| |                +----------------+------+---------+-----------------+-------------------+----------------------+-----------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| +Projection      |              5 |    5 |      10 |               0 |                 0 |               0.0000 | _labels, name -- User | {_labels : ResolvedFunctionInvocation(graphql.labels,Some(graphql.labels(entity :: ANY?) :: LIST? OF ANY?),Vector(CoerceTo(Variable(User),Any))), name : User.name} |
| |                +----------------+------+---------+-----------------+-------------------+----------------------+-----------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| +NodeByLabelScan |              5 |    5 |       6 |               0 |                 0 |               0.0000 | User                  | :User                                                                                                                                                               |
+------------------+----------------+------+---------+-----------------+-------------------+----------------------+-----------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Total database accesses: 16
}
query = query UserSortQuery($ordering: [_UserOrdering]) { User(orderBy:$ordering) {name,age}}
data = {User=[{name=John 5, age=5}, {name=John 4, age=4}, {name=John 3, age=3}, {name=John 2, age=2}, {name=John 1, age=1}]}
errors = []
extensions = {type=READ_ONLY}
query = query UserSortQuery { User(orderBy:[name_desc,age_desc]) {name,age}}
data = {User=[{name=John 5, age=5}, {name=John 4, age=4}, {name=John 3, age=3}, {name=John 2, age=2}, {name=John 1, age=1}]}
errors = []
extensions = {type=READ_ONLY}
query = query { Country { _id } }
data = {Country=[{_id=0}]}
errors = []
extensions = {type=READ_ONLY}
query = { User(first:1) {id,name,age} }
data = {User=[{id=1, name=John 1, age=1}]}
errors = []
extensions = {type=READ_ONLY}
query = query UserSortQuery { User(orderBy:[name_asc,age_asc]) {name,age}}
data = {User=[{name=John 1, age=1}, {name=John 2, age=2}, {name=John 3, age=3}, {name=John 4, age=4}, {name=John 5, age=5}]}
errors = []
extensions = {type=READ_ONLY}
query = query UserQuery { User(name:"Joe") {id,name,age,_age { age }}}
data = {User=[{id=-1, name=Joe, age=null, _age={age=42}}]}
errors = []
extensions = {type=READ_ONLY}
query = { Location { name, livesIn(first:2,offset:1) { name } } }
data = {Location=[{name=Berlin, livesIn=[{name=John 4}, {name=John 3}]}]}
errors = []
extensions = {type=READ_ONLY}
result = {Location=[{name=Berlin, livesIn=[{name=John 4}, {name=John 3}]}]}
query = { User(offset:2) {id,name,age} }
data = {User=[{id=3, name=John 3, age=3}, {id=4, name=John 4, age=4}, {id=5, name=John 5, age=5}]}
errors = []
extensions = {type=READ_ONLY}
query = query UserWithLocationQuery { User(id:3) {name,livesIn(name:"Berlin") {name} } }
data = {User=[{name=John 3, livesIn={name=Berlin}}]}
errors = []
extensions = {type=READ_ONLY}
query = query LocationQuery { Location { ...name } }
fragment name on Location { name } 
data = {Location=[{name=Berlin}]}
errors = []
extensions = {type=READ_ONLY}
query = query UserQuery { User {id,name,age} User {age,name}}
data = {User=[{id=1, name=John 1, age=1}, {id=2, name=John 2, age=2}, {id=3, name=John 3, age=3}, {id=4, name=John 4, age=4}, {id=5, name=John 5, age=5}, {id=null, name=John 1, age=1}, {id=null, name=John 2, age=2}, {id=null, name=John 3, age=3}, {id=null, name=John 4, age=4}, {id=null, name=John 5, age=5}]}
errors = []
extensions = {type=READ_ONLY}
Tests run: 45, Failures: 0, Errors: 0, Skipped: 3, Time elapsed: 8.687 sec
Running org.neo4j.graphql.GraphQLTest
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 sec
Running org.neo4j.graphql.Cypher31GeneratorTest
TypeName: Person class graphql.language.TypeName in Actor
TypeName: Person class graphql.language.TypeName in Actor
class graphql.language.SchemaDefinition
TypeName: Person class graphql.language.TypeName in Actor
Tests run: 16, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.014 sec
Running org.neo4j.graphql.DynamicTypesTest
class graphql.language.SchemaDefinition
class graphql.language.SchemaDefinition
class graphql.language.SchemaDefinition
class graphql.language.SchemaDefinition
class graphql.language.SchemaDefinition
class graphql.language.SchemaDefinition
ExecutionResultImpl{data={person={name=Alice, _id=2}}, errors=[], dataPresent=true, extensions=null}
class graphql.language.SchemaDefinition
class graphql.language.SchemaDefinition
class graphql.language.SchemaDefinition
class graphql.language.SchemaDefinition
ExecutionResultImpl{data={person={name=Jane, knows=[{name=John}]}}, errors=[], dataPresent=true, extensions=null}
class graphql.language.SchemaDefinition
class graphql.language.SchemaDefinition
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.993 sec
Running org.neo4j.graphql.EndToEndTest
TypeName: Person class graphql.language.TypeName in Actor
TypeName: Person class graphql.language.TypeName in Director
class graphql.language.SchemaDefinition
class graphql.language.EnumTypeDefinition
class graphql.language.InputObjectTypeDefinition
TypeName: Person class graphql.language.TypeName in Actor
TypeName: Person class graphql.language.TypeName in Director
class graphql.language.SchemaDefinition
class graphql.language.EnumTypeDefinition
class graphql.language.InputObjectTypeDefinition
mutationResponse = {"data":{"kb":"Nodes created: 1\nProperties set: 2\nLabels added: 2\n","mr":"Nodes created: 1\nProperties set: 2\nLabels added: 2\n","a13":"Nodes created: 1\nProperties set: 4\nLabels added: 1\n","matrix":"Nodes created: 1\nProperties set: 4\nLabels added: 1\n","kb_matrix":"Relationships created: 2\n","mr_a13":"Relationships created: 1\n","th":"Nodes created: 1\nProperties set: 2\nLabels added: 1\n","fg":{"title":"Forrest Gump"}}}
TypeName: Person class graphql.language.TypeName in Actor
TypeName: Person class graphql.language.TypeName in Director
class graphql.language.SchemaDefinition
class graphql.language.EnumTypeDefinition
class graphql.language.InputObjectTypeDefinition
{
  "data" : {
    "Person" : [ {
      "born" : 1958,
      "totalMoviesCount" : 2,
      "recommendedColleagues" : [ {
        "name" : "Meg Ryan"
      } ],
      "namedColleagues" : [ {
        "name" : "Meg Ryan",
        "totalMoviesCount" : 1
      } ],
      "movies" : [ {
        "title" : "The Matrix",
        "released" : 2001,
        "tagline" : "There is no spoon",
        "actors" : [ {
          "name" : "Kevin Bacon",
          "born" : 1958
        } ]
      }, {
        "title" : "Apollo 13",
        "released" : 1995,
        "tagline" : "...",
        "actors" : [ {
          "name" : "Meg Ryan",
          "born" : 1961
        }, {
          "name" : "Kevin Bacon",
          "born" : 1958
        } ]
      } ],
      "score" : 7
    } ]
  },
  "extensions" : {
    "type" : "READ_ONLY"
  }
}
{
  "data" : {
    "personByName" : {
      "born" : 1958
    }
  }
}
{data={personByName={born=1958}}}
{
  "data" : {
    "movieByGenre" : [ {
      "title" : "Apollo 13"
    } ]
  }
}
{data={movieByGenre=[{title=Apollo 13}]}}
{
  "data" : {
    "movieGenre" : "SciFi"
  }
}
{data={movieGenre=SciFi}}
updateMutationResponse = HTTP 200
Transfer-Encoding: chunked
Server: Jetty(9.2.22.v20170606)
Access-Control-Allow-Origin: *
Date: Mon, 30 Apr 2018 18:18:11 GMT
Content-Type: application/json

{"data":{"kb":"Properties set: 1\n","mr":"Nodes deleted: 1\nRelationships deleted: 1\n","kb_update":"Relationships deleted: 1\n"}}

class graphql.language.SchemaDefinition
class graphql.language.SchemaDefinition
mutationResponse = {"data":{"u":"Nodes created: 1\nProperties set: 5\nLabels added: 1\n","m":"321"}}
class graphql.language.SchemaDefinition
{
  "data" : {
    "user" : {
      "firstName" : "Jon",
      "lastName" : "Doe",
      "organization" : "JD",
      "mapsCreated" : [ {
        "id" : "321"
      } ]
    }
  }
}
{data={user={firstName=Jon, lastName=Doe, organization=JD, mapsCreated=[{id=321}]}}}
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.819 sec
Running org.neo4j.graphql.FilterTest
class graphql.language.EnumTypeDefinition
class graphql.language.EnumTypeDefinition
class graphql.language.EnumTypeDefinition
class graphql.language.EnumTypeDefinition
class graphql.language.EnumTypeDefinition
class graphql.language.EnumTypeDefinition
class graphql.language.EnumTypeDefinition
class graphql.language.EnumTypeDefinition
class graphql.language.EnumTypeDefinition
class graphql.language.EnumTypeDefinition
class graphql.language.EnumTypeDefinition
class graphql.language.EnumTypeDefinition
class graphql.language.EnumTypeDefinition
class graphql.language.EnumTypeDefinition
class graphql.language.EnumTypeDefinition
class graphql.language.EnumTypeDefinition
class graphql.language.EnumTypeDefinition
class graphql.language.EnumTypeDefinition
class graphql.language.EnumTypeDefinition
class graphql.language.EnumTypeDefinition
class graphql.language.EnumTypeDefinition
class graphql.language.EnumTypeDefinition
class graphql.language.EnumTypeDefinition
class graphql.language.EnumTypeDefinition
class graphql.language.EnumTypeDefinition
class graphql.language.EnumTypeDefinition
class graphql.language.EnumTypeDefinition
class graphql.language.EnumTypeDefinition
Tests run: 14, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.273 sec
Running org.neo4j.graphql.GraphQLSchemaBuilderTest
class graphql.language.EnumTypeDefinition
class graphql.language.InputObjectTypeDefinition
class graphql.language.SchemaDefinition
mutationField = GraphQLFieldDefinition{name='createActor', type=GraphQLScalarType{name='String', description='Built-in String', coercing=graphql.Scalars$3@1dd84464}, arguments=[graphql.schema.GraphQLArgument@1bc75a96], dataFetcherFactory=graphql.schema.DataFetcherFactories$$Lambda$306/945637606@32507931, description='Creates a Actor entity', deprecationReason='null', definition=null}
org.neo4j.graphql.GraphQLSchemaBuilder$mutationField$createMutation$2@10ebfb4f
Tests run: 7, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 0.01 sec <<< FAILURE!
emptyNode(org.neo4j.graphql.GraphQLSchemaBuilderTest)  Time elapsed: 0.004 sec  <<< ERROR!
graphql.AssertException: type Gender not found in schema
	at graphql.Assert.assertTrue(Assert.java:37)
	at graphql.schema.SchemaUtil.resolveTypeReference(SchemaUtil.java:221)
	at graphql.schema.GraphQLArgument.replaceTypeReferences(GraphQLArgument.java:48)
	at graphql.schema.SchemaUtil.resolveTypeReferencesForFieldsContainer(SchemaUtil.java:207)
	at graphql.schema.SchemaUtil.replaceTypeReferences(SchemaUtil.java:189)
	at graphql.schema.GraphQLSchema$Builder.build(GraphQLSchema.java:218)
	at graphql.schema.GraphQLSchema$Builder.build(GraphQLSchema.java:211)
	at org.neo4j.graphql.GraphQLSchemaBuilder.buildSchema(GraphQLSchemaBuilder.kt:424)
	at org.neo4j.graphql.GraphQLSchemaBuilderTest.emptyNode(GraphQLSchemaBuilderTest.kt:30)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)

mandatoryRelationship(org.neo4j.graphql.GraphQLSchemaBuilderTest)  Time elapsed: 0.001 sec  <<< ERROR!
graphql.AssertException: type Gender not found in schema
	at graphql.Assert.assertTrue(Assert.java:37)
	at graphql.schema.SchemaUtil.resolveTypeReference(SchemaUtil.java:221)
	at graphql.schema.GraphQLArgument.replaceTypeReferences(GraphQLArgument.java:48)
	at graphql.schema.SchemaUtil.resolveTypeReferencesForFieldsContainer(SchemaUtil.java:207)
	at graphql.schema.SchemaUtil.replaceTypeReferences(SchemaUtil.java:189)
	at graphql.schema.GraphQLSchema$Builder.build(GraphQLSchema.java:218)
	at graphql.schema.GraphQLSchema$Builder.build(GraphQLSchema.java:211)
	at org.neo4j.graphql.GraphQLSchemaBuilder.buildSchema(GraphQLSchemaBuilder.kt:424)
	at org.neo4j.graphql.GraphQLSchemaBuilderTest.mandatoryRelationship(GraphQLSchemaBuilderTest.kt:159)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)

Running org.neo4j.graphql.GraphSchemaTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.683 sec
Running org.neo4j.graphql.IDLParserTest
{Person=MetaData{type='Person', properties={name=PropertyInfo(fieldName=name, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), born=PropertyInfo(fieldName=born, type=Int, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={movies=RelationshipInfo(fieldName=movies, type=ACTED_IN, label=Movie, out=true, multi=true, cypher=null, parameters=null, description=null, nonNull=0)}, isInterface=false}, Movie=MetaData{type='Movie', properties={title=PropertyInfo(fieldName=title, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), released=PropertyInfo(fieldName=released, type=Int, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), tagline=PropertyInfo(fieldName=tagline, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), score=PropertyInfo(fieldName=score, type=Int, id=false, indexed=false, cypher=CypherInfo(cypher=RETURN {value}, description=null), defaultValue=null, unique=false, enum=false, parameters={value=ParameterInfo(name=value, type=Int!, defaultValue=1, description=null)}, description=null)}, labels=[], relationships={actors=RelationshipInfo(fieldName=actors, type=ACTED_IN, label=Person, out=false, multi=true, cypher=null, parameters=null, description=null, nonNull=0)}, isInterface=false}}
[Person, Movie]
[title, released, tagline, score]
[RelationshipInfo(fieldName=actors, type=ACTED_IN, label=Person, out=false, multi=true, cypher=null, parameters=null, description=null, nonNull=0)]
[EnumTypeDefinition{name='Test', enumValueDefinitions=[EnumValueDefinition{name='A', directives=[]}, EnumValueDefinition{name='B', directives=[]}, EnumValueDefinition{name='C', directives=[]}], directives=[]}]
[SchemaDefinition{directives=[], operationTypeDefinitions=[OperationTypeDefinition{name='mutation', type=TypeName{name='MutationType'}}]}, ObjectTypeDefinition{name='MutationType', implements=[], directives=[], fieldDefinitions=[FieldDefinition{name='test', type=TypeName{name='String'}, inputValueDefinitions=[InputValueDefinition{name='name', type=TypeName{name='String'}, defaultValue=null, directives=[]}], directives=[Directive{name='cypher', arguments=[Argument{name='statement', value=StringValue{value='CREATE (t:Test {name:{name}}) RETURN id(t)'}}]}]}, FieldDefinition{name='newPerson', type=TypeName{name='String'}, inputValueDefinitions=[InputValueDefinition{name='name', type=NonNullType{type=TypeName{name='ID'}}, defaultValue=null, directives=[]}, InputValueDefinition{name='born', type=TypeName{name='Int'}, defaultValue=null, directives=[]}], directives=[Directive{name='cypher', arguments=[Argument{name='statement', value=StringValue{value='CREATE (:Person {name:{name},born:{born}})'}}]}]}, FieldDefinition{name='newMovie', type=TypeName{name='Movie'}, inputValueDefinitions=[InputValueDefinition{name='title', type=NonNullType{type=TypeName{name='ID'}}, defaultValue=null, directives=[]}, InputValueDefinition{name='released', type=TypeName{name='Int'}, defaultValue=null, directives=[]}, InputValueDefinition{name='tagline', type=TypeName{name='String'}, defaultValue=null, directives=[]}], directives=[Directive{name='cypher', arguments=[Argument{name='statement', value=StringValue{value='MERGE (m:Movie {title:{title}}) ON CREATE SET m += {released:{released}, tagline:{tagline}} RETURN m'}}]}]}]}]
[SchemaDefinition{directives=[], operationTypeDefinitions=[OperationTypeDefinition{name='query', type=TypeName{name='QueryType'}}]}, ObjectTypeDefinition{name='QueryType', implements=[], directives=[], fieldDefinitions=[FieldDefinition{name='personByName', type=TypeName{name='Person'}, inputValueDefinitions=[InputValueDefinition{name='name', type=NonNullType{type=TypeName{name='ID'}}, defaultValue=null, directives=[]}], directives=[Directive{name='cypher', arguments=[Argument{name='statement', value=StringValue{value='MATCH (p:Person {name:{name}}) RETURN p'}}]}]}]}]
[InputObjectTypeDefinition{name='Test', directives=[], inputValueDefinitions=[InputValueDefinition{name='name', type=TypeName{name='String'}, defaultValue=StringValue{value='Foo'}, directives=[]}, InputValueDefinition{name='age', type=TypeName{name='Int'}, defaultValue=IntValue{value=42}, directives=[]}]}]
TypeName: Person class graphql.language.TypeName in Actor
TypeName: Person class graphql.language.TypeName in Director
{Person=MetaData{type='Person', properties={name=PropertyInfo(fieldName=name, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), born=PropertyInfo(fieldName=born, type=Int, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={movies=RelationshipInfo(fieldName=movies, type=movies, label=Movie, out=true, multi=true, cypher=null, parameters=null, description=null, nonNull=0)}, isInterface=true}, Actor=MetaData{type='Actor', properties={name=PropertyInfo(fieldName=name, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), born=PropertyInfo(fieldName=born, type=Int, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[Person], relationships={movies=RelationshipInfo(fieldName=movies, type=ACTED_IN, label=Movie, out=true, multi=true, cypher=null, parameters=null, description=null, nonNull=0)}, isInterface=false}, Director=MetaData{type='Director', properties={name=PropertyInfo(fieldName=name, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), born=PropertyInfo(fieldName=born, type=Int, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[Person], relationships={movies=RelationshipInfo(fieldName=movies, type=DIRECTED, label=Movie, out=true, multi=true, cypher=null, parameters=null, description=null, nonNull=0)}, isInterface=false}, Movie=MetaData{type='Movie', properties={title=PropertyInfo(fieldName=title, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=true, enum=false, parameters=null, description=null), released=PropertyInfo(fieldName=released, type=Int, id=false, indexed=false, cypher=null, defaultValue=1900, unique=false, enum=false, parameters=null, description=null), tagline=PropertyInfo(fieldName=tagline, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), score=PropertyInfo(fieldName=score, type=Int, id=false, indexed=false, cypher=CypherInfo(cypher=RETURN {value}, description=null), defaultValue=null, unique=false, enum=false, parameters={value=ParameterInfo(name=value, type=Int!, defaultValue=1, description=null)}, description=null)}, labels=[], relationships={actors=RelationshipInfo(fieldName=actors, type=ACTED_IN, label=Actor, out=false, multi=true, cypher=null, parameters=null, description=null, nonNull=0), directors=RelationshipInfo(fieldName=directors, type=DIRECTED, label=Director, out=false, multi=true, cypher=null, parameters=null, description=null, nonNull=0)}, isInterface=false}}
[Person, Actor, Director, Movie]
InterfaceTypeDefinition{name='InterfaceName', fieldDefinitions=[FieldDefinition{name='fieldName', type=ListType{type=TypeName{name='Elm'}}, inputValueDefinitions=[InputValueDefinition{name='arg1', type=TypeName{name='SomeType'}, defaultValue=ObjectValue{objectFields=[ObjectField{name='one', value=IntValue{value=1}}]}, directives=[Directive{name='argDirective', arguments=[Argument{name='a1', value=VariableReference{name='v1'}}]}]}], directives=[Directive{name='fieldDirective', arguments=[Argument{name='cool', value=BooleanValue{value=true}}]}]}], directives=[Directive{name='interfaceDirective', arguments=[Argument{name='argName1', value=VariableReference{name='varName'}}, Argument{name='argName2', value=BooleanValue{value=true}}]}]}
InterfaceTypeDefinition{name='InterfaceName', fieldDefinitions=[FieldDefinition{name='fieldName', type=ListType{type=TypeName{name='Elm'}}, inputValueDefinitions=[InputValueDefinition{name='arg1', type=TypeName{name='SomeType'}, defaultValue=ObjectValue{objectFields=[ObjectField{name='one', value=IntValue{value=1}}]}, directives=[Directive{name='argDirective', arguments=[Argument{name='a1', value=VariableReference{name='v1'}}]}]}], directives=[Directive{name='fieldDirective', arguments=[Argument{name='cool', value=BooleanValue{value=true}}]}]}], directives=[Directive{name='interfaceDirective', arguments=[Argument{name='argName1', value=VariableReference{name='varName'}}, Argument{name='argName2', value=BooleanValue{value=true}}]}]}
class graphql.language.EnumTypeDefinition
TypeName: Character class graphql.language.TypeName in Human
TypeName: Character class graphql.language.TypeName in Droid
{Character=MetaData{type='Character', properties={id=PropertyInfo(fieldName=id, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), name=PropertyInfo(fieldName=name, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), appearsIn=PropertyInfo(fieldName=appearsIn, type=[Episode], id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=true, parameters=null, description=null)}, labels=[], relationships={friends=RelationshipInfo(fieldName=friends, type=friends, label=Character, out=true, multi=true, cypher=null, parameters=null, description=null, nonNull=0)}, isInterface=true}, Human=MetaData{type='Human', properties={id=PropertyInfo(fieldName=id, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), name=PropertyInfo(fieldName=name, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), appearsIn=PropertyInfo(fieldName=appearsIn, type=[Episode], id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=true, parameters=null, description=null), homePlanet=PropertyInfo(fieldName=homePlanet, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[Character], relationships={friends=RelationshipInfo(fieldName=friends, type=friends, label=Character, out=true, multi=true, cypher=null, parameters=null, description=null, nonNull=0)}, isInterface=false}, Droid=MetaData{type='Droid', properties={id=PropertyInfo(fieldName=id, type=ID!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), name=PropertyInfo(fieldName=name, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), appearsIn=PropertyInfo(fieldName=appearsIn, type=[Episode], id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=true, parameters=null, description=null), primaryFunction=PropertyInfo(fieldName=primaryFunction, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), test1=PropertyInfo(fieldName=test1, type=Boolean, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), test2=PropertyInfo(fieldName=test2, type=Number, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), test3=PropertyInfo(fieldName=test3, type=[Number], id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), test4=PropertyInfo(fieldName=test4, type=Int, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[Character], relationships={friends=RelationshipInfo(fieldName=friends, type=friends, label=Character, out=true, multi=true, cypher=null, parameters=null, description=null, nonNull=0)}, isInterface=false}}
{Person=MetaData{type='Person', properties={name=PropertyInfo(fieldName=name, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={}, isInterface=false}}
Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.013 sec
Running org.neo4j.graphql.IntrospectionTest
{data={twitter={user={name=Clay Allsopp}}}}
[MetaData{type='GraphQLHubAPI', properties={graphQLHub=PropertyInfo(fieldName=graphQLHub, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=About GraphQLHub)}, labels=[], relationships={hn=RelationshipInfo(fieldName=hn, type=HackerNewsAPI, label=HackerNewsAPI, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), hn2=RelationshipInfo(fieldName=hn2, type=HackerNewsAPIV2, label=HackerNewsAPIV2, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), reddit=RelationshipInfo(fieldName=reddit, type=RedditAPI, label=RedditAPI, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), keyValue=RelationshipInfo(fieldName=keyValue, type=KeyValueAPI, label=KeyValueAPI, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), github=RelationshipInfo(fieldName=github, type=GithubAPI, label=GithubAPI, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), twitter=RelationshipInfo(fieldName=twitter, type=TwitterAPI, label=TwitterAPI, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), giphy=RelationshipInfo(fieldName=giphy, type=GiphyAPI, label=GiphyAPI, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0)}, isInterface=false}, MetaData{type='HackerNewsAPI', properties={}, labels=[], relationships={item=RelationshipInfo(fieldName=item, type=HackerNewsItem, label=HackerNewsItem, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), user=RelationshipInfo(fieldName=user, type=HackerNewsUser, label=HackerNewsUser, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), topStories=RelationshipInfo(fieldName=topStories, type=HackerNewsItem, label=HackerNewsItem, out=true, multi=true, cypher=null, parameters=null, description=Up to 500 of the top stories, nonNull=0), newStories=RelationshipInfo(fieldName=newStories, type=HackerNewsItem, label=HackerNewsItem, out=true, multi=true, cypher=null, parameters=null, description=Up to 500 of the newest stories, nonNull=0), showStories=RelationshipInfo(fieldName=showStories, type=HackerNewsItem, label=HackerNewsItem, out=true, multi=true, cypher=null, parameters=null, description=Up to 200 of the Show HN stories, nonNull=0), askStories=RelationshipInfo(fieldName=askStories, type=HackerNewsItem, label=HackerNewsItem, out=true, multi=true, cypher=null, parameters=null, description=Up to 200 of the Ask HN stories, nonNull=0), jobStories=RelationshipInfo(fieldName=jobStories, type=HackerNewsItem, label=HackerNewsItem, out=true, multi=true, cypher=null, parameters=null, description=Up to 200 of the Job stores, nonNull=0), stories=RelationshipInfo(fieldName=stories, type=HackerNewsItem, label=HackerNewsItem, out=true, multi=true, cypher=null, parameters=null, description=Return list of stories, nonNull=0)}, isInterface=false}, MetaData{type='HackerNewsItem', properties={id=PropertyInfo(fieldName=id, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The item's unique id.), deleted=PropertyInfo(fieldName=deleted, type=Boolean, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=if the item is deleted), type=PropertyInfo(fieldName=type, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The type of item. One of "job", "story", "comment", "poll", or "pollopt".), time=PropertyInfo(fieldName=time, type=Int!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Creation date of the item, in Unix Time.), timeISO=PropertyInfo(fieldName=timeISO, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Creation date of the item, in ISO8601), text=PropertyInfo(fieldName=text, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The comment, story or poll text. HTML.), dead=PropertyInfo(fieldName=dead, type=Boolean, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=if the item is dead), url=PropertyInfo(fieldName=url, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The URL of the story.), score=PropertyInfo(fieldName=score, type=Int, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The story's score, or the votes for a pollopt.), title=PropertyInfo(fieldName=title, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The title of the story, poll or job.), descendants=PropertyInfo(fieldName=descendants, type=Int, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=In the case of stories or polls, the total comment count.)}, labels=[], relationships={by=RelationshipInfo(fieldName=by, type=HackerNewsUser, label=HackerNewsUser, out=true, multi=false, cypher=null, parameters=null, description=The item's author., nonNull=1), kids=RelationshipInfo(fieldName=kids, type=HackerNewsItem, label=HackerNewsItem, out=true, multi=true, cypher=null, parameters=null, description=The item's comments, in ranked display order., nonNull=0), parent=RelationshipInfo(fieldName=parent, type=HackerNewsItem, label=HackerNewsItem, out=true, multi=false, cypher=null, parameters=null, description=The item's parent. For comments, either another comment or the relevant story. For pollopts, the relevant poll., nonNull=0), parts=RelationshipInfo(fieldName=parts, type=HackerNewsItem, label=HackerNewsItem, out=true, multi=true, cypher=null, parameters=null, description=A list of related pollopts, in display order., nonNull=0)}, isInterface=false}, MetaData{type='HackerNewsUser', properties={id=PropertyInfo(fieldName=id, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The user's unique username. Case-sensitive. Required.), delay=PropertyInfo(fieldName=delay, type=Int!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Delay in minutes between a comment's creation and its visibility to other users.), created=PropertyInfo(fieldName=created, type=Int!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Creation date of the user, in Unix Time.), createdISO=PropertyInfo(fieldName=createdISO, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Creation date of the user, in ISO8601), about=PropertyInfo(fieldName=about, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The user's optional self-description. HTML.)}, labels=[], relationships={submitted=RelationshipInfo(fieldName=submitted, type=HackerNewsItem, label=HackerNewsItem, out=true, multi=true, cypher=null, parameters=null, description=List of the user's stories, polls and comments., nonNull=0)}, isInterface=false}, MetaData{type='HackerNewsAPIV2', properties={node=PropertyInfo(fieldName=node, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Fetches an object given its ID), nodeFromHnId=PropertyInfo(fieldName=nodeFromHnId, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=To ensure Node IDs are globally unique, GraphQLHub coerces IDs returned by the HN API. Use this field to get nodes via normal HN IDs)}, labels=[], relationships={}, isInterface=false}, MetaData{type='HackerNewsV2Story', properties={id=PropertyInfo(fieldName=id, type=ID!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The ID of an object), hnId=PropertyInfo(fieldName=hnId, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The item's unique id.), descendants=PropertyInfo(fieldName=descendants, type=Int, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=In the case of stories or polls, the total comment count.), score=PropertyInfo(fieldName=score, type=Int, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The story's score, or the votes for a pollopt.), time=PropertyInfo(fieldName=time, type=Int!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Creation date of the item, in Unix Time.), timeISO=PropertyInfo(fieldName=timeISO, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Creation date of the item, in ISO8601), title=PropertyInfo(fieldName=title, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The title of the story, poll or job.), url=PropertyInfo(fieldName=url, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The URL of the story.), text=PropertyInfo(fieldName=text, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The comment, story or poll text. HTML.), deleted=PropertyInfo(fieldName=deleted, type=Boolean, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=if the item is deleted), dead=PropertyInfo(fieldName=dead, type=Boolean, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=if the item is dead)}, labels=[], relationships={by=RelationshipInfo(fieldName=by, type=HackerNewsV2User, label=HackerNewsV2User, out=true, multi=false, cypher=null, parameters=null, description=The item's author., nonNull=1), kids=RelationshipInfo(fieldName=kids, type=HackerNewsV2CommentConnection, label=HackerNewsV2CommentConnection, out=true, multi=false, cypher=null, parameters=null, description=The item's comments, in ranked display order., nonNull=0)}, isInterface=false}, MetaData{type='HackerNewsV2User', properties={id=PropertyInfo(fieldName=id, type=ID!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The ID of an object), hnId=PropertyInfo(fieldName=hnId, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The item's unique id.), delay=PropertyInfo(fieldName=delay, type=Int, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Delay in minutes between a comment's creation and its visibility to other users.), created=PropertyInfo(fieldName=created, type=Int, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Creation date of the user, in Unix Time.), createdISO=PropertyInfo(fieldName=createdISO, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Creation date of the user, in ISO8601), about=PropertyInfo(fieldName=about, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The user's optional self-description. HTML.)}, labels=[], relationships={submitted=RelationshipInfo(fieldName=submitted, type=NodeConnection, label=NodeConnection, out=true, multi=false, cypher=null, parameters=null, description=List of the user's stories, polls and comments., nonNull=0)}, isInterface=false}, MetaData{type='NodeConnection', properties={}, labels=[], relationships={pageInfo=RelationshipInfo(fieldName=pageInfo, type=PageInfo, label=PageInfo, out=true, multi=false, cypher=null, parameters=null, description=Information to aid in pagination., nonNull=1), edges=RelationshipInfo(fieldName=edges, type=NodeEdge, label=NodeEdge, out=true, multi=true, cypher=null, parameters=null, description=Information to aid in pagination., nonNull=0)}, isInterface=false}, MetaData{type='PageInfo', properties={hasNextPage=PropertyInfo(fieldName=hasNextPage, type=Boolean!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=When paginating forwards, are there more items?), hasPreviousPage=PropertyInfo(fieldName=hasPreviousPage, type=Boolean!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=When paginating backwards, are there more items?), startCursor=PropertyInfo(fieldName=startCursor, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=When paginating backwards, the cursor to continue.), endCursor=PropertyInfo(fieldName=endCursor, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=When paginating forwards, the cursor to continue.)}, labels=[], relationships={}, isInterface=false}, MetaData{type='NodeEdge', properties={node=PropertyInfo(fieldName=node, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The item at the end of the edge), cursor=PropertyInfo(fieldName=cursor, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=A cursor for use in pagination)}, labels=[], relationships={}, isInterface=false}, MetaData{type='HackerNewsV2CommentConnection', properties={}, labels=[], relationships={pageInfo=RelationshipInfo(fieldName=pageInfo, type=PageInfo, label=PageInfo, out=true, multi=false, cypher=null, parameters=null, description=Information to aid in pagination., nonNull=1), edges=RelationshipInfo(fieldName=edges, type=HackerNewsV2CommentEdge, label=HackerNewsV2CommentEdge, out=true, multi=true, cypher=null, parameters=null, description=Information to aid in pagination., nonNull=0)}, isInterface=false}, MetaData{type='HackerNewsV2CommentEdge', properties={cursor=PropertyInfo(fieldName=cursor, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=A cursor for use in pagination)}, labels=[], relationships={node=RelationshipInfo(fieldName=node, type=HackerNewsV2Comment, label=HackerNewsV2Comment, out=true, multi=false, cypher=null, parameters=null, description=The item at the end of the edge, nonNull=0)}, isInterface=false}, MetaData{type='HackerNewsV2Comment', properties={id=PropertyInfo(fieldName=id, type=ID!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The ID of an object), hnId=PropertyInfo(fieldName=hnId, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The item's unique id.), parent=PropertyInfo(fieldName=parent, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The item's parent. For comments, either another comment or the relevant story. For pollopts, the relevant poll.), text=PropertyInfo(fieldName=text, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The comment, story or poll text. HTML.), time=PropertyInfo(fieldName=time, type=Int!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Creation date of the item, in Unix Time.), timeISO=PropertyInfo(fieldName=timeISO, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Creation date of the item, in ISO8601), deleted=PropertyInfo(fieldName=deleted, type=Boolean, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=if the item is deleted), dead=PropertyInfo(fieldName=dead, type=Boolean, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=if the item is dead)}, labels=[], relationships={by=RelationshipInfo(fieldName=by, type=HackerNewsV2User, label=HackerNewsV2User, out=true, multi=false, cypher=null, parameters=null, description=The item's author., nonNull=1), kids=RelationshipInfo(fieldName=kids, type=HackerNewsV2CommentConnection, label=HackerNewsV2CommentConnection, out=true, multi=false, cypher=null, parameters=null, description=The item's comments, in ranked display order., nonNull=0)}, isInterface=false}, MetaData{type='HackerNewsV2Job', properties={id=PropertyInfo(fieldName=id, type=ID!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The ID of an object), hnId=PropertyInfo(fieldName=hnId, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The item's unique id.), score=PropertyInfo(fieldName=score, type=Int, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The story's score, or the votes for a pollopt.), text=PropertyInfo(fieldName=text, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The comment, story or poll text. HTML.), time=PropertyInfo(fieldName=time, type=Int!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Creation date of the item, in Unix Time.), timeISO=PropertyInfo(fieldName=timeISO, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Creation date of the item, in ISO8601), title=PropertyInfo(fieldName=title, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The title of the story, poll or job.), url=PropertyInfo(fieldName=url, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The URL of the story.), deleted=PropertyInfo(fieldName=deleted, type=Boolean, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=if the item is deleted), dead=PropertyInfo(fieldName=dead, type=Boolean, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=if the item is dead)}, labels=[], relationships={by=RelationshipInfo(fieldName=by, type=HackerNewsV2User, label=HackerNewsV2User, out=true, multi=false, cypher=null, parameters=null, description=The item's author., nonNull=1)}, isInterface=false}, MetaData{type='HackerNewsV2Poll', properties={id=PropertyInfo(fieldName=id, type=ID!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The ID of an object), hnId=PropertyInfo(fieldName=hnId, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The item's unique id.), descendants=PropertyInfo(fieldName=descendants, type=Int, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=In the case of stories or polls, the total comment count.), score=PropertyInfo(fieldName=score, type=Int, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The story's score, or the votes for a pollopt.), time=PropertyInfo(fieldName=time, type=Int!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Creation date of the item, in Unix Time.), timeISO=PropertyInfo(fieldName=timeISO, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Creation date of the item, in ISO8601), title=PropertyInfo(fieldName=title, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The title of the story, poll or job.), text=PropertyInfo(fieldName=text, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The comment, story or poll text. HTML.), deleted=PropertyInfo(fieldName=deleted, type=Boolean, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=if the item is deleted), dead=PropertyInfo(fieldName=dead, type=Boolean, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=if the item is dead)}, labels=[], relationships={by=RelationshipInfo(fieldName=by, type=HackerNewsV2User, label=HackerNewsV2User, out=true, multi=false, cypher=null, parameters=null, description=The item's author., nonNull=1), kids=RelationshipInfo(fieldName=kids, type=HackerNewsV2CommentConnection, label=HackerNewsV2CommentConnection, out=true, multi=false, cypher=null, parameters=null, description=The item's comments, in ranked display order., nonNull=0), parts=RelationshipInfo(fieldName=parts, type=HackerNewsV2PollPart, label=HackerNewsV2PollPart, out=true, multi=true, cypher=null, parameters=null, description=A list of related pollopts, in display order., nonNull=0)}, isInterface=false}, MetaData{type='HackerNewsV2PollPart', properties={id=PropertyInfo(fieldName=id, type=ID!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The ID of an object), hnId=PropertyInfo(fieldName=hnId, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The item's unique id.), score=PropertyInfo(fieldName=score, type=Int, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The story's score, or the votes for a pollopt.), time=PropertyInfo(fieldName=time, type=Int!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Creation date of the item, in Unix Time.), timeISO=PropertyInfo(fieldName=timeISO, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Creation date of the item, in ISO8601), text=PropertyInfo(fieldName=text, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The comment, story or poll text. HTML.), parent=PropertyInfo(fieldName=parent, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The item's parent. For comments, either another comment or the relevant story. For pollopts, the relevant poll.), deleted=PropertyInfo(fieldName=deleted, type=Boolean, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=if the item is deleted)}, labels=[], relationships={by=RelationshipInfo(fieldName=by, type=HackerNewsV2User, label=HackerNewsV2User, out=true, multi=false, cypher=null, parameters=null, description=The item's author., nonNull=1)}, isInterface=false}, MetaData{type='RedditAPI', properties={}, labels=[], relationships={subreddit=RelationshipInfo(fieldName=subreddit, type=RedditSubreddit, label=RedditSubreddit, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), user=RelationshipInfo(fieldName=user, type=RedditUser, label=RedditUser, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0)}, isInterface=false}, MetaData{type='RedditSubreddit', properties={name=PropertyInfo(fieldName=name, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Name of the subreddit), fullnameId=PropertyInfo(fieldName=fullnameId, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The Reddit API fullname of the subreddit), title=PropertyInfo(fieldName=title, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Title of the subreddit), publicDescription=PropertyInfo(fieldName=publicDescription, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Description of the subreddit), accountsActive=PropertyInfo(fieldName=accountsActive, type=Int!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Accounts active right now on the subreddit), subscribers=PropertyInfo(fieldName=subscribers, type=Int!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Number of subscribers to the subreddit), created=PropertyInfo(fieldName=created, type=Float!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Creation date of the subreddit, in Unix Time (UTC)), createdISO=PropertyInfo(fieldName=createdISO, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Creation date of the subreddit, in ISO8601)}, labels=[], relationships={hotListings=RelationshipInfo(fieldName=hotListings, type=RedditLink, label=RedditLink, out=true, multi=true, cypher=null, parameters=null, description=Hot/"Front Page" listings of the subreddit, nonNull=1), newListings=RelationshipInfo(fieldName=newListings, type=RedditLink, label=RedditLink, out=true, multi=true, cypher=null, parameters=null, description=Newest listings of the subreddit, nonNull=1), risingListings=RelationshipInfo(fieldName=risingListings, type=RedditLink, label=RedditLink, out=true, multi=true, cypher=null, parameters=null, description=Rising listings of the subreddit, nonNull=1), controversialListings=RelationshipInfo(fieldName=controversialListings, type=RedditLink, label=RedditLink, out=true, multi=true, cypher=null, parameters=null, description=Controversial listings of the subreddit, nonNull=1), topListings=RelationshipInfo(fieldName=topListings, type=RedditLink, label=RedditLink, out=true, multi=true, cypher=null, parameters=null, description=Top listings of the subreddit, nonNull=1)}, isInterface=false}, MetaData{type='RedditLink', properties={title=PropertyInfo(fieldName=title, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Title of the link), fullnameId=PropertyInfo(fieldName=fullnameId, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The Reddit API fullname of the link), score=PropertyInfo(fieldName=score, type=Int!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Score of the link), numComments=PropertyInfo(fieldName=numComments, type=Int!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Number of comments), url=PropertyInfo(fieldName=url, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=URL of the link)}, labels=[], relationships={author=RelationshipInfo(fieldName=author, type=RedditUser, label=RedditUser, out=true, multi=false, cypher=null, parameters=null, description=Author of the link, nonNull=1), comments=RelationshipInfo(fieldName=comments, type=RedditComment, label=RedditComment, out=true, multi=true, cypher=null, parameters=null, description=Comments on the link, nonNull=1)}, isInterface=false}, MetaData{type='RedditUser', properties={fullnameId=PropertyInfo(fieldName=fullnameId, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The Reddit API fullname of the user), username=PropertyInfo(fieldName=username, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The user's unique username.), created=PropertyInfo(fieldName=created, type=Float!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Creation date of the user, in Unix Time (UTC)), createdISO=PropertyInfo(fieldName=createdISO, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Creation date of the user, in ISO8601), linkKarma=PropertyInfo(fieldName=linkKarma, type=Int!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Karma by links of the user), commentKarma=PropertyInfo(fieldName=commentKarma, type=Int!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Karma by comments of the user)}, labels=[], relationships={}, isInterface=false}, MetaData{type='RedditComment', properties={body=PropertyInfo(fieldName=body, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=Body of the comment)}, labels=[], relationships={author=RelationshipInfo(fieldName=author, type=RedditUser, label=RedditUser, out=true, multi=false, cypher=null, parameters=null, description=Author of the comment, nonNull=1), replies=RelationshipInfo(fieldName=replies, type=RedditComment, label=RedditComment, out=true, multi=true, cypher=null, parameters=null, description=Replies to the comment, nonNull=1)}, isInterface=false}, MetaData{type='KeyValueAPI', properties={}, labels=[], relationships={getValue=RelationshipInfo(fieldName=getValue, type=KeyValueItem, label=KeyValueItem, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0)}, isInterface=false}, MetaData{type='KeyValueItem', properties={id=PropertyInfo(fieldName=id, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The item's unique id.), value=PropertyInfo(fieldName=value, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The item's value.)}, labels=[], relationships={}, isInterface=false}, MetaData{type='GithubAPI', properties={}, labels=[], relationships={user=RelationshipInfo(fieldName=user, type=GithubUser, label=GithubUser, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), repo=RelationshipInfo(fieldName=repo, type=GithubRepo, label=GithubRepo, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0)}, isInterface=false}, MetaData{type='GithubUser', properties={login=PropertyInfo(fieldName=login, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), id=PropertyInfo(fieldName=id, type=Int, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), company=PropertyInfo(fieldName=company, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), avatar_url=PropertyInfo(fieldName=avatar_url, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={repos=RelationshipInfo(fieldName=repos, type=GithubRepo, label=GithubRepo, out=true, multi=true, cypher=null, parameters=null, description=null, nonNull=0)}, isInterface=false}, MetaData{type='GithubRepo', properties={id=PropertyInfo(fieldName=id, type=Int, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), name=PropertyInfo(fieldName=name, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={commits=RelationshipInfo(fieldName=commits, type=GithubCommit, label=GithubCommit, out=true, multi=true, cypher=null, parameters=null, description=null, nonNull=0), issues=RelationshipInfo(fieldName=issues, type=GithubIssue, label=GithubIssue, out=true, multi=true, cypher=null, parameters=null, description=null, nonNull=0), branches=RelationshipInfo(fieldName=branches, type=GithubBranch, label=GithubBranch, out=true, multi=true, cypher=null, parameters=null, description=null, nonNull=0), owner=RelationshipInfo(fieldName=owner, type=GithubUser, label=GithubUser, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0)}, isInterface=false}, MetaData{type='GithubCommit', properties={sha=PropertyInfo(fieldName=sha, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), author=PropertyInfo(fieldName=author, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), message=PropertyInfo(fieldName=message, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), date=PropertyInfo(fieldName=date, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={status=RelationshipInfo(fieldName=status, type=GithubStatus, label=GithubStatus, out=true, multi=true, cypher=null, parameters=null, description=null, nonNull=0), tree=RelationshipInfo(fieldName=tree, type=GithubTree, label=GithubTree, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0)}, isInterface=false}, MetaData{type='GithubCommitAuthor', properties={email=PropertyInfo(fieldName=email, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), name=PropertyInfo(fieldName=name, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={}, isInterface=false}, MetaData{type='GithubStatus', properties={state=PropertyInfo(fieldName=state, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), description=PropertyInfo(fieldName=description, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), target_url=PropertyInfo(fieldName=target_url, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), context=PropertyInfo(fieldName=context, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), updated_at=PropertyInfo(fieldName=updated_at, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={}, isInterface=false}, MetaData{type='GithubTree', properties={}, labels=[], relationships={entries=RelationshipInfo(fieldName=entries, type=GithubTreeEntry, label=GithubTreeEntry, out=true, multi=true, cypher=null, parameters=null, description=null, nonNull=0)}, isInterface=false}, MetaData{type='GithubTreeEntry', properties={path=PropertyInfo(fieldName=path, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={last_commit=RelationshipInfo(fieldName=last_commit, type=GithubCommit, label=GithubCommit, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0)}, isInterface=false}, MetaData{type='GithubIssue', properties={id=PropertyInfo(fieldName=id, type=Int, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), state=PropertyInfo(fieldName=state, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), title=PropertyInfo(fieldName=title, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), body=PropertyInfo(fieldName=body, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), commentCount=PropertyInfo(fieldName=commentCount, type=Int, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={user=RelationshipInfo(fieldName=user, type=GithubUser, label=GithubUser, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), assignee=RelationshipInfo(fieldName=assignee, type=GithubUser, label=GithubUser, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), closed_by=RelationshipInfo(fieldName=closed_by, type=GithubUser, label=GithubUser, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), labels=RelationshipInfo(fieldName=labels, type=GithubIssueLabelType, label=GithubIssueLabelType, out=true, multi=true, cypher=null, parameters=null, description=null, nonNull=0), comments=RelationshipInfo(fieldName=comments, type=GithubIssueCommentType, label=GithubIssueCommentType, out=true, multi=true, cypher=null, parameters=null, description=null, nonNull=0)}, isInterface=false}, MetaData{type='GithubIssueLabelType', properties={url=PropertyInfo(fieldName=url, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), name=PropertyInfo(fieldName=name, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), color=PropertyInfo(fieldName=color, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={}, isInterface=false}, MetaData{type='GithubIssueCommentType', properties={id=PropertyInfo(fieldName=id, type=Int, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), body=PropertyInfo(fieldName=body, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={user=RelationshipInfo(fieldName=user, type=GithubUser, label=GithubUser, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0)}, isInterface=false}, MetaData{type='GithubBranch', properties={name=PropertyInfo(fieldName=name, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={lastCommit=RelationshipInfo(fieldName=lastCommit, type=GithubCommit, label=GithubCommit, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0)}, isInterface=false}, MetaData{type='TwitterAPI', properties={}, labels=[], relationships={user=RelationshipInfo(fieldName=user, type=TwitterUser, label=TwitterUser, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), tweet=RelationshipInfo(fieldName=tweet, type=Tweet, label=Tweet, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), search=RelationshipInfo(fieldName=search, type=Tweet, label=Tweet, out=true, multi=true, cypher=null, parameters=null, description=Returns a collection of relevant Tweets matching a specified query., nonNull=0)}, isInterface=false}, MetaData{type='TwitterUser', properties={created_at=PropertyInfo(fieldName=created_at, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), description=PropertyInfo(fieldName=description, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), id=PropertyInfo(fieldName=id, type=ID, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), screen_name=PropertyInfo(fieldName=screen_name, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), name=PropertyInfo(fieldName=name, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), profile_image_url=PropertyInfo(fieldName=profile_image_url, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), url=PropertyInfo(fieldName=url, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), tweets_count=PropertyInfo(fieldName=tweets_count, type=Int, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), followers_count=PropertyInfo(fieldName=followers_count, type=Int, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={tweets=RelationshipInfo(fieldName=tweets, type=Tweet, label=Tweet, out=true, multi=true, cypher=null, parameters=null, description=Get a list of tweets for current user, nonNull=0)}, isInterface=false}, MetaData{type='Tweet', properties={id=PropertyInfo(fieldName=id, type=ID, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), created_at=PropertyInfo(fieldName=created_at, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), text=PropertyInfo(fieldName=text, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), retweet_count=PropertyInfo(fieldName=retweet_count, type=Int, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={user=RelationshipInfo(fieldName=user, type=TwitterUser, label=TwitterUser, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), retweets=RelationshipInfo(fieldName=retweets, type=Retweet, label=Retweet, out=true, multi=true, cypher=null, parameters=null, description=Get a list of retweets, nonNull=0)}, isInterface=false}, MetaData{type='Retweet', properties={id=PropertyInfo(fieldName=id, type=ID, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), created_at=PropertyInfo(fieldName=created_at, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), in_reply_to_tweet_id=PropertyInfo(fieldName=in_reply_to_tweet_id, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), in_reply_to_user_id=PropertyInfo(fieldName=in_reply_to_user_id, type=Int, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), in_reply_to_screen_name=PropertyInfo(fieldName=in_reply_to_screen_name, type=String, id=false, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={retweeted_status=RelationshipInfo(fieldName=retweeted_status, type=Tweet, label=Tweet, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), user=RelationshipInfo(fieldName=user, type=TwitterUser, label=TwitterUser, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0)}, isInterface=false}, MetaData{type='GiphyAPI', properties={}, labels=[], relationships={gif=RelationshipInfo(fieldName=gif, type=GiphyGIFData, label=GiphyGIFData, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), search=RelationshipInfo(fieldName=search, type=GiphyGIFData, label=GiphyGIFData, out=true, multi=true, cypher=null, parameters=null, description=null, nonNull=0), random=RelationshipInfo(fieldName=random, type=GiphyGIFData, label=GiphyGIFData, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0)}, isInterface=false}, MetaData{type='GiphyGIFData', properties={id=PropertyInfo(fieldName=id, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=The item's unique id.), url=PropertyInfo(fieldName=url, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={images=RelationshipInfo(fieldName=images, type=GiphyGIFImages, label=GiphyGIFImages, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=1)}, isInterface=false}, MetaData{type='GiphyGIFImages', properties={}, labels=[], relationships={fixed_height=RelationshipInfo(fieldName=fixed_height, type=GiphyGIFImageDataFixedHeight, label=GiphyGIFImageDataFixedHeight, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), fixed_height_still=RelationshipInfo(fieldName=fixed_height_still, type=GiphyGIFImageDataFixedHeightStill, label=GiphyGIFImageDataFixedHeightStill, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), fixed_height_downsampled=RelationshipInfo(fieldName=fixed_height_downsampled, type=GiphyGIFImageDataFixedHeightDownsample, label=GiphyGIFImageDataFixedHeightDownsample, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), fixed_width=RelationshipInfo(fieldName=fixed_width, type=GiphyGIFImageDataFixedWidth, label=GiphyGIFImageDataFixedWidth, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), fixed_width_still=RelationshipInfo(fieldName=fixed_width_still, type=GiphyGIFImageDataFixedWidthStill, label=GiphyGIFImageDataFixedWidthStill, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), fixed_width_downsampled=RelationshipInfo(fieldName=fixed_width_downsampled, type=GiphyGIFImageDataFixedWidthDownsample, label=GiphyGIFImageDataFixedWidthDownsample, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), fixed_height_small=RelationshipInfo(fieldName=fixed_height_small, type=GiphyGIFImageDataFixedHeightSmall, label=GiphyGIFImageDataFixedHeightSmall, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), fixed_height_small_still=RelationshipInfo(fieldName=fixed_height_small_still, type=GiphyGIFImageDataFixedHeightSmallStill, label=GiphyGIFImageDataFixedHeightSmallStill, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), fixed_width_small=RelationshipInfo(fieldName=fixed_width_small, type=GiphyGIFImageDataFixedWidthSmall, label=GiphyGIFImageDataFixedWidthSmall, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), fixed_width_small_still=RelationshipInfo(fieldName=fixed_width_small_still, type=GiphyGIFImageDataFixedWidthSmallStill, label=GiphyGIFImageDataFixedWidthSmallStill, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), downsized=RelationshipInfo(fieldName=downsized, type=GiphyGIFImageDataDownsized, label=GiphyGIFImageDataDownsized, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), downsized_still=RelationshipInfo(fieldName=downsized_still, type=GiphyGIFImageDataDownsizedStill, label=GiphyGIFImageDataDownsizedStill, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), downsized_large=RelationshipInfo(fieldName=downsized_large, type=GiphyGIFImageDataDownsizedLarge, label=GiphyGIFImageDataDownsizedLarge, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), original=RelationshipInfo(fieldName=original, type=GiphyGIFImageDataOriginal, label=GiphyGIFImageDataOriginal, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), original_still=RelationshipInfo(fieldName=original_still, type=GiphyGIFImageDataOriginalStill, label=GiphyGIFImageDataOriginalStill, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0), looping=RelationshipInfo(fieldName=looping, type=GiphyGIFImageDataLooping, label=GiphyGIFImageDataLooping, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0)}, isInterface=false}, MetaData{type='GiphyGIFImageDataFixedHeight', properties={url=PropertyInfo(fieldName=url, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), width=PropertyInfo(fieldName=width, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), height=PropertyInfo(fieldName=height, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), size=PropertyInfo(fieldName=size, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), mp4=PropertyInfo(fieldName=mp4, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), mp4_size=PropertyInfo(fieldName=mp4_size, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), webp=PropertyInfo(fieldName=webp, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), webp_size=PropertyInfo(fieldName=webp_size, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={}, isInterface=false}, MetaData{type='GiphyGIFImageDataFixedHeightStill', properties={url=PropertyInfo(fieldName=url, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), width=PropertyInfo(fieldName=width, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), height=PropertyInfo(fieldName=height, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={}, isInterface=false}, MetaData{type='GiphyGIFImageDataFixedHeightDownsample', properties={url=PropertyInfo(fieldName=url, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), width=PropertyInfo(fieldName=width, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), height=PropertyInfo(fieldName=height, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), size=PropertyInfo(fieldName=size, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), webp=PropertyInfo(fieldName=webp, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), webp_size=PropertyInfo(fieldName=webp_size, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={}, isInterface=false}, MetaData{type='GiphyGIFImageDataFixedWidth', properties={url=PropertyInfo(fieldName=url, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), width=PropertyInfo(fieldName=width, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), height=PropertyInfo(fieldName=height, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), size=PropertyInfo(fieldName=size, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), mp4=PropertyInfo(fieldName=mp4, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), mp4_size=PropertyInfo(fieldName=mp4_size, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), webp=PropertyInfo(fieldName=webp, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), webp_size=PropertyInfo(fieldName=webp_size, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={}, isInterface=false}, MetaData{type='GiphyGIFImageDataFixedWidthStill', properties={url=PropertyInfo(fieldName=url, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), width=PropertyInfo(fieldName=width, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), height=PropertyInfo(fieldName=height, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={}, isInterface=false}, MetaData{type='GiphyGIFImageDataFixedWidthDownsample', properties={url=PropertyInfo(fieldName=url, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), width=PropertyInfo(fieldName=width, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), height=PropertyInfo(fieldName=height, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), size=PropertyInfo(fieldName=size, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), webp=PropertyInfo(fieldName=webp, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), webp_size=PropertyInfo(fieldName=webp_size, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={}, isInterface=false}, MetaData{type='GiphyGIFImageDataFixedHeightSmall', properties={url=PropertyInfo(fieldName=url, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), width=PropertyInfo(fieldName=width, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), height=PropertyInfo(fieldName=height, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), size=PropertyInfo(fieldName=size, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), webp=PropertyInfo(fieldName=webp, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), webp_size=PropertyInfo(fieldName=webp_size, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={}, isInterface=false}, MetaData{type='GiphyGIFImageDataFixedHeightSmallStill', properties={url=PropertyInfo(fieldName=url, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), width=PropertyInfo(fieldName=width, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), height=PropertyInfo(fieldName=height, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={}, isInterface=false}, MetaData{type='GiphyGIFImageDataFixedWidthSmall', properties={url=PropertyInfo(fieldName=url, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), width=PropertyInfo(fieldName=width, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), height=PropertyInfo(fieldName=height, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), size=PropertyInfo(fieldName=size, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), webp=PropertyInfo(fieldName=webp, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), webp_size=PropertyInfo(fieldName=webp_size, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={}, isInterface=false}, MetaData{type='GiphyGIFImageDataFixedWidthSmallStill', properties={url=PropertyInfo(fieldName=url, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), width=PropertyInfo(fieldName=width, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), height=PropertyInfo(fieldName=height, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={}, isInterface=false}, MetaData{type='GiphyGIFImageDataDownsized', properties={url=PropertyInfo(fieldName=url, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), width=PropertyInfo(fieldName=width, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), height=PropertyInfo(fieldName=height, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), small=PropertyInfo(fieldName=small, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={}, isInterface=false}, MetaData{type='GiphyGIFImageDataDownsizedStill', properties={url=PropertyInfo(fieldName=url, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), width=PropertyInfo(fieldName=width, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), height=PropertyInfo(fieldName=height, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={}, isInterface=false}, MetaData{type='GiphyGIFImageDataDownsizedLarge', properties={url=PropertyInfo(fieldName=url, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), width=PropertyInfo(fieldName=width, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), height=PropertyInfo(fieldName=height, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), size=PropertyInfo(fieldName=size, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={}, isInterface=false}, MetaData{type='GiphyGIFImageDataOriginal', properties={url=PropertyInfo(fieldName=url, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), width=PropertyInfo(fieldName=width, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), height=PropertyInfo(fieldName=height, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), size=PropertyInfo(fieldName=size, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), mp4=PropertyInfo(fieldName=mp4, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), mp4_size=PropertyInfo(fieldName=mp4_size, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), webp=PropertyInfo(fieldName=webp, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), webp_size=PropertyInfo(fieldName=webp_size, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), frames=PropertyInfo(fieldName=frames, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={}, isInterface=false}, MetaData{type='GiphyGIFImageDataOriginalStill', properties={url=PropertyInfo(fieldName=url, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), width=PropertyInfo(fieldName=width, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null), height=PropertyInfo(fieldName=height, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={}, isInterface=false}, MetaData{type='GiphyGIFImageDataLooping', properties={mp4=PropertyInfo(fieldName=mp4, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={}, isInterface=false}, MetaData{type='GraphQLHubMutationAPI', properties={}, labels=[], relationships={keyValue_setValue=RelationshipInfo(fieldName=keyValue_setValue, type=SetValueForKeyPayload, label=SetValueForKeyPayload, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0)}, isInterface=false}, MetaData{type='SetValueForKeyPayload', properties={clientMutationId=PropertyInfo(fieldName=clientMutationId, type=String!, id=true, indexed=false, cypher=null, defaultValue=null, unique=false, enum=false, parameters=null, description=null)}, labels=[], relationships={item=RelationshipInfo(fieldName=item, type=KeyValueItem, label=KeyValueItem, out=true, multi=false, cypher=null, parameters=null, description=null, nonNull=0)}, isInterface=false}]
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.67 sec
Running org.neo4j.graphql.MutationTest
class graphql.language.SchemaDefinition
class graphql.language.SchemaDefinition
class graphql.language.SchemaDefinition
class graphql.language.SchemaDefinition
class graphql.language.SchemaDefinition
class graphql.language.SchemaDefinition
class graphql.language.SchemaDefinition
class graphql.language.SchemaDefinition
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.568 sec
Running org.neo4j.graphql.NestedNonNullTest
[NonNullableFieldWasNullError{message='Cannot return null for non-nullable type: 'Company' within parent 'Person' (/p[0]/company2)', path=[p, 0, company2]}]
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.295 sec
Running org.neo4j.graphql.ScalarTest
class graphql.language.ScalarTypeDefinition
class graphql.language.ScalarTypeDefinition
class graphql.language.ScalarTypeDefinition
class graphql.language.ScalarTypeDefinition
class graphql.language.ScalarTypeDefinition
class graphql.language.ScalarTypeDefinition
class graphql.language.ScalarTypeDefinition
class graphql.language.ScalarTypeDefinition
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.555 sec
Running org.neo4j.graphql.TypeNamingTest
class graphql.language.SchemaDefinition
class graphql.language.SchemaDefinition
class graphql.language.SchemaDefinition
class graphql.language.SchemaDefinition
ExecutionResultImpl{data={Person={name=Jane}}, errors=[], dataPresent=true, extensions=null}
class graphql.language.SchemaDefinition
class graphql.language.SchemaDefinition
Tests run: 5, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 0.559 sec

Results :

Tests in error: 
  emptyNode(org.neo4j.graphql.GraphQLSchemaBuilderTest): type Gender not found in schema
  mandatoryRelationship(org.neo4j.graphql.GraphQLSchemaBuilderTest): type Gender not found in schema

Tests run: 146, Failures: 0, Errors: 2, Skipped: 6

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 01:02 min
[INFO] Finished at: 2018-04-30T20:18:20+02:00
[INFO] Final Memory: 59M/1870M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.12.4:test (default-test) on project neo4j-graphql: There are test failures.
[ERROR] 
[ERROR] Please refer to /root/workspace/neo4j-contrib/neo4j-graphql/373155107/target/surefire-reports for the individual test results.
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
