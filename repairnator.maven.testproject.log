[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for fr.inria.gforge.spoon:spoon-core:jar:7.1.0-SNAPSHOT
[WARNING] 'build.plugins.plugin.version' for org.pitest:pitest-maven is missing. @ line 521, column 15
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
[INFO] Inspecting build with total of 1 modules...
[INFO] Installing Nexus Staging features:
[INFO]   ... total of 1 executions of maven-deploy-plugin replaced with nexus-staging-maven-plugin
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Spoon Core 7.1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-enforcer-plugin:1.0:enforce (enforce-maven) @ spoon-core ---
[INFO] Skipping Rule Enforcement.
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.1:prepare-agent (default) @ spoon-core ---
[INFO] argLine set to -javaagent:/root/./workspace/INRIA/spoon/410923097/.m2/org/jacoco/org.jacoco.agent/0.8.1/org.jacoco.agent-0.8.1-runtime.jar=destfile=/root/workspace/INRIA/spoon/410923097/target/jacoco.exec
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ spoon-core ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 3 resources
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:compile (default-compile) @ spoon-core ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ spoon-core ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 177 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:testCompile (default-testCompile) @ spoon-core ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.21.0:test (default-test) @ spoon-core ---
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.21.0/surefire-junit4-2.21.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.21.0/surefire-junit4-2.21.0.pom (4 KB at 4.2 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.21.0/surefire-providers-2.21.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.21.0/surefire-providers-2.21.0.pom (3 KB at 62.9 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.21.0/surefire-junit4-2.21.0.jar
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.21.0/surefire-junit4-2.21.0.jar (83 KB at 1148.0 KB/sec)
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running spoon.support.compiler.jdt.ExtendedStringLiteralTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.421 s - in spoon.support.compiler.jdt.ExtendedStringLiteralTest
[INFO] Running spoon.support.compiler.jdt.JDTBuilderTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.support.compiler.jdt.JDTBuilderTest
[INFO] Running spoon.support.compiler.jdt.JDTBatchCompilerTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.344 s - in spoon.support.compiler.jdt.JDTBatchCompilerTest
[INFO] Running spoon.support.compiler.jdt.JDTBasedSpoonCompilerTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 9.509 s - in spoon.support.compiler.jdt.JDTBasedSpoonCompilerTest
[INFO] Running spoon.support.compiler.classpath.ComputeClasspathTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 s - in spoon.support.compiler.classpath.ComputeClasspathTest
[INFO] Running spoon.support.visitor.java.JavaReflectionTreeBuilderTest
[INFO] Tests run: 18, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 8.964 s - in spoon.support.visitor.java.JavaReflectionTreeBuilderTest
[INFO] Running spoon.testing.CtPackageAssertTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.249 s - in spoon.testing.CtPackageAssertTest
[INFO] Running spoon.testing.CtElementAssertTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.108 s - in spoon.testing.CtElementAssertTest
[INFO] Running spoon.testing.FileAssertTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.248 s - in spoon.testing.FileAssertTest
[INFO] Running spoon.testing.AbstractAssertTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.585 s - in spoon.testing.AbstractAssertTest
[INFO] Running spoon.processing.CtGenerationTest
2018-08-01 20:21:09,057 INFO spoon.Launcher - spoon.support.JavaOutputProcessor
2018-08-01 20:21:12,288 INFO spoon.Launcher - end of processing: 
2018-08-01 20:21:12,288 INFO spoon.Launcher - no errors, no warnings
[ERROR] Tests run: 4, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 97.837 s <<< FAILURE! - in spoon.processing.CtGenerationTest
[ERROR] testGenerateCtBiScanner(spoon.processing.CtGenerationTest)  Time elapsed: 3.204 s  <<< FAILURE!
java.lang.AssertionError
	at spoon.processing.CtGenerationTest.testGenerateCtBiScanner(CtGenerationTest.java:110)

[ERROR] testGenerateCloneVisitor(spoon.processing.CtGenerationTest)  Time elapsed: 54.07 s  <<< FAILURE!
org.junit.ComparisonFailure: 
CloneVisitor different expected:<...isitorGenerator
    [public <A extends java.lang.annotation.Annotation> void visitCtAnnotation(final spoon.reflect.declaration.CtAnnotation<A> annotation) {
        spoon.reflect.declaration.CtAnnotation<A> aCtAnnotation = annotation.getFactory().Core().createAnnotation();
        aCtAnnotation.setType(this.cloneHelper.clone(annotation.getType()));
        aCtAnnotation.setComments(this.cloneHelper.clone(annotation.getComments()));
        aCtAnnotation.setAnnotationType(this.cloneHelper.clone(annotation.getAnnotationType()));
        aCtAnnotation.setAnnotations(this.cloneHelper.clone(annotation.getAnnotations()));
        aCtAnnotation.setValues(this.cloneHelper.clone(annotation.getValues()));
        this.builder.copy(annotation, aCtAnnotation);
        this.cloneHelper.tailor(annotation, aCtAnnotation);
        this.other = aCtAnnotation;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <A extends java.lang.annotation.Annotation> void visitCtAnnotationType(final spoon.reflect.declaration.CtAnnotationType<A> annotationType) {
        spoon.reflect.declaration.CtAnnotationType<A> aCtAnnotationType = annotationType.getFactory().Core().createAnnotationType();
        aCtAnnotationType.setAnnotations(this.cloneHelper.clone(annotationType.getAnnotations()));
        aCtAnnotationType.setTypeMembers(this.cloneHelper.clone(annotationType.getTypeMembers()));
        aCtAnnotationType.setComments(this.cloneHelper.clone(annotationType.getComments()));
        this.builder.copy(annotationType, aCtAnnotationType);
        this.cloneHelper.tailor(annotationType, aCtAnnotationType);
        this.other = aCtAnnotationType;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public void visitCtAnonymousExecutable(final spoon.reflect.declaration.CtAnonymousExecutable anonymousExec) {
        spoon.reflect.declaration.CtAnonymousExecutable aCtAnonymousExecutable = anonymousExec.getFactory().Core().createAnonymousExecutable();
        aCtAnonymousExecutable.setAnnotations(this.cloneHelper.clone(anonymousExec.getAnnotations()));
        aCtAnonymousExecutable.setBody(this.cloneHelper.clone(anonymousExec.getBody()));
        aCtAnonymousExecutable.setComments(this.cloneHelper.clone(anonymousExec.getComments()));
        this.builder.copy(anonymousExec, aCtAnonymousExecutable);
        this.cloneHelper.tailor(anonymousExec, aCtAnonymousExecutable);
        this.other = aCtAnonymousExecutable;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtArrayRead(final spoon.reflect.code.CtArrayRead<T> arrayRead) {
        spoon.reflect.code.CtArrayRead<T> aCtArrayRead = arrayRead.getFactory().Core().createArrayRead();
        aCtArrayRead.setAnnotations(this.cloneHelper.clone(arrayRead.getAnnotations()));
        aCtArrayRead.setType(this.cloneHelper.clone(arrayRead.getType()));
        aCtArrayRead.setTypeCasts(this.cloneHelper.clone(arrayRead.getTypeCasts()));
        aCtArrayRead.setTarget(this.cloneHelper.clone(arrayRead.getTarget()));
        aCtArrayRead.setIndexExpression(this.cloneHelper.clone(arrayRead.getIndexExpression()));
        aCtArrayRead.setComments(this.cloneHelper.clone(arrayRead.getComments()));
        this.builder.copy(arrayRead, aCtArrayRead);
        this.cloneHelper.tailor(arrayRead, aCtArrayRead);
        this.other = aCtArrayRead;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtArrayWrite(final spoon.reflect.code.CtArrayWrite<T> arrayWrite) {
        spoon.reflect.code.CtArrayWrite<T> aCtArrayWrite = arrayWrite.getFactory().Core().createArrayWrite();
        aCtArrayWrite.setAnnotations(this.cloneHelper.clone(arrayWrite.getAnnotations()));
        aCtArrayWrite.setType(this.cloneHelper.clone(arrayWrite.getType()));
        aCtArrayWrite.setTypeCasts(this.cloneHelper.clone(arrayWrite.getTypeCasts()));
        aCtArrayWrite.setTarget(this.cloneHelper.clone(arrayWrite.getTarget()));
        aCtArrayWrite.setIndexExpression(this.cloneHelper.clone(arrayWrite.getIndexExpression()));
        aCtArrayWrite.setComments(this.cloneHelper.clone(arrayWrite.getComments()));
        this.builder.copy(arrayWrite, aCtArrayWrite);
        this.cloneHelper.tailor(arrayWrite, aCtArrayWrite);
        this.other = aCtArrayWrite;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtArrayTypeReference(final spoon.reflect.reference.CtArrayTypeReference<T> reference) {
        spoon.reflect.reference.CtArrayTypeReference<T> aCtArrayTypeReference = reference.getFactory().Core().createArrayTypeReference();
        aCtArrayTypeReference.setPackage(this.cloneHelper.clone(reference.getPackage()));
        aCtArrayTypeReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtArrayTypeReference.setComponentType(this.cloneHelper.clone(reference.getComponentType()));
        aCtArrayTypeReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));
        aCtArrayTypeReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.builder.copy(reference, aCtArrayTypeReference);
        this.cloneHelper.tailor(reference, aCtArrayTypeReference);
        this.other = aCtArrayTypeReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtAssert(final spoon.reflect.code.CtAssert<T> asserted) {
        spoon.reflect.code.CtAssert<T> aCtAssert = asserted.getFactory().Core().createAssert();
        aCtAssert.setAnnotations(this.cloneHelper.clone(asserted.getAnnotations()));
        aCtAssert.setAssertExpression(this.cloneHelper.clone(asserted.getAssertExpression()));
        aCtAssert.setExpression(this.cloneHelper.clone(asserted.getExpression()));
        aCtAssert.setComments(this.cloneHelper.clone(asserted.getComments()));
        this.builder.copy(asserted, aCtAssert);
        this.cloneHelper.tailor(asserted, aCtAssert);
        this.other = aCtAssert;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T, A extends T> void visitCtAssignment(final spoon.reflect.code.CtAssignment<T, A> assignement) {
        spoon.reflect.code.CtAssignment<T, A> aCtAssignment = assignement.getFactory().Core().createAssignment();
        aCtAssignment.setAnnotations(this.cloneHelper.clone(assignement.getAnnotations()));
        aCtAssignment.setType(this.cloneHelper.clone(assignement.getType()));
        aCtAssignment.setTypeCasts(this.cloneHelper.clone(assignement.getTypeCasts()));
        aCtAssignment.setAssigned(this.cloneHelper.clone(assignement.getAssigned()));
        aCtAssignment.setAssignment(this.cloneHelper.clone(assignement.getAssignment()));
        aCtAssignment.setComments(this.cloneHelper.clone(assignement.getComments()));
        this.builder.copy(assignement, aCtAssignment);
        this.cloneHelper.tailor(assignement, aCtAssignment);
        this.other = aCtAssignment;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtBinaryOperator(final spoon.reflect.code.CtBinaryOperator<T> operator) {
        spoon.reflect.code.CtBinaryOperator<T> aCtBinaryOperator = operator.getFactory().Core().createBinaryOperator();
        aCtBinaryOperator.setAnnotations(this.cloneHelper.clone(operator.getAnnotations()));
        aCtBinaryOperator.setType(this.cloneHelper.clone(operator.getType()));
        aCtBinaryOperator.setTypeCasts(this.cloneHelper.clone(operator.getTypeCasts()));
        aCtBinaryOperator.setLeftHandOperand(this.cloneHelper.clone(operator.getLeftHandOperand()));
        aCtBinaryOperator.setRightHandOperand(this.cloneHelper.clone(operator.getRightHandOperand()));
        aCtBinaryOperator.setComments(this.cloneHelper.clone(operator.getComments()));
        this.builder.copy(operator, aCtBinaryOperator);
        this.cloneHelper.tailor(operator, aCtBinaryOperator);
        this.other = aCtBinaryOperator;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <R> void visitCtBlock(final spoon.reflect.code.CtBlock<R> block) {
        spoon.reflect.code.CtBlock<R> aCtBlock = block.getFactory().Core().createBlock();
        aCtBlock.setAnnotations(this.cloneHelper.clone(block.getAnnotations()));
        aCtBlock.setStatements(this.cloneHelper.clone(block.getStatements()));
        aCtBlock.setComments(this.cloneHelper.clone(block.getComments()));
        this.builder.copy(block, aCtBlock);
        this.cloneHelper.tailor(block, aCtBlock);
        this.other = aCtBlock;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public void visitCtBreak(final spoon.reflect.code.CtBreak breakStatement) {
        spoon.reflect.code.CtBreak aCtBreak = breakStatement.getFactory().Core().createBreak();
        aCtBreak.setAnnotations(this.cloneHelper.clone(breakStatement.getAnnotations()));
        aCtBreak.setComments(this.cloneHelper.clone(breakStatement.getComments()));
        this.builder.copy(breakStatement, aCtBreak);
        this.cloneHelper.tailor(breakStatement, aCtBreak);
        this.other = aCtBreak;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <S> void visitCtCase(final spoon.reflect.code.CtCase<S> caseStatement) {
        spoon.reflect.code.CtCase<S> aCtCase = caseStatement.getFactory().Core().createCase();
        aCtCase.setAnnotations(this.cloneHelper.clone(caseStatement.getAnnotations()));
        aCtCase.setCaseExpression(this.cloneHelper.clone(caseStatement.getCaseExpression()));
        aCtCase.setStatements(this.cloneHelper.clone(caseStatement.getStatements()));
        aCtCase.setComments(this.cloneHelper.clone(caseStatement.getComments()));
        this.builder.copy(caseStatement, aCtCase);
        this.cloneHelper.tailor(caseStatement, aCtCase);
        this.other = aCtCase;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public void visitCtCatch(final spoon.reflect.code.CtCatch catchBlock) {
        spoon.reflect.code.CtCatch aCtCatch = catchBlock.getFactory().Core().createCatch();
        aCtCatch.setAnnotations(this.cloneHelper.clone(catchBlock.getAnnotations()));
        aCtCatch.setParameter(this.cloneHelper.clone(catchBlock.getParameter()));
        aCtCatch.setBody(this.cloneHelper.clone(catchBlock.getBody()));
        aCtCatch.setComments(this.cloneHelper.clone(catchBlock.getComments()));
        this.builder.copy(catchBlock, aCtCatch);
        this.cloneHelper.tailor(catchBlock, aCtCatch);
        this.other = aCtCatch;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtClass(final spoon.reflect.declaration.CtClass<T> ctClass) {
        spoon.reflect.declaration.CtClass<T> aCtClass = ctClass.getFactory().Core().createClass();
        aCtClass.setAnnotations(this.cloneHelper.clone(ctClass.getAnnotations()));
        aCtClass.setSuperclass(this.cloneHelper.clone(ctClass.getSuperclass()));
        aCtClass.setSuperInterfaces(this.cloneHelper.clone(ctClass.getSuperInterfaces()));
        aCtClass.setFormalCtTypeParameters(this.cloneHelper.clone(ctClass.getFormalCtTypeParameters()));
        aCtClass.setTypeMembers(this.cloneHelper.clone(ctClass.getTypeMembers()));
        aCtClass.setComments(this.cloneHelper.clone(ctClass.getComments()));
        this.builder.copy(ctClass, aCtClass);
        this.cloneHelper.tailor(ctClass, aCtClass);
        this.other = aCtClass;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter typeParameter) {
        spoon.reflect.declaration.CtTypeParameter aCtTypeParameter = typeParameter.getFactory().Core().createTypeParameter();
        aCtTypeParameter.setAnnotations(this.cloneHelper.clone(typeParameter.getAnnotations()));
        aCtTypeParameter.setSuperclass(this.cloneHelper.clone(typeParameter.getSuperclass()));
        aCtTypeParameter.setComments(this.cloneHelper.clone(typeParameter.getComments()));
        this.builder.copy(typeParameter, aCtTypeParameter);
        this.cloneHelper.tailor(typeParameter, aCtTypeParameter);
        this.other = aCtTypeParameter;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtConditional(final spoon.reflect.code.CtConditional<T> conditional) {
        spoon.reflect.code.CtConditional<T> aCtConditional = conditional.getFactory().Core().createConditional();
        aCtConditional.setType(this.cloneHelper.clone(conditional.getType()));
        aCtConditional.setAnnotations(this.cloneHelper.clone(conditional.getAnnotations()));
        aCtConditional.setCondition(this.cloneHelper.clone(conditional.getCondition()));
        aCtConditional.setThenExpression(this.cloneHelper.clone(conditional.getThenExpression()));
        aCtConditional.setElseExpression(this.cloneHelper.clone(conditional.getElseExpression()));
        aCtConditional.setComments(this.cloneHelper.clone(conditional.getComments()));
        aCtConditional.setTypeCasts(this.cloneHelper.clone(conditional.getTypeCasts()));
        this.builder.copy(conditional, aCtConditional);
        this.cloneHelper.tailor(conditional, aCtConditional);
        this.other = aCtConditional;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtConstructor(final spoon.reflect.declaration.CtConstructor<T> c) {
        spoon.reflect.declaration.CtConstructor<T> aCtConstructor = c.getFactory().Core().createConstructor();
        aCtConstructor.setAnnotations(this.cloneHelper.clone(c.getAnnotations()));
        aCtConstructor.setParameters(this.cloneHelper.clone(c.getParameters()));
        aCtConstructor.setThrownTypes(this.cloneHelper.clone(c.getThrownTypes()));
        aCtConstructor.setFormalCtTypeParameters(this.cloneHelper.clone(c.getFormalCtTypeParameters()));
        aCtConstructor.setBody(this.cloneHelper.clone(c.getBody()));
        aCtConstructor.setComments(this.cloneHelper.clone(c.getComments()));
        this.builder.copy(c, aCtConstructor);
        this.cloneHelper.tailor(c, aCtConstructor);
        this.other = aCtConstructor;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public void visitCtContinue(final spoon.reflect.code.CtContinue continueStatement) {
        spoon.reflect.code.CtContinue aCtContinue = continueStatement.getFactory().Core().createContinue();
        aCtContinue.setAnnotations(this.cloneHelper.clone(continueStatement.getAnnotations()));
        aCtContinue.setComments(this.cloneHelper.clone(continueStatement.getComments()));
        this.builder.copy(continueStatement, aCtContinue);
        this.cloneHelper.tailor(continueStatement, aCtContinue);
        this.other = aCtContinue;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public void visitCtDo(final spoon.reflect.code.CtDo doLoop) {
        spoon.reflect.code.CtDo aCtDo = doLoop.getFactory().Core().createDo();
        aCtDo.setAnnotations(this.cloneHelper.clone(doLoop.getAnnotations()));
        aCtDo.setLoopingExpression(this.cloneHelper.clone(doLoop.getLoopingExpression()));
        aCtDo.setBody(this.cloneHelper.clone(doLoop.getBody()));
        aCtDo.setComments(this.cloneHelper.clone(doLoop.getComments()));
        this.builder.copy(doLoop, aCtDo);
        this.cloneHelper.tailor(doLoop, aCtDo);
        this.other = aCtDo;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T extends java.lang.Enum<?>> void visitCtEnum(final spoon.reflect.declaration.CtEnum<T> ctEnum) {
        spoon.reflect.declaration.CtEnum<T> aCtEnum = ctEnum.getFactory().Core().createEnum();
        aCtEnum.setAnnotations(this.cloneHelper.clone(ctEnum.getAnnotations()));
        aCtEnum.setSuperInterfaces(this.cloneHelper.clone(ctEnum.getSuperInterfaces()));
        aCtEnum.setTypeMembers(this.cloneHelper.clone(ctEnum.getTypeMembers()));
        aCtEnum.setEnumValues(this.cloneHelper.clone(ctEnum.getEnumValues()));
        aCtEnum.setComments(this.cloneHelper.clone(ctEnum.getComments()));
        this.builder.copy(ctEnum, aCtEnum);
        this.cloneHelper.tailor(ctEnum, aCtEnum);
        this.other = aCtEnum;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtExecutableReference(final spoon.reflect.reference.CtExecutableReference<T> reference) {
        spoon.reflect.reference.CtExecutableReference<T> aCtExecutableReference = reference.getFactory().Core().createExecutableReference();
        aCtExecutableReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtExecutableReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtExecutableReference.setParameters(this.cloneHelper.clone(reference.getParameters()));
        aCtExecutableReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));
        aCtExecutableReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        aCtExecutableReference.setComments(this.cloneHelper.clone(reference.getComments()));
        this.builder.copy(reference, aCtExecutableReference);
        this.cloneHelper.tailor(reference, aCtExecutableReference);
        this.other = aCtExecutableReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtField(final spoon.reflect.declaration.CtField<T> f) {
        spoon.reflect.declaration.CtField<T> aCtField = f.getFactory().Core().createField();
        aCtField.setAnnotations(this.cloneHelper.clone(f.getAnnotations()));
        aCtField.setType(this.cloneHelper.clone(f.getType()));
        aCtField.setDefaultExpression(this.cloneHelper.clone(f.getDefaultExpression()));
        aCtField.setComments(this.cloneHelper.clone(f.getComments()));
        this.builder.copy(f, aCtField);
        this.cloneHelper.tailor(f, aCtField);
        this.other = aCtField;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtEnumValue(final spoon.reflect.declaration.CtEnumValue<T> enumValue) {
        spoon.reflect.declaration.CtEnumValue<T> aCtEnumValue = enumValue.getFactory().Core().createEnumValue();
        aCtEnumValue.setAnnotations(this.cloneHelper.clone(enumValue.getAnnotations()));
        aCtEnumValue.setType(this.cloneHelper.clone(enumValue.getType()));
        aCtEnumValue.setDefaultExpression(this.cloneHelper.clone(enumValue.getDefaultExpression()));
        aCtEnumValue.setComments(this.cloneHelper.clone(enumValue.getComments()));
        this.builder.copy(enumValue, aCtEnumValue);
        this.cloneHelper.tailor(enumValue, aCtEnumValue);
        this.other = aCtEnumValue;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtThisAccess(final spoon.reflect.code.CtThisAccess<T> thisAccess) {
        spoon.reflect.code.CtThisAccess<T> aCtThisAccess = thisAccess.getFactory().Core().createThisAccess();
        aCtThisAccess.setComments(this.cloneHelper.clone(thisAccess.getComments()));
        aCtThisAccess.setAnnotations(this.cloneHelper.clone(thisAccess.getAnnotations()));
        aCtThisAccess.setType(this.cloneHelper.clone(thisAccess.getType()));
        aCtThisAccess.setTypeCasts(this.cloneHelper.clone(thisAccess.getTypeCasts()));
        aCtThisAccess.setTarget(this.cloneHelper.clone(thisAccess.getTarget()));
        this.builder.copy(thisAccess, aCtThisAccess);
        this.cloneHelper.tailor(thisAccess, aCtThisAccess);
        this.other = aCtThisAccess;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtAnnotationFieldAccess(final spoon.reflect.code.CtAnnotationFieldAccess<T> annotationFieldAccess) {
        spoon.reflect.code.CtAnnotationFieldAccess<T> aCtAnnotationFieldAccess = annotationFieldAccess.getFactory().Core().createAnnotationFieldAccess();
        aCtAnnotationFieldAccess.setComments(this.cloneHelper.clone(annotationFieldAccess.getComments()));
        aCtAnnotationFieldAccess.setAnnotations(this.cloneHelper.clone(annotationFieldAccess.getAnnotations()));
        aCtAnnotationFieldAccess.setTypeCasts(this.cloneHelper.clone(annotationFieldAccess.getTypeCasts()));
        aCtAnnotationFieldAccess.setTarget(this.cloneHelper.clone(annotationFieldAccess.getTarget()));
        aCtAnnotationFieldAccess.setVariable(this.cloneHelper.clone(annotationFieldAccess.getVariable()));
        this.builder.copy(annotationFieldAccess, aCtAnnotationFieldAccess);
        this.cloneHelper.tailor(annotationFieldAccess, aCtAnnotationFieldAccess);
        this.other = aCtAnnotationFieldAccess;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtFieldReference(final spoon.reflect.reference.CtFieldReference<T> reference) {
        spoon.reflect.reference.CtFieldReference<T> aCtFieldReference = reference.getFactory().Core().createFieldReference();
        aCtFieldReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtFieldReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtFieldReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.builder.copy(reference, aCtFieldReference);
        this.cloneHelper.tailor(reference, aCtFieldReference);
        this.other = aCtFieldReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public void visitCtFor(final spoon.reflect.code.CtFor forLoop) {
        spoon.reflect.code.CtFor aCtFor = forLoop.getFactory().Core().createFor();
        aCtFor.setAnnotations(this.cloneHelper.clone(forLoop.getAnnotations()));
        aCtFor.setForInit(this.cloneHelper.clone(forLoop.getForInit()));
        aCtFor.setExpression(this.cloneHelper.clone(forLoop.getExpression()));
        aCtFor.setForUpdate(this.cloneHelper.clone(forLoop.getForUpdate()));
        aCtFor.setBody(this.cloneHelper.clone(forLoop.getBody()));
        aCtFor.setComments(this.cloneHelper.clone(forLoop.getComments()));
        this.builder.copy(forLoop, aCtFor);
        this.cloneHelper.tailor(forLoop, aCtFor);
        this.other = aCtFor;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public void visitCtForEach(final spoon.reflect.code.CtForEach foreach) {
        spoon.reflect.code.CtForEach aCtForEach = foreach.getFactory().Core().createForEach();
        aCtForEach.setAnnotations(this.cloneHelper.clone(foreach.getAnnotations()));
        aCtForEach.setVariable(this.cloneHelper.clone(foreach.getVariable()));
        aCtForEach.setExpression(this.cloneHelper.clone(foreach.getExpression()));
        aCtForEach.setBody(this.cloneHelper.clone(foreach.getBody()));
        aCtForEach.setComments(this.cloneHelper.clone(foreach.getComments()));
        this.builder.copy(foreach, aCtForEach);
        this.cloneHelper.tailor(foreach, aCtForEach);
        this.other = aCtForEach;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public void visitCtIf(final spoon.reflect.code.CtIf ifElement) {
        spoon.reflect.code.CtIf aCtIf = ifElement.getFactory().Core().createIf();
        aCtIf.setAnnotations(this.cloneHelper.clone(ifElement.getAnnotations()));
        aCtIf.setCondition(this.cloneHelper.clone(ifElement.getCondition()));
        aCtIf.setThenStatement(this.cloneHelper.clone(((spoon.reflect.code.CtStatement) (ifElement.getThenStatement()))));
        aCtIf.setElseStatement(this.cloneHelper.clone(((spoon.reflect.code.CtStatement) (ifElement.getElseStatement()))));
        aCtIf.setComments(this.cloneHelper.clone(ifElement.getComments()));
        this.builder.copy(ifElement, aCtIf);
        this.cloneHelper.tailor(ifElement, aCtIf);
        this.other = aCtIf;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtInterface(final spoon.reflect.declaration.CtInterface<T> intrface) {
        spoon.reflect.declaration.CtInterface<T> aCtInterface = intrface.getFactory().Core().createInterface();
        aCtInterface.setAnnotations(this.cloneHelper.clone(intrface.getAnnotations()));
        aCtInterface.setSuperInterfaces(this.cloneHelper.clone(intrface.getSuperInterfaces()));
        aCtInterface.setFormalCtTypeParameters(this.cloneHelper.clone(intrface.getFormalCtTypeParameters()));
        aCtInterface.setTypeMembers(this.cloneHelper.clone(intrface.getTypeMembers()));
        aCtInterface.setComments(this.cloneHelper.clone(intrface.getComments()));
        this.builder.copy(intrface, aCtInterface);
        this.cloneHelper.tailor(intrface, aCtInterface);
        this.other = aCtInterface;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtInvocation(final spoon.reflect.code.CtInvocation<T> invocation) {
        spoon.reflect.code.CtInvocation<T> aCtInvocation = invocation.getFactory().Core().createInvocation();
        aCtInvocation.setAnnotations(this.cloneHelper.clone(invocation.getAnnotations()));
        aCtInvocation.setTypeCasts(this.cloneHelper.clone(invocation.getTypeCasts()));
        aCtInvocation.setTarget(this.cloneHelper.clone(invocation.getTarget()));
        aCtInvocation.setExecutable(this.cloneHelper.clone(invocation.getExecutable()));
        aCtInvocation.setArguments(this.cloneHelper.clone(invocation.getArguments()));
        aCtInvocation.setComments(this.cloneHelper.clone(invocation.getComments()));
        this.builder.copy(invocation, aCtInvocation);
        this.cloneHelper.tailor(invocation, aCtInvocation);
        this.other = aCtInvocation;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtLiteral(final spoon.reflect.code.CtLiteral<T> literal) {
        spoon.reflect.code.CtLiteral<T> aCtLiteral = literal.getFactory().Core().createLiteral();
        aCtLiteral.setAnnotations(this.cloneHelper.clone(literal.getAnnotations()));
        aCtLiteral.setType(this.cloneHelper.clone(literal.getType()));
        aCtLiteral.setTypeCasts(this.cloneHelper.clone(literal.getTypeCasts()));
        aCtLiteral.setComments(this.cloneHelper.clone(literal.getComments()));
        this.builder.copy(literal, aCtLiteral);
        this.cloneHelper.tailor(literal, aCtLiteral);
        this.other = aCtLiteral;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtLocalVariable(final spoon.reflect.code.CtLocalVariable<T> localVariable) {
        spoon.reflect.code.CtLocalVariable<T> aCtLocalVariable = localVariable.getFactory().Core().createLocalVariable();
        aCtLocalVariable.setAnnotations(this.cloneHelper.clone(localVariable.getAnnotations()));
        aCtLocalVariable.setType(this.cloneHelper.clone(localVariable.getType()));
        aCtLocalVariable.setDefaultExpression(this.cloneHelper.clone(localVariable.getDefaultExpression()));
        aCtLocalVariable.setComments(this.cloneHelper.clone(localVariable.getComments()));
        this.builder.copy(localVariable, aCtLocalVariable);
        this.cloneHelper.tailor(localVariable, aCtLocalVariable);
        this.other = aCtLocalVariable;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtLocalVariableReference(final spoon.reflect.reference.CtLocalVariableReference<T> reference) {
        spoon.reflect.reference.CtLocalVariableReference<T> aCtLocalVariableReference = reference.getFactory().Core().createLocalVariableReference();
        aCtLocalVariableReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtLocalVariableReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.builder.copy(reference, aCtLocalVariableReference);
        this.cloneHelper.tailor(reference, aCtLocalVariableReference);
        this.other = aCtLocalVariableReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtCatchVariable(final spoon.reflect.code.CtCatchVariable<T> catchVariable) {
        spoon.reflect.code.CtCatchVariable<T> aCtCatchVariable = catchVariable.getFactory().Core().createCatchVariable();
        aCtCatchVariable.setComments(this.cloneHelper.clone(catchVariable.getComments()));
        aCtCatchVariable.setAnnotations(this.cloneHelper.clone(catchVariable.getAnnotations()));
        aCtCatchVariable.setMultiTypes(this.cloneHelper.clone(catchVariable.getMultiTypes()));
        this.builder.copy(catchVariable, aCtCatchVariable);
        this.cloneHelper.tailor(catchVariable, aCtCatchVariable);
        this.other = aCtCatchVariable;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtCatchVariableReference(final spoon.reflect.reference.CtCatchVariableReference<T> reference) {
        spoon.reflect.reference.CtCatchVariableReference<T> aCtCatchVariableReference = reference.getFactory().Core().createCatchVariableReference();
        aCtCatchVariableReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtCatchVariableReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.builder.copy(reference, aCtCatchVariableReference);
        this.cloneHelper.tailor(reference, aCtCatchVariableReference);
        this.other = aCtCatchVariableReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtMethod(final spoon.reflect.declaration.CtMethod<T> m) {
        spoon.reflect.declaration.CtMethod<T> aCtMethod = m.getFactory().Core().createMethod();
        aCtMethod.setAnnotations(this.cloneHelper.clone(m.getAnnotations()));
        aCtMethod.setFormalCtTypeParameters(this.cloneHelper.clone(m.getFormalCtTypeParameters()));
        aCtMethod.setType(this.cloneHelper.clone(m.getType()));
        aCtMethod.setParameters(this.cloneHelper.clone(m.getParameters()));
        aCtMethod.setThrownTypes(this.cloneHelper.clone(m.getThrownTypes()));
        aCtMethod.setBody(this.cloneHelper.clone(m.getBody()));
        aCtMethod.setComments(this.cloneHelper.clone(m.getComments()));
        this.builder.copy(m, aCtMethod);
        this.cloneHelper.tailor(m, aCtMethod);
        this.other = aCtMethod;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod<T> annotationMethod) {
        spoon.reflect.declaration.CtAnnotationMethod<T> aCtAnnotationMethod = annotationMethod.getFactory().Core().createAnnotationMethod();
        aCtAnnotationMethod.setAnnotations(this.cloneHelper.clone(annotationMethod.getAnnotations()));
        aCtAnnotationMethod.setType(this.cloneHelper.clone(annotationMethod.getType()));
        aCtAnnotationMethod.setDefaultExpression(this.cloneHelper.clone(annotationMethod.getDefaultExpression()));
        aCtAnnotationMethod.setComments(this.cloneHelper.clone(annotationMethod.getComments()));
        this.builder.copy(annotationMethod, aCtAnnotationMethod);
        this.cloneHelper.tailor(annotationMethod, aCtAnnotationMethod);
        this.other = aCtAnnotationMethod;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtNewArray(final spoon.reflect.code.CtNewArray<T> newArray) {
        spoon.reflect.code.CtNewArray<T> aCtNewArray = newArray.getFactory().Core().createNewArray();
        aCtNewArray.setAnnotations(this.cloneHelper.clone(newArray.getAnnotations()));
        aCtNewArray.setType(this.cloneHelper.clone(newArray.getType()));
        aCtNewArray.setTypeCasts(this.cloneHelper.clone(newArray.getTypeCasts()));
        aCtNewArray.setElements(this.cloneHelper.clone(newArray.getElements()));
        aCtNewArray.setDimensionExpressions(this.cloneHelper.clone(newArray.getDimensionExpressions()));
        aCtNewArray.setComments(this.cloneHelper.clone(newArray.getComments()));
        this.builder.copy(newArray, aCtNewArray);
        this.cloneHelper.tailor(newArray, aCtNewArray);
        this.other = aCtNewArray;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtConstructorCall(final spoon.reflect.code.CtConstructorCall<T> ctConstructorCall) {
        spoon.reflect.code.CtConstructorCall<T> aCtConstructorCall = ctConstructorCall.getFactory().Core().createConstructorCall();
        aCtConstructorCall.setAnnotations(this.cloneHelper.clone(ctConstructorCall.getAnnotations()));
        aCtConstructorCall.setTypeCasts(this.cloneHelper.clone(ctConstructorCall.getTypeCasts()));
        aCtConstructorCall.setExecutable(this.cloneHelper.clone(ctConstructorCall.getExecutable()));
        aCtConstructorCall.setTarget(this.cloneHelper.clone(ctConstructorCall.getTarget()));
        aCtConstructorCall.setArguments(this.cloneHelper.clone(ctConstructorCall.getArguments()));
        aCtConstructorCall.setComments(this.cloneHelper.clone(ctConstructorCall.getComments()));
        this.builder.copy(ctConstructorCall, aCtConstructorCall);
        this.cloneHelper.tailor(ctConstructorCall, aCtConstructorCall);
        this.other = aCtConstructorCall;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtNewClass(final spoon.reflect.code.CtNewClass<T> newClass) {
        spoon.reflect.code.CtNewClass<T> aCtNewClass = newClass.getFactory().Core().createNewClass();
        aCtNewClass.setAnnotations(this.cloneHelper.clone(newClass.getAnnotations()));
        aCtNewClass.setTypeCasts(this.cloneHelper.clone(newClass.getTypeCasts()));
        aCtNewClass.setExecutable(this.cloneHelper.clone(newClass.getExecutable()));
        aCtNewClass.setTarget(this.cloneHelper.clone(newClass.getTarget()));
        aCtNewClass.setArguments(this.cloneHelper.clone(newClass.getArguments()));
        aCtNewClass.setAnonymousClass(this.cloneHelper.clone(newClass.getAnonymousClass()));
        aCtNewClass.setComments(this.cloneHelper.clone(newClass.getComments()));
        this.builder.copy(newClass, aCtNewClass);
        this.cloneHelper.tailor(newClass, aCtNewClass);
        this.other = aCtNewClass;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtLambda(final spoon.reflect.code.CtLambda<T> lambda) {
        spoon.reflect.code.CtLambda<T> aCtLambda = lambda.getFactory().Core().createLambda();
        aCtLambda.setAnnotations(this.cloneHelper.clone(lambda.getAnnotations()));
        aCtLambda.setType(this.cloneHelper.clone(lambda.getType()));
        aCtLambda.setTypeCasts(this.cloneHelper.clone(lambda.getTypeCasts()));
        aCtLambda.setParameters(this.cloneHelper.clone(lambda.getParameters()));
        aCtLambda.setBody(this.cloneHelper.clone(lambda.getBody()));
        aCtLambda.setExpression(this.cloneHelper.clone(lambda.getExpression()));
        aCtLambda.setComments(this.cloneHelper.clone(lambda.getComments()));
        this.builder.copy(lambda, aCtLambda);
        this.cloneHelper.tailor(lambda, aCtLambda);
        this.other = aCtLambda;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T, E extends spoon.reflect.code.CtExpression<?>> void visitCtExecutableReferenceExpression(final spoon.reflect.code.CtExecutableReferenceExpression<T, E> expression) {
        spoon.reflect.code.CtExecutableReferenceExpression<T, E> aCtExecutableReferenceExpression = expression.getFactory().Core().createExecutableReferenceExpression();
        aCtExecutableReferenceExpression.setComments(this.cloneHelper.clone(expression.getComments()));
        aCtExecutableReferenceExpression.setAnnotations(this.cloneHelper.clone(expression.getAnnotations()));
        aCtExecutableReferenceExpression.setType(this.cloneHelper.clone(expression.getType()));
        aCtExecutableReferenceExpression.setTypeCasts(this.cloneHelper.clone(expression.getTypeCasts()));
        aCtExecutableReferenceExpression.setExecutable(this.cloneHelper.clone(expression.getExecutable()));
        aCtExecutableReferenceExpression.setTarget(this.cloneHelper.clone(expression.getTarget()));
        this.builder.copy(expression, aCtExecutableReferenceExpression);
        this.cloneHelper.tailor(expression, aCtExecutableReferenceExpression);
        this.other = aCtExecutableReferenceExpression;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T, A extends T> void visitCtOperatorAssignment(final spoon.reflect.code.CtOperatorAssignment<T, A> assignment) {
        spoon.reflect.code.CtOperatorAssignment<T, A> aCtOperatorAssignment = assignment.getFactory().Core().createOperatorAssignment();
        aCtOperatorAssignment.setAnnotations(this.cloneHelper.clone(assignment.getAnnotations()));
        aCtOperatorAssignment.setType(this.cloneHelper.clone(assignment.getType()));
        aCtOperatorAssignment.setTypeCasts(this.cloneHelper.clone(assignment.getTypeCasts()));
        aCtOperatorAssignment.setAssigned(this.cloneHelper.clone(assignment.getAssigned()));
        aCtOperatorAssignment.setAssignment(this.cloneHelper.clone(assignment.getAssignment()));
        aCtOperatorAssignment.setComments(this.cloneHelper.clone(assignment.getComments()));
        this.builder.copy(assignment, aCtOperatorAssignment);
        this.cloneHelper.tailor(assignment, aCtOperatorAssignment);
        this.other = aCtOperatorAssignment;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public void visitCtPackage(final spoon.reflect.declaration.CtPackage ctPackage) {
        spoon.reflect.declaration.CtPackage aCtPackage = ctPackage.getFactory().Core().createPackage();
        aCtPackage.setAnnotations(this.cloneHelper.clone(ctPackage.getAnnotations()));
        aCtPackage.setPackages(this.cloneHelper.clone(ctPackage.getPackages()));
        aCtPackage.setTypes(this.cloneHelper.clone(ctPackage.getTypes()));
        aCtPackage.setComments(this.cloneHelper.clone(ctPackage.getComments()));
        this.builder.copy(ctPackage, aCtPackage);
        this.cloneHelper.tailor(ctPackage, aCtPackage);
        this.other = aCtPackage;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public void visitCtPackageReference(final spoon.reflect.reference.CtPackageReference reference) {
        spoon.reflect.reference.CtPackageReference aCtPackageReference = reference.getFactory().Core().createPackageReference();
        aCtPackageReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.builder.copy(reference, aCtPackageReference);
        this.cloneHelper.tailor(reference, aCtPackageReference);
        this.other = aCtPackageReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtParameter(final spoon.reflect.declaration.CtParameter<T> parameter) {
        spoon.reflect.declaration.CtParameter<T> aCtParameter = parameter.getFactory().Core().createParameter();
        aCtParameter.setAnnotations(this.cloneHelper.clone(parameter.getAnnotations()));
        aCtParameter.setType(this.cloneHelper.clone(parameter.getType()));
        aCtParameter.setComments(this.cloneHelper.clone(parameter.getComments()));
        this.builder.copy(parameter, aCtParameter);
        this.cloneHelper.tailor(parameter, aCtParameter);
        this.other = aCtParameter;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtParameterReference(final spoon.reflect.reference.CtParameterReference<T> reference) {
        spoon.reflect.reference.CtParameterReference<T> aCtParameterReference = reference.getFactory().Core().createParameterReference();
        aCtParameterReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtParameterReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.builder.copy(reference, aCtParameterReference);
        this.cloneHelper.tailor(reference, aCtParameterReference);
        this.other = aCtParameterReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <R> void visitCtReturn(final spoon.reflect.code.CtReturn<R> returnStatement) {
        spoon.reflect.code.CtReturn<R> aCtReturn = returnStatement.getFactory().Core().createReturn();
        aCtReturn.setAnnotations(this.cloneHelper.clone(returnStatement.getAnnotations()));
        aCtReturn.setReturnedExpression(this.cloneHelper.clone(returnStatement.getReturnedExpression()));
        aCtReturn.setComments(this.cloneHelper.clone(returnStatement.getComments()));
        this.builder.copy(returnStatement, aCtReturn);
        this.cloneHelper.tailor(returnStatement, aCtReturn);
        this.other = aCtReturn;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <R> void visitCtStatementList(final spoon.reflect.code.CtStatementList statements) {
        spoon.reflect.code.CtStatementList aCtStatementList = statements.getFactory().Core().createStatementList();
        aCtStatementList.setAnnotations(this.cloneHelper.clone(statements.getAnnotations()));
        aCtStatementList.setStatements(this.cloneHelper.clone(statements.getStatements()));
        aCtStatementList.setComments(this.cloneHelper.clone(statements.getComments()));
        this.builder.copy(statements, aCtStatementList);
        this.cloneHelper.tailor(statements, aCtStatementList);
        this.other = aCtStatementList;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <S> void visitCtSwitch(final spoon.reflect.code.CtSwitch<S> switchStatement) {
        spoon.reflect.code.CtSwitch<S> aCtSwitch = switchStatement.getFactory().Core().createSwitch();
        aCtSwitch.setAnnotations(this.cloneHelper.clone(switchStatement.getAnnotations()));
        aCtSwitch.setSelector(this.cloneHelper.clone(switchStatement.getSelector()));
        aCtSwitch.setCases(this.cloneHelper.clone(switchStatement.getCases()));
        aCtSwitch.setComments(this.cloneHelper.clone(switchStatement.getComments()));
        this.builder.copy(switchStatement, aCtSwitch);
        this.cloneHelper.tailor(switchStatement, aCtSwitch);
        this.other = aCtSwitch;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public void visitCtSynchronized(final spoon.reflect.code.CtSynchronized synchro) {
        spoon.reflect.code.CtSynchronized aCtSynchronized = synchro.getFactory().Core().createSynchronized();
        aCtSynchronized.setAnnotations(this.cloneHelper.clone(synchro.getAnnotations()));
        aCtSynchronized.setExpression(this.cloneHelper.clone(synchro.getExpression()));
        aCtSynchronized.setBlock(this.cloneHelper.clone(synchro.getBlock()));
        aCtSynchronized.setComments(this.cloneHelper.clone(synchro.getComments()));
        this.builder.copy(synchro, aCtSynchronized);
        this.cloneHelper.tailor(synchro, aCtSynchronized);
        this.other = aCtSynchronized;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public void visitCtThrow(final spoon.reflect.code.CtThrow throwStatement) {
        spoon.reflect.code.CtThrow aCtThrow = throwStatement.getFactory().Core().createThrow();
        aCtThrow.setAnnotations(this.cloneHelper.clone(throwStatement.getAnnotations()));
        aCtThrow.setThrownExpression(this.cloneHelper.clone(throwStatement.getThrownExpression()));
        aCtThrow.setComments(this.cloneHelper.clone(throwStatement.getComments()));
        this.builder.copy(throwStatement, aCtThrow);
        this.cloneHelper.tailor(throwStatement, aCtThrow);
        this.other = aCtThrow;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public void visitCtTry(final spoon.reflect.code.CtTry tryBlock) {
        spoon.reflect.code.CtTry aCtTry = tryBlock.getFactory().Core().createTry();
        aCtTry.setAnnotations(this.cloneHelper.clone(tryBlock.getAnnotations()));
        aCtTry.setBody(this.cloneHelper.clone(tryBlock.getBody()));
        aCtTry.setCatchers(this.cloneHelper.clone(tryBlock.getCatchers()));
        aCtTry.setFinalizer(this.cloneHelper.clone(tryBlock.getFinalizer()));
        aCtTry.setComments(this.cloneHelper.clone(tryBlock.getComments()));
        this.builder.copy(tryBlock, aCtTry);
        this.cloneHelper.tailor(tryBlock, aCtTry);
        this.other = aCtTry;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtTryWithResource(final spoon.reflect.code.CtTryWithResource tryWithResource) {
        spoon.reflect.code.CtTryWithResource aCtTryWithResource = tryWithResource.getFactory().Core().createTryWithResource();
        aCtTryWithResource.setAnnotations(this.cloneHelper.clone(tryWithResource.getAnnotations()));
        aCtTryWithResource.setResources(this.cloneHelper.clone(tryWithResource.getResources()));
        aCtTryWithResource.setBody(this.cloneHelper.clone(tryWithResource.getBody()));
        aCtTryWithResource.setCatchers(this.cloneHelper.clone(tryWithResource.getCatchers()));
        aCtTryWithResource.setFinalizer(this.cloneHelper.clone(tryWithResource.getFinalizer()));
        aCtTryWithResource.setComments(this.cloneHelper.clone(tryWithResource.getComments()));
        this.builder.copy(tryWithResource, aCtTryWithResource);
        this.cloneHelper.tailor(tryWithResource, aCtTryWithResource);
        this.other = aCtTryWithResource;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public void visitCtTypeParameterReference(final spoon.reflect.reference.CtTypeParameterReference ref) {
        spoon.reflect.reference.CtTypeParameterReference aCtTypeParameterReference = ref.getFactory().Core().createTypeParameterReference();
        aCtTypeParameterReference.setPackage(this.cloneHelper.clone(ref.getPackage()));
        aCtTypeParameterReference.setDeclaringType(this.cloneHelper.clone(ref.getDeclaringType()));
        aCtTypeParameterReference.setAnnotations(this.cloneHelper.clone(ref.getAnnotations()));
        aCtTypeParameterReference.setBoundingType(this.cloneHelper.clone(ref.getBoundingType()));
        this.builder.copy(ref, aCtTypeParameterReference);
        this.cloneHelper.tailor(ref, aCtTypeParameterReference);
        this.other = aCtTypeParameterReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference wildcardReference) {
        spoon.reflect.reference.CtWildcardReference aCtWildcardReference = wildcardReference.getFactory().Core().createWildcardReference();
        aCtWildcardReference.setPackage(this.cloneHelper.clone(wildcardReference.getPackage()));
        aCtWildcardReference.setDeclaringType(this.cloneHelper.clone(wildcardReference.getDeclaringType()));
        aCtWildcardReference.setAnnotations(this.cloneHelper.clone(wildcardReference.getAnnotations()));
        aCtWildcardReference.setBoundingType(this.cloneHelper.clone(wildcardReference.getBoundingType()));
        this.builder.copy(wildcardReference, aCtWildcardReference);
        this.cloneHelper.tailor(wildcardReference, aCtWildcardReference);
        this.other = aCtWildcardReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtIntersectionTypeReference(final spoon.reflect.reference.CtIntersectionTypeReference<T> reference) {
        spoon.reflect.reference.CtIntersectionTypeReference<T> aCtIntersectionTypeReference = reference.getFactory().Core().createIntersectionTypeReference();
        aCtIntersectionTypeReference.setPackage(this.cloneHelper.clone(reference.getPackage()));
        aCtIntersectionTypeReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtIntersectionTypeReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));
        aCtIntersectionTypeReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        aCtIntersectionTypeReference.setBounds(this.cloneHelper.clone(reference.getBounds()));
        this.builder.copy(reference, aCtIntersectionTypeReference);
        this.cloneHelper.tailor(reference, aCtIntersectionTypeReference);
        this.other = aCtIntersectionTypeReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtTypeReference(final spoon.reflect.reference.CtTypeReference<T> reference) {
        spoon.reflect.reference.CtTypeReference<T> aCtTypeReference = reference.getFactory().Core().createTypeReference();
        aCtTypeReference.setPackage(this.cloneHelper.clone(reference.getPackage()));
        aCtTypeReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtTypeReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));
        aCtTypeReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        aCtTypeReference.setComments(this.cloneHelper.clone(reference.getComments()));
        this.builder.copy(reference, aCtTypeReference);
        this.cloneHelper.tailor(reference, aCtTypeReference);
        this.other = aCtTypeReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtTypeAccess(final spoon.reflect.code.CtTypeAccess<T> typeAccess) {
        spoon.reflect.code.CtTypeAccess<T> aCtTypeAccess = typeAccess.getFactory().Core().createTypeAccess();
        aCtTypeAccess.setAnnotations(this.cloneHelper.clone(typeAccess.getAnnotations()));
        aCtTypeAccess.setTypeCasts(this.cloneHelper.clone(typeAccess.getTypeCasts()));
        aCtTypeAccess.setAccessedType(this.cloneHelper.clone(typeAccess.getAccessedType()));
        aCtTypeAccess.setComments(this.cloneHelper.clone(typeAccess.getComments()));
        this.builder.copy(typeAccess, aCtTypeAccess);
        this.cloneHelper.tailor(typeAccess, aCtTypeAccess);
        this.other = aCtTypeAccess;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtUnaryOperator(final spoon.reflect.code.CtUnaryOperator<T> operator) {
        spoon.reflect.code.CtUnaryOperator<T> aCtUnaryOperator = operator.getFactory().Core().createUnaryOperator();
        aCtUnaryOperator.setAnnotations(this.cloneHelper.clone(operator.getAnnotations()));
        aCtUnaryOperator.setType(this.cloneHelper.clone(operator.getType()));
        aCtUnaryOperator.setTypeCasts(this.cloneHelper.clone(operator.getTypeCasts()));
        aCtUnaryOperator.setOperand(this.cloneHelper.clone(operator.getOperand()));
        aCtUnaryOperator.setComments(this.cloneHelper.clone(operator.getComments()));
        this.builder.copy(operator, aCtUnaryOperator);
        this.cloneHelper.tailor(operator, aCtUnaryOperator);
        this.other = aCtUnaryOperator;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtVariableRead(final spoon.reflect.code.CtVariableRead<T> variableRead) {
        spoon.reflect.code.CtVariableRead<T> aCtVariableRead = variableRead.getFactory().Core().createVariableRead();
        aCtVariableRead.setAnnotations(this.cloneHelper.clone(variableRead.getAnnotations()));
        aCtVariableRead.setTypeCasts(this.cloneHelper.clone(variableRead.getTypeCasts()));
        aCtVariableRead.setVariable(this.cloneHelper.clone(variableRead.getVariable()));
        aCtVariableRead.setComments(this.cloneHelper.clone(variableRead.getComments()));
        this.builder.copy(variableRead, aCtVariableRead);
        this.cloneHelper.tailor(variableRead, aCtVariableRead);
        this.other = aCtVariableRead;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtVariableWrite(final spoon.reflect.code.CtVariableWrite<T> variableWrite) {
        spoon.reflect.code.CtVariableWrite<T> aCtVariableWrite = variableWrite.getFactory().Core().createVariableWrite();
        aCtVariableWrite.setAnnotations(this.cloneHelper.clone(variableWrite.getAnnotations()));
        aCtVariableWrite.setTypeCasts(this.cloneHelper.clone(variableWrite.getTypeCasts()));
        aCtVariableWrite.setVariable(this.cloneHelper.clone(variableWrite.getVariable()));
        aCtVariableWrite.setComments(this.cloneHelper.clone(variableWrite.getComments()));
        this.builder.copy(variableWrite, aCtVariableWrite);
        this.cloneHelper.tailor(variableWrite, aCtVariableWrite);
        this.other = aCtVariableWrite;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public void visitCtWhile(final spoon.reflect.code.CtWhile whileLoop) {
        spoon.reflect.code.CtWhile aCtWhile = whileLoop.getFactory().Core().createWhile();
        aCtWhile.setAnnotations(this.cloneHelper.clone(whileLoop.getAnnotations()));
        aCtWhile.setLoopingExpression(this.cloneHelper.clone(whileLoop.getLoopingExpression()));
        aCtWhile.setBody(this.cloneHelper.clone(whileLoop.getBody()));
        aCtWhile.setComments(this.cloneHelper.clone(whileLoop.getComments()));
        this.builder.copy(whileLoop, aCtWhile);
        this.cloneHelper.tailor(whileLoop, aCtWhile);
        this.other = aCtWhile;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtCodeSnippetExpression(final spoon.reflect.code.CtCodeSnippetExpression<T> expression) {
        spoon.reflect.code.CtCodeSnippetExpression<T> aCtCodeSnippetExpression = expression.getFactory().Core().createCodeSnippetExpression();
        aCtCodeSnippetExpression.setType(this.cloneHelper.clone(expression.getType()));
        aCtCodeSnippetExpression.setComments(this.cloneHelper.clone(expression.getComments()));
        aCtCodeSnippetExpression.setAnnotations(this.cloneHelper.clone(expression.getAnnotations()));
        aCtCodeSnippetExpression.setTypeCasts(this.cloneHelper.clone(expression.getTypeCasts()));
        this.builder.copy(expression, aCtCodeSnippetExpression);
        this.cloneHelper.tailor(expression, aCtCodeSnippetExpression);
        this.other = aCtCodeSnippetExpression;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public void visitCtCodeSnippetStatement(final spoon.reflect.code.CtCodeSnippetStatement statement) {
        spoon.reflect.code.CtCodeSnippetStatement aCtCodeSnippetStatement = statement.getFactory().Core().createCodeSnippetStatement();
        aCtCodeSnippetStatement.setComments(this.cloneHelper.clone(statement.getComments()));
        aCtCodeSnippetStatement.setAnnotations(this.cloneHelper.clone(statement.getAnnotations()));
        this.builder.copy(statement, aCtCodeSnippetStatement);
        this.cloneHelper.tailor(statement, aCtCodeSnippetStatement);
        this.other = aCtCodeSnippetStatement;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator]
    public <T> void...> but was:<...isitorGenerator
    [@java.lang.Override
    public <A extends java.lang.annotation.Annotation> void visitCtAnnotation(final spoon.reflect.declaration.CtAnnotation<A> annotation) {
        spoon.reflect.declaration.CtAnnotation<A> aCtAnnotation = annotation.getFactory().Core().createAnnotation();
        aCtAnnotation.setType(this.cloneHelper.clone(annotation.getType()));
        aCtAnnotation.setComments(this.cloneHelper.clone(annotation.getComments()));
        aCtAnnotation.setAnnotationType(this.cloneHelper.clone(annotation.getAnnotationType()));
        aCtAnnotation.setAnnotations(this.cloneHelper.clone(annotation.getAnnotations()));
        aCtAnnotation.setValues(this.cloneHelper.clone(annotation.getValues()));
        this.builder.copy(annotation, aCtAnnotation);
        this.cloneHelper.tailor(annotation, aCtAnnotation);
        this.other = aCtAnnotation;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <A extends java.lang.annotation.Annotation> void visitCtAnnotationType(final spoon.reflect.declaration.CtAnnotationType<A> annotationType) {
        spoon.reflect.declaration.CtAnnotationType<A> aCtAnnotationType = annotationType.getFactory().Core().createAnnotationType();
        aCtAnnotationType.setAnnotations(this.cloneHelper.clone(annotationType.getAnnotations()));
        aCtAnnotationType.setTypeMembers(this.cloneHelper.clone(annotationType.getTypeMembers()));
        aCtAnnotationType.setComments(this.cloneHelper.clone(annotationType.getComments()));
        this.builder.copy(annotationType, aCtAnnotationType);
        this.cloneHelper.tailor(annotationType, aCtAnnotationType);
        this.other = aCtAnnotationType;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtAnonymousExecutable(final spoon.reflect.declaration.CtAnonymousExecutable anonymousExec) {
        spoon.reflect.declaration.CtAnonymousExecutable aCtAnonymousExecutable = anonymousExec.getFactory().Core().createAnonymousExecutable();
        aCtAnonymousExecutable.setAnnotations(this.cloneHelper.clone(anonymousExec.getAnnotations()));
        aCtAnonymousExecutable.setBody(this.cloneHelper.clone(anonymousExec.getBody()));
        aCtAnonymousExecutable.setComments(this.cloneHelper.clone(anonymousExec.getComments()));
        this.builder.copy(anonymousExec, aCtAnonymousExecutable);
        this.cloneHelper.tailor(anonymousExec, aCtAnonymousExecutable);
        this.other = aCtAnonymousExecutable;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtArrayRead(final spoon.reflect.code.CtArrayRead<T> arrayRead) {
        spoon.reflect.code.CtArrayRead<T> aCtArrayRead = arrayRead.getFactory().Core().createArrayRead();
        aCtArrayRead.setAnnotations(this.cloneHelper.clone(arrayRead.getAnnotations()));
        aCtArrayRead.setType(this.cloneHelper.clone(arrayRead.getType()));
        aCtArrayRead.setTypeCasts(this.cloneHelper.clone(arrayRead.getTypeCasts()));
        aCtArrayRead.setTarget(this.cloneHelper.clone(arrayRead.getTarget()));
        aCtArrayRead.setIndexExpression(this.cloneHelper.clone(arrayRead.getIndexExpression()));
        aCtArrayRead.setComments(this.cloneHelper.clone(arrayRead.getComments()));
        this.builder.copy(arrayRead, aCtArrayRead);
        this.cloneHelper.tailor(arrayRead, aCtArrayRead);
        this.other = aCtArrayRead;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtArrayWrite(final spoon.reflect.code.CtArrayWrite<T> arrayWrite) {
        spoon.reflect.code.CtArrayWrite<T> aCtArrayWrite = arrayWrite.getFactory().Core().createArrayWrite();
        aCtArrayWrite.setAnnotations(this.cloneHelper.clone(arrayWrite.getAnnotations()));
        aCtArrayWrite.setType(this.cloneHelper.clone(arrayWrite.getType()));
        aCtArrayWrite.setTypeCasts(this.cloneHelper.clone(arrayWrite.getTypeCasts()));
        aCtArrayWrite.setTarget(this.cloneHelper.clone(arrayWrite.getTarget()));
        aCtArrayWrite.setIndexExpression(this.cloneHelper.clone(arrayWrite.getIndexExpression()));
        aCtArrayWrite.setComments(this.cloneHelper.clone(arrayWrite.getComments()));
        this.builder.copy(arrayWrite, aCtArrayWrite);
        this.cloneHelper.tailor(arrayWrite, aCtArrayWrite);
        this.other = aCtArrayWrite;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtArrayTypeReference(final spoon.reflect.reference.CtArrayTypeReference<T> reference) {
        spoon.reflect.reference.CtArrayTypeReference<T> aCtArrayTypeReference = reference.getFactory().Core().createArrayTypeReference();
        aCtArrayTypeReference.setPackage(this.cloneHelper.clone(reference.getPackage()));
        aCtArrayTypeReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtArrayTypeReference.setComponentType(this.cloneHelper.clone(reference.getComponentType()));
        aCtArrayTypeReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));
        aCtArrayTypeReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.builder.copy(reference, aCtArrayTypeReference);
        this.cloneHelper.tailor(reference, aCtArrayTypeReference);
        this.other = aCtArrayTypeReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtAssert(final spoon.reflect.code.CtAssert<T> asserted) {
        spoon.reflect.code.CtAssert<T> aCtAssert = asserted.getFactory().Core().createAssert();
        aCtAssert.setAnnotations(this.cloneHelper.clone(asserted.getAnnotations()));
        aCtAssert.setAssertExpression(this.cloneHelper.clone(asserted.getAssertExpression()));
        aCtAssert.setExpression(this.cloneHelper.clone(asserted.getExpression()));
        aCtAssert.setComments(this.cloneHelper.clone(asserted.getComments()));
        this.builder.copy(asserted, aCtAssert);
        this.cloneHelper.tailor(asserted, aCtAssert);
        this.other = aCtAssert;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T, A extends T> void visitCtAssignment(final spoon.reflect.code.CtAssignment<T, A> assignement) {
        spoon.reflect.code.CtAssignment<T, A> aCtAssignment = assignement.getFactory().Core().createAssignment();
        aCtAssignment.setAnnotations(this.cloneHelper.clone(assignement.getAnnotations()));
        aCtAssignment.setType(this.cloneHelper.clone(assignement.getType()));
        aCtAssignment.setTypeCasts(this.cloneHelper.clone(assignement.getTypeCasts()));
        aCtAssignment.setAssigned(this.cloneHelper.clone(assignement.getAssigned()));
        aCtAssignment.setAssignment(this.cloneHelper.clone(assignement.getAssignment()));
        aCtAssignment.setComments(this.cloneHelper.clone(assignement.getComments()));
        this.builder.copy(assignement, aCtAssignment);
        this.cloneHelper.tailor(assignement, aCtAssignment);
        this.other = aCtAssignment;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtBinaryOperator(final spoon.reflect.code.CtBinaryOperator<T> operator) {
        spoon.reflect.code.CtBinaryOperator<T> aCtBinaryOperator = operator.getFactory().Core().createBinaryOperator();
        aCtBinaryOperator.setAnnotations(this.cloneHelper.clone(operator.getAnnotations()));
        aCtBinaryOperator.setType(this.cloneHelper.clone(operator.getType()));
        aCtBinaryOperator.setTypeCasts(this.cloneHelper.clone(operator.getTypeCasts()));
        aCtBinaryOperator.setLeftHandOperand(this.cloneHelper.clone(operator.getLeftHandOperand()));
        aCtBinaryOperator.setRightHandOperand(this.cloneHelper.clone(operator.getRightHandOperand()));
        aCtBinaryOperator.setComments(this.cloneHelper.clone(operator.getComments()));
        this.builder.copy(operator, aCtBinaryOperator);
        this.cloneHelper.tailor(operator, aCtBinaryOperator);
        this.other = aCtBinaryOperator;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <R> void visitCtBlock(final spoon.reflect.code.CtBlock<R> block) {
        spoon.reflect.code.CtBlock<R> aCtBlock = block.getFactory().Core().createBlock();
        aCtBlock.setAnnotations(this.cloneHelper.clone(block.getAnnotations()));
        aCtBlock.setStatements(this.cloneHelper.clone(block.getStatements()));
        aCtBlock.setComments(this.cloneHelper.clone(block.getComments()));
        this.builder.copy(block, aCtBlock);
        this.cloneHelper.tailor(block, aCtBlock);
        this.other = aCtBlock;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtBreak(final spoon.reflect.code.CtBreak breakStatement) {
        spoon.reflect.code.CtBreak aCtBreak = breakStatement.getFactory().Core().createBreak();
        aCtBreak.setAnnotations(this.cloneHelper.clone(breakStatement.getAnnotations()));
        aCtBreak.setComments(this.cloneHelper.clone(breakStatement.getComments()));
        this.builder.copy(breakStatement, aCtBreak);
        this.cloneHelper.tailor(breakStatement, aCtBreak);
        this.other = aCtBreak;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <S> void visitCtCase(final spoon.reflect.code.CtCase<S> caseStatement) {
        spoon.reflect.code.CtCase<S> aCtCase = caseStatement.getFactory().Core().createCase();
        aCtCase.setAnnotations(this.cloneHelper.clone(caseStatement.getAnnotations()));
        aCtCase.setCaseExpression(this.cloneHelper.clone(caseStatement.getCaseExpression()));
        aCtCase.setStatements(this.cloneHelper.clone(caseStatement.getStatements()));
        aCtCase.setComments(this.cloneHelper.clone(caseStatement.getComments()));
        this.builder.copy(caseStatement, aCtCase);
        this.cloneHelper.tailor(caseStatement, aCtCase);
        this.other = aCtCase;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtCatch(final spoon.reflect.code.CtCatch catchBlock) {
        spoon.reflect.code.CtCatch aCtCatch = catchBlock.getFactory().Core().createCatch();
        aCtCatch.setAnnotations(this.cloneHelper.clone(catchBlock.getAnnotations()));
        aCtCatch.setParameter(this.cloneHelper.clone(catchBlock.getParameter()));
        aCtCatch.setBody(this.cloneHelper.clone(catchBlock.getBody()));
        aCtCatch.setComments(this.cloneHelper.clone(catchBlock.getComments()));
        this.builder.copy(catchBlock, aCtCatch);
        this.cloneHelper.tailor(catchBlock, aCtCatch);
        this.other = aCtCatch;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtClass(final spoon.reflect.declaration.CtClass<T> ctClass) {
        spoon.reflect.declaration.CtClass<T> aCtClass = ctClass.getFactory().Core().createClass();
        aCtClass.setAnnotations(this.cloneHelper.clone(ctClass.getAnnotations()));
        aCtClass.setSuperclass(this.cloneHelper.clone(ctClass.getSuperclass()));
        aCtClass.setSuperInterfaces(this.cloneHelper.clone(ctClass.getSuperInterfaces()));
        aCtClass.setFormalCtTypeParameters(this.cloneHelper.clone(ctClass.getFormalCtTypeParameters()));
        aCtClass.setTypeMembers(this.cloneHelper.clone(ctClass.getTypeMembers()));
        aCtClass.setComments(this.cloneHelper.clone(ctClass.getComments()));
        this.builder.copy(ctClass, aCtClass);
        this.cloneHelper.tailor(ctClass, aCtClass);
        this.other = aCtClass;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter typeParameter) {
        spoon.reflect.declaration.CtTypeParameter aCtTypeParameter = typeParameter.getFactory().Core().createTypeParameter();
        aCtTypeParameter.setAnnotations(this.cloneHelper.clone(typeParameter.getAnnotations()));
        aCtTypeParameter.setSuperclass(this.cloneHelper.clone(typeParameter.getSuperclass()));
        aCtTypeParameter.setComments(this.cloneHelper.clone(typeParameter.getComments()));
        this.builder.copy(typeParameter, aCtTypeParameter);
        this.cloneHelper.tailor(typeParameter, aCtTypeParameter);
        this.other = aCtTypeParameter;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtConditional(final spoon.reflect.code.CtConditional<T> conditional) {
        spoon.reflect.code.CtConditional<T> aCtConditional = conditional.getFactory().Core().createConditional();
        aCtConditional.setType(this.cloneHelper.clone(conditional.getType()));
        aCtConditional.setAnnotations(this.cloneHelper.clone(conditional.getAnnotations()));
        aCtConditional.setCondition(this.cloneHelper.clone(conditional.getCondition()));
        aCtConditional.setThenExpression(this.cloneHelper.clone(conditional.getThenExpression()));
        aCtConditional.setElseExpression(this.cloneHelper.clone(conditional.getElseExpression()));
        aCtConditional.setComments(this.cloneHelper.clone(conditional.getComments()));
        aCtConditional.setTypeCasts(this.cloneHelper.clone(conditional.getTypeCasts()));
        this.builder.copy(conditional, aCtConditional);
        this.cloneHelper.tailor(conditional, aCtConditional);
        this.other = aCtConditional;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtConstructor(final spoon.reflect.declaration.CtConstructor<T> c) {
        spoon.reflect.declaration.CtConstructor<T> aCtConstructor = c.getFactory().Core().createConstructor();
        aCtConstructor.setAnnotations(this.cloneHelper.clone(c.getAnnotations()));
        aCtConstructor.setParameters(this.cloneHelper.clone(c.getParameters()));
        aCtConstructor.setThrownTypes(this.cloneHelper.clone(c.getThrownTypes()));
        aCtConstructor.setFormalCtTypeParameters(this.cloneHelper.clone(c.getFormalCtTypeParameters()));
        aCtConstructor.setBody(this.cloneHelper.clone(c.getBody()));
        aCtConstructor.setComments(this.cloneHelper.clone(c.getComments()));
        this.builder.copy(c, aCtConstructor);
        this.cloneHelper.tailor(c, aCtConstructor);
        this.other = aCtConstructor;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtContinue(final spoon.reflect.code.CtContinue continueStatement) {
        spoon.reflect.code.CtContinue aCtContinue = continueStatement.getFactory().Core().createContinue();
        aCtContinue.setAnnotations(this.cloneHelper.clone(continueStatement.getAnnotations()));
        aCtContinue.setComments(this.cloneHelper.clone(continueStatement.getComments()));
        this.builder.copy(continueStatement, aCtContinue);
        this.cloneHelper.tailor(continueStatement, aCtContinue);
        this.other = aCtContinue;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtDo(final spoon.reflect.code.CtDo doLoop) {
        spoon.reflect.code.CtDo aCtDo = doLoop.getFactory().Core().createDo();
        aCtDo.setAnnotations(this.cloneHelper.clone(doLoop.getAnnotations()));
        aCtDo.setLoopingExpression(this.cloneHelper.clone(doLoop.getLoopingExpression()));
        aCtDo.setBody(this.cloneHelper.clone(doLoop.getBody()));
        aCtDo.setComments(this.cloneHelper.clone(doLoop.getComments()));
        this.builder.copy(doLoop, aCtDo);
        this.cloneHelper.tailor(doLoop, aCtDo);
        this.other = aCtDo;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T extends java.lang.Enum<?>> void visitCtEnum(final spoon.reflect.declaration.CtEnum<T> ctEnum) {
        spoon.reflect.declaration.CtEnum<T> aCtEnum = ctEnum.getFactory().Core().createEnum();
        aCtEnum.setAnnotations(this.cloneHelper.clone(ctEnum.getAnnotations()));
        aCtEnum.setSuperInterfaces(this.cloneHelper.clone(ctEnum.getSuperInterfaces()));
        aCtEnum.setTypeMembers(this.cloneHelper.clone(ctEnum.getTypeMembers()));
        aCtEnum.setEnumValues(this.cloneHelper.clone(ctEnum.getEnumValues()));
        aCtEnum.setComments(this.cloneHelper.clone(ctEnum.getComments()));
        this.builder.copy(ctEnum, aCtEnum);
        this.cloneHelper.tailor(ctEnum, aCtEnum);
        this.other = aCtEnum;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtExecutableReference(final spoon.reflect.reference.CtExecutableReference<T> reference) {
        spoon.reflect.reference.CtExecutableReference<T> aCtExecutableReference = reference.getFactory().Core().createExecutableReference();
        aCtExecutableReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtExecutableReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtExecutableReference.setParameters(this.cloneHelper.clone(reference.getParameters()));
        aCtExecutableReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));
        aCtExecutableReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        aCtExecutableReference.setComments(this.cloneHelper.clone(reference.getComments()));
        this.builder.copy(reference, aCtExecutableReference);
        this.cloneHelper.tailor(reference, aCtExecutableReference);
        this.other = aCtExecutableReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtField(final spoon.reflect.declaration.CtField<T> f) {
        spoon.reflect.declaration.CtField<T> aCtField = f.getFactory().Core().createField();
        aCtField.setAnnotations(this.cloneHelper.clone(f.getAnnotations()));
        aCtField.setType(this.cloneHelper.clone(f.getType()));
        aCtField.setDefaultExpression(this.cloneHelper.clone(f.getDefaultExpression()));
        aCtField.setComments(this.cloneHelper.clone(f.getComments()));
        this.builder.copy(f, aCtField);
        this.cloneHelper.tailor(f, aCtField);
        this.other = aCtField;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtEnumValue(final spoon.reflect.declaration.CtEnumValue<T> enumValue) {
        spoon.reflect.declaration.CtEnumValue<T> aCtEnumValue = enumValue.getFactory().Core().createEnumValue();
        aCtEnumValue.setAnnotations(this.cloneHelper.clone(enumValue.getAnnotations()));
        aCtEnumValue.setType(this.cloneHelper.clone(enumValue.getType()));
        aCtEnumValue.setDefaultExpression(this.cloneHelper.clone(enumValue.getDefaultExpression()));
        aCtEnumValue.setComments(this.cloneHelper.clone(enumValue.getComments()));
        this.builder.copy(enumValue, aCtEnumValue);
        this.cloneHelper.tailor(enumValue, aCtEnumValue);
        this.other = aCtEnumValue;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtThisAccess(final spoon.reflect.code.CtThisAccess<T> thisAccess) {
        spoon.reflect.code.CtThisAccess<T> aCtThisAccess = thisAccess.getFactory().Core().createThisAccess();
        aCtThisAccess.setComments(this.cloneHelper.clone(thisAccess.getComments()));
        aCtThisAccess.setAnnotations(this.cloneHelper.clone(thisAccess.getAnnotations()));
        aCtThisAccess.setType(this.cloneHelper.clone(thisAccess.getType()));
        aCtThisAccess.setTypeCasts(this.cloneHelper.clone(thisAccess.getTypeCasts()));
        aCtThisAccess.setTarget(this.cloneHelper.clone(thisAccess.getTarget()));
        this.builder.copy(thisAccess, aCtThisAccess);
        this.cloneHelper.tailor(thisAccess, aCtThisAccess);
        this.other = aCtThisAccess;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtAnnotationFieldAccess(final spoon.reflect.code.CtAnnotationFieldAccess<T> annotationFieldAccess) {
        spoon.reflect.code.CtAnnotationFieldAccess<T> aCtAnnotationFieldAccess = annotationFieldAccess.getFactory().Core().createAnnotationFieldAccess();
        aCtAnnotationFieldAccess.setComments(this.cloneHelper.clone(annotationFieldAccess.getComments()));
        aCtAnnotationFieldAccess.setAnnotations(this.cloneHelper.clone(annotationFieldAccess.getAnnotations()));
        aCtAnnotationFieldAccess.setTypeCasts(this.cloneHelper.clone(annotationFieldAccess.getTypeCasts()));
        aCtAnnotationFieldAccess.setTarget(this.cloneHelper.clone(annotationFieldAccess.getTarget()));
        aCtAnnotationFieldAccess.setVariable(this.cloneHelper.clone(annotationFieldAccess.getVariable()));
        this.builder.copy(annotationFieldAccess, aCtAnnotationFieldAccess);
        this.cloneHelper.tailor(annotationFieldAccess, aCtAnnotationFieldAccess);
        this.other = aCtAnnotationFieldAccess;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtFieldReference(final spoon.reflect.reference.CtFieldReference<T> reference) {
        spoon.reflect.reference.CtFieldReference<T> aCtFieldReference = reference.getFactory().Core().createFieldReference();
        aCtFieldReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtFieldReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtFieldReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.builder.copy(reference, aCtFieldReference);
        this.cloneHelper.tailor(reference, aCtFieldReference);
        this.other = aCtFieldReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtFor(final spoon.reflect.code.CtFor forLoop) {
        spoon.reflect.code.CtFor aCtFor = forLoop.getFactory().Core().createFor();
        aCtFor.setAnnotations(this.cloneHelper.clone(forLoop.getAnnotations()));
        aCtFor.setForInit(this.cloneHelper.clone(forLoop.getForInit()));
        aCtFor.setExpression(this.cloneHelper.clone(forLoop.getExpression()));
        aCtFor.setForUpdate(this.cloneHelper.clone(forLoop.getForUpdate()));
        aCtFor.setBody(this.cloneHelper.clone(forLoop.getBody()));
        aCtFor.setComments(this.cloneHelper.clone(forLoop.getComments()));
        this.builder.copy(forLoop, aCtFor);
        this.cloneHelper.tailor(forLoop, aCtFor);
        this.other = aCtFor;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtForEach(final spoon.reflect.code.CtForEach foreach) {
        spoon.reflect.code.CtForEach aCtForEach = foreach.getFactory().Core().createForEach();
        aCtForEach.setAnnotations(this.cloneHelper.clone(foreach.getAnnotations()));
        aCtForEach.setVariable(this.cloneHelper.clone(foreach.getVariable()));
        aCtForEach.setExpression(this.cloneHelper.clone(foreach.getExpression()));
        aCtForEach.setBody(this.cloneHelper.clone(foreach.getBody()));
        aCtForEach.setComments(this.cloneHelper.clone(foreach.getComments()));
        this.builder.copy(foreach, aCtForEach);
        this.cloneHelper.tailor(foreach, aCtForEach);
        this.other = aCtForEach;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtIf(final spoon.reflect.code.CtIf ifElement) {
        spoon.reflect.code.CtIf aCtIf = ifElement.getFactory().Core().createIf();
        aCtIf.setAnnotations(this.cloneHelper.clone(ifElement.getAnnotations()));
        aCtIf.setCondition(this.cloneHelper.clone(ifElement.getCondition()));
        aCtIf.setThenStatement(this.cloneHelper.clone(((spoon.reflect.code.CtStatement) (ifElement.getThenStatement()))));
        aCtIf.setElseStatement(this.cloneHelper.clone(((spoon.reflect.code.CtStatement) (ifElement.getElseStatement()))));
        aCtIf.setComments(this.cloneHelper.clone(ifElement.getComments()));
        this.builder.copy(ifElement, aCtIf);
        this.cloneHelper.tailor(ifElement, aCtIf);
        this.other = aCtIf;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtInterface(final spoon.reflect.declaration.CtInterface<T> intrface) {
        spoon.reflect.declaration.CtInterface<T> aCtInterface = intrface.getFactory().Core().createInterface();
        aCtInterface.setAnnotations(this.cloneHelper.clone(intrface.getAnnotations()));
        aCtInterface.setSuperInterfaces(this.cloneHelper.clone(intrface.getSuperInterfaces()));
        aCtInterface.setFormalCtTypeParameters(this.cloneHelper.clone(intrface.getFormalCtTypeParameters()));
        aCtInterface.setTypeMembers(this.cloneHelper.clone(intrface.getTypeMembers()));
        aCtInterface.setComments(this.cloneHelper.clone(intrface.getComments()));
        this.builder.copy(intrface, aCtInterface);
        this.cloneHelper.tailor(intrface, aCtInterface);
        this.other = aCtInterface;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtInvocation(final spoon.reflect.code.CtInvocation<T> invocation) {
        spoon.reflect.code.CtInvocation<T> aCtInvocation = invocation.getFactory().Core().createInvocation();
        aCtInvocation.setAnnotations(this.cloneHelper.clone(invocation.getAnnotations()));
        aCtInvocation.setTypeCasts(this.cloneHelper.clone(invocation.getTypeCasts()));
        aCtInvocation.setTarget(this.cloneHelper.clone(invocation.getTarget()));
        aCtInvocation.setExecutable(this.cloneHelper.clone(invocation.getExecutable()));
        aCtInvocation.setArguments(this.cloneHelper.clone(invocation.getArguments()));
        aCtInvocation.setComments(this.cloneHelper.clone(invocation.getComments()));
        this.builder.copy(invocation, aCtInvocation);
        this.cloneHelper.tailor(invocation, aCtInvocation);
        this.other = aCtInvocation;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtLiteral(final spoon.reflect.code.CtLiteral<T> literal) {
        spoon.reflect.code.CtLiteral<T> aCtLiteral = literal.getFactory().Core().createLiteral();
        aCtLiteral.setAnnotations(this.cloneHelper.clone(literal.getAnnotations()));
        aCtLiteral.setType(this.cloneHelper.clone(literal.getType()));
        aCtLiteral.setTypeCasts(this.cloneHelper.clone(literal.getTypeCasts()));
        aCtLiteral.setComments(this.cloneHelper.clone(literal.getComments()));
        this.builder.copy(literal, aCtLiteral);
        this.cloneHelper.tailor(literal, aCtLiteral);
        this.other = aCtLiteral;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtLocalVariable(final spoon.reflect.code.CtLocalVariable<T> localVariable) {
        spoon.reflect.code.CtLocalVariable<T> aCtLocalVariable = localVariable.getFactory().Core().createLocalVariable();
        aCtLocalVariable.setAnnotations(this.cloneHelper.clone(localVariable.getAnnotations()));
        aCtLocalVariable.setType(this.cloneHelper.clone(localVariable.getType()));
        aCtLocalVariable.setDefaultExpression(this.cloneHelper.clone(localVariable.getDefaultExpression()));
        aCtLocalVariable.setComments(this.cloneHelper.clone(localVariable.getComments()));
        this.builder.copy(localVariable, aCtLocalVariable);
        this.cloneHelper.tailor(localVariable, aCtLocalVariable);
        this.other = aCtLocalVariable;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtLocalVariableReference(final spoon.reflect.reference.CtLocalVariableReference<T> reference) {
        spoon.reflect.reference.CtLocalVariableReference<T> aCtLocalVariableReference = reference.getFactory().Core().createLocalVariableReference();
        aCtLocalVariableReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtLocalVariableReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.builder.copy(reference, aCtLocalVariableReference);
        this.cloneHelper.tailor(reference, aCtLocalVariableReference);
        this.other = aCtLocalVariableReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtCatchVariable(final spoon.reflect.code.CtCatchVariable<T> catchVariable) {
        spoon.reflect.code.CtCatchVariable<T> aCtCatchVariable = catchVariable.getFactory().Core().createCatchVariable();
        aCtCatchVariable.setComments(this.cloneHelper.clone(catchVariable.getComments()));
        aCtCatchVariable.setAnnotations(this.cloneHelper.clone(catchVariable.getAnnotations()));
        aCtCatchVariable.setMultiTypes(this.cloneHelper.clone(catchVariable.getMultiTypes()));
        this.builder.copy(catchVariable, aCtCatchVariable);
        this.cloneHelper.tailor(catchVariable, aCtCatchVariable);
        this.other = aCtCatchVariable;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtCatchVariableReference(final spoon.reflect.reference.CtCatchVariableReference<T> reference) {
        spoon.reflect.reference.CtCatchVariableReference<T> aCtCatchVariableReference = reference.getFactory().Core().createCatchVariableReference();
        aCtCatchVariableReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtCatchVariableReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.builder.copy(reference, aCtCatchVariableReference);
        this.cloneHelper.tailor(reference, aCtCatchVariableReference);
        this.other = aCtCatchVariableReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtMethod(final spoon.reflect.declaration.CtMethod<T> m) {
        spoon.reflect.declaration.CtMethod<T> aCtMethod = m.getFactory().Core().createMethod();
        aCtMethod.setAnnotations(this.cloneHelper.clone(m.getAnnotations()));
        aCtMethod.setFormalCtTypeParameters(this.cloneHelper.clone(m.getFormalCtTypeParameters()));
        aCtMethod.setType(this.cloneHelper.clone(m.getType()));
        aCtMethod.setParameters(this.cloneHelper.clone(m.getParameters()));
        aCtMethod.setThrownTypes(this.cloneHelper.clone(m.getThrownTypes()));
        aCtMethod.setBody(this.cloneHelper.clone(m.getBody()));
        aCtMethod.setComments(this.cloneHelper.clone(m.getComments()));
        this.builder.copy(m, aCtMethod);
        this.cloneHelper.tailor(m, aCtMethod);
        this.other = aCtMethod;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod<T> annotationMethod) {
        spoon.reflect.declaration.CtAnnotationMethod<T> aCtAnnotationMethod = annotationMethod.getFactory().Core().createAnnotationMethod();
        aCtAnnotationMethod.setAnnotations(this.cloneHelper.clone(annotationMethod.getAnnotations()));
        aCtAnnotationMethod.setType(this.cloneHelper.clone(annotationMethod.getType()));
        aCtAnnotationMethod.setDefaultExpression(this.cloneHelper.clone(annotationMethod.getDefaultExpression()));
        aCtAnnotationMethod.setComments(this.cloneHelper.clone(annotationMethod.getComments()));
        this.builder.copy(annotationMethod, aCtAnnotationMethod);
        this.cloneHelper.tailor(annotationMethod, aCtAnnotationMethod);
        this.other = aCtAnnotationMethod;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtNewArray(final spoon.reflect.code.CtNewArray<T> newArray) {
        spoon.reflect.code.CtNewArray<T> aCtNewArray = newArray.getFactory().Core().createNewArray();
        aCtNewArray.setAnnotations(this.cloneHelper.clone(newArray.getAnnotations()));
        aCtNewArray.setType(this.cloneHelper.clone(newArray.getType()));
        aCtNewArray.setTypeCasts(this.cloneHelper.clone(newArray.getTypeCasts()));
        aCtNewArray.setElements(this.cloneHelper.clone(newArray.getElements()));
        aCtNewArray.setDimensionExpressions(this.cloneHelper.clone(newArray.getDimensionExpressions()));
        aCtNewArray.setComments(this.cloneHelper.clone(newArray.getComments()));
        this.builder.copy(newArray, aCtNewArray);
        this.cloneHelper.tailor(newArray, aCtNewArray);
        this.other = aCtNewArray;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtConstructorCall(final spoon.reflect.code.CtConstructorCall<T> ctConstructorCall) {
        spoon.reflect.code.CtConstructorCall<T> aCtConstructorCall = ctConstructorCall.getFactory().Core().createConstructorCall();
        aCtConstructorCall.setAnnotations(this.cloneHelper.clone(ctConstructorCall.getAnnotations()));
        aCtConstructorCall.setTypeCasts(this.cloneHelper.clone(ctConstructorCall.getTypeCasts()));
        aCtConstructorCall.setExecutable(this.cloneHelper.clone(ctConstructorCall.getExecutable()));
        aCtConstructorCall.setTarget(this.cloneHelper.clone(ctConstructorCall.getTarget()));
        aCtConstructorCall.setArguments(this.cloneHelper.clone(ctConstructorCall.getArguments()));
        aCtConstructorCall.setComments(this.cloneHelper.clone(ctConstructorCall.getComments()));
        this.builder.copy(ctConstructorCall, aCtConstructorCall);
        this.cloneHelper.tailor(ctConstructorCall, aCtConstructorCall);
        this.other = aCtConstructorCall;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtNewClass(final spoon.reflect.code.CtNewClass<T> newClass) {
        spoon.reflect.code.CtNewClass<T> aCtNewClass = newClass.getFactory().Core().createNewClass();
        aCtNewClass.setAnnotations(this.cloneHelper.clone(newClass.getAnnotations()));
        aCtNewClass.setTypeCasts(this.cloneHelper.clone(newClass.getTypeCasts()));
        aCtNewClass.setExecutable(this.cloneHelper.clone(newClass.getExecutable()));
        aCtNewClass.setTarget(this.cloneHelper.clone(newClass.getTarget()));
        aCtNewClass.setArguments(this.cloneHelper.clone(newClass.getArguments()));
        aCtNewClass.setAnonymousClass(this.cloneHelper.clone(newClass.getAnonymousClass()));
        aCtNewClass.setComments(this.cloneHelper.clone(newClass.getComments()));
        this.builder.copy(newClass, aCtNewClass);
        this.cloneHelper.tailor(newClass, aCtNewClass);
        this.other = aCtNewClass;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtLambda(final spoon.reflect.code.CtLambda<T> lambda) {
        spoon.reflect.code.CtLambda<T> aCtLambda = lambda.getFactory().Core().createLambda();
        aCtLambda.setAnnotations(this.cloneHelper.clone(lambda.getAnnotations()));
        aCtLambda.setType(this.cloneHelper.clone(lambda.getType()));
        aCtLambda.setTypeCasts(this.cloneHelper.clone(lambda.getTypeCasts()));
        aCtLambda.setParameters(this.cloneHelper.clone(lambda.getParameters()));
        aCtLambda.setBody(this.cloneHelper.clone(lambda.getBody()));
        aCtLambda.setExpression(this.cloneHelper.clone(lambda.getExpression()));
        aCtLambda.setComments(this.cloneHelper.clone(lambda.getComments()));
        this.builder.copy(lambda, aCtLambda);
        this.cloneHelper.tailor(lambda, aCtLambda);
        this.other = aCtLambda;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T, E extends spoon.reflect.code.CtExpression<?>> void visitCtExecutableReferenceExpression(final spoon.reflect.code.CtExecutableReferenceExpression<T, E> expression) {
        spoon.reflect.code.CtExecutableReferenceExpression<T, E> aCtExecutableReferenceExpression = expression.getFactory().Core().createExecutableReferenceExpression();
        aCtExecutableReferenceExpression.setComments(this.cloneHelper.clone(expression.getComments()));
        aCtExecutableReferenceExpression.setAnnotations(this.cloneHelper.clone(expression.getAnnotations()));
        aCtExecutableReferenceExpression.setType(this.cloneHelper.clone(expression.getType()));
        aCtExecutableReferenceExpression.setTypeCasts(this.cloneHelper.clone(expression.getTypeCasts()));
        aCtExecutableReferenceExpression.setExecutable(this.cloneHelper.clone(expression.getExecutable()));
        aCtExecutableReferenceExpression.setTarget(this.cloneHelper.clone(expression.getTarget()));
        this.builder.copy(expression, aCtExecutableReferenceExpression);
        this.cloneHelper.tailor(expression, aCtExecutableReferenceExpression);
        this.other = aCtExecutableReferenceExpression;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T, A extends T> void visitCtOperatorAssignment(final spoon.reflect.code.CtOperatorAssignment<T, A> assignment) {
        spoon.reflect.code.CtOperatorAssignment<T, A> aCtOperatorAssignment = assignment.getFactory().Core().createOperatorAssignment();
        aCtOperatorAssignment.setAnnotations(this.cloneHelper.clone(assignment.getAnnotations()));
        aCtOperatorAssignment.setType(this.cloneHelper.clone(assignment.getType()));
        aCtOperatorAssignment.setTypeCasts(this.cloneHelper.clone(assignment.getTypeCasts()));
        aCtOperatorAssignment.setAssigned(this.cloneHelper.clone(assignment.getAssigned()));
        aCtOperatorAssignment.setAssignment(this.cloneHelper.clone(assignment.getAssignment()));
        aCtOperatorAssignment.setComments(this.cloneHelper.clone(assignment.getComments()));
        this.builder.copy(assignment, aCtOperatorAssignment);
        this.cloneHelper.tailor(assignment, aCtOperatorAssignment);
        this.other = aCtOperatorAssignment;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtPackage(final spoon.reflect.declaration.CtPackage ctPackage) {
        spoon.reflect.declaration.CtPackage aCtPackage = ctPackage.getFactory().Core().createPackage();
        aCtPackage.setAnnotations(this.cloneHelper.clone(ctPackage.getAnnotations()));
        aCtPackage.setPackages(this.cloneHelper.clone(ctPackage.getPackages()));
        aCtPackage.setTypes(this.cloneHelper.clone(ctPackage.getTypes()));
        aCtPackage.setComments(this.cloneHelper.clone(ctPackage.getComments()));
        this.builder.copy(ctPackage, aCtPackage);
        this.cloneHelper.tailor(ctPackage, aCtPackage);
        this.other = aCtPackage;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtPackageReference(final spoon.reflect.reference.CtPackageReference reference) {
        spoon.reflect.reference.CtPackageReference aCtPackageReference = reference.getFactory().Core().createPackageReference();
        aCtPackageReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.builder.copy(reference, aCtPackageReference);
        this.cloneHelper.tailor(reference, aCtPackageReference);
        this.other = aCtPackageReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtParameter(final spoon.reflect.declaration.CtParameter<T> parameter) {
        spoon.reflect.declaration.CtParameter<T> aCtParameter = parameter.getFactory().Core().createParameter();
        aCtParameter.setAnnotations(this.cloneHelper.clone(parameter.getAnnotations()));
        aCtParameter.setType(this.cloneHelper.clone(parameter.getType()));
        aCtParameter.setComments(this.cloneHelper.clone(parameter.getComments()));
        this.builder.copy(parameter, aCtParameter);
        this.cloneHelper.tailor(parameter, aCtParameter);
        this.other = aCtParameter;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtParameterReference(final spoon.reflect.reference.CtParameterReference<T> reference) {
        spoon.reflect.reference.CtParameterReference<T> aCtParameterReference = reference.getFactory().Core().createParameterReference();
        aCtParameterReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtParameterReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.builder.copy(reference, aCtParameterReference);
        this.cloneHelper.tailor(reference, aCtParameterReference);
        this.other = aCtParameterReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <R> void visitCtReturn(final spoon.reflect.code.CtReturn<R> returnStatement) {
        spoon.reflect.code.CtReturn<R> aCtReturn = returnStatement.getFactory().Core().createReturn();
        aCtReturn.setAnnotations(this.cloneHelper.clone(returnStatement.getAnnotations()));
        aCtReturn.setReturnedExpression(this.cloneHelper.clone(returnStatement.getReturnedExpression()));
        aCtReturn.setComments(this.cloneHelper.clone(returnStatement.getComments()));
        this.builder.copy(returnStatement, aCtReturn);
        this.cloneHelper.tailor(returnStatement, aCtReturn);
        this.other = aCtReturn;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <R> void visitCtStatementList(final spoon.reflect.code.CtStatementList statements) {
        spoon.reflect.code.CtStatementList aCtStatementList = statements.getFactory().Core().createStatementList();
        aCtStatementList.setAnnotations(this.cloneHelper.clone(statements.getAnnotations()));
        aCtStatementList.setStatements(this.cloneHelper.clone(statements.getStatements()));
        aCtStatementList.setComments(this.cloneHelper.clone(statements.getComments()));
        this.builder.copy(statements, aCtStatementList);
        this.cloneHelper.tailor(statements, aCtStatementList);
        this.other = aCtStatementList;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <S> void visitCtSwitch(final spoon.reflect.code.CtSwitch<S> switchStatement) {
        spoon.reflect.code.CtSwitch<S> aCtSwitch = switchStatement.getFactory().Core().createSwitch();
        aCtSwitch.setAnnotations(this.cloneHelper.clone(switchStatement.getAnnotations()));
        aCtSwitch.setSelector(this.cloneHelper.clone(switchStatement.getSelector()));
        aCtSwitch.setCases(this.cloneHelper.clone(switchStatement.getCases()));
        aCtSwitch.setComments(this.cloneHelper.clone(switchStatement.getComments()));
        this.builder.copy(switchStatement, aCtSwitch);
        this.cloneHelper.tailor(switchStatement, aCtSwitch);
        this.other = aCtSwitch;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtSynchronized(final spoon.reflect.code.CtSynchronized synchro) {
        spoon.reflect.code.CtSynchronized aCtSynchronized = synchro.getFactory().Core().createSynchronized();
        aCtSynchronized.setAnnotations(this.cloneHelper.clone(synchro.getAnnotations()));
        aCtSynchronized.setExpression(this.cloneHelper.clone(synchro.getExpression()));
        aCtSynchronized.setBlock(this.cloneHelper.clone(synchro.getBlock()));
        aCtSynchronized.setComments(this.cloneHelper.clone(synchro.getComments()));
        this.builder.copy(synchro, aCtSynchronized);
        this.cloneHelper.tailor(synchro, aCtSynchronized);
        this.other = aCtSynchronized;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtThrow(final spoon.reflect.code.CtThrow throwStatement) {
        spoon.reflect.code.CtThrow aCtThrow = throwStatement.getFactory().Core().createThrow();
        aCtThrow.setAnnotations(this.cloneHelper.clone(throwStatement.getAnnotations()));
        aCtThrow.setThrownExpression(this.cloneHelper.clone(throwStatement.getThrownExpression()));
        aCtThrow.setComments(this.cloneHelper.clone(throwStatement.getComments()));
        this.builder.copy(throwStatement, aCtThrow);
        this.cloneHelper.tailor(throwStatement, aCtThrow);
        this.other = aCtThrow;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtTry(final spoon.reflect.code.CtTry tryBlock) {
        spoon.reflect.code.CtTry aCtTry = tryBlock.getFactory().Core().createTry();
        aCtTry.setAnnotations(this.cloneHelper.clone(tryBlock.getAnnotations()));
        aCtTry.setBody(this.cloneHelper.clone(tryBlock.getBody()));
        aCtTry.setCatchers(this.cloneHelper.clone(tryBlock.getCatchers()));
        aCtTry.setFinalizer(this.cloneHelper.clone(tryBlock.getFinalizer()));
        aCtTry.setComments(this.cloneHelper.clone(tryBlock.getComments()));
        this.builder.copy(tryBlock, aCtTry);
        this.cloneHelper.tailor(tryBlock, aCtTry);
        this.other = aCtTry;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtTryWithResource(final spoon.reflect.code.CtTryWithResource tryWithResource) {
        spoon.reflect.code.CtTryWithResource aCtTryWithResource = tryWithResource.getFactory().Core().createTryWithResource();
        aCtTryWithResource.setAnnotations(this.cloneHelper.clone(tryWithResource.getAnnotations()));
        aCtTryWithResource.setResources(this.cloneHelper.clone(tryWithResource.getResources()));
        aCtTryWithResource.setBody(this.cloneHelper.clone(tryWithResource.getBody()));
        aCtTryWithResource.setCatchers(this.cloneHelper.clone(tryWithResource.getCatchers()));
        aCtTryWithResource.setFinalizer(this.cloneHelper.clone(tryWithResource.getFinalizer()));
        aCtTryWithResource.setComments(this.cloneHelper.clone(tryWithResource.getComments()));
        this.builder.copy(tryWithResource, aCtTryWithResource);
        this.cloneHelper.tailor(tryWithResource, aCtTryWithResource);
        this.other = aCtTryWithResource;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtTypeParameterReference(final spoon.reflect.reference.CtTypeParameterReference ref) {
        spoon.reflect.reference.CtTypeParameterReference aCtTypeParameterReference = ref.getFactory().Core().createTypeParameterReference();
        aCtTypeParameterReference.setPackage(this.cloneHelper.clone(ref.getPackage()));
        aCtTypeParameterReference.setDeclaringType(this.cloneHelper.clone(ref.getDeclaringType()));
        aCtTypeParameterReference.setAnnotations(this.cloneHelper.clone(ref.getAnnotations()));
        aCtTypeParameterReference.setBoundingType(this.cloneHelper.clone(ref.getBoundingType()));
        this.builder.copy(ref, aCtTypeParameterReference);
        this.cloneHelper.tailor(ref, aCtTypeParameterReference);
        this.other = aCtTypeParameterReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference wildcardReference) {
        spoon.reflect.reference.CtWildcardReference aCtWildcardReference = wildcardReference.getFactory().Core().createWildcardReference();
        aCtWildcardReference.setPackage(this.cloneHelper.clone(wildcardReference.getPackage()));
        aCtWildcardReference.setDeclaringType(this.cloneHelper.clone(wildcardReference.getDeclaringType()));
        aCtWildcardReference.setAnnotations(this.cloneHelper.clone(wildcardReference.getAnnotations()));
        aCtWildcardReference.setBoundingType(this.cloneHelper.clone(wildcardReference.getBoundingType()));
        this.builder.copy(wildcardReference, aCtWildcardReference);
        this.cloneHelper.tailor(wildcardReference, aCtWildcardReference);
        this.other = aCtWildcardReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtIntersectionTypeReference(final spoon.reflect.reference.CtIntersectionTypeReference<T> reference) {
        spoon.reflect.reference.CtIntersectionTypeReference<T> aCtIntersectionTypeReference = reference.getFactory().Core().createIntersectionTypeReference();
        aCtIntersectionTypeReference.setPackage(this.cloneHelper.clone(reference.getPackage()));
        aCtIntersectionTypeReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtIntersectionTypeReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));
        aCtIntersectionTypeReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        aCtIntersectionTypeReference.setBounds(this.cloneHelper.clone(reference.getBounds()));
        this.builder.copy(reference, aCtIntersectionTypeReference);
        this.cloneHelper.tailor(reference, aCtIntersectionTypeReference);
        this.other = aCtIntersectionTypeReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtTypeReference(final spoon.reflect.reference.CtTypeReference<T> reference) {
        spoon.reflect.reference.CtTypeReference<T> aCtTypeReference = reference.getFactory().Core().createTypeReference();
        aCtTypeReference.setPackage(this.cloneHelper.clone(reference.getPackage()));
        aCtTypeReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtTypeReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));
        aCtTypeReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        aCtTypeReference.setComments(this.cloneHelper.clone(reference.getComments()));
        this.builder.copy(reference, aCtTypeReference);
        this.cloneHelper.tailor(reference, aCtTypeReference);
        this.other = aCtTypeReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtTypeAccess(final spoon.reflect.code.CtTypeAccess<T> typeAccess) {
        spoon.reflect.code.CtTypeAccess<T> aCtTypeAccess = typeAccess.getFactory().Core().createTypeAccess();
        aCtTypeAccess.setAnnotations(this.cloneHelper.clone(typeAccess.getAnnotations()));
        aCtTypeAccess.setTypeCasts(this.cloneHelper.clone(typeAccess.getTypeCasts()));
        aCtTypeAccess.setAccessedType(this.cloneHelper.clone(typeAccess.getAccessedType()));
        aCtTypeAccess.setComments(this.cloneHelper.clone(typeAccess.getComments()));
        this.builder.copy(typeAccess, aCtTypeAccess);
        this.cloneHelper.tailor(typeAccess, aCtTypeAccess);
        this.other = aCtTypeAccess;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtUnaryOperator(final spoon.reflect.code.CtUnaryOperator<T> operator) {
        spoon.reflect.code.CtUnaryOperator<T> aCtUnaryOperator = operator.getFactory().Core().createUnaryOperator();
        aCtUnaryOperator.setAnnotations(this.cloneHelper.clone(operator.getAnnotations()));
        aCtUnaryOperator.setType(this.cloneHelper.clone(operator.getType()));
        aCtUnaryOperator.setTypeCasts(this.cloneHelper.clone(operator.getTypeCasts()));
        aCtUnaryOperator.setOperand(this.cloneHelper.clone(operator.getOperand()));
        aCtUnaryOperator.setComments(this.cloneHelper.clone(operator.getComments()));
        this.builder.copy(operator, aCtUnaryOperator);
        this.cloneHelper.tailor(operator, aCtUnaryOperator);
        this.other = aCtUnaryOperator;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtVariableRead(final spoon.reflect.code.CtVariableRead<T> variableRead) {
        spoon.reflect.code.CtVariableRead<T> aCtVariableRead = variableRead.getFactory().Core().createVariableRead();
        aCtVariableRead.setAnnotations(this.cloneHelper.clone(variableRead.getAnnotations()));
        aCtVariableRead.setTypeCasts(this.cloneHelper.clone(variableRead.getTypeCasts()));
        aCtVariableRead.setVariable(this.cloneHelper.clone(variableRead.getVariable()));
        aCtVariableRead.setComments(this.cloneHelper.clone(variableRead.getComments()));
        this.builder.copy(variableRead, aCtVariableRead);
        this.cloneHelper.tailor(variableRead, aCtVariableRead);
        this.other = aCtVariableRead;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtVariableWrite(final spoon.reflect.code.CtVariableWrite<T> variableWrite) {
        spoon.reflect.code.CtVariableWrite<T> aCtVariableWrite = variableWrite.getFactory().Core().createVariableWrite();
        aCtVariableWrite.setAnnotations(this.cloneHelper.clone(variableWrite.getAnnotations()));
        aCtVariableWrite.setTypeCasts(this.cloneHelper.clone(variableWrite.getTypeCasts()));
        aCtVariableWrite.setVariable(this.cloneHelper.clone(variableWrite.getVariable()));
        aCtVariableWrite.setComments(this.cloneHelper.clone(variableWrite.getComments()));
        this.builder.copy(variableWrite, aCtVariableWrite);
        this.cloneHelper.tailor(variableWrite, aCtVariableWrite);
        this.other = aCtVariableWrite;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtWhile(final spoon.reflect.code.CtWhile whileLoop) {
        spoon.reflect.code.CtWhile aCtWhile = whileLoop.getFactory().Core().createWhile();
        aCtWhile.setAnnotations(this.cloneHelper.clone(whileLoop.getAnnotations()));
        aCtWhile.setLoopingExpression(this.cloneHelper.clone(whileLoop.getLoopingExpression()));
        aCtWhile.setBody(this.cloneHelper.clone(whileLoop.getBody()));
        aCtWhile.setComments(this.cloneHelper.clone(whileLoop.getComments()));
        this.builder.copy(whileLoop, aCtWhile);
        this.cloneHelper.tailor(whileLoop, aCtWhile);
        this.other = aCtWhile;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtCodeSnippetExpression(final spoon.reflect.code.CtCodeSnippetExpression<T> expression) {
        spoon.reflect.code.CtCodeSnippetExpression<T> aCtCodeSnippetExpression = expression.getFactory().Core().createCodeSnippetExpression();
        aCtCodeSnippetExpression.setType(this.cloneHelper.clone(expression.getType()));
        aCtCodeSnippetExpression.setComments(this.cloneHelper.clone(expression.getComments()));
        aCtCodeSnippetExpression.setAnnotations(this.cloneHelper.clone(expression.getAnnotations()));
        aCtCodeSnippetExpression.setTypeCasts(this.cloneHelper.clone(expression.getTypeCasts()));
        this.builder.copy(expression, aCtCodeSnippetExpression);
        this.cloneHelper.tailor(expression, aCtCodeSnippetExpression);
        this.other = aCtCodeSnippetExpression;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtCodeSnippetStatement(final spoon.reflect.code.CtCodeSnippetStatement statement) {
        spoon.reflect.code.CtCodeSnippetStatement aCtCodeSnippetStatement = statement.getFactory().Core().createCodeSnippetStatement();
        aCtCodeSnippetStatement.setComments(this.cloneHelper.clone(statement.getComments()));
        aCtCodeSnippetStatement.setAnnotations(this.cloneHelper.clone(statement.getAnnotations()));
        this.builder.copy(statement, aCtCodeSnippetStatement);
        this.cloneHelper.tailor(statement, aCtCodeSnippetStatement);
        this.other = aCtCodeSnippetStatement;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override]
    public <T> void...>
	at spoon.processing.CtGenerationTest.testGenerateCloneVisitor(CtGenerationTest.java:157)

[INFO] Running spoon.processing.ProcessingTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.382 s - in spoon.processing.ProcessingTest
[INFO] Running spoon.MavenLauncherTest
2018-08-01 20:22:22,748 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:22,759 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-cas/3.0.0-SNAPSHOT
2018-08-01 20:22:22,761 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-saml/3.0.0-SNAPSHOT
2018-08-01 20:22:22,762 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oauth/3.0.0-SNAPSHOT
2018-08-01 20:22:22,762 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oidc/3.0.0-SNAPSHOT
2018-08-01 20:22:22,762 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-ldap/3.0.0-SNAPSHOT
2018-08-01 20:22:22,763 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-http/3.0.0-SNAPSHOT
2018-08-01 20:22:22,765 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/zaxxer/HikariCP/2.6.1
2018-08-01 20:22:22,766 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-sql/3.0.0-SNAPSHOT
2018-08-01 20:22:22,772 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/security/spring-security-crypto/4.2.2.RELEASE
2018-08-01 20:22:22,773 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-08-01 20:22:22,774 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:22,776 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-08-01 20:22:22,785 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-08-01 20:22:22,785 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-ldap/3.0.0-SNAPSHOT
2018-08-01 20:22:22,785 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/unboundid/unboundid-ldapsdk/3.2.1
2018-08-01 20:22:22,786 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-sql/3.0.0-SNAPSHOT
2018-08-01 20:22:22,786 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:22,786 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-config/3.0.0-SNAPSHOT
2018-08-01 20:22:22,787 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oauth/3.0.0-SNAPSHOT
2018-08-01 20:22:22,787 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-cas/3.0.0-SNAPSHOT
2018-08-01 20:22:22,787 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-openid/3.0.0-SNAPSHOT
2018-08-01 20:22:22,797 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-http/3.0.0-SNAPSHOT
2018-08-01 20:22:22,798 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-saml/3.0.0-SNAPSHOT
2018-08-01 20:22:22,798 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-gae/3.0.0-SNAPSHOT
2018-08-01 20:22:22,798 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oidc/3.0.0-SNAPSHOT
2018-08-01 20:22:22,799 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-jwt/3.0.0-SNAPSHOT
2018-08-01 20:22:22,799 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-ldap/3.0.0-SNAPSHOT
2018-08-01 20:22:22,799 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-sql/3.0.0-SNAPSHOT
2018-08-01 20:22:22,800 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-mongo/3.0.0-SNAPSHOT
2018-08-01 20:22:22,800 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-couch/3.0.0-SNAPSHOT
2018-08-01 20:22:22,805 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-kerberos/3.0.0-SNAPSHOT
2018-08-01 20:22:22,805 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/slf4j/slf4j-api/1.7.25
2018-08-01 20:22:22,805 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-08-01 20:22:22,806 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/guava/guava/21.0
2018-08-01 20:22:22,806 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/security/spring-security-crypto/4.2.2.RELEASE
2018-08-01 20:22:22,807 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-08-01 20:22:22,827 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-08-01 20:22:22,828 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-test/4.3.7.RELEASE
2018-08-01 20:22:22,828 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.25
2018-08-01 20:22:22,829 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-08-01 20:22:22,829 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mockito/mockito-core/2.7.19
2018-08-01 20:22:22,829 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:22,830 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-cas/3.0.0-SNAPSHOT
2018-08-01 20:22:22,830 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-saml/3.0.0-SNAPSHOT
2018-08-01 20:22:22,830 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oauth/3.0.0-SNAPSHOT
2018-08-01 20:22:22,830 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oidc/3.0.0-SNAPSHOT
2018-08-01 20:22:22,831 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-ldap/3.0.0-SNAPSHOT
2018-08-01 20:22:22,831 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-http/3.0.0-SNAPSHOT
2018-08-01 20:22:22,831 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/zaxxer/HikariCP/2.6.1
2018-08-01 20:22:22,832 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-sql/3.0.0-SNAPSHOT
2018-08-01 20:22:22,832 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/security/spring-security-crypto/4.2.2.RELEASE
2018-08-01 20:22:22,832 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-08-01 20:22:22,833 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:22,841 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-08-01 20:22:22,841 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-08-01 20:22:22,857 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-ldap/3.0.0-SNAPSHOT
2018-08-01 20:22:22,857 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/unboundid/unboundid-ldapsdk/3.2.1
2018-08-01 20:22:22,857 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-sql/3.0.0-SNAPSHOT
2018-08-01 20:22:22,858 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:22,858 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/commons-codec/commons-codec/1.10
2018-08-01 20:22:22,858 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/github/scribejava/scribejava-apis/3.3.0
2018-08-01 20:22:22,858 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.7
2018-08-01 20:22:22,859 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-08-01 20:22:22,859 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:22,859 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-08-01 20:22:22,859 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-08-01 20:22:22,860 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:22,860 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/jasig/cas/client/cas-client-core/3.4.1
2018-08-01 20:22:22,860 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/jasig/cas/client/cas-client-support-saml/3.4.1
2018-08-01 20:22:22,860 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-08-01 20:22:22,868 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/guava/guava/21.0
2018-08-01 20:22:22,868 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:22,870 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-08-01 20:22:22,870 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-08-01 20:22:22,870 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:22,871 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/openid4java/openid4java/1.0.0
2018-08-01 20:22:22,871 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.25
2018-08-01 20:22:22,871 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/xml-apis/xml-apis/2.0.2
2018-08-01 20:22:22,872 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-08-01 20:22:22,886 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:22,887 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-08-01 20:22:22,887 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-08-01 20:22:22,887 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:22,888 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/commons-codec/commons-codec/1.10
2018-08-01 20:22:22,896 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.7
2018-08-01 20:22:22,897 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:22,897 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-08-01 20:22:22,898 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-08-01 20:22:22,898 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mockito/mockito-core/2.7.19
2018-08-01 20:22:22,898 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/guava/guava/21.0
2018-08-01 20:22:22,899 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/nanohttpd/nanohttpd/2.3.1
2018-08-01 20:22:22,899 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:22,899 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-core/3.3.0
2018-08-01 20:22:22,900 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/net/shibboleth/utilities/java-support/7.3.0
2018-08-01 20:22:22,900 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-saml-api/3.3.0
2018-08-01 20:22:22,911 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-saml-impl/3.3.0
2018-08-01 20:22:22,912 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-soap-api/3.3.0
2018-08-01 20:22:22,912 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-xmlsec-api/3.3.0
2018-08-01 20:22:22,912 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-security-api/3.3.0
2018-08-01 20:22:22,913 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-security-impl/3.3.0
2018-08-01 20:22:22,913 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-profile-api/3.3.0
2018-08-01 20:22:22,913 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-profile-impl/3.3.0
2018-08-01 20:22:22,914 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-messaging-api/3.3.0
2018-08-01 20:22:22,914 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-messaging-impl/3.3.0
2018-08-01 20:22:22,914 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-xmlsec-impl/3.3.0
2018-08-01 20:22:22,914 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/guava/guava/21.0
2018-08-01 20:22:22,915 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/cryptacular/cryptacular/1.1.0
2018-08-01 20:22:22,915 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/joda-time/joda-time/2.9.2
2018-08-01 20:22:22,915 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/xalan/xalan/2.7.2
2018-08-01 20:22:22,916 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/velocity/velocity/1.7
2018-08-01 20:22:22,916 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/commons-collections/commons-collections/3.2.2
2018-08-01 20:22:22,926 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.25
2018-08-01 20:22:22,926 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-08-01 20:22:22,927 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-core/4.3.7.RELEASE
2018-08-01 20:22:22,928 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:22,928 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-08-01 20:22:22,938 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-08-01 20:22:22,938 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-test/4.3.7.RELEASE
2018-08-01 20:22:22,938 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-web/4.3.7.RELEASE
2018-08-01 20:22:22,939 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mockito/mockito-core/2.7.19
2018-08-01 20:22:22,939 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:22,940 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-api-1.0-sdk/1.9.50
2018-08-01 20:22:22,940 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-jsr107cache/1.9.50
2018-08-01 20:22:22,940 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/net/sf/jsr107cache/jsr107cache/1.1
2018-08-01 20:22:22,941 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-08-01 20:22:22,941 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:22,941 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-08-01 20:22:22,948 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-08-01 20:22:22,948 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-testing/1.9.50
2018-08-01 20:22:22,949 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-api-labs/1.9.50
2018-08-01 20:22:22,949 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-api-stubs/1.9.50
2018-08-01 20:22:22,961 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:22,961 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/nimbusds/oauth2-oidc-sdk/5.24.2
2018-08-01 20:22:22,961 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/nimbusds/nimbus-jose-jwt/4.35
2018-08-01 20:22:22,962 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:22,962 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-08-01 20:22:22,962 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-08-01 20:22:22,962 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:22,963 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/nimbusds/nimbus-jose-jwt/4.35
2018-08-01 20:22:22,963 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.56
2018-08-01 20:22:22,963 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:22,964 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-08-01 20:22:22,964 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-08-01 20:22:22,964 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oauth/3.0.0-SNAPSHOT
2018-08-01 20:22:22,965 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:22,965 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/ldaptive/ldaptive/1.2.1
2018-08-01 20:22:22,969 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:22,969 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-08-01 20:22:22,970 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-08-01 20:22:22,970 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/unboundid/unboundid-ldapsdk/3.2.1
2018-08-01 20:22:22,970 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:22,970 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/jdbi/jdbi/2.78
2018-08-01 20:22:22,971 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:22,971 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-08-01 20:22:22,971 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/security/spring-security-crypto/4.2.2.RELEASE
2018-08-01 20:22:22,972 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/h2database/h2/1.4.194
2018-08-01 20:22:22,981 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:22,982 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mongodb/mongo-java-driver/3.4.2
2018-08-01 20:22:22,982 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:22,982 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-08-01 20:22:22,983 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-08-01 20:22:22,983 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-08-01 20:22:22,983 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/de/flapdoodle/embed/de.flapdoodle.embed.mongo/2.0.0
2018-08-01 20:22:22,983 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:22,984 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/ektorp/org.ektorp/1.4.4
2018-08-01 20:22:22,984 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.3.3
2018-08-01 20:22:22,984 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:23,025 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/io/bdrc/mcouch-ektorp/1.0.0
2018-08-01 20:22:23,025 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-08-01 20:22:23,026 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-08-01 20:22:23,026 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-08-01 20:22:23,026 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:23,026 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-core/4.3.7.RELEASE
2018-08-01 20:22:23,027 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:23,027 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-08-01 20:22:23,027 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-08-01 20:22:23,028 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mockito/mockito-core/2.7.19
2018-08-01 20:22:23,028 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-08-01 20:22:23,028 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/kerby-kdc/1.0.0
2018-08-01 20:22:23,028 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/kerb-simplekdc/1.0.0
2018-08-01 20:22:23,034 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/kerb-client/1.0.0
2018-08-01 20:22:23,053 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/token-provider/1.0.0
2018-08-01 20:22:23,053 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/integration-test/1.0.0
2018-08-01 20:22:23,086 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:23,093 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-config/3.0.0-SNAPSHOT
2018-08-01 20:22:23,093 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oauth/3.0.0-SNAPSHOT
2018-08-01 20:22:23,093 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-cas/3.0.0-SNAPSHOT
2018-08-01 20:22:23,094 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-openid/3.0.0-SNAPSHOT
2018-08-01 20:22:23,094 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-http/3.0.0-SNAPSHOT
2018-08-01 20:22:23,094 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-saml/3.0.0-SNAPSHOT
2018-08-01 20:22:23,094 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-gae/3.0.0-SNAPSHOT
2018-08-01 20:22:23,095 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oidc/3.0.0-SNAPSHOT
2018-08-01 20:22:23,095 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-jwt/3.0.0-SNAPSHOT
2018-08-01 20:22:23,095 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-ldap/3.0.0-SNAPSHOT
2018-08-01 20:22:23,096 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-sql/3.0.0-SNAPSHOT
2018-08-01 20:22:23,096 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-mongo/3.0.0-SNAPSHOT
2018-08-01 20:22:23,096 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-couch/3.0.0-SNAPSHOT
2018-08-01 20:22:23,096 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-kerberos/3.0.0-SNAPSHOT
2018-08-01 20:22:23,105 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/slf4j/slf4j-api/1.7.25
2018-08-01 20:22:23,105 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-08-01 20:22:23,105 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/guava/guava/21.0
2018-08-01 20:22:23,106 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/security/spring-security-crypto/4.2.2.RELEASE
2018-08-01 20:22:23,106 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-08-01 20:22:23,125 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-08-01 20:22:23,125 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-test/4.3.7.RELEASE
2018-08-01 20:22:23,126 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.25
2018-08-01 20:22:23,126 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-08-01 20:22:23,126 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mockito/mockito-core/2.7.19
2018-08-01 20:22:23,126 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:23,127 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-cas/3.0.0-SNAPSHOT
2018-08-01 20:22:23,127 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-saml/3.0.0-SNAPSHOT
2018-08-01 20:22:23,127 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oauth/3.0.0-SNAPSHOT
2018-08-01 20:22:23,128 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oidc/3.0.0-SNAPSHOT
2018-08-01 20:22:23,128 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-ldap/3.0.0-SNAPSHOT
2018-08-01 20:22:23,128 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-http/3.0.0-SNAPSHOT
2018-08-01 20:22:23,128 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/zaxxer/HikariCP/2.6.1
2018-08-01 20:22:23,137 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-sql/3.0.0-SNAPSHOT
2018-08-01 20:22:23,137 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/security/spring-security-crypto/4.2.2.RELEASE
2018-08-01 20:22:23,137 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-08-01 20:22:23,138 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:23,138 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-08-01 20:22:23,138 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-08-01 20:22:23,139 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-ldap/3.0.0-SNAPSHOT
2018-08-01 20:22:23,139 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/unboundid/unboundid-ldapsdk/3.2.1
2018-08-01 20:22:23,139 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-sql/3.0.0-SNAPSHOT
2018-08-01 20:22:23,139 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:23,140 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/commons-codec/commons-codec/1.10
2018-08-01 20:22:23,140 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/github/scribejava/scribejava-apis/3.3.0
2018-08-01 20:22:23,140 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.7
2018-08-01 20:22:23,141 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-08-01 20:22:23,141 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:23,141 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-08-01 20:22:23,141 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-08-01 20:22:23,142 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:23,142 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/jasig/cas/client/cas-client-core/3.4.1
2018-08-01 20:22:23,142 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/jasig/cas/client/cas-client-support-saml/3.4.1
2018-08-01 20:22:23,142 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-08-01 20:22:23,142 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/guava/guava/21.0
2018-08-01 20:22:23,143 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:23,143 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-08-01 20:22:23,149 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-08-01 20:22:23,149 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:23,149 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/openid4java/openid4java/1.0.0
2018-08-01 20:22:23,149 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.25
2018-08-01 20:22:23,150 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/xml-apis/xml-apis/2.0.2
2018-08-01 20:22:23,150 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-08-01 20:22:23,150 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:23,150 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-08-01 20:22:23,151 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-08-01 20:22:23,152 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:23,153 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/commons-codec/commons-codec/1.10
2018-08-01 20:22:23,153 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.7
2018-08-01 20:22:23,155 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:23,165 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-08-01 20:22:23,165 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-08-01 20:22:23,165 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mockito/mockito-core/2.7.19
2018-08-01 20:22:23,165 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/guava/guava/21.0
2018-08-01 20:22:23,166 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/nanohttpd/nanohttpd/2.3.1
2018-08-01 20:22:23,166 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:23,166 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-core/3.3.0
2018-08-01 20:22:23,166 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/net/shibboleth/utilities/java-support/7.3.0
2018-08-01 20:22:23,170 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-saml-api/3.3.0
2018-08-01 20:22:23,170 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-saml-impl/3.3.0
2018-08-01 20:22:23,170 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-soap-api/3.3.0
2018-08-01 20:22:23,170 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-xmlsec-api/3.3.0
2018-08-01 20:22:23,171 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-security-api/3.3.0
2018-08-01 20:22:23,171 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-security-impl/3.3.0
2018-08-01 20:22:23,171 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-profile-api/3.3.0
2018-08-01 20:22:23,171 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-profile-impl/3.3.0
2018-08-01 20:22:23,172 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-messaging-api/3.3.0
2018-08-01 20:22:23,172 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-messaging-impl/3.3.0
2018-08-01 20:22:23,172 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-xmlsec-impl/3.3.0
2018-08-01 20:22:23,172 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/guava/guava/21.0
2018-08-01 20:22:23,182 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/cryptacular/cryptacular/1.1.0
2018-08-01 20:22:23,182 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/joda-time/joda-time/2.9.2
2018-08-01 20:22:23,182 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/xalan/xalan/2.7.2
2018-08-01 20:22:23,182 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/velocity/velocity/1.7
2018-08-01 20:22:23,183 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/commons-collections/commons-collections/3.2.2
2018-08-01 20:22:23,183 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.25
2018-08-01 20:22:23,183 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-08-01 20:22:23,183 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-core/4.3.7.RELEASE
2018-08-01 20:22:23,184 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:23,184 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-08-01 20:22:23,184 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-08-01 20:22:23,184 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-test/4.3.7.RELEASE
2018-08-01 20:22:23,185 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-web/4.3.7.RELEASE
2018-08-01 20:22:23,185 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mockito/mockito-core/2.7.19
2018-08-01 20:22:23,185 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:23,186 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-api-1.0-sdk/1.9.50
2018-08-01 20:22:23,186 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-jsr107cache/1.9.50
2018-08-01 20:22:23,186 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/net/sf/jsr107cache/jsr107cache/1.1
2018-08-01 20:22:23,204 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-08-01 20:22:23,204 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:23,204 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-08-01 20:22:23,205 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-08-01 20:22:23,205 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-testing/1.9.50
2018-08-01 20:22:23,205 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-api-labs/1.9.50
2018-08-01 20:22:23,205 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-api-stubs/1.9.50
2018-08-01 20:22:23,206 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:23,206 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/nimbusds/oauth2-oidc-sdk/5.24.2
2018-08-01 20:22:23,206 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/nimbusds/nimbus-jose-jwt/4.35
2018-08-01 20:22:23,206 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:23,207 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-08-01 20:22:23,207 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-08-01 20:22:23,207 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:23,207 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/nimbusds/nimbus-jose-jwt/4.35
2018-08-01 20:22:23,208 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.56
2018-08-01 20:22:23,208 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:23,208 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-08-01 20:22:23,208 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-08-01 20:22:23,209 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oauth/3.0.0-SNAPSHOT
2018-08-01 20:22:23,217 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:23,217 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/ldaptive/ldaptive/1.2.1
2018-08-01 20:22:23,217 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:23,217 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-08-01 20:22:23,218 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-08-01 20:22:23,218 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/unboundid/unboundid-ldapsdk/3.2.1
2018-08-01 20:22:23,218 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:23,228 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/jdbi/jdbi/2.78
2018-08-01 20:22:23,228 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:23,228 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-08-01 20:22:23,229 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/security/spring-security-crypto/4.2.2.RELEASE
2018-08-01 20:22:23,233 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/h2database/h2/1.4.194
2018-08-01 20:22:23,233 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:23,233 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mongodb/mongo-java-driver/3.4.2
2018-08-01 20:22:23,233 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:23,234 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-08-01 20:22:23,234 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-08-01 20:22:23,234 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-08-01 20:22:23,234 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/de/flapdoodle/embed/de.flapdoodle.embed.mongo/2.0.0
2018-08-01 20:22:23,237 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:23,238 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/ektorp/org.ektorp/1.4.4
2018-08-01 20:22:23,238 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.3.3
2018-08-01 20:22:23,238 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:23,239 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/io/bdrc/mcouch-ektorp/1.0.0
2018-08-01 20:22:23,239 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-08-01 20:22:23,239 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-08-01 20:22:23,239 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-08-01 20:22:23,240 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:23,244 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-core/4.3.7.RELEASE
2018-08-01 20:22:23,244 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-08-01 20:22:23,245 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-08-01 20:22:23,245 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-08-01 20:22:23,247 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mockito/mockito-core/2.7.19
2018-08-01 20:22:23,248 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-08-01 20:22:23,248 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/kerby-kdc/1.0.0
2018-08-01 20:22:23,248 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/kerb-simplekdc/1.0.0
2018-08-01 20:22:23,252 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/kerb-client/1.0.0
2018-08-01 20:22:23,253 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/token-provider/1.0.0
2018-08-01 20:22:23,253 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/integration-test/1.0.0
2018-08-01 20:22:23,693 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/eclipse/jdt/org.eclipse.jdt.core/3.13.102
2018-08-01 20:22:23,697 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/martiansoftware/jsap/2.1
2018-08-01 20:22:23,697 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/log4j/log4j/1.2.17
2018-08-01 20:22:23,704 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/commons-io/commons-io/2.5
2018-08-01 20:22:23,706 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/maven/maven-model/3.3.9
2018-08-01 20:22:23,706 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/commons/commons-lang3/3.5
2018-08-01 20:22:23,706 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.9.2
[ERROR] Tests run: 6, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 1.245 s <<< FAILURE! - in spoon.MavenLauncherTest
[ERROR] mavenLauncherTestMultiModulesAndVariables(spoon.MavenLauncherTest)  Time elapsed: 0.567 s  <<< FAILURE!
java.lang.AssertionError: Content of classpath: 
	at spoon.MavenLauncherTest.mavenLauncherTestMultiModulesAndVariables(MavenLauncherTest.java:76)

[ERROR] spoonMavenLauncherTest(spoon.MavenLauncherTest)  Time elapsed: 0.452 s  <<< FAILURE!
java.lang.AssertionError: expected:<23> but was:<0>
	at spoon.MavenLauncherTest.spoonMavenLauncherTest(MavenLauncherTest.java:20)

[INFO] Running spoon.reflect.visitor.CtInheritanceScannerMethodsTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.66 s - in spoon.reflect.visitor.CtInheritanceScannerMethodsTest
[INFO] Running spoon.reflect.visitor.CtVisitorTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.045 s - in spoon.reflect.visitor.CtVisitorTest
[INFO] Running spoon.reflect.visitor.CtIteratorTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.4 s - in spoon.reflect.visitor.CtIteratorTest
[INFO] Running spoon.reflect.visitor.CtInheritanceScannerTest
[INFO] Tests run: 82, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.858 s - in spoon.reflect.visitor.CtInheritanceScannerTest
[INFO] Running spoon.reflect.visitor.CtScannerTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 20.109 s - in spoon.reflect.visitor.CtScannerTest
[INFO] Running spoon.reflect.ast.AstCheckerTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 19.889 s - in spoon.reflect.ast.AstCheckerTest
[INFO] Running spoon.reflect.ast.CloneTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 20.562 s - in spoon.reflect.ast.CloneTest
[INFO] Running spoon.reflect.declaration.UnknownDeclarationTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.166 s - in spoon.reflect.declaration.UnknownDeclarationTest
[INFO] Running spoon.reflect.declaration.CtTypeInformationTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.939 s - in spoon.reflect.declaration.CtTypeInformationTest
[INFO] Running spoon.test.enums.EnumsTypeTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.211 s - in spoon.test.enums.EnumsTypeTest
[INFO] Running spoon.test.enums.EnumsTest
[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.194 s - in spoon.test.enums.EnumsTest
[INFO] Running spoon.test.visibility.VisibilityTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.499 s - in spoon.test.visibility.VisibilityTest
[INFO] Running spoon.test.condition.ConditionalTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.412 s - in spoon.test.condition.ConditionalTest
[INFO] Running spoon.test.comment.CommentTest
[INFO] Tests run: 20, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 38.586 s - in spoon.test.comment.CommentTest
[INFO] Running spoon.test.path.PathTest
[INFO] Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.942 s - in spoon.test.path.PathTest
[INFO] Running spoon.test.sourcePosition.SourcePositionTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.224 s - in spoon.test.sourcePosition.SourcePositionTest
[INFO] Running spoon.test.generics.GenericsTest
[INFO] Tests run: 45, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 7.017 s - in spoon.test.generics.GenericsTest
[INFO] Running spoon.test.exceptions.ExceptionTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.745 s - in spoon.test.exceptions.ExceptionTest
[INFO] Running spoon.test.filters.CUFilterTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.167 s - in spoon.test.filters.CUFilterTest
[INFO] Running spoon.test.filters.FilterTest
2018-08-01 20:24:28,620 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-01 20:24:28,621 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-01 20:24:28,625 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-01 20:24:28,625 INFO spoon.Launcher - running Spoon...
2018-08-01 20:24:28,626 INFO spoon.Launcher - start processing...
2018-08-01 20:24:28,706 INFO spoon.Launcher - end of processing: 
2018-08-01 20:24:28,708 INFO spoon.Launcher - no errors, no warnings
2018-08-01 20:24:29,074 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-01 20:24:29,075 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-01 20:24:29,076 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-01 20:24:29,076 INFO spoon.Launcher - running Spoon...
2018-08-01 20:24:29,076 INFO spoon.Launcher - start processing...
2018-08-01 20:24:29,155 INFO spoon.Launcher - end of processing: 
2018-08-01 20:24:29,156 INFO spoon.Launcher - no errors, no warnings
2018-08-01 20:24:29,490 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-01 20:24:29,492 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-01 20:24:29,494 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-01 20:24:29,494 INFO spoon.Launcher - running Spoon...
2018-08-01 20:24:29,495 INFO spoon.Launcher - start processing...
2018-08-01 20:24:29,591 INFO spoon.Launcher - end of processing: 
2018-08-01 20:24:29,593 INFO spoon.Launcher - no errors, no warnings
2018-08-01 20:24:30,082 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-01 20:24:30,089 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-01 20:24:30,102 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-01 20:24:30,102 INFO spoon.Launcher - running Spoon...
2018-08-01 20:24:30,103 INFO spoon.Launcher - start processing...
2018-08-01 20:24:30,180 INFO spoon.Launcher - end of processing: 
2018-08-01 20:24:30,181 INFO spoon.Launcher - no errors, no warnings
2018-08-01 20:24:30,317 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-01 20:24:30,319 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-01 20:24:30,320 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-01 20:24:30,321 INFO spoon.Launcher - running Spoon...
2018-08-01 20:24:30,321 INFO spoon.Launcher - start processing...
2018-08-01 20:24:30,394 INFO spoon.Launcher - end of processing: 
2018-08-01 20:24:30,394 INFO spoon.Launcher - no errors, no warnings
2018-08-01 20:24:31,285 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-01 20:24:31,286 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-01 20:24:31,287 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-01 20:24:31,287 INFO spoon.Launcher - running Spoon...
2018-08-01 20:24:31,287 INFO spoon.Launcher - start processing...
2018-08-01 20:24:31,377 INFO spoon.Launcher - end of processing: 
2018-08-01 20:24:31,377 INFO spoon.Launcher - no errors, no warnings
2018-08-01 20:24:31,488 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-01 20:24:31,491 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-01 20:24:31,995 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-01 20:24:31,996 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-01 20:24:31,997 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-01 20:24:31,997 INFO spoon.Launcher - running Spoon...
2018-08-01 20:24:31,997 INFO spoon.Launcher - start processing...
2018-08-01 20:24:32,070 INFO spoon.Launcher - end of processing: 
2018-08-01 20:24:32,070 INFO spoon.Launcher - no errors, no warnings
2018-08-01 20:24:32,459 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-01 20:24:32,460 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-01 20:24:32,461 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-01 20:24:32,461 INFO spoon.Launcher - running Spoon...
2018-08-01 20:24:32,461 INFO spoon.Launcher - start processing...
2018-08-01 20:24:32,552 INFO spoon.Launcher - end of processing: 
2018-08-01 20:24:32,552 INFO spoon.Launcher - no errors, no warnings
2018-08-01 20:24:32,700 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-01 20:24:32,700 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-01 20:24:32,701 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-01 20:24:32,702 INFO spoon.Launcher - running Spoon...
2018-08-01 20:24:32,702 INFO spoon.Launcher - start processing...
2018-08-01 20:24:32,918 INFO spoon.Launcher - end of processing: 
2018-08-01 20:24:32,924 INFO spoon.Launcher - no errors, no warnings
2018-08-01 20:24:33,295 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-01 20:24:33,296 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-01 20:24:33,297 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-01 20:24:33,297 INFO spoon.Launcher - running Spoon...
2018-08-01 20:24:33,297 INFO spoon.Launcher - start processing...
2018-08-01 20:24:33,371 INFO spoon.Launcher - end of processing: 
2018-08-01 20:24:33,371 INFO spoon.Launcher - no errors, no warnings
2018-08-01 20:24:33,548 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-01 20:24:33,548 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-01 20:24:33,549 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-01 20:24:33,550 INFO spoon.Launcher - running Spoon...
2018-08-01 20:24:33,550 INFO spoon.Launcher - start processing...
2018-08-01 20:24:33,622 INFO spoon.Launcher - end of processing: 
2018-08-01 20:24:33,623 INFO spoon.Launcher - no errors, no warnings
2018-08-01 20:24:33,682 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-01 20:24:33,682 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-01 20:24:33,683 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-01 20:24:33,683 INFO spoon.Launcher - running Spoon...
2018-08-01 20:24:33,684 INFO spoon.Launcher - start processing...
2018-08-01 20:24:33,756 INFO spoon.Launcher - end of processing: 
2018-08-01 20:24:33,757 INFO spoon.Launcher - no errors, no warnings
2018-08-01 20:24:34,433 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-01 20:24:34,439 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-01 20:24:34,457 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-01 20:24:34,458 INFO spoon.Launcher - running Spoon...
2018-08-01 20:24:34,458 INFO spoon.Launcher - start processing...
2018-08-01 20:24:34,569 INFO spoon.Launcher - end of processing: 
2018-08-01 20:24:34,577 INFO spoon.Launcher - no errors, no warnings
2018-08-01 20:24:34,672 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-01 20:24:34,672 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-01 20:24:34,673 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-01 20:24:34,673 INFO spoon.Launcher - running Spoon...
2018-08-01 20:24:34,674 INFO spoon.Launcher - start processing...
2018-08-01 20:24:34,780 INFO spoon.Launcher - end of processing: 
2018-08-01 20:24:34,781 INFO spoon.Launcher - no errors, no warnings
2018-08-01 20:24:35,355 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-01 20:24:35,355 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-01 20:24:35,362 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-01 20:24:35,362 INFO spoon.Launcher - running Spoon...
2018-08-01 20:24:35,362 INFO spoon.Launcher - start processing...
2018-08-01 20:24:35,460 INFO spoon.Launcher - end of processing: 
2018-08-01 20:24:35,460 INFO spoon.Launcher - no errors, no warnings
2018-08-01 20:24:35,465 INFO spoon.Launcher - Step filter CtClass only) spoon.reflect.CtModelImpl$CtRootPackage cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtRootPackage: unnamed package
2018-08-01 20:24:35,466 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtPackageImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageImpl: spoon
2018-08-01 20:24:35,466 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtPackageImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageImpl: spoon.test
2018-08-01 20:24:35,466 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtPackageImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageImpl: spoon.test.filters
2018-08-01 20:24:35,467 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtPackageImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,467 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-08-01 20:24:35,468 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,468 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: AbstractTostada() {
}
2018-08-01 20:24:35,468 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-01 20:24:35,468 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-08-01 20:24:35,469 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.lang.Object()
2018-08-01 20:24:35,469 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-08-01 20:24:35,469 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,470 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-08-01 20:24:35,470 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,470 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}
2018-08-01 20:24:35,471 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-01 20:24:35,471 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-01 20:24:35,471 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,472 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-01 20:24:35,472 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,472 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-08-01 20:24:35,472 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,473 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}
2018-08-01 20:24:35,473 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}
2018-08-01 20:24:35,474 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtNewClassImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtNewClassImpl: new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}
2018-08-01 20:24:35,474 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.AbstractTostada$1()
2018-08-01 20:24:35,477 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada.1
2018-08-01 20:24:35,478 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-08-01 20:24:35,479 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,492 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-01 20:24:35,492 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,493 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-01 20:24:35,493 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,493 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: 1() {
}
2018-08-01 20:24:35,494 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-01 20:24:35,494 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-08-01 20:24:35,494 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.Tostada()
2018-08-01 20:24:35,495 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-01 20:24:35,495 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,495 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-01 20:24:35,495 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,496 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
    super.prepare();
}
2018-08-01 20:24:35,496 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-01 20:24:35,500 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-01 20:24:35,500 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,501 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-01 20:24:35,501 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,501 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,502 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    super.prepare();
}
2018-08-01 20:24:35,502 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.prepare()
2018-08-01 20:24:35,502 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-08-01 20:24:35,503 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-08-01 20:24:35,503 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-01 20:24:35,504 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,505 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: prepare()
2018-08-01 20:24:35,505 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-01 20:24:35,505 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,506 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,506 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}
2018-08-01 20:24:35,506 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-01 20:24:35,507 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-01 20:24:35,507 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,507 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-01 20:24:35,507 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,508 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-08-01 20:24:35,508 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,508 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return super.make();
}
2018-08-01 20:24:35,508 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return super.make()
2018-08-01 20:24:35,509 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.make()
2018-08-01 20:24:35,509 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-08-01 20:24:35,509 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-08-01 20:24:35,509 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-01 20:24:35,510 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,510 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: make()
2018-08-01 20:24:35,510 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-01 20:24:35,510 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,511 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-08-01 20:24:35,511 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,511 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public abstract void prepare();
2018-08-01 20:24:35,511 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,512 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void honey() {
}
2018-08-01 20:24:35,512 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,513 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-01 20:24:35,513 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: /**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
2018-08-01 20:24:35,513 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-08-01 20:24:35,514 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,514 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: Antojito() {
}
2018-08-01 20:24:35,514 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-01 20:24:35,515 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-08-01 20:24:35,515 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.AbstractTostada()
2018-08-01 20:24:35,515 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-08-01 20:24:35,515 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,515 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-08-01 20:24:35,516 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,516 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}
2018-08-01 20:24:35,517 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-01 20:24:35,517 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-01 20:24:35,517 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,517 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-01 20:24:35,518 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,518 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,518 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    java.lang.System.out.println("Antojito");
}
2018-08-01 20:24:35,518 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println("Antojito")
2018-08-01 20:24:35,519 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-08-01 20:24:35,519 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-08-01 20:24:35,519 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-01 20:24:35,520 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,520 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-08-01 20:24:35,520 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-01 20:24:35,520 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,521 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-01 20:24:35,521 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-01 20:24:35,521 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(java.lang.String)
2018-08-01 20:24:35,521 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-01 20:24:35,522 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-01 20:24:35,522 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,522 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-01 20:24:35,522 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,523 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "Antojito"
2018-08-01 20:24:35,523 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-01 20:24:35,523 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,523 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void prepare(java.lang.String ingredient) {
}
2018-08-01 20:24:35,524 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,524 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtParameterImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtParameterImpl: java.lang.String ingredient
2018-08-01 20:24:35,524 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-01 20:24:35,525 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,525 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-01 20:24:35,525 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: /**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
2018-08-01 20:24:35,526 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-08-01 20:24:35,526 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-01 20:24:35,526 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtFieldImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldImpl: private int myfield = 0;
2018-08-01 20:24:35,526 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,527 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 0
2018-08-01 20:24:35,527 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,527 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: FieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}
2018-08-01 20:24:35,528 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    super();
    this.myfield = 0;
}
2018-08-01 20:24:35,528 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-08-01 20:24:35,528 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.util.ArrayList()
2018-08-01 20:24:35,528 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-08-01 20:24:35,529 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-01 20:24:35,529 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-08-01 20:24:35,529 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-01 20:24:35,529 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtAssignmentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAssignmentImpl: this.myfield = 0
2018-08-01 20:24:35,530 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,530 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldWriteImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldWriteImpl: this.myfield
2018-08-01 20:24:35,530 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThisAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThisAccessImpl: this
2018-08-01 20:24:35,530 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-01 20:24:35,531 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,531 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-01 20:24:35,531 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-01 20:24:35,532 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,532 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: myfield
2018-08-01 20:24:35,532 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-01 20:24:35,532 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,533 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,533 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 0
2018-08-01 20:24:35,533 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,534 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}
2018-08-01 20:24:35,534 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,535 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}
2018-08-01 20:24:35,535 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtAssignmentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAssignmentImpl: myfield = super.size()
2018-08-01 20:24:35,535 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,537 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldWriteImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldWriteImpl: myfield
2018-08-01 20:24:35,537 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThisAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThisAccessImpl: 
2018-08-01 20:24:35,538 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-01 20:24:35,538 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,538 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-01 20:24:35,539 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-01 20:24:35,539 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,539 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: myfield
2018-08-01 20:24:35,541 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-01 20:24:35,542 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,542 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,542 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.size()
2018-08-01 20:24:35,542 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-08-01 20:24:35,543 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-08-01 20:24:35,543 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-08-01 20:24:35,543 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-01 20:24:35,543 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: size()
2018-08-01 20:24:35,544 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-08-01 20:24:35,544 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-01 20:24:35,544 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,545 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: java.lang.Object o = super.get(myfield)
2018-08-01 20:24:35,545 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-08-01 20:24:35,545 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,546 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.get(myfield)
2018-08-01 20:24:35,546 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-08-01 20:24:35,546 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-08-01 20:24:35,546 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-08-01 20:24:35,547 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-01 20:24:35,547 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: get(int)
2018-08-01 20:24:35,547 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-08-01 20:24:35,547 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-01 20:24:35,548 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-08-01 20:24:35,548 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,548 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,548 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: myfield
2018-08-01 20:24:35,549 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThisAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThisAccessImpl: 
2018-08-01 20:24:35,549 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-01 20:24:35,549 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,549 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-01 20:24:35,550 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-01 20:24:35,550 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,550 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: myfield
2018-08-01 20:24:35,550 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-01 20:24:35,551 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,551 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,551 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: /**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
2018-08-01 20:24:35,552 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.SuppressWarnings("bar")
2018-08-01 20:24:35,552 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.SuppressWarnings
2018-08-01 20:24:35,552 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,553 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.SuppressWarnings
2018-08-01 20:24:35,553 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,555 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "bar"
2018-08-01 20:24:35,555 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-01 20:24:35,555 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,556 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: Foo() {
}
2018-08-01 20:24:35,556 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-01 20:24:35,556 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-08-01 20:24:35,557 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.lang.Object()
2018-08-01 20:24:35,557 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-08-01 20:24:35,557 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,557 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-08-01 20:24:35,558 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,558 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtFieldImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldImpl: int i;
2018-08-01 20:24:35,558 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,559 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: void foo() {
    int x = 3;
    int z;
    z = x + (i);
    java.lang.System.out.println(z);
}
2018-08-01 20:24:35,559 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,560 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    int x = 3;
    int z;
    z = x + (i);
    java.lang.System.out.println(z);
}
2018-08-01 20:24:35,560 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: int x = 3
2018-08-01 20:24:35,560 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,560 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 3
2018-08-01 20:24:35,561 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,561 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: int z
2018-08-01 20:24:35,561 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,562 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtAssignmentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAssignmentImpl: z = x + (i)
2018-08-01 20:24:35,562 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,562 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableWriteImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableWriteImpl: z
2018-08-01 20:24:35,562 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: z
2018-08-01 20:24:35,563 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,564 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBinaryOperatorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBinaryOperatorImpl: x + (i)
2018-08-01 20:24:35,564 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,565 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: x
2018-08-01 20:24:35,565 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: x
2018-08-01 20:24:35,565 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,565 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: (i)
2018-08-01 20:24:35,566 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThisAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThisAccessImpl: 
2018-08-01 20:24:35,566 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Foo
2018-08-01 20:24:35,566 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,566 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.Foo
2018-08-01 20:24:35,567 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Foo
2018-08-01 20:24:35,573 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,573 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: i
2018-08-01 20:24:35,573 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Foo
2018-08-01 20:24:35,574 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,574 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,583 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println(z)
2018-08-01 20:24:35,583 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-08-01 20:24:35,583 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-08-01 20:24:35,584 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-01 20:24:35,584 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,584 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-08-01 20:24:35,585 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-01 20:24:35,585 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,585 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-01 20:24:35,585 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-01 20:24:35,586 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(int)
2018-08-01 20:24:35,586 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-01 20:24:35,586 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-01 20:24:35,586 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,587 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,587 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: z
2018-08-01 20:24:35,587 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: z
2018-08-01 20:24:35,587 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,588 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.SuppressWarnings("foo")
int bar() {
    if (0 == 1) {
        throw new java.lang.RuntimeException();
    }
    return i;
}
2018-08-01 20:24:35,588 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.SuppressWarnings("foo")
2018-08-01 20:24:35,589 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.SuppressWarnings
2018-08-01 20:24:35,601 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,601 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.SuppressWarnings
2018-08-01 20:24:35,602 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,602 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "foo"
2018-08-01 20:24:35,602 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-01 20:24:35,602 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,603 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,603 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    if (0 == 1) {
        throw new java.lang.RuntimeException();
    }
    return i;
}
2018-08-01 20:24:35,603 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtIfImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtIfImpl: if (0 == 1) {
    throw new java.lang.RuntimeException();
}
2018-08-01 20:24:35,604 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBinaryOperatorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBinaryOperatorImpl: 0 == 1
2018-08-01 20:24:35,604 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: boolean
2018-08-01 20:24:35,604 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 0
2018-08-01 20:24:35,604 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,605 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 1
2018-08-01 20:24:35,605 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,605 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    throw new java.lang.RuntimeException();
}
2018-08-01 20:24:35,606 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThrowImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThrowImpl: throw new java.lang.RuntimeException()
2018-08-01 20:24:35,606 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtConstructorCallImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorCallImpl: new java.lang.RuntimeException()
2018-08-01 20:24:35,606 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.lang.RuntimeException()
2018-08-01 20:24:35,606 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.RuntimeException
2018-08-01 20:24:35,607 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,607 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.RuntimeException
2018-08-01 20:24:35,607 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,608 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return i
2018-08-01 20:24:35,608 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: i
2018-08-01 20:24:35,608 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThisAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThisAccessImpl: 
2018-08-01 20:24:35,609 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Foo
2018-08-01 20:24:35,609 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,609 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.Foo
2018-08-01 20:24:35,609 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Foo
2018-08-01 20:24:35,610 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,610 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: i
2018-08-01 20:24:35,610 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Foo
2018-08-01 20:24:35,610 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,611 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,611 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: FooLine() {
}
2018-08-01 20:24:35,611 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-01 20:24:35,611 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-08-01 20:24:35,612 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.lang.Object()
2018-08-01 20:24:35,612 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-08-01 20:24:35,612 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,612 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-08-01 20:24:35,613 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,613 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: void simple() {
    int x = 3;
    int z = 0;
    java.lang.System.out.println(z);
}
2018-08-01 20:24:35,613 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,614 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    int x = 3;
    int z = 0;
    java.lang.System.out.println(z);
}
2018-08-01 20:24:35,614 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: int x = 3
2018-08-01 20:24:35,614 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,615 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 3
2018-08-01 20:24:35,615 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,615 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: int z = 0
2018-08-01 20:24:35,615 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,616 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 0
2018-08-01 20:24:35,616 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,616 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println(z)
2018-08-01 20:24:35,617 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-08-01 20:24:35,617 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-08-01 20:24:35,617 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-01 20:24:35,617 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,618 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-08-01 20:24:35,618 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-01 20:24:35,618 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,618 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-01 20:24:35,618 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-01 20:24:35,619 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(int)
2018-08-01 20:24:35,619 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-01 20:24:35,619 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-01 20:24:35,619 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,620 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,620 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: z
2018-08-01 20:24:35,620 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: z
2018-08-01 20:24:35,620 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,621 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: void loopBlock() {
    for (int i = 0; i < 10; i++) {
        java.lang.System.out.println(i);
    }
}
2018-08-01 20:24:35,621 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,622 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    for (int i = 0; i < 10; i++) {
        java.lang.System.out.println(i);
    }
}
2018-08-01 20:24:35,622 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtForImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtForImpl: for (int i = 0; i < 10; i++) {
    java.lang.System.out.println(i);
}
2018-08-01 20:24:35,622 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: int i = 0
2018-08-01 20:24:35,623 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,623 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 0
2018-08-01 20:24:35,623 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,623 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBinaryOperatorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBinaryOperatorImpl: i < 10
2018-08-01 20:24:35,623 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: boolean
2018-08-01 20:24:35,624 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: i
2018-08-01 20:24:35,625 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: i
2018-08-01 20:24:35,625 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,625 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 10
2018-08-01 20:24:35,625 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,625 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtUnaryOperatorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtUnaryOperatorImpl: i++
2018-08-01 20:24:35,625 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,625 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableWriteImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableWriteImpl: i
2018-08-01 20:24:35,625 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: i
2018-08-01 20:24:35,625 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,626 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    java.lang.System.out.println(i);
}
2018-08-01 20:24:35,626 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println(i)
2018-08-01 20:24:35,626 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-08-01 20:24:35,626 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-08-01 20:24:35,626 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-01 20:24:35,626 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,626 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-08-01 20:24:35,627 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-01 20:24:35,627 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,627 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-01 20:24:35,627 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-01 20:24:35,627 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(int)
2018-08-01 20:24:35,627 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-01 20:24:35,627 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-01 20:24:35,627 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,627 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,627 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: i
2018-08-01 20:24:35,627 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: i
2018-08-01 20:24:35,627 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,628 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: void loopNoBlock() {
    for (int i = 0; i < 10; i++)
        java.lang.System.out.println(i);

}
2018-08-01 20:24:35,628 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,628 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    for (int i = 0; i < 10; i++)
        java.lang.System.out.println(i);

}
2018-08-01 20:24:35,628 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtForImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtForImpl: for (int i = 0; i < 10; i++)
    java.lang.System.out.println(i);

2018-08-01 20:24:35,628 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: int i = 0
2018-08-01 20:24:35,628 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,628 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 0
2018-08-01 20:24:35,629 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,629 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBinaryOperatorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBinaryOperatorImpl: i < 10
2018-08-01 20:24:35,629 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: boolean
2018-08-01 20:24:35,629 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: i
2018-08-01 20:24:35,629 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: i
2018-08-01 20:24:35,629 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,629 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 10
2018-08-01 20:24:35,629 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,629 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtUnaryOperatorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtUnaryOperatorImpl: i++
2018-08-01 20:24:35,629 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,629 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableWriteImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableWriteImpl: i
2018-08-01 20:24:35,629 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: i
2018-08-01 20:24:35,630 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,630 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: java.lang.System.out.println(i);

2018-08-01 20:24:35,630 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println(i)
2018-08-01 20:24:35,630 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-08-01 20:24:35,630 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-08-01 20:24:35,630 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-01 20:24:35,630 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,630 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-08-01 20:24:35,631 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-01 20:24:35,631 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,631 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-01 20:24:35,632 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-01 20:24:35,632 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(int)
2018-08-01 20:24:35,632 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-01 20:24:35,632 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-01 20:24:35,632 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,632 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,632 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: i
2018-08-01 20:24:35,632 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: i
2018-08-01 20:24:35,632 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,632 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: void loopNoBody() {
    for (int i = 0; i < 10; i++);
}
2018-08-01 20:24:35,633 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,633 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    for (int i = 0; i < 10; i++);
}
2018-08-01 20:24:35,633 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtForImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtForImpl: for (int i = 0; i < 10; i++);
2018-08-01 20:24:35,633 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: int i = 0
2018-08-01 20:24:35,633 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,633 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 0
2018-08-01 20:24:35,633 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,633 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBinaryOperatorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBinaryOperatorImpl: i < 10
2018-08-01 20:24:35,633 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: boolean
2018-08-01 20:24:35,633 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: i
2018-08-01 20:24:35,633 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: i
2018-08-01 20:24:35,634 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,634 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 10
2018-08-01 20:24:35,634 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,634 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtUnaryOperatorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtUnaryOperatorImpl: i++
2018-08-01 20:24:35,634 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,634 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableWriteImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableWriteImpl: i
2018-08-01 20:24:35,634 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: i
2018-08-01 20:24:35,634 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,634 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: void ifBlock() {
    if (3 < 4) {
        java.lang.System.out.println("if");
    }
}
2018-08-01 20:24:35,634 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,635 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    if (3 < 4) {
        java.lang.System.out.println("if");
    }
}
2018-08-01 20:24:35,635 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtIfImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtIfImpl: if (3 < 4) {
    java.lang.System.out.println("if");
}
2018-08-01 20:24:35,635 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBinaryOperatorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBinaryOperatorImpl: 3 < 4
2018-08-01 20:24:35,635 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: boolean
2018-08-01 20:24:35,635 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 3
2018-08-01 20:24:35,635 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,635 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 4
2018-08-01 20:24:35,635 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,636 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    java.lang.System.out.println("if");
}
2018-08-01 20:24:35,636 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println("if")
2018-08-01 20:24:35,636 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-08-01 20:24:35,636 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-08-01 20:24:35,636 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-01 20:24:35,636 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,636 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-08-01 20:24:35,636 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-01 20:24:35,637 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,637 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-01 20:24:35,637 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-01 20:24:35,637 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(java.lang.String)
2018-08-01 20:24:35,637 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-01 20:24:35,637 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-01 20:24:35,637 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,637 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-01 20:24:35,637 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,638 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "if"
2018-08-01 20:24:35,638 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-01 20:24:35,638 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,638 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: void ifNoBlock() {
    if (3 < 4)
        java.lang.System.out.println("if");

}
2018-08-01 20:24:35,638 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,638 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    if (3 < 4)
        java.lang.System.out.println("if");

}
2018-08-01 20:24:35,639 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtIfImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtIfImpl: if (3 < 4)
    java.lang.System.out.println("if");

2018-08-01 20:24:35,639 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBinaryOperatorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBinaryOperatorImpl: 3 < 4
2018-08-01 20:24:35,639 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: boolean
2018-08-01 20:24:35,639 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 3
2018-08-01 20:24:35,639 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,639 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 4
2018-08-01 20:24:35,639 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,639 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: java.lang.System.out.println("if");

2018-08-01 20:24:35,640 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println("if")
2018-08-01 20:24:35,640 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-08-01 20:24:35,640 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-08-01 20:24:35,640 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-01 20:24:35,640 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,640 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-08-01 20:24:35,662 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-01 20:24:35,662 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,662 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-01 20:24:35,662 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-01 20:24:35,662 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(java.lang.String)
2018-08-01 20:24:35,662 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-01 20:24:35,662 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-01 20:24:35,662 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,662 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-01 20:24:35,663 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,663 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "if"
2018-08-01 20:24:35,663 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-01 20:24:35,663 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,663 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: void switchBlock() {
    switch ("test") {
        case "test" :
            break;
        default :
            java.lang.System.out.println("switch");
    }
}
2018-08-01 20:24:35,663 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,664 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    switch ("test") {
        case "test" :
            break;
        default :
            java.lang.System.out.println("switch");
    }
}
2018-08-01 20:24:35,664 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSwitchImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSwitchImpl: switch ("test") {
    case "test" :
        break;
    default :
        java.lang.System.out.println("switch");
}
2018-08-01 20:24:35,664 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "test"
2018-08-01 20:24:35,664 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-01 20:24:35,664 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,665 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCaseImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCaseImpl: case "test" :
    break;
2018-08-01 20:24:35,665 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "test"
2018-08-01 20:24:35,665 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-01 20:24:35,665 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,665 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBreakImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBreakImpl: break
2018-08-01 20:24:35,665 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCaseImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCaseImpl: default :
    java.lang.System.out.println("switch");
2018-08-01 20:24:35,665 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println("switch")
2018-08-01 20:24:35,666 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-08-01 20:24:35,666 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-08-01 20:24:35,666 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-01 20:24:35,666 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,666 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-08-01 20:24:35,666 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-01 20:24:35,666 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,666 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-01 20:24:35,666 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-01 20:24:35,666 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(java.lang.String)
2018-08-01 20:24:35,667 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-01 20:24:35,667 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-01 20:24:35,667 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,667 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-01 20:24:35,667 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,667 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "switch"
2018-08-01 20:24:35,667 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-01 20:24:35,667 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,667 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtInterfaceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInterfaceImpl: interface Honey {
    void honey();
}
2018-08-01 20:24:35,667 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: void honey();
2018-08-01 20:24:35,667 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,668 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtInterfaceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInterfaceImpl: interface IFoo {}
2018-08-01 20:24:35,668 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtInterfaceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInterfaceImpl: public interface ITostada extends spoon.test.filters.testclasses.IFoo {
    spoon.test.filters.testclasses.ITostada make();
}
2018-08-01 20:24:35,668 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.IFoo
2018-08-01 20:24:35,668 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,668 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: spoon.test.filters.testclasses.ITostada make();
2018-08-01 20:24:35,668 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-08-01 20:24:35,668 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,668 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: /**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
2018-08-01 20:24:35,669 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-01 20:24:35,669 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,669 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: SubTostada() {
}
2018-08-01 20:24:35,669 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-01 20:24:35,669 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-08-01 20:24:35,669 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.Tostada()
2018-08-01 20:24:35,669 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-01 20:24:35,669 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,669 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-01 20:24:35,669 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,670 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}
2018-08-01 20:24:35,670 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-01 20:24:35,670 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-01 20:24:35,670 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,670 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-01 20:24:35,670 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,670 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,671 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}
2018-08-01 20:24:35,671 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println("SubTostada")
2018-08-01 20:24:35,671 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-08-01 20:24:35,671 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-08-01 20:24:35,671 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-01 20:24:35,671 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,671 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-08-01 20:24:35,671 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-01 20:24:35,671 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,671 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-01 20:24:35,672 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-01 20:24:35,672 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(java.lang.String)
2018-08-01 20:24:35,672 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-01 20:24:35,672 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-01 20:24:35,672 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,672 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-01 20:24:35,672 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,672 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "SubTostada"
2018-08-01 20:24:35,672 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-01 20:24:35,672 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,672 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.prepare()
2018-08-01 20:24:35,673 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-08-01 20:24:35,673 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-08-01 20:24:35,673 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-01 20:24:35,673 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,673 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: prepare()
2018-08-01 20:24:35,673 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-01 20:24:35,673 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,673 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,673 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: /**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
2018-08-01 20:24:35,674 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-08-01 20:24:35,674 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,674 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: Tacos() {
}
2018-08-01 20:24:35,674 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-01 20:24:35,674 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-08-01 20:24:35,674 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.lang.Object()
2018-08-01 20:24:35,674 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-08-01 20:24:35,674 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,674 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-08-01 20:24:35,674 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,675 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}
2018-08-01 20:24:35,675 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-01 20:24:35,675 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-01 20:24:35,675 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,675 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-01 20:24:35,675 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,675 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-08-01 20:24:35,675 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,675 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return null;
}
2018-08-01 20:24:35,675 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return null
2018-08-01 20:24:35,675 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: null
2018-08-01 20:24:35,676 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: <nulltype>
2018-08-01 20:24:35,676 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}
2018-08-01 20:24:35,676 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,676 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}
2018-08-01 20:24:35,676 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()
2018-08-01 20:24:35,676 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList<java.lang.String>
2018-08-01 20:24:35,676 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-01 20:24:35,677 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-01 20:24:35,677 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,677 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtConstructorCallImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorCallImpl: new java.util.ArrayList<java.lang.String>()
2018-08-01 20:24:35,677 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.util.ArrayList()
2018-08-01 20:24:35,677 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-08-01 20:24:35,677 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-01 20:24:35,677 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList<java.lang.String>
2018-08-01 20:24:35,677 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-01 20:24:35,677 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-01 20:24:35,677 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,677 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: strings.size()
2018-08-01 20:24:35,678 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: strings
2018-08-01 20:24:35,678 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: strings
2018-08-01 20:24:35,678 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList<java.lang.String>
2018-08-01 20:24:35,678 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-01 20:24:35,678 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-01 20:24:35,678 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,678 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: size()
2018-08-01 20:24:35,678 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-08-01 20:24:35,678 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-01 20:24:35,678 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,678 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: /**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
2018-08-01 20:24:35,679 INFO spoon.Launcher - Step 6) Skipped element, because CtFunction#accept(input) returned false
Parameter 1) CtMethodImpl: void honey();
2018-08-01 20:24:35,679 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-08-01 20:24:35,679 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,679 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Honey
2018-08-01 20:24:35,679 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,679 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: Tostada() {
}
2018-08-01 20:24:35,679 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-01 20:24:35,679 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-08-01 20:24:35,679 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.AbstractTostada()
2018-08-01 20:24:35,680 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-08-01 20:24:35,680 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,680 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-08-01 20:24:35,680 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,680 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}
2018-08-01 20:24:35,680 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-01 20:24:35,680 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-01 20:24:35,680 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,680 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-01 20:24:35,681 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,681 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-08-01 20:24:35,681 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,681 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}
2018-08-01 20:24:35,681 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}
2018-08-01 20:24:35,681 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtNewClassImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtNewClassImpl: new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}
2018-08-01 20:24:35,681 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.Tostada$1()
2018-08-01 20:24:35,682 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada.1
2018-08-01 20:24:35,682 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-01 20:24:35,682 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,682 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-01 20:24:35,683 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,683 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-01 20:24:35,683 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,683 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: 1() {
}
2018-08-01 20:24:35,683 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-01 20:24:35,683 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-08-01 20:24:35,683 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.Tostada()
2018-08-01 20:24:35,683 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-01 20:24:35,683 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,683 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-01 20:24:35,684 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,684 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}
2018-08-01 20:24:35,684 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-01 20:24:35,684 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-01 20:24:35,684 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,684 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-01 20:24:35,684 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,684 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,684 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    int a = 3;
    super.prepare();
}
2018-08-01 20:24:35,684 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: int a = 3
2018-08-01 20:24:35,685 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,685 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 3
2018-08-01 20:24:35,685 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-01 20:24:35,685 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.prepare()
2018-08-01 20:24:35,685 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-08-01 20:24:35,685 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-08-01 20:24:35,685 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-01 20:24:35,685 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,685 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: prepare()
2018-08-01 20:24:35,685 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-01 20:24:35,685 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-01 20:24:35,685 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,686 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
}
2018-08-01 20:24:35,686 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-01 20:24:35,686 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-01 20:24:35,686 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,686 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-01 20:24:35,686 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,686 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,686 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-01 20:24:35,686 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public java.lang.String toString() {
    return "";
}
2018-08-01 20:24:35,686 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-01 20:24:35,687 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-01 20:24:35,687 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,687 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-01 20:24:35,687 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,687 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-01 20:24:35,687 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,687 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return "";
}
2018-08-01 20:24:35,687 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return ""
2018-08-01 20:24:35,687 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: ""
2018-08-01 20:24:35,687 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-01 20:24:35,687 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,688 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void honey() {
}
2018-08-01 20:24:35,688 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-01 20:24:35,688 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-01 20:24:35,688 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,688 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-01 20:24:35,688 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-01 20:24:35,688 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,688 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-01 20:24:35,688 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void foo() {
}
2018-08-01 20:24:35,689 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-01 20:24:35,689 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-01 20:24:35,689 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: /**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
[INFO] Tests run: 43, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 7.36 s - in spoon.test.filters.FilterTest
[INFO] Running spoon.test.visitor.VisitorTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.034 s - in spoon.test.visitor.VisitorTest
[INFO] Running spoon.test.visitor.AssignmentsEqualsTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.074 s - in spoon.test.visitor.AssignmentsEqualsTest
[INFO] Running spoon.test.field.FieldTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.308 s - in spoon.test.field.FieldTest
[INFO] Running spoon.test.jdtimportbuilder.ImportBuilderTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.076 s - in spoon.test.jdtimportbuilder.ImportBuilderTest
[INFO] Running spoon.test.parent.NullParentTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.076 s - in spoon.test.parent.NullParentTest
[INFO] Running spoon.test.parent.ParentTest
[WARNING] Tests run: 11, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 1.226 s - in spoon.test.parent.ParentTest
[INFO] Running spoon.test.parent.TopLevelTypeTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.06 s - in spoon.test.parent.TopLevelTypeTest
[INFO] Running spoon.test.parent.SetParentTest
[INFO] Tests run: 67, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.236 s - in spoon.test.parent.SetParentTest
[INFO] Running spoon.test.parent.ContractOnSettersParametrizedTest
[INFO] Tests run: 67, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.68 s - in spoon.test.parent.ContractOnSettersParametrizedTest
[INFO] Running spoon.test.modifiers.TestModifiers
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.614 s - in spoon.test.modifiers.TestModifiers
[INFO] Running spoon.test.support.ResourceTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.579 s - in spoon.test.support.ResourceTest
[INFO] Running spoon.test.invocations.InvocationTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.299 s - in spoon.test.invocations.InvocationTest
[INFO] Running spoon.test.main.MainTest
[INFO] Tests run: 14, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 346.514 s - in spoon.test.main.MainTest
[INFO] Running spoon.test.executable.ExecutableTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.35 s - in spoon.test.executable.ExecutableTest
[INFO] Running spoon.test.executable.ExecutableRefTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.415 s - in spoon.test.executable.ExecutableRefTest
[INFO] Running spoon.test.serializable.SerializableTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.352 s - in spoon.test.serializable.SerializableTest
[INFO] Running spoon.test.serializable.SourcePositionTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.067 s - in spoon.test.serializable.SourcePositionTest
[INFO] Running spoon.test.serializable.ModelStreamerTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.193 s - in spoon.test.serializable.ModelStreamerTest
[INFO] Running spoon.test.labels.TestLabels
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.071 s - in spoon.test.labels.TestLabels
[INFO] Running spoon.test.casts.CastTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.37 s - in spoon.test.casts.CastTest
[INFO] Running spoon.test.initializers.InitializerTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.123 s - in spoon.test.initializers.InitializerTest
[INFO] Running spoon.test.staticFieldAccess.StaticAccessTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.227 s - in spoon.test.staticFieldAccess.StaticAccessTest
[INFO] Running spoon.test.reference.VariableAccessTest
2018-08-01 20:30:36,805 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable e at (/root/workspace/INRIA/spoon/410923097/src/test/resources/noclasspath/org/elasticsearch/indices/analysis/HunspellService.java:100)
[INFO] Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.119 s - in spoon.test.reference.VariableAccessTest
[INFO] Running spoon.test.reference.TypeReferenceTest
[INFO] Tests run: 28, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.689 s - in spoon.test.reference.TypeReferenceTest
[INFO] Running spoon.test.reference.ExecutableReferenceTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.263 s - in spoon.test.reference.ExecutableReferenceTest
[INFO] Running spoon.test.reference.CloneReferenceTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.342 s - in spoon.test.reference.CloneReferenceTest
[INFO] Running spoon.test.reference.ElasticsearchStackoverflowTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.259 s - in spoon.test.reference.ElasticsearchStackoverflowTest
[INFO] Running spoon.test.reference.ExecutableReferenceGenericTest
[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.066 s - in spoon.test.reference.ExecutableReferenceGenericTest
[INFO] Running spoon.test.reference.AnnotationFieldReferenceTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.06 s - in spoon.test.reference.AnnotationFieldReferenceTest
[INFO] Running spoon.test.trycatch.TryCatchTest
[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.157 s - in spoon.test.trycatch.TryCatchTest
[INFO] Running spoon.test.processing.ProcessingTest
[INFO] Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.88 s - in spoon.test.processing.ProcessingTest
[INFO] Running spoon.test.ctClass.CtClassTest
2018-08-01 20:30:45,719 ERROR spoon.Launcher - cannot load class: daikon.Runtime
spoon.support.SpoonClassNotFoundException: cannot load class: daikon.Runtime
	at spoon.support.reflect.reference.CtTypeReferenceImpl.findClass(CtTypeReferenceImpl.java:158)
	at spoon.support.reflect.reference.CtTypeReferenceImpl.getActualClass(CtTypeReferenceImpl.java:140)
	at spoon.support.reflect.reference.CtFieldReferenceImpl.getActualField(CtFieldReferenceImpl.java:63)
	at spoon.support.reflect.reference.CtFieldReferenceImpl.getModifiers(CtFieldReferenceImpl.java:227)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.isInitializeStaticFinalField(DefaultJavaPrettyPrinter.java:913)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.printCtFieldAccess(DefaultJavaPrettyPrinter.java:860)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.visitCtFieldWrite(DefaultJavaPrettyPrinter.java:819)
	at spoon.support.reflect.code.CtFieldWriteImpl.accept(CtFieldWriteImpl.java:27)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.scan(DefaultJavaPrettyPrinter.java:368)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.visitCtAssignment(DefaultJavaPrettyPrinter.java:516)
	at spoon.support.reflect.code.CtAssignmentImpl.accept(CtAssignmentImpl.java:54)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.scan(DefaultJavaPrettyPrinter.java:368)
	at spoon.reflect.visitor.ElementPrinterHelper.writeStatement(ElementPrinterHelper.java:177)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.visitCtBlock(DefaultJavaPrettyPrinter.java:549)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:68)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.scan(DefaultJavaPrettyPrinter.java:368)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.visitCtAnonymousExecutable(DefaultJavaPrettyPrinter.java:467)
	at spoon.support.reflect.declaration.CtAnonymousExecutableImpl.accept(CtAnonymousExecutableImpl.java:46)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.scan(DefaultJavaPrettyPrinter.java:368)
	at spoon.reflect.visitor.ElementPrinterHelper.writeElementList(ElementPrinterHelper.java:187)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.visitCtClass(DefaultJavaPrettyPrinter.java:643)
	at spoon.support.reflect.declaration.CtClassImpl.accept(CtClassImpl.java:67)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.scan(DefaultJavaPrettyPrinter.java:368)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.calculate(DefaultJavaPrettyPrinter.java:1995)
	at spoon.support.JavaOutputProcessor.createJavaFile(JavaOutputProcessor.java:120)
	at spoon.support.JavaOutputProcessor.process(JavaOutputProcessor.java:156)
	at spoon.support.JavaOutputProcessor.process(JavaOutputProcessor.java:46)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:74)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:173)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:147)
	at spoon.reflect.visitor.CtScanner.visitCtPackage(CtScanner.java:685)
	at spoon.support.reflect.declaration.CtPackageImpl.accept(CtPackageImpl.java:101)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:181)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:173)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:147)
	at spoon.reflect.visitor.CtScanner.visitCtPackage(CtScanner.java:684)
	at spoon.support.reflect.declaration.CtPackageImpl.accept(CtPackageImpl.java:101)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:181)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:173)
	at spoon.reflect.visitor.CtScanner.visitCtModule(CtScanner.java:976)
	at spoon.reflect.factory.ModuleFactory$CtUnnamedModule.accept(ModuleFactory.java:105)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:181)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.support.QueueProcessingManager.process(QueueProcessingManager.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.generateProcessedSourceFilesUsingTypes(JDTBasedSpoonCompiler.java:516)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.generateProcessedSourceFiles(JDTBasedSpoonCompiler.java:211)
	at spoon.Launcher.prettyprint(Launcher.java:785)
	at spoon.Launcher.run(Launcher.java:723)
	at spoon.test.ctClass.CtClassTest.testParentOfTheEnclosingClassOfStaticClass(CtClassTest.java:100)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
Caused by: java.lang.ClassNotFoundException: daikon.Runtime
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at spoon.support.reflect.reference.CtTypeReferenceImpl.findClass(CtTypeReferenceImpl.java:156)
	... 75 more
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.851 s - in spoon.test.ctClass.CtClassTest
[INFO] Running spoon.test.ctBlock.TestCtBlock
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.292 s - in spoon.test.ctBlock.TestCtBlock
[INFO] Running spoon.test.change.ChangeCollectorTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.088 s - in spoon.test.change.ChangeCollectorTest
[INFO] Running spoon.test.variable.InferredVariableTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.16 s - in spoon.test.variable.InferredVariableTest
[INFO] Running spoon.test.variable.AccessTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.933 s - in spoon.test.variable.AccessTest
[INFO] Running spoon.test.variable.AccessFullyQualifiedFieldTest
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.385 s - in spoon.test.variable.AccessFullyQualifiedFieldTest
[INFO] Running spoon.test.jar.JarTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.309 s - in spoon.test.jar.JarTest
[INFO] Running spoon.test.position.PositionTest
2018-08-01 20:30:54,380 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c2 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/410923097/src/test/java/spoon/test/position/testclasses/Expressions.java:14)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:478)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionClass(PositionTest.java:83)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-01 20:30:54,393 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c5 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/410923097/src/test/java/spoon/test/position/testclasses/Expressions.java:17)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:478)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionClass(PositionTest.java:83)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-01 20:30:54,394 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c6 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/410923097/src/test/java/spoon/test/position/testclasses/Expressions.java:18)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:478)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionClass(PositionTest.java:83)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-01 20:30:54,395 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c7 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/410923097/src/test/java/spoon/test/position/testclasses/Expressions.java:19)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:478)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionClass(PositionTest.java:83)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-01 20:30:54,835 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c2 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/410923097/src/test/java/spoon/test/position/testclasses/Expressions.java:14)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:478)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionInterface(PositionTest.java:201)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-01 20:30:54,836 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c5 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/410923097/src/test/java/spoon/test/position/testclasses/Expressions.java:17)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:478)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionInterface(PositionTest.java:201)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-01 20:30:54,836 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c6 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/410923097/src/test/java/spoon/test/position/testclasses/Expressions.java:18)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:478)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionInterface(PositionTest.java:201)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-01 20:30:54,837 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c7 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/410923097/src/test/java/spoon/test/position/testclasses/Expressions.java:19)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:478)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionInterface(PositionTest.java:201)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-01 20:30:55,146 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c2 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/410923097/src/test/java/spoon/test/position/testclasses/Expressions.java:14)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:478)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionClassWithComments(PositionTest.java:116)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-01 20:30:55,147 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c5 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/410923097/src/test/java/spoon/test/position/testclasses/Expressions.java:17)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:478)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionClassWithComments(PositionTest.java:116)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-01 20:30:55,152 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c6 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/410923097/src/test/java/spoon/test/position/testclasses/Expressions.java:18)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:478)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionClassWithComments(PositionTest.java:116)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-01 20:30:55,153 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c7 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/410923097/src/test/java/spoon/test/position/testclasses/Expressions.java:19)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:478)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionClassWithComments(PositionTest.java:116)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-01 20:30:55,796 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c2 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/410923097/src/test/java/spoon/test/position/testclasses/Expressions.java:14)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:478)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionAnnotation(PositionTest.java:235)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-01 20:30:55,796 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c5 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/410923097/src/test/java/spoon/test/position/testclasses/Expressions.java:17)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:478)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionAnnotation(PositionTest.java:235)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-01 20:30:55,797 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c6 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/410923097/src/test/java/spoon/test/position/testclasses/Expressions.java:18)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:478)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionAnnotation(PositionTest.java:235)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-01 20:30:55,798 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c7 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/410923097/src/test/java/spoon/test/position/testclasses/Expressions.java:19)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:478)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionAnnotation(PositionTest.java:235)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
[INFO] Tests run: 26, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.362 s - in spoon.test.position.PositionTest
[INFO] Running spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest
[INFO] Tests run: 16, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.35 s - in spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest
[INFO] Running spoon.test.role.TestCtRole
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 s - in spoon.test.role.TestCtRole
[INFO] Running spoon.test.secondaryclasses.ClassesTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.751 s - in spoon.test.secondaryclasses.ClassesTest
[INFO] Running spoon.test.annotation.AnnotationValuesTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.37 s - in spoon.test.annotation.AnnotationValuesTest
[INFO] Running spoon.test.annotation.AnnotationTest
[INFO] Tests run: 52, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.094 s - in spoon.test.annotation.AnnotationTest
[INFO] Running spoon.test.annotation.AnnotationLoopTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.062 s - in spoon.test.annotation.AnnotationLoopTest
[INFO] Running spoon.test.query_function.testclasses.VariableReferencesModelTest
[INFO] Tests run: 15, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.02 s - in spoon.test.query_function.testclasses.VariableReferencesModelTest
[INFO] Running spoon.test.query_function.VariableReferencesTest
2018-08-01 20:31:04,928 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-01 20:31:04,928 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-01 20:31:04,929 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-01 20:31:04,929 INFO spoon.Launcher - running Spoon...
2018-08-01 20:31:04,929 INFO spoon.Launcher - start processing...
2018-08-01 20:31:05,013 INFO spoon.Launcher - end of processing: 
2018-08-01 20:31:05,013 INFO spoon.Launcher - no errors, no warnings
2018-08-01 20:31:05,060 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-01 20:31:05,060 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-01 20:31:05,061 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-01 20:31:05,061 INFO spoon.Launcher - running Spoon...
2018-08-01 20:31:05,061 INFO spoon.Launcher - start processing...
2018-08-01 20:31:05,147 INFO spoon.Launcher - end of processing: 
2018-08-01 20:31:05,147 INFO spoon.Launcher - no errors, no warnings
2018-08-01 20:31:05,197 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-01 20:31:05,197 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-01 20:31:05,198 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-01 20:31:05,198 INFO spoon.Launcher - running Spoon...
2018-08-01 20:31:05,198 INFO spoon.Launcher - start processing...
2018-08-01 20:31:05,321 INFO spoon.Launcher - end of processing: 
2018-08-01 20:31:05,321 INFO spoon.Launcher - no errors, no warnings
2018-08-01 20:31:05,337 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-01 20:31:05,338 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-01 20:31:05,338 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-01 20:31:05,338 INFO spoon.Launcher - running Spoon...
2018-08-01 20:31:05,338 INFO spoon.Launcher - start processing...
2018-08-01 20:31:05,457 INFO spoon.Launcher - end of processing: 
2018-08-01 20:31:05,457 INFO spoon.Launcher - no errors, no warnings
2018-08-01 20:31:05,514 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-01 20:31:05,514 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-01 20:31:05,515 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-01 20:31:05,515 INFO spoon.Launcher - running Spoon...
2018-08-01 20:31:05,515 INFO spoon.Launcher - start processing...
2018-08-01 20:31:05,604 INFO spoon.Launcher - end of processing: 
2018-08-01 20:31:05,607 INFO spoon.Launcher - no errors, no warnings
2018-08-01 20:31:05,619 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-01 20:31:05,619 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-01 20:31:05,619 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-01 20:31:05,620 INFO spoon.Launcher - running Spoon...
2018-08-01 20:31:05,620 INFO spoon.Launcher - start processing...
2018-08-01 20:31:05,698 INFO spoon.Launcher - end of processing: 
2018-08-01 20:31:05,699 INFO spoon.Launcher - no errors, no warnings
2018-08-01 20:31:05,729 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-01 20:31:05,730 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-01 20:31:05,730 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-01 20:31:05,731 INFO spoon.Launcher - running Spoon...
2018-08-01 20:31:05,731 INFO spoon.Launcher - start processing...
2018-08-01 20:31:05,898 INFO spoon.Launcher - end of processing: 
2018-08-01 20:31:05,916 INFO spoon.Launcher - no errors, no warnings
2018-08-01 20:31:06,027 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-01 20:31:06,027 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-01 20:31:06,028 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-01 20:31:06,050 INFO spoon.Launcher - running Spoon...
2018-08-01 20:31:06,050 INFO spoon.Launcher - start processing...
2018-08-01 20:31:06,205 INFO spoon.Launcher - end of processing: 
2018-08-01 20:31:06,205 INFO spoon.Launcher - no errors, no warnings
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.459 s - in spoon.test.query_function.VariableReferencesTest
[INFO] Running spoon.test.replace.ReplaceParametrizedTest
[INFO] Tests run: 80, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.446 s - in spoon.test.replace.ReplaceParametrizedTest
[INFO] Running spoon.test.replace.ReplaceTest
[INFO] Tests run: 17, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.59 s - in spoon.test.replace.ReplaceTest
[INFO] Running spoon.test.javadoc.JavaDocTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.122 s - in spoon.test.javadoc.JavaDocTest
[INFO] Running spoon.test.strings.StringTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.058 s - in spoon.test.strings.StringTest
[INFO] Running spoon.test.strings.StringLiteralTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.076 s - in spoon.test.strings.StringLiteralTest
[INFO] Running spoon.test.constructorcallnewclass.ConstructorCallTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.459 s - in spoon.test.constructorcallnewclass.ConstructorCallTest
[INFO] Running spoon.test.constructorcallnewclass.NewClassTest
[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.929 s - in spoon.test.constructorcallnewclass.NewClassTest
[INFO] Running spoon.test.factory.CodeFactoryTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.011 s - in spoon.test.factory.CodeFactoryTest
[INFO] Running spoon.test.factory.FactoryTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.294 s - in spoon.test.factory.FactoryTest
[INFO] Running spoon.test.factory.TypeFactoryTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.505 s - in spoon.test.factory.TypeFactoryTest
[INFO] Running spoon.test.factory.FieldFactoryTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.458 s - in spoon.test.factory.FieldFactoryTest
[INFO] Running spoon.test.factory.ConstructorFactoryTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.126 s - in spoon.test.factory.ConstructorFactoryTest
[INFO] Running spoon.test.factory.ExecutableFactoryTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 s - in spoon.test.factory.ExecutableFactoryTest
[INFO] Running spoon.test.factory.ClassFactoryTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.009 s - in spoon.test.factory.ClassFactoryTest
[INFO] Running spoon.test.factory.AnnotationFactoryTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.177 s - in spoon.test.factory.AnnotationFactoryTest
[INFO] Running spoon.test.lambda.LambdaTest
2018-08-01 20:31:15,140 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable Strings at (/root/workspace/INRIA/spoon/410923097/src/test/resources/noclasspath/lambdas/TypeAccessInLambda.java:6)
[INFO] Tests run: 23, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.796 s - in spoon.test.lambda.LambdaTest
[INFO] Running spoon.test.reflect.visitor.ReferenceQueryTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.117 s - in spoon.test.reflect.visitor.ReferenceQueryTest
[INFO] Running spoon.test.interfaces.InterfaceTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.61 s - in spoon.test.interfaces.InterfaceTest
[INFO] Running spoon.test.interfaces.TestInterfaceWithoutSetup
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.286 s - in spoon.test.interfaces.TestInterfaceWithoutSetup
[INFO] Running spoon.test.compilation.CompilationTest
>> Hello: Bar <<
>> Hello: FooEx <<
>> Hello: IBar <<
>> Hello: SimpleProcessor <<
[INFO] Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 13.737 s - in spoon.test.compilation.CompilationTest
[INFO] Running spoon.test.literal.LiteralTest
2018-08-01 20:31:31,842 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable Longs at (/root/workspace/INRIA/spoon/410923097/src/test/resources/noclasspath/SecondaryIndexManager.java:611)
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.522 s - in spoon.test.literal.LiteralTest
[INFO] Running spoon.test.limits.utils.InternalTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.255 s - in spoon.test.limits.utils.InternalTest
[INFO] Running spoon.test.constructor.ConstructorTest
[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.077 s - in spoon.test.constructor.ConstructorTest
[INFO] Running spoon.test.model.AnonymousExecutableTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.126 s - in spoon.test.model.AnonymousExecutableTest
[INFO] Running spoon.test.model.TypeTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.772 s - in spoon.test.model.TypeTest
[INFO] Running spoon.test.model.SwitchCaseTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.124 s - in spoon.test.model.SwitchCaseTest
[INFO] Running spoon.test.model.IncrementalLauncherTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.496 s - in spoon.test.model.IncrementalLauncherTest
[INFO] Running spoon.test.model.BlockTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.118 s - in spoon.test.model.BlockTest
[INFO] Running spoon.test.OutputTypeTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in spoon.test.OutputTypeTest
[INFO] Running spoon.test.parameters.ParameterTest
2018-08-01 20:31:40,419 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable typeRatingFilters at (/root/workspace/INRIA/spoon/410923097/src/test/resources/noclasspath/Tacos.java:4)
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.555 s - in spoon.test.parameters.ParameterTest
[INFO] Running spoon.test.comparison.EqualTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.551 s - in spoon.test.comparison.EqualTest
[INFO] Running spoon.test.properties.PropertiesTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.08 s - in spoon.test.properties.PropertiesTest
[INFO] Running spoon.test.control.ControlTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.212 s - in spoon.test.control.ControlTest
[INFO] Running spoon.test.imports.ImportAndExtendWithPackageNameTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.142 s - in spoon.test.imports.ImportAndExtendWithPackageNameTest
[INFO] Running spoon.test.imports.ImportTest
[INFO] Tests run: 44, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 8.066 s - in spoon.test.imports.ImportTest
[INFO] Running spoon.test.imports.ImportScannerTest
2018-08-01 20:32:21,179 WARN spoon.Launcher - ImportScannerTest: Import scanner imports 577 unused imports and misses 0 imports
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 31.999 s - in spoon.test.imports.ImportScannerTest
[INFO] Running spoon.test.snippets.SnippetTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.523 s - in spoon.test.snippets.SnippetTest
[INFO] Running spoon.test.ctBodyHolder.CtBodyHolderTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.984 s - in spoon.test.ctBodyHolder.CtBodyHolderTest
[INFO] Running spoon.test.eval.EvalTest
[INFO] Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.848 s - in spoon.test.eval.EvalTest
[INFO] Running spoon.test.method.MethodTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.339 s - in spoon.test.method.MethodTest
[INFO] Running spoon.test.ctCase.SwitchCaseTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.122 s - in spoon.test.ctCase.SwitchCaseTest
[INFO] Running spoon.test.api.APITest
./target/nooutput_bc79ed1a-d02c-41f3-a5db-59ba195f53c9
[INFO] Tests run: 23, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 19.734 s - in spoon.test.api.APITest
[INFO] Running spoon.test.api.NoClasspathTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.363 s - in spoon.test.api.NoClasspathTest
[INFO] Running spoon.test.api.FileSystemFolderTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.test.api.FileSystemFolderTest
[INFO] Running spoon.test.api.MetamodelTest
[INFO] Tests run: 14, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.81 s - in spoon.test.api.MetamodelTest
[INFO] Running spoon.test.loop.LoopTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.127 s - in spoon.test.loop.LoopTest
[INFO] Running spoon.test.ctElement.MetadataTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.054 s - in spoon.test.ctElement.MetadataTest
[INFO] Running spoon.test.ctElement.ElementTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.test.ctElement.ElementTest
[INFO] Running spoon.test.delete.DeleteTest
[INFO] Tests run: 14, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.784 s - in spoon.test.delete.DeleteTest
[INFO] Running spoon.test.ctType.CtTypeParameterTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.136 s - in spoon.test.ctType.CtTypeParameterTest
[INFO] Running spoon.test.ctType.CtTypeTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.56 s - in spoon.test.ctType.CtTypeTest
[INFO] Running spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest
[INFO] Tests run: 117, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.7 s - in spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest
[INFO] Running spoon.test.intercession.insertBefore.InsertMethodsTest
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.477 s - in spoon.test.intercession.insertBefore.InsertMethodsTest
[INFO] Running spoon.test.intercession.IntercessionTest
[WARNING] Tests run: 8, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 6.328 s - in spoon.test.intercession.IntercessionTest
[INFO] Running spoon.test.intercession.RemoveTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.066 s - in spoon.test.intercession.RemoveTest
[INFO] Running spoon.test.type.TypeTest
[INFO] Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.058 s - in spoon.test.type.TypeTest
[INFO] Running spoon.test.fieldaccesses.FieldAccessTest
[INFO] Tests run: 16, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.512 s - in spoon.test.fieldaccesses.FieldAccessTest
[INFO] Running spoon.test.module.TestModule
[WARNING] Tests run: 8, Failures: 0, Errors: 0, Skipped: 2, Time elapsed: 0.194 s - in spoon.test.module.TestModule
[INFO] Running spoon.test.methodreference.MethodReferenceTest
[INFO] Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.238 s - in spoon.test.methodreference.MethodReferenceTest
[INFO] Running spoon.test.arrays.ArraysTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.641 s - in spoon.test.arrays.ArraysTest
[INFO] Running spoon.test.prettyprinter.PrinterTest
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.672 s - in spoon.test.prettyprinter.PrinterTest
[INFO] Running spoon.test.prettyprinter.QualifiedThisRefTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.267 s - in spoon.test.prettyprinter.QualifiedThisRefTest
[INFO] Running spoon.test.prettyprinter.LinesTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.518 s - in spoon.test.prettyprinter.LinesTest
[INFO] Running spoon.test.prettyprinter.DefaultPrettyPrinterTest
[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.291 s - in spoon.test.prettyprinter.DefaultPrettyPrinterTest
[INFO] Running spoon.test.varargs.VarArgsTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.059 s - in spoon.test.varargs.VarArgsTest
[INFO] Running spoon.test.targeted.TargetedExpressionTest
[INFO] Tests run: 17, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.208 s - in spoon.test.targeted.TargetedExpressionTest
[INFO] Running spoon.test.logging.LogTest
2018-08-01 20:33:13,258 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-01 20:33:13,258 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-01 20:33:13,258 DEBUG spoon.Launcher - destination: /root/workspace/INRIA/spoon/410923097/spooned-classes
2018-08-01 20:33:13,258 DEBUG spoon.Launcher - source classpath: null
2018-08-01 20:33:13,258 DEBUG spoon.Launcher - template classpath: []
2018-08-01 20:33:13,259 INFO spoon.Launcher - Log info
2018-08-01 20:33:13,259 WARN spoon.Launcher - Log warn
2018-08-01 20:33:13,259 ERROR spoon.Launcher - Log error
2018-08-01 20:33:13,259 DEBUG spoon.Launcher - Log debug
2018-08-01 20:33:13,260 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-01 20:33:13,263 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-01 20:33:13,263 DEBUG spoon.Launcher - destination: /root/workspace/INRIA/spoon/410923097/spooned-classes
2018-08-01 20:33:13,263 DEBUG spoon.Launcher - source classpath: null
2018-08-01 20:33:13,264 DEBUG spoon.Launcher - template classpath: []
2018-08-01 20:33:13,264 INFO spoon.Launcher - Log info
2018-08-01 20:33:13,264 WARN spoon.Launcher - Log warn
2018-08-01 20:33:13,264 ERROR spoon.Launcher - Log error
2018-08-01 20:33:13,264 DEBUG spoon.Launcher - Log debug
2018-08-01 20:33:13,265 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-01 20:33:13,265 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-01 20:33:13,265 INFO spoon.Launcher - Log info
2018-08-01 20:33:13,266 WARN spoon.Launcher - Log warn
2018-08-01 20:33:13,266 ERROR spoon.Launcher - Log error
2018-08-01 20:33:13,266 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-01 20:33:13,266 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-01 20:33:13,267 WARN spoon.Launcher - Log warn
2018-08-01 20:33:13,267 ERROR spoon.Launcher - Log error
2018-08-01 20:33:13,268 ERROR spoon.Launcher - Log error
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.015 s - in spoon.test.logging.LogTest
[INFO] Running spoon.test.architecture.SpoonArchitectureEnforcerTest
2018-08-01 20:33:51,856 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c2 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/410923097/src/test/java/spoon/test/position/testclasses/Expressions.java:14)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:478)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.Launcher.buildModel(Launcher.java:768)
	at spoon.test.architecture.SpoonArchitectureEnforcerTest.testGoodTestClassNames(SpoonArchitectureEnforcerTest.java:225)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-01 20:33:51,858 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c5 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/410923097/src/test/java/spoon/test/position/testclasses/Expressions.java:17)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:478)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.Launcher.buildModel(Launcher.java:768)
	at spoon.test.architecture.SpoonArchitectureEnforcerTest.testGoodTestClassNames(SpoonArchitectureEnforcerTest.java:225)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-01 20:33:51,860 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c6 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/410923097/src/test/java/spoon/test/position/testclasses/Expressions.java:18)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:478)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.Launcher.buildModel(Launcher.java:768)
	at spoon.test.architecture.SpoonArchitectureEnforcerTest.testGoodTestClassNames(SpoonArchitectureEnforcerTest.java:225)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-01 20:33:51,861 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c7 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/410923097/src/test/java/spoon/test/position/testclasses/Expressions.java:19)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:478)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.Launcher.buildModel(Launcher.java:768)
	at spoon.test.architecture.SpoonArchitectureEnforcerTest.testGoodTestClassNames(SpoonArchitectureEnforcerTest.java:225)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 52.534 s - in spoon.test.architecture.SpoonArchitectureEnforcerTest
[INFO] Running spoon.test.signature.SignatureTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.931 s - in spoon.test.signature.SignatureTest
[INFO] Running spoon.test.compilationunit.TestCompilationUnit
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.485 s - in spoon.test.compilationunit.TestCompilationUnit
[INFO] Running spoon.test.compilationunit.GetBinaryFilesTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.6 s - in spoon.test.compilationunit.GetBinaryFilesTest
[INFO] Running spoon.test.refactoring.RefactoringTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.964 s - in spoon.test.refactoring.RefactoringTest
[INFO] Running spoon.test.refactoring.CtRenameLocalVariableRefactoringTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 36.997 s - in spoon.test.refactoring.CtRenameLocalVariableRefactoringTest
[INFO] Running spoon.test.refactoring.MethodsRefactoringTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.365 s - in spoon.test.refactoring.MethodsRefactoringTest
[INFO] Running spoon.test.template.TemplateArrayAccessTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.194 s - in spoon.test.template.TemplateArrayAccessTest
[INFO] Running spoon.test.template.core.ParameterInfoTest
[INFO] Tests run: 21, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.019 s - in spoon.test.template.core.ParameterInfoTest
[INFO] Running spoon.test.template.TemplateEnumAccessTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.187 s - in spoon.test.template.TemplateEnumAccessTest
[INFO] Running spoon.test.template.PatternTest
[INFO] Tests run: 31, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.189 s - in spoon.test.template.PatternTest
[INFO] Running spoon.test.template.TemplateReplaceReturnTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.356 s - in spoon.test.template.TemplateReplaceReturnTest
[INFO] Running spoon.test.template.TemplateTest
0
[INFO] Tests run: 24, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 6.267 s - in spoon.test.template.TemplateTest
[INFO] Running spoon.test.template.TemplateClassAccessTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.169 s - in spoon.test.template.TemplateClassAccessTest
[INFO] Running spoon.test.template.TemplateInvocationSubstitutionTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.371 s - in spoon.test.template.TemplateInvocationSubstitutionTest
[INFO] Running spoon.test.pkg.PackageTest
[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.273 s - in spoon.test.pkg.PackageTest
[INFO] Running spoon.test.method_overriding.MethodOverriddingTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.207 s - in spoon.test.method_overriding.MethodOverriddingTest
[INFO] Running spoon.LauncherTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.401 s - in spoon.LauncherTest
[INFO] 
[INFO] Results:
[INFO] 
[ERROR] Failures: 
[ERROR]   MavenLauncherTest.mavenLauncherTestMultiModulesAndVariables:76 Content of classpath: 
[ERROR]   MavenLauncherTest.spoonMavenLauncherTest:20 expected:<23> but was:<0>
[ERROR]   CtGenerationTest.testGenerateCloneVisitor:157 CloneVisitor different expected:<...isitorGenerator
    [public <A extends java.lang.annotation.Annotation> void visitCtAnnotation(final spoon.reflect.declaration.CtAnnotation<A> annotation) {
        spoon.reflect.declaration.CtAnnotation<A> aCtAnnotation = annotation.getFactory().Core().createAnnotation();
        aCtAnnotation.setType(this.cloneHelper.clone(annotation.getType()));
        aCtAnnotation.setComments(this.cloneHelper.clone(annotation.getComments()));
        aCtAnnotation.setAnnotationType(this.cloneHelper.clone(annotation.getAnnotationType()));
        aCtAnnotation.setAnnotations(this.cloneHelper.clone(annotation.getAnnotations()));
        aCtAnnotation.setValues(this.cloneHelper.clone(annotation.getValues()));
        this.builder.copy(annotation, aCtAnnotation);
        this.cloneHelper.tailor(annotation, aCtAnnotation);
        this.other = aCtAnnotation;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <A extends java.lang.annotation.Annotation> void visitCtAnnotationType(final spoon.reflect.declaration.CtAnnotationType<A> annotationType) {
        spoon.reflect.declaration.CtAnnotationType<A> aCtAnnotationType = annotationType.getFactory().Core().createAnnotationType();
        aCtAnnotationType.setAnnotations(this.cloneHelper.clone(annotationType.getAnnotations()));
        aCtAnnotationType.setTypeMembers(this.cloneHelper.clone(annotationType.getTypeMembers()));
        aCtAnnotationType.setComments(this.cloneHelper.clone(annotationType.getComments()));
        this.builder.copy(annotationType, aCtAnnotationType);
        this.cloneHelper.tailor(annotationType, aCtAnnotationType);
        this.other = aCtAnnotationType;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public void visitCtAnonymousExecutable(final spoon.reflect.declaration.CtAnonymousExecutable anonymousExec) {
        spoon.reflect.declaration.CtAnonymousExecutable aCtAnonymousExecutable = anonymousExec.getFactory().Core().createAnonymousExecutable();
        aCtAnonymousExecutable.setAnnotations(this.cloneHelper.clone(anonymousExec.getAnnotations()));
        aCtAnonymousExecutable.setBody(this.cloneHelper.clone(anonymousExec.getBody()));
        aCtAnonymousExecutable.setComments(this.cloneHelper.clone(anonymousExec.getComments()));
        this.builder.copy(anonymousExec, aCtAnonymousExecutable);
        this.cloneHelper.tailor(anonymousExec, aCtAnonymousExecutable);
        this.other = aCtAnonymousExecutable;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtArrayRead(final spoon.reflect.code.CtArrayRead<T> arrayRead) {
        spoon.reflect.code.CtArrayRead<T> aCtArrayRead = arrayRead.getFactory().Core().createArrayRead();
        aCtArrayRead.setAnnotations(this.cloneHelper.clone(arrayRead.getAnnotations()));
        aCtArrayRead.setType(this.cloneHelper.clone(arrayRead.getType()));
        aCtArrayRead.setTypeCasts(this.cloneHelper.clone(arrayRead.getTypeCasts()));
        aCtArrayRead.setTarget(this.cloneHelper.clone(arrayRead.getTarget()));
        aCtArrayRead.setIndexExpression(this.cloneHelper.clone(arrayRead.getIndexExpression()));
        aCtArrayRead.setComments(this.cloneHelper.clone(arrayRead.getComments()));
        this.builder.copy(arrayRead, aCtArrayRead);
        this.cloneHelper.tailor(arrayRead, aCtArrayRead);
        this.other = aCtArrayRead;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtArrayWrite(final spoon.reflect.code.CtArrayWrite<T> arrayWrite) {
        spoon.reflect.code.CtArrayWrite<T> aCtArrayWrite = arrayWrite.getFactory().Core().createArrayWrite();
        aCtArrayWrite.setAnnotations(this.cloneHelper.clone(arrayWrite.getAnnotations()));
        aCtArrayWrite.setType(this.cloneHelper.clone(arrayWrite.getType()));
        aCtArrayWrite.setTypeCasts(this.cloneHelper.clone(arrayWrite.getTypeCasts()));
        aCtArrayWrite.setTarget(this.cloneHelper.clone(arrayWrite.getTarget()));
        aCtArrayWrite.setIndexExpression(this.cloneHelper.clone(arrayWrite.getIndexExpression()));
        aCtArrayWrite.setComments(this.cloneHelper.clone(arrayWrite.getComments()));
        this.builder.copy(arrayWrite, aCtArrayWrite);
        this.cloneHelper.tailor(arrayWrite, aCtArrayWrite);
        this.other = aCtArrayWrite;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtArrayTypeReference(final spoon.reflect.reference.CtArrayTypeReference<T> reference) {
        spoon.reflect.reference.CtArrayTypeReference<T> aCtArrayTypeReference = reference.getFactory().Core().createArrayTypeReference();
        aCtArrayTypeReference.setPackage(this.cloneHelper.clone(reference.getPackage()));
        aCtArrayTypeReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtArrayTypeReference.setComponentType(this.cloneHelper.clone(reference.getComponentType()));
        aCtArrayTypeReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));
        aCtArrayTypeReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.builder.copy(reference, aCtArrayTypeReference);
        this.cloneHelper.tailor(reference, aCtArrayTypeReference);
        this.other = aCtArrayTypeReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtAssert(final spoon.reflect.code.CtAssert<T> asserted) {
        spoon.reflect.code.CtAssert<T> aCtAssert = asserted.getFactory().Core().createAssert();
        aCtAssert.setAnnotations(this.cloneHelper.clone(asserted.getAnnotations()));
        aCtAssert.setAssertExpression(this.cloneHelper.clone(asserted.getAssertExpression()));
        aCtAssert.setExpression(this.cloneHelper.clone(asserted.getExpression()));
        aCtAssert.setComments(this.cloneHelper.clone(asserted.getComments()));
        this.builder.copy(asserted, aCtAssert);
        this.cloneHelper.tailor(asserted, aCtAssert);
        this.other = aCtAssert;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T, A extends T> void visitCtAssignment(final spoon.reflect.code.CtAssignment<T, A> assignement) {
        spoon.reflect.code.CtAssignment<T, A> aCtAssignment = assignement.getFactory().Core().createAssignment();
        aCtAssignment.setAnnotations(this.cloneHelper.clone(assignement.getAnnotations()));
        aCtAssignment.setType(this.cloneHelper.clone(assignement.getType()));
        aCtAssignment.setTypeCasts(this.cloneHelper.clone(assignement.getTypeCasts()));
        aCtAssignment.setAssigned(this.cloneHelper.clone(assignement.getAssigned()));
        aCtAssignment.setAssignment(this.cloneHelper.clone(assignement.getAssignment()));
        aCtAssignment.setComments(this.cloneHelper.clone(assignement.getComments()));
        this.builder.copy(assignement, aCtAssignment);
        this.cloneHelper.tailor(assignement, aCtAssignment);
        this.other = aCtAssignment;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtBinaryOperator(final spoon.reflect.code.CtBinaryOperator<T> operator) {
        spoon.reflect.code.CtBinaryOperator<T> aCtBinaryOperator = operator.getFactory().Core().createBinaryOperator();
        aCtBinaryOperator.setAnnotations(this.cloneHelper.clone(operator.getAnnotations()));
        aCtBinaryOperator.setType(this.cloneHelper.clone(operator.getType()));
        aCtBinaryOperator.setTypeCasts(this.cloneHelper.clone(operator.getTypeCasts()));
        aCtBinaryOperator.setLeftHandOperand(this.cloneHelper.clone(operator.getLeftHandOperand()));
        aCtBinaryOperator.setRightHandOperand(this.cloneHelper.clone(operator.getRightHandOperand()));
        aCtBinaryOperator.setComments(this.cloneHelper.clone(operator.getComments()));
        this.builder.copy(operator, aCtBinaryOperator);
        this.cloneHelper.tailor(operator, aCtBinaryOperator);
        this.other = aCtBinaryOperator;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <R> void visitCtBlock(final spoon.reflect.code.CtBlock<R> block) {
        spoon.reflect.code.CtBlock<R> aCtBlock = block.getFactory().Core().createBlock();
        aCtBlock.setAnnotations(this.cloneHelper.clone(block.getAnnotations()));
        aCtBlock.setStatements(this.cloneHelper.clone(block.getStatements()));
        aCtBlock.setComments(this.cloneHelper.clone(block.getComments()));
        this.builder.copy(block, aCtBlock);
        this.cloneHelper.tailor(block, aCtBlock);
        this.other = aCtBlock;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public void visitCtBreak(final spoon.reflect.code.CtBreak breakStatement) {
        spoon.reflect.code.CtBreak aCtBreak = breakStatement.getFactory().Core().createBreak();
        aCtBreak.setAnnotations(this.cloneHelper.clone(breakStatement.getAnnotations()));
        aCtBreak.setComments(this.cloneHelper.clone(breakStatement.getComments()));
        this.builder.copy(breakStatement, aCtBreak);
        this.cloneHelper.tailor(breakStatement, aCtBreak);
        this.other = aCtBreak;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <S> void visitCtCase(final spoon.reflect.code.CtCase<S> caseStatement) {
        spoon.reflect.code.CtCase<S> aCtCase = caseStatement.getFactory().Core().createCase();
        aCtCase.setAnnotations(this.cloneHelper.clone(caseStatement.getAnnotations()));
        aCtCase.setCaseExpression(this.cloneHelper.clone(caseStatement.getCaseExpression()));
        aCtCase.setStatements(this.cloneHelper.clone(caseStatement.getStatements()));
        aCtCase.setComments(this.cloneHelper.clone(caseStatement.getComments()));
        this.builder.copy(caseStatement, aCtCase);
        this.cloneHelper.tailor(caseStatement, aCtCase);
        this.other = aCtCase;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public void visitCtCatch(final spoon.reflect.code.CtCatch catchBlock) {
        spoon.reflect.code.CtCatch aCtCatch = catchBlock.getFactory().Core().createCatch();
        aCtCatch.setAnnotations(this.cloneHelper.clone(catchBlock.getAnnotations()));
        aCtCatch.setParameter(this.cloneHelper.clone(catchBlock.getParameter()));
        aCtCatch.setBody(this.cloneHelper.clone(catchBlock.getBody()));
        aCtCatch.setComments(this.cloneHelper.clone(catchBlock.getComments()));
        this.builder.copy(catchBlock, aCtCatch);
        this.cloneHelper.tailor(catchBlock, aCtCatch);
        this.other = aCtCatch;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtClass(final spoon.reflect.declaration.CtClass<T> ctClass) {
        spoon.reflect.declaration.CtClass<T> aCtClass = ctClass.getFactory().Core().createClass();
        aCtClass.setAnnotations(this.cloneHelper.clone(ctClass.getAnnotations()));
        aCtClass.setSuperclass(this.cloneHelper.clone(ctClass.getSuperclass()));
        aCtClass.setSuperInterfaces(this.cloneHelper.clone(ctClass.getSuperInterfaces()));
        aCtClass.setFormalCtTypeParameters(this.cloneHelper.clone(ctClass.getFormalCtTypeParameters()));
        aCtClass.setTypeMembers(this.cloneHelper.clone(ctClass.getTypeMembers()));
        aCtClass.setComments(this.cloneHelper.clone(ctClass.getComments()));
        this.builder.copy(ctClass, aCtClass);
        this.cloneHelper.tailor(ctClass, aCtClass);
        this.other = aCtClass;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter typeParameter) {
        spoon.reflect.declaration.CtTypeParameter aCtTypeParameter = typeParameter.getFactory().Core().createTypeParameter();
        aCtTypeParameter.setAnnotations(this.cloneHelper.clone(typeParameter.getAnnotations()));
        aCtTypeParameter.setSuperclass(this.cloneHelper.clone(typeParameter.getSuperclass()));
        aCtTypeParameter.setComments(this.cloneHelper.clone(typeParameter.getComments()));
        this.builder.copy(typeParameter, aCtTypeParameter);
        this.cloneHelper.tailor(typeParameter, aCtTypeParameter);
        this.other = aCtTypeParameter;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtConditional(final spoon.reflect.code.CtConditional<T> conditional) {
        spoon.reflect.code.CtConditional<T> aCtConditional = conditional.getFactory().Core().createConditional();
        aCtConditional.setType(this.cloneHelper.clone(conditional.getType()));
        aCtConditional.setAnnotations(this.cloneHelper.clone(conditional.getAnnotations()));
        aCtConditional.setCondition(this.cloneHelper.clone(conditional.getCondition()));
        aCtConditional.setThenExpression(this.cloneHelper.clone(conditional.getThenExpression()));
        aCtConditional.setElseExpression(this.cloneHelper.clone(conditional.getElseExpression()));
        aCtConditional.setComments(this.cloneHelper.clone(conditional.getComments()));
        aCtConditional.setTypeCasts(this.cloneHelper.clone(conditional.getTypeCasts()));
        this.builder.copy(conditional, aCtConditional);
        this.cloneHelper.tailor(conditional, aCtConditional);
        this.other = aCtConditional;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtConstructor(final spoon.reflect.declaration.CtConstructor<T> c) {
        spoon.reflect.declaration.CtConstructor<T> aCtConstructor = c.getFactory().Core().createConstructor();
        aCtConstructor.setAnnotations(this.cloneHelper.clone(c.getAnnotations()));
        aCtConstructor.setParameters(this.cloneHelper.clone(c.getParameters()));
        aCtConstructor.setThrownTypes(this.cloneHelper.clone(c.getThrownTypes()));
        aCtConstructor.setFormalCtTypeParameters(this.cloneHelper.clone(c.getFormalCtTypeParameters()));
        aCtConstructor.setBody(this.cloneHelper.clone(c.getBody()));
        aCtConstructor.setComments(this.cloneHelper.clone(c.getComments()));
        this.builder.copy(c, aCtConstructor);
        this.cloneHelper.tailor(c, aCtConstructor);
        this.other = aCtConstructor;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public void visitCtContinue(final spoon.reflect.code.CtContinue continueStatement) {
        spoon.reflect.code.CtContinue aCtContinue = continueStatement.getFactory().Core().createContinue();
        aCtContinue.setAnnotations(this.cloneHelper.clone(continueStatement.getAnnotations()));
        aCtContinue.setComments(this.cloneHelper.clone(continueStatement.getComments()));
        this.builder.copy(continueStatement, aCtContinue);
        this.cloneHelper.tailor(continueStatement, aCtContinue);
        this.other = aCtContinue;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public void visitCtDo(final spoon.reflect.code.CtDo doLoop) {
        spoon.reflect.code.CtDo aCtDo = doLoop.getFactory().Core().createDo();
        aCtDo.setAnnotations(this.cloneHelper.clone(doLoop.getAnnotations()));
        aCtDo.setLoopingExpression(this.cloneHelper.clone(doLoop.getLoopingExpression()));
        aCtDo.setBody(this.cloneHelper.clone(doLoop.getBody()));
        aCtDo.setComments(this.cloneHelper.clone(doLoop.getComments()));
        this.builder.copy(doLoop, aCtDo);
        this.cloneHelper.tailor(doLoop, aCtDo);
        this.other = aCtDo;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T extends java.lang.Enum<?>> void visitCtEnum(final spoon.reflect.declaration.CtEnum<T> ctEnum) {
        spoon.reflect.declaration.CtEnum<T> aCtEnum = ctEnum.getFactory().Core().createEnum();
        aCtEnum.setAnnotations(this.cloneHelper.clone(ctEnum.getAnnotations()));
        aCtEnum.setSuperInterfaces(this.cloneHelper.clone(ctEnum.getSuperInterfaces()));
        aCtEnum.setTypeMembers(this.cloneHelper.clone(ctEnum.getTypeMembers()));
        aCtEnum.setEnumValues(this.cloneHelper.clone(ctEnum.getEnumValues()));
        aCtEnum.setComments(this.cloneHelper.clone(ctEnum.getComments()));
        this.builder.copy(ctEnum, aCtEnum);
        this.cloneHelper.tailor(ctEnum, aCtEnum);
        this.other = aCtEnum;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtExecutableReference(final spoon.reflect.reference.CtExecutableReference<T> reference) {
        spoon.reflect.reference.CtExecutableReference<T> aCtExecutableReference = reference.getFactory().Core().createExecutableReference();
        aCtExecutableReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtExecutableReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtExecutableReference.setParameters(this.cloneHelper.clone(reference.getParameters()));
        aCtExecutableReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));
        aCtExecutableReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        aCtExecutableReference.setComments(this.cloneHelper.clone(reference.getComments()));
        this.builder.copy(reference, aCtExecutableReference);
        this.cloneHelper.tailor(reference, aCtExecutableReference);
        this.other = aCtExecutableReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtField(final spoon.reflect.declaration.CtField<T> f) {
        spoon.reflect.declaration.CtField<T> aCtField = f.getFactory().Core().createField();
        aCtField.setAnnotations(this.cloneHelper.clone(f.getAnnotations()));
        aCtField.setType(this.cloneHelper.clone(f.getType()));
        aCtField.setDefaultExpression(this.cloneHelper.clone(f.getDefaultExpression()));
        aCtField.setComments(this.cloneHelper.clone(f.getComments()));
        this.builder.copy(f, aCtField);
        this.cloneHelper.tailor(f, aCtField);
        this.other = aCtField;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtEnumValue(final spoon.reflect.declaration.CtEnumValue<T> enumValue) {
        spoon.reflect.declaration.CtEnumValue<T> aCtEnumValue = enumValue.getFactory().Core().createEnumValue();
        aCtEnumValue.setAnnotations(this.cloneHelper.clone(enumValue.getAnnotations()));
        aCtEnumValue.setType(this.cloneHelper.clone(enumValue.getType()));
        aCtEnumValue.setDefaultExpression(this.cloneHelper.clone(enumValue.getDefaultExpression()));
        aCtEnumValue.setComments(this.cloneHelper.clone(enumValue.getComments()));
        this.builder.copy(enumValue, aCtEnumValue);
        this.cloneHelper.tailor(enumValue, aCtEnumValue);
        this.other = aCtEnumValue;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtThisAccess(final spoon.reflect.code.CtThisAccess<T> thisAccess) {
        spoon.reflect.code.CtThisAccess<T> aCtThisAccess = thisAccess.getFactory().Core().createThisAccess();
        aCtThisAccess.setComments(this.cloneHelper.clone(thisAccess.getComments()));
        aCtThisAccess.setAnnotations(this.cloneHelper.clone(thisAccess.getAnnotations()));
        aCtThisAccess.setType(this.cloneHelper.clone(thisAccess.getType()));
        aCtThisAccess.setTypeCasts(this.cloneHelper.clone(thisAccess.getTypeCasts()));
        aCtThisAccess.setTarget(this.cloneHelper.clone(thisAccess.getTarget()));
        this.builder.copy(thisAccess, aCtThisAccess);
        this.cloneHelper.tailor(thisAccess, aCtThisAccess);
        this.other = aCtThisAccess;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtAnnotationFieldAccess(final spoon.reflect.code.CtAnnotationFieldAccess<T> annotationFieldAccess) {
        spoon.reflect.code.CtAnnotationFieldAccess<T> aCtAnnotationFieldAccess = annotationFieldAccess.getFactory().Core().createAnnotationFieldAccess();
        aCtAnnotationFieldAccess.setComments(this.cloneHelper.clone(annotationFieldAccess.getComments()));
        aCtAnnotationFieldAccess.setAnnotations(this.cloneHelper.clone(annotationFieldAccess.getAnnotations()));
        aCtAnnotationFieldAccess.setTypeCasts(this.cloneHelper.clone(annotationFieldAccess.getTypeCasts()));
        aCtAnnotationFieldAccess.setTarget(this.cloneHelper.clone(annotationFieldAccess.getTarget()));
        aCtAnnotationFieldAccess.setVariable(this.cloneHelper.clone(annotationFieldAccess.getVariable()));
        this.builder.copy(annotationFieldAccess, aCtAnnotationFieldAccess);
        this.cloneHelper.tailor(annotationFieldAccess, aCtAnnotationFieldAccess);
        this.other = aCtAnnotationFieldAccess;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtFieldReference(final spoon.reflect.reference.CtFieldReference<T> reference) {
        spoon.reflect.reference.CtFieldReference<T> aCtFieldReference = reference.getFactory().Core().createFieldReference();
        aCtFieldReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtFieldReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtFieldReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.builder.copy(reference, aCtFieldReference);
        this.cloneHelper.tailor(reference, aCtFieldReference);
        this.other = aCtFieldReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public void visitCtFor(final spoon.reflect.code.CtFor forLoop) {
        spoon.reflect.code.CtFor aCtFor = forLoop.getFactory().Core().createFor();
        aCtFor.setAnnotations(this.cloneHelper.clone(forLoop.getAnnotations()));
        aCtFor.setForInit(this.cloneHelper.clone(forLoop.getForInit()));
        aCtFor.setExpression(this.cloneHelper.clone(forLoop.getExpression()));
        aCtFor.setForUpdate(this.cloneHelper.clone(forLoop.getForUpdate()));
        aCtFor.setBody(this.cloneHelper.clone(forLoop.getBody()));
        aCtFor.setComments(this.cloneHelper.clone(forLoop.getComments()));
        this.builder.copy(forLoop, aCtFor);
        this.cloneHelper.tailor(forLoop, aCtFor);
        this.other = aCtFor;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public void visitCtForEach(final spoon.reflect.code.CtForEach foreach) {
        spoon.reflect.code.CtForEach aCtForEach = foreach.getFactory().Core().createForEach();
        aCtForEach.setAnnotations(this.cloneHelper.clone(foreach.getAnnotations()));
        aCtForEach.setVariable(this.cloneHelper.clone(foreach.getVariable()));
        aCtForEach.setExpression(this.cloneHelper.clone(foreach.getExpression()));
        aCtForEach.setBody(this.cloneHelper.clone(foreach.getBody()));
        aCtForEach.setComments(this.cloneHelper.clone(foreach.getComments()));
        this.builder.copy(foreach, aCtForEach);
        this.cloneHelper.tailor(foreach, aCtForEach);
        this.other = aCtForEach;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public void visitCtIf(final spoon.reflect.code.CtIf ifElement) {
        spoon.reflect.code.CtIf aCtIf = ifElement.getFactory().Core().createIf();
        aCtIf.setAnnotations(this.cloneHelper.clone(ifElement.getAnnotations()));
        aCtIf.setCondition(this.cloneHelper.clone(ifElement.getCondition()));
        aCtIf.setThenStatement(this.cloneHelper.clone(((spoon.reflect.code.CtStatement) (ifElement.getThenStatement()))));
        aCtIf.setElseStatement(this.cloneHelper.clone(((spoon.reflect.code.CtStatement) (ifElement.getElseStatement()))));
        aCtIf.setComments(this.cloneHelper.clone(ifElement.getComments()));
        this.builder.copy(ifElement, aCtIf);
        this.cloneHelper.tailor(ifElement, aCtIf);
        this.other = aCtIf;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtInterface(final spoon.reflect.declaration.CtInterface<T> intrface) {
        spoon.reflect.declaration.CtInterface<T> aCtInterface = intrface.getFactory().Core().createInterface();
        aCtInterface.setAnnotations(this.cloneHelper.clone(intrface.getAnnotations()));
        aCtInterface.setSuperInterfaces(this.cloneHelper.clone(intrface.getSuperInterfaces()));
        aCtInterface.setFormalCtTypeParameters(this.cloneHelper.clone(intrface.getFormalCtTypeParameters()));
        aCtInterface.setTypeMembers(this.cloneHelper.clone(intrface.getTypeMembers()));
        aCtInterface.setComments(this.cloneHelper.clone(intrface.getComments()));
        this.builder.copy(intrface, aCtInterface);
        this.cloneHelper.tailor(intrface, aCtInterface);
        this.other = aCtInterface;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtInvocation(final spoon.reflect.code.CtInvocation<T> invocation) {
        spoon.reflect.code.CtInvocation<T> aCtInvocation = invocation.getFactory().Core().createInvocation();
        aCtInvocation.setAnnotations(this.cloneHelper.clone(invocation.getAnnotations()));
        aCtInvocation.setTypeCasts(this.cloneHelper.clone(invocation.getTypeCasts()));
        aCtInvocation.setTarget(this.cloneHelper.clone(invocation.getTarget()));
        aCtInvocation.setExecutable(this.cloneHelper.clone(invocation.getExecutable()));
        aCtInvocation.setArguments(this.cloneHelper.clone(invocation.getArguments()));
        aCtInvocation.setComments(this.cloneHelper.clone(invocation.getComments()));
        this.builder.copy(invocation, aCtInvocation);
        this.cloneHelper.tailor(invocation, aCtInvocation);
        this.other = aCtInvocation;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtLiteral(final spoon.reflect.code.CtLiteral<T> literal) {
        spoon.reflect.code.CtLiteral<T> aCtLiteral = literal.getFactory().Core().createLiteral();
        aCtLiteral.setAnnotations(this.cloneHelper.clone(literal.getAnnotations()));
        aCtLiteral.setType(this.cloneHelper.clone(literal.getType()));
        aCtLiteral.setTypeCasts(this.cloneHelper.clone(literal.getTypeCasts()));
        aCtLiteral.setComments(this.cloneHelper.clone(literal.getComments()));
        this.builder.copy(literal, aCtLiteral);
        this.cloneHelper.tailor(literal, aCtLiteral);
        this.other = aCtLiteral;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtLocalVariable(final spoon.reflect.code.CtLocalVariable<T> localVariable) {
        spoon.reflect.code.CtLocalVariable<T> aCtLocalVariable = localVariable.getFactory().Core().createLocalVariable();
        aCtLocalVariable.setAnnotations(this.cloneHelper.clone(localVariable.getAnnotations()));
        aCtLocalVariable.setType(this.cloneHelper.clone(localVariable.getType()));
        aCtLocalVariable.setDefaultExpression(this.cloneHelper.clone(localVariable.getDefaultExpression()));
        aCtLocalVariable.setComments(this.cloneHelper.clone(localVariable.getComments()));
        this.builder.copy(localVariable, aCtLocalVariable);
        this.cloneHelper.tailor(localVariable, aCtLocalVariable);
        this.other = aCtLocalVariable;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtLocalVariableReference(final spoon.reflect.reference.CtLocalVariableReference<T> reference) {
        spoon.reflect.reference.CtLocalVariableReference<T> aCtLocalVariableReference = reference.getFactory().Core().createLocalVariableReference();
        aCtLocalVariableReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtLocalVariableReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.builder.copy(reference, aCtLocalVariableReference);
        this.cloneHelper.tailor(reference, aCtLocalVariableReference);
        this.other = aCtLocalVariableReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtCatchVariable(final spoon.reflect.code.CtCatchVariable<T> catchVariable) {
        spoon.reflect.code.CtCatchVariable<T> aCtCatchVariable = catchVariable.getFactory().Core().createCatchVariable();
        aCtCatchVariable.setComments(this.cloneHelper.clone(catchVariable.getComments()));
        aCtCatchVariable.setAnnotations(this.cloneHelper.clone(catchVariable.getAnnotations()));
        aCtCatchVariable.setMultiTypes(this.cloneHelper.clone(catchVariable.getMultiTypes()));
        this.builder.copy(catchVariable, aCtCatchVariable);
        this.cloneHelper.tailor(catchVariable, aCtCatchVariable);
        this.other = aCtCatchVariable;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtCatchVariableReference(final spoon.reflect.reference.CtCatchVariableReference<T> reference) {
        spoon.reflect.reference.CtCatchVariableReference<T> aCtCatchVariableReference = reference.getFactory().Core().createCatchVariableReference();
        aCtCatchVariableReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtCatchVariableReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.builder.copy(reference, aCtCatchVariableReference);
        this.cloneHelper.tailor(reference, aCtCatchVariableReference);
        this.other = aCtCatchVariableReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtMethod(final spoon.reflect.declaration.CtMethod<T> m) {
        spoon.reflect.declaration.CtMethod<T> aCtMethod = m.getFactory().Core().createMethod();
        aCtMethod.setAnnotations(this.cloneHelper.clone(m.getAnnotations()));
        aCtMethod.setFormalCtTypeParameters(this.cloneHelper.clone(m.getFormalCtTypeParameters()));
        aCtMethod.setType(this.cloneHelper.clone(m.getType()));
        aCtMethod.setParameters(this.cloneHelper.clone(m.getParameters()));
        aCtMethod.setThrownTypes(this.cloneHelper.clone(m.getThrownTypes()));
        aCtMethod.setBody(this.cloneHelper.clone(m.getBody()));
        aCtMethod.setComments(this.cloneHelper.clone(m.getComments()));
        this.builder.copy(m, aCtMethod);
        this.cloneHelper.tailor(m, aCtMethod);
        this.other = aCtMethod;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod<T> annotationMethod) {
        spoon.reflect.declaration.CtAnnotationMethod<T> aCtAnnotationMethod = annotationMethod.getFactory().Core().createAnnotationMethod();
        aCtAnnotationMethod.setAnnotations(this.cloneHelper.clone(annotationMethod.getAnnotations()));
        aCtAnnotationMethod.setType(this.cloneHelper.clone(annotationMethod.getType()));
        aCtAnnotationMethod.setDefaultExpression(this.cloneHelper.clone(annotationMethod.getDefaultExpression()));
        aCtAnnotationMethod.setComments(this.cloneHelper.clone(annotationMethod.getComments()));
        this.builder.copy(annotationMethod, aCtAnnotationMethod);
        this.cloneHelper.tailor(annotationMethod, aCtAnnotationMethod);
        this.other = aCtAnnotationMethod;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtNewArray(final spoon.reflect.code.CtNewArray<T> newArray) {
        spoon.reflect.code.CtNewArray<T> aCtNewArray = newArray.getFactory().Core().createNewArray();
        aCtNewArray.setAnnotations(this.cloneHelper.clone(newArray.getAnnotations()));
        aCtNewArray.setType(this.cloneHelper.clone(newArray.getType()));
        aCtNewArray.setTypeCasts(this.cloneHelper.clone(newArray.getTypeCasts()));
        aCtNewArray.setElements(this.cloneHelper.clone(newArray.getElements()));
        aCtNewArray.setDimensionExpressions(this.cloneHelper.clone(newArray.getDimensionExpressions()));
        aCtNewArray.setComments(this.cloneHelper.clone(newArray.getComments()));
        this.builder.copy(newArray, aCtNewArray);
        this.cloneHelper.tailor(newArray, aCtNewArray);
        this.other = aCtNewArray;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtConstructorCall(final spoon.reflect.code.CtConstructorCall<T> ctConstructorCall) {
        spoon.reflect.code.CtConstructorCall<T> aCtConstructorCall = ctConstructorCall.getFactory().Core().createConstructorCall();
        aCtConstructorCall.setAnnotations(this.cloneHelper.clone(ctConstructorCall.getAnnotations()));
        aCtConstructorCall.setTypeCasts(this.cloneHelper.clone(ctConstructorCall.getTypeCasts()));
        aCtConstructorCall.setExecutable(this.cloneHelper.clone(ctConstructorCall.getExecutable()));
        aCtConstructorCall.setTarget(this.cloneHelper.clone(ctConstructorCall.getTarget()));
        aCtConstructorCall.setArguments(this.cloneHelper.clone(ctConstructorCall.getArguments()));
        aCtConstructorCall.setComments(this.cloneHelper.clone(ctConstructorCall.getComments()));
        this.builder.copy(ctConstructorCall, aCtConstructorCall);
        this.cloneHelper.tailor(ctConstructorCall, aCtConstructorCall);
        this.other = aCtConstructorCall;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtNewClass(final spoon.reflect.code.CtNewClass<T> newClass) {
        spoon.reflect.code.CtNewClass<T> aCtNewClass = newClass.getFactory().Core().createNewClass();
        aCtNewClass.setAnnotations(this.cloneHelper.clone(newClass.getAnnotations()));
        aCtNewClass.setTypeCasts(this.cloneHelper.clone(newClass.getTypeCasts()));
        aCtNewClass.setExecutable(this.cloneHelper.clone(newClass.getExecutable()));
        aCtNewClass.setTarget(this.cloneHelper.clone(newClass.getTarget()));
        aCtNewClass.setArguments(this.cloneHelper.clone(newClass.getArguments()));
        aCtNewClass.setAnonymousClass(this.cloneHelper.clone(newClass.getAnonymousClass()));
        aCtNewClass.setComments(this.cloneHelper.clone(newClass.getComments()));
        this.builder.copy(newClass, aCtNewClass);
        this.cloneHelper.tailor(newClass, aCtNewClass);
        this.other = aCtNewClass;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtLambda(final spoon.reflect.code.CtLambda<T> lambda) {
        spoon.reflect.code.CtLambda<T> aCtLambda = lambda.getFactory().Core().createLambda();
        aCtLambda.setAnnotations(this.cloneHelper.clone(lambda.getAnnotations()));
        aCtLambda.setType(this.cloneHelper.clone(lambda.getType()));
        aCtLambda.setTypeCasts(this.cloneHelper.clone(lambda.getTypeCasts()));
        aCtLambda.setParameters(this.cloneHelper.clone(lambda.getParameters()));
        aCtLambda.setBody(this.cloneHelper.clone(lambda.getBody()));
        aCtLambda.setExpression(this.cloneHelper.clone(lambda.getExpression()));
        aCtLambda.setComments(this.cloneHelper.clone(lambda.getComments()));
        this.builder.copy(lambda, aCtLambda);
        this.cloneHelper.tailor(lambda, aCtLambda);
        this.other = aCtLambda;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T, E extends spoon.reflect.code.CtExpression<?>> void visitCtExecutableReferenceExpression(final spoon.reflect.code.CtExecutableReferenceExpression<T, E> expression) {
        spoon.reflect.code.CtExecutableReferenceExpression<T, E> aCtExecutableReferenceExpression = expression.getFactory().Core().createExecutableReferenceExpression();
        aCtExecutableReferenceExpression.setComments(this.cloneHelper.clone(expression.getComments()));
        aCtExecutableReferenceExpression.setAnnotations(this.cloneHelper.clone(expression.getAnnotations()));
        aCtExecutableReferenceExpression.setType(this.cloneHelper.clone(expression.getType()));
        aCtExecutableReferenceExpression.setTypeCasts(this.cloneHelper.clone(expression.getTypeCasts()));
        aCtExecutableReferenceExpression.setExecutable(this.cloneHelper.clone(expression.getExecutable()));
        aCtExecutableReferenceExpression.setTarget(this.cloneHelper.clone(expression.getTarget()));
        this.builder.copy(expression, aCtExecutableReferenceExpression);
        this.cloneHelper.tailor(expression, aCtExecutableReferenceExpression);
        this.other = aCtExecutableReferenceExpression;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T, A extends T> void visitCtOperatorAssignment(final spoon.reflect.code.CtOperatorAssignment<T, A> assignment) {
        spoon.reflect.code.CtOperatorAssignment<T, A> aCtOperatorAssignment = assignment.getFactory().Core().createOperatorAssignment();
        aCtOperatorAssignment.setAnnotations(this.cloneHelper.clone(assignment.getAnnotations()));
        aCtOperatorAssignment.setType(this.cloneHelper.clone(assignment.getType()));
        aCtOperatorAssignment.setTypeCasts(this.cloneHelper.clone(assignment.getTypeCasts()));
        aCtOperatorAssignment.setAssigned(this.cloneHelper.clone(assignment.getAssigned()));
        aCtOperatorAssignment.setAssignment(this.cloneHelper.clone(assignment.getAssignment()));
        aCtOperatorAssignment.setComments(this.cloneHelper.clone(assignment.getComments()));
        this.builder.copy(assignment, aCtOperatorAssignment);
        this.cloneHelper.tailor(assignment, aCtOperatorAssignment);
        this.other = aCtOperatorAssignment;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public void visitCtPackage(final spoon.reflect.declaration.CtPackage ctPackage) {
        spoon.reflect.declaration.CtPackage aCtPackage = ctPackage.getFactory().Core().createPackage();
        aCtPackage.setAnnotations(this.cloneHelper.clone(ctPackage.getAnnotations()));
        aCtPackage.setPackages(this.cloneHelper.clone(ctPackage.getPackages()));
        aCtPackage.setTypes(this.cloneHelper.clone(ctPackage.getTypes()));
        aCtPackage.setComments(this.cloneHelper.clone(ctPackage.getComments()));
        this.builder.copy(ctPackage, aCtPackage);
        this.cloneHelper.tailor(ctPackage, aCtPackage);
        this.other = aCtPackage;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public void visitCtPackageReference(final spoon.reflect.reference.CtPackageReference reference) {
        spoon.reflect.reference.CtPackageReference aCtPackageReference = reference.getFactory().Core().createPackageReference();
        aCtPackageReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.builder.copy(reference, aCtPackageReference);
        this.cloneHelper.tailor(reference, aCtPackageReference);
        this.other = aCtPackageReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtParameter(final spoon.reflect.declaration.CtParameter<T> parameter) {
        spoon.reflect.declaration.CtParameter<T> aCtParameter = parameter.getFactory().Core().createParameter();
        aCtParameter.setAnnotations(this.cloneHelper.clone(parameter.getAnnotations()));
        aCtParameter.setType(this.cloneHelper.clone(parameter.getType()));
        aCtParameter.setComments(this.cloneHelper.clone(parameter.getComments()));
        this.builder.copy(parameter, aCtParameter);
        this.cloneHelper.tailor(parameter, aCtParameter);
        this.other = aCtParameter;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtParameterReference(final spoon.reflect.reference.CtParameterReference<T> reference) {
        spoon.reflect.reference.CtParameterReference<T> aCtParameterReference = reference.getFactory().Core().createParameterReference();
        aCtParameterReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtParameterReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.builder.copy(reference, aCtParameterReference);
        this.cloneHelper.tailor(reference, aCtParameterReference);
        this.other = aCtParameterReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <R> void visitCtReturn(final spoon.reflect.code.CtReturn<R> returnStatement) {
        spoon.reflect.code.CtReturn<R> aCtReturn = returnStatement.getFactory().Core().createReturn();
        aCtReturn.setAnnotations(this.cloneHelper.clone(returnStatement.getAnnotations()));
        aCtReturn.setReturnedExpression(this.cloneHelper.clone(returnStatement.getReturnedExpression()));
        aCtReturn.setComments(this.cloneHelper.clone(returnStatement.getComments()));
        this.builder.copy(returnStatement, aCtReturn);
        this.cloneHelper.tailor(returnStatement, aCtReturn);
        this.other = aCtReturn;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <R> void visitCtStatementList(final spoon.reflect.code.CtStatementList statements) {
        spoon.reflect.code.CtStatementList aCtStatementList = statements.getFactory().Core().createStatementList();
        aCtStatementList.setAnnotations(this.cloneHelper.clone(statements.getAnnotations()));
        aCtStatementList.setStatements(this.cloneHelper.clone(statements.getStatements()));
        aCtStatementList.setComments(this.cloneHelper.clone(statements.getComments()));
        this.builder.copy(statements, aCtStatementList);
        this.cloneHelper.tailor(statements, aCtStatementList);
        this.other = aCtStatementList;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <S> void visitCtSwitch(final spoon.reflect.code.CtSwitch<S> switchStatement) {
        spoon.reflect.code.CtSwitch<S> aCtSwitch = switchStatement.getFactory().Core().createSwitch();
        aCtSwitch.setAnnotations(this.cloneHelper.clone(switchStatement.getAnnotations()));
        aCtSwitch.setSelector(this.cloneHelper.clone(switchStatement.getSelector()));
        aCtSwitch.setCases(this.cloneHelper.clone(switchStatement.getCases()));
        aCtSwitch.setComments(this.cloneHelper.clone(switchStatement.getComments()));
        this.builder.copy(switchStatement, aCtSwitch);
        this.cloneHelper.tailor(switchStatement, aCtSwitch);
        this.other = aCtSwitch;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public void visitCtSynchronized(final spoon.reflect.code.CtSynchronized synchro) {
        spoon.reflect.code.CtSynchronized aCtSynchronized = synchro.getFactory().Core().createSynchronized();
        aCtSynchronized.setAnnotations(this.cloneHelper.clone(synchro.getAnnotations()));
        aCtSynchronized.setExpression(this.cloneHelper.clone(synchro.getExpression()));
        aCtSynchronized.setBlock(this.cloneHelper.clone(synchro.getBlock()));
        aCtSynchronized.setComments(this.cloneHelper.clone(synchro.getComments()));
        this.builder.copy(synchro, aCtSynchronized);
        this.cloneHelper.tailor(synchro, aCtSynchronized);
        this.other = aCtSynchronized;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public void visitCtThrow(final spoon.reflect.code.CtThrow throwStatement) {
        spoon.reflect.code.CtThrow aCtThrow = throwStatement.getFactory().Core().createThrow();
        aCtThrow.setAnnotations(this.cloneHelper.clone(throwStatement.getAnnotations()));
        aCtThrow.setThrownExpression(this.cloneHelper.clone(throwStatement.getThrownExpression()));
        aCtThrow.setComments(this.cloneHelper.clone(throwStatement.getComments()));
        this.builder.copy(throwStatement, aCtThrow);
        this.cloneHelper.tailor(throwStatement, aCtThrow);
        this.other = aCtThrow;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public void visitCtTry(final spoon.reflect.code.CtTry tryBlock) {
        spoon.reflect.code.CtTry aCtTry = tryBlock.getFactory().Core().createTry();
        aCtTry.setAnnotations(this.cloneHelper.clone(tryBlock.getAnnotations()));
        aCtTry.setBody(this.cloneHelper.clone(tryBlock.getBody()));
        aCtTry.setCatchers(this.cloneHelper.clone(tryBlock.getCatchers()));
        aCtTry.setFinalizer(this.cloneHelper.clone(tryBlock.getFinalizer()));
        aCtTry.setComments(this.cloneHelper.clone(tryBlock.getComments()));
        this.builder.copy(tryBlock, aCtTry);
        this.cloneHelper.tailor(tryBlock, aCtTry);
        this.other = aCtTry;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtTryWithResource(final spoon.reflect.code.CtTryWithResource tryWithResource) {
        spoon.reflect.code.CtTryWithResource aCtTryWithResource = tryWithResource.getFactory().Core().createTryWithResource();
        aCtTryWithResource.setAnnotations(this.cloneHelper.clone(tryWithResource.getAnnotations()));
        aCtTryWithResource.setResources(this.cloneHelper.clone(tryWithResource.getResources()));
        aCtTryWithResource.setBody(this.cloneHelper.clone(tryWithResource.getBody()));
        aCtTryWithResource.setCatchers(this.cloneHelper.clone(tryWithResource.getCatchers()));
        aCtTryWithResource.setFinalizer(this.cloneHelper.clone(tryWithResource.getFinalizer()));
        aCtTryWithResource.setComments(this.cloneHelper.clone(tryWithResource.getComments()));
        this.builder.copy(tryWithResource, aCtTryWithResource);
        this.cloneHelper.tailor(tryWithResource, aCtTryWithResource);
        this.other = aCtTryWithResource;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public void visitCtTypeParameterReference(final spoon.reflect.reference.CtTypeParameterReference ref) {
        spoon.reflect.reference.CtTypeParameterReference aCtTypeParameterReference = ref.getFactory().Core().createTypeParameterReference();
        aCtTypeParameterReference.setPackage(this.cloneHelper.clone(ref.getPackage()));
        aCtTypeParameterReference.setDeclaringType(this.cloneHelper.clone(ref.getDeclaringType()));
        aCtTypeParameterReference.setAnnotations(this.cloneHelper.clone(ref.getAnnotations()));
        aCtTypeParameterReference.setBoundingType(this.cloneHelper.clone(ref.getBoundingType()));
        this.builder.copy(ref, aCtTypeParameterReference);
        this.cloneHelper.tailor(ref, aCtTypeParameterReference);
        this.other = aCtTypeParameterReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference wildcardReference) {
        spoon.reflect.reference.CtWildcardReference aCtWildcardReference = wildcardReference.getFactory().Core().createWildcardReference();
        aCtWildcardReference.setPackage(this.cloneHelper.clone(wildcardReference.getPackage()));
        aCtWildcardReference.setDeclaringType(this.cloneHelper.clone(wildcardReference.getDeclaringType()));
        aCtWildcardReference.setAnnotations(this.cloneHelper.clone(wildcardReference.getAnnotations()));
        aCtWildcardReference.setBoundingType(this.cloneHelper.clone(wildcardReference.getBoundingType()));
        this.builder.copy(wildcardReference, aCtWildcardReference);
        this.cloneHelper.tailor(wildcardReference, aCtWildcardReference);
        this.other = aCtWildcardReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtIntersectionTypeReference(final spoon.reflect.reference.CtIntersectionTypeReference<T> reference) {
        spoon.reflect.reference.CtIntersectionTypeReference<T> aCtIntersectionTypeReference = reference.getFactory().Core().createIntersectionTypeReference();
        aCtIntersectionTypeReference.setPackage(this.cloneHelper.clone(reference.getPackage()));
        aCtIntersectionTypeReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtIntersectionTypeReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));
        aCtIntersectionTypeReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        aCtIntersectionTypeReference.setBounds(this.cloneHelper.clone(reference.getBounds()));
        this.builder.copy(reference, aCtIntersectionTypeReference);
        this.cloneHelper.tailor(reference, aCtIntersectionTypeReference);
        this.other = aCtIntersectionTypeReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtTypeReference(final spoon.reflect.reference.CtTypeReference<T> reference) {
        spoon.reflect.reference.CtTypeReference<T> aCtTypeReference = reference.getFactory().Core().createTypeReference();
        aCtTypeReference.setPackage(this.cloneHelper.clone(reference.getPackage()));
        aCtTypeReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtTypeReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));
        aCtTypeReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        aCtTypeReference.setComments(this.cloneHelper.clone(reference.getComments()));
        this.builder.copy(reference, aCtTypeReference);
        this.cloneHelper.tailor(reference, aCtTypeReference);
        this.other = aCtTypeReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtTypeAccess(final spoon.reflect.code.CtTypeAccess<T> typeAccess) {
        spoon.reflect.code.CtTypeAccess<T> aCtTypeAccess = typeAccess.getFactory().Core().createTypeAccess();
        aCtTypeAccess.setAnnotations(this.cloneHelper.clone(typeAccess.getAnnotations()));
        aCtTypeAccess.setTypeCasts(this.cloneHelper.clone(typeAccess.getTypeCasts()));
        aCtTypeAccess.setAccessedType(this.cloneHelper.clone(typeAccess.getAccessedType()));
        aCtTypeAccess.setComments(this.cloneHelper.clone(typeAccess.getComments()));
        this.builder.copy(typeAccess, aCtTypeAccess);
        this.cloneHelper.tailor(typeAccess, aCtTypeAccess);
        this.other = aCtTypeAccess;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtUnaryOperator(final spoon.reflect.code.CtUnaryOperator<T> operator) {
        spoon.reflect.code.CtUnaryOperator<T> aCtUnaryOperator = operator.getFactory().Core().createUnaryOperator();
        aCtUnaryOperator.setAnnotations(this.cloneHelper.clone(operator.getAnnotations()));
        aCtUnaryOperator.setType(this.cloneHelper.clone(operator.getType()));
        aCtUnaryOperator.setTypeCasts(this.cloneHelper.clone(operator.getTypeCasts()));
        aCtUnaryOperator.setOperand(this.cloneHelper.clone(operator.getOperand()));
        aCtUnaryOperator.setComments(this.cloneHelper.clone(operator.getComments()));
        this.builder.copy(operator, aCtUnaryOperator);
        this.cloneHelper.tailor(operator, aCtUnaryOperator);
        this.other = aCtUnaryOperator;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtVariableRead(final spoon.reflect.code.CtVariableRead<T> variableRead) {
        spoon.reflect.code.CtVariableRead<T> aCtVariableRead = variableRead.getFactory().Core().createVariableRead();
        aCtVariableRead.setAnnotations(this.cloneHelper.clone(variableRead.getAnnotations()));
        aCtVariableRead.setTypeCasts(this.cloneHelper.clone(variableRead.getTypeCasts()));
        aCtVariableRead.setVariable(this.cloneHelper.clone(variableRead.getVariable()));
        aCtVariableRead.setComments(this.cloneHelper.clone(variableRead.getComments()));
        this.builder.copy(variableRead, aCtVariableRead);
        this.cloneHelper.tailor(variableRead, aCtVariableRead);
        this.other = aCtVariableRead;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtVariableWrite(final spoon.reflect.code.CtVariableWrite<T> variableWrite) {
        spoon.reflect.code.CtVariableWrite<T> aCtVariableWrite = variableWrite.getFactory().Core().createVariableWrite();
        aCtVariableWrite.setAnnotations(this.cloneHelper.clone(variableWrite.getAnnotations()));
        aCtVariableWrite.setTypeCasts(this.cloneHelper.clone(variableWrite.getTypeCasts()));
        aCtVariableWrite.setVariable(this.cloneHelper.clone(variableWrite.getVariable()));
        aCtVariableWrite.setComments(this.cloneHelper.clone(variableWrite.getComments()));
        this.builder.copy(variableWrite, aCtVariableWrite);
        this.cloneHelper.tailor(variableWrite, aCtVariableWrite);
        this.other = aCtVariableWrite;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public void visitCtWhile(final spoon.reflect.code.CtWhile whileLoop) {
        spoon.reflect.code.CtWhile aCtWhile = whileLoop.getFactory().Core().createWhile();
        aCtWhile.setAnnotations(this.cloneHelper.clone(whileLoop.getAnnotations()));
        aCtWhile.setLoopingExpression(this.cloneHelper.clone(whileLoop.getLoopingExpression()));
        aCtWhile.setBody(this.cloneHelper.clone(whileLoop.getBody()));
        aCtWhile.setComments(this.cloneHelper.clone(whileLoop.getComments()));
        this.builder.copy(whileLoop, aCtWhile);
        this.cloneHelper.tailor(whileLoop, aCtWhile);
        this.other = aCtWhile;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public <T> void visitCtCodeSnippetExpression(final spoon.reflect.code.CtCodeSnippetExpression<T> expression) {
        spoon.reflect.code.CtCodeSnippetExpression<T> aCtCodeSnippetExpression = expression.getFactory().Core().createCodeSnippetExpression();
        aCtCodeSnippetExpression.setType(this.cloneHelper.clone(expression.getType()));
        aCtCodeSnippetExpression.setComments(this.cloneHelper.clone(expression.getComments()));
        aCtCodeSnippetExpression.setAnnotations(this.cloneHelper.clone(expression.getAnnotations()));
        aCtCodeSnippetExpression.setTypeCasts(this.cloneHelper.clone(expression.getTypeCasts()));
        this.builder.copy(expression, aCtCodeSnippetExpression);
        this.cloneHelper.tailor(expression, aCtCodeSnippetExpression);
        this.other = aCtCodeSnippetExpression;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    public void visitCtCodeSnippetStatement(final spoon.reflect.code.CtCodeSnippetStatement statement) {
        spoon.reflect.code.CtCodeSnippetStatement aCtCodeSnippetStatement = statement.getFactory().Core().createCodeSnippetStatement();
        aCtCodeSnippetStatement.setComments(this.cloneHelper.clone(statement.getComments()));
        aCtCodeSnippetStatement.setAnnotations(this.cloneHelper.clone(statement.getAnnotations()));
        this.builder.copy(statement, aCtCodeSnippetStatement);
        this.cloneHelper.tailor(statement, aCtCodeSnippetStatement);
        this.other = aCtCodeSnippetStatement;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator]
    public <T> void...> but was:<...isitorGenerator
    [@java.lang.Override
    public <A extends java.lang.annotation.Annotation> void visitCtAnnotation(final spoon.reflect.declaration.CtAnnotation<A> annotation) {
        spoon.reflect.declaration.CtAnnotation<A> aCtAnnotation = annotation.getFactory().Core().createAnnotation();
        aCtAnnotation.setType(this.cloneHelper.clone(annotation.getType()));
        aCtAnnotation.setComments(this.cloneHelper.clone(annotation.getComments()));
        aCtAnnotation.setAnnotationType(this.cloneHelper.clone(annotation.getAnnotationType()));
        aCtAnnotation.setAnnotations(this.cloneHelper.clone(annotation.getAnnotations()));
        aCtAnnotation.setValues(this.cloneHelper.clone(annotation.getValues()));
        this.builder.copy(annotation, aCtAnnotation);
        this.cloneHelper.tailor(annotation, aCtAnnotation);
        this.other = aCtAnnotation;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <A extends java.lang.annotation.Annotation> void visitCtAnnotationType(final spoon.reflect.declaration.CtAnnotationType<A> annotationType) {
        spoon.reflect.declaration.CtAnnotationType<A> aCtAnnotationType = annotationType.getFactory().Core().createAnnotationType();
        aCtAnnotationType.setAnnotations(this.cloneHelper.clone(annotationType.getAnnotations()));
        aCtAnnotationType.setTypeMembers(this.cloneHelper.clone(annotationType.getTypeMembers()));
        aCtAnnotationType.setComments(this.cloneHelper.clone(annotationType.getComments()));
        this.builder.copy(annotationType, aCtAnnotationType);
        this.cloneHelper.tailor(annotationType, aCtAnnotationType);
        this.other = aCtAnnotationType;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtAnonymousExecutable(final spoon.reflect.declaration.CtAnonymousExecutable anonymousExec) {
        spoon.reflect.declaration.CtAnonymousExecutable aCtAnonymousExecutable = anonymousExec.getFactory().Core().createAnonymousExecutable();
        aCtAnonymousExecutable.setAnnotations(this.cloneHelper.clone(anonymousExec.getAnnotations()));
        aCtAnonymousExecutable.setBody(this.cloneHelper.clone(anonymousExec.getBody()));
        aCtAnonymousExecutable.setComments(this.cloneHelper.clone(anonymousExec.getComments()));
        this.builder.copy(anonymousExec, aCtAnonymousExecutable);
        this.cloneHelper.tailor(anonymousExec, aCtAnonymousExecutable);
        this.other = aCtAnonymousExecutable;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtArrayRead(final spoon.reflect.code.CtArrayRead<T> arrayRead) {
        spoon.reflect.code.CtArrayRead<T> aCtArrayRead = arrayRead.getFactory().Core().createArrayRead();
        aCtArrayRead.setAnnotations(this.cloneHelper.clone(arrayRead.getAnnotations()));
        aCtArrayRead.setType(this.cloneHelper.clone(arrayRead.getType()));
        aCtArrayRead.setTypeCasts(this.cloneHelper.clone(arrayRead.getTypeCasts()));
        aCtArrayRead.setTarget(this.cloneHelper.clone(arrayRead.getTarget()));
        aCtArrayRead.setIndexExpression(this.cloneHelper.clone(arrayRead.getIndexExpression()));
        aCtArrayRead.setComments(this.cloneHelper.clone(arrayRead.getComments()));
        this.builder.copy(arrayRead, aCtArrayRead);
        this.cloneHelper.tailor(arrayRead, aCtArrayRead);
        this.other = aCtArrayRead;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtArrayWrite(final spoon.reflect.code.CtArrayWrite<T> arrayWrite) {
        spoon.reflect.code.CtArrayWrite<T> aCtArrayWrite = arrayWrite.getFactory().Core().createArrayWrite();
        aCtArrayWrite.setAnnotations(this.cloneHelper.clone(arrayWrite.getAnnotations()));
        aCtArrayWrite.setType(this.cloneHelper.clone(arrayWrite.getType()));
        aCtArrayWrite.setTypeCasts(this.cloneHelper.clone(arrayWrite.getTypeCasts()));
        aCtArrayWrite.setTarget(this.cloneHelper.clone(arrayWrite.getTarget()));
        aCtArrayWrite.setIndexExpression(this.cloneHelper.clone(arrayWrite.getIndexExpression()));
        aCtArrayWrite.setComments(this.cloneHelper.clone(arrayWrite.getComments()));
        this.builder.copy(arrayWrite, aCtArrayWrite);
        this.cloneHelper.tailor(arrayWrite, aCtArrayWrite);
        this.other = aCtArrayWrite;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtArrayTypeReference(final spoon.reflect.reference.CtArrayTypeReference<T> reference) {
        spoon.reflect.reference.CtArrayTypeReference<T> aCtArrayTypeReference = reference.getFactory().Core().createArrayTypeReference();
        aCtArrayTypeReference.setPackage(this.cloneHelper.clone(reference.getPackage()));
        aCtArrayTypeReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtArrayTypeReference.setComponentType(this.cloneHelper.clone(reference.getComponentType()));
        aCtArrayTypeReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));
        aCtArrayTypeReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.builder.copy(reference, aCtArrayTypeReference);
        this.cloneHelper.tailor(reference, aCtArrayTypeReference);
        this.other = aCtArrayTypeReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtAssert(final spoon.reflect.code.CtAssert<T> asserted) {
        spoon.reflect.code.CtAssert<T> aCtAssert = asserted.getFactory().Core().createAssert();
        aCtAssert.setAnnotations(this.cloneHelper.clone(asserted.getAnnotations()));
        aCtAssert.setAssertExpression(this.cloneHelper.clone(asserted.getAssertExpression()));
        aCtAssert.setExpression(this.cloneHelper.clone(asserted.getExpression()));
        aCtAssert.setComments(this.cloneHelper.clone(asserted.getComments()));
        this.builder.copy(asserted, aCtAssert);
        this.cloneHelper.tailor(asserted, aCtAssert);
        this.other = aCtAssert;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T, A extends T> void visitCtAssignment(final spoon.reflect.code.CtAssignment<T, A> assignement) {
        spoon.reflect.code.CtAssignment<T, A> aCtAssignment = assignement.getFactory().Core().createAssignment();
        aCtAssignment.setAnnotations(this.cloneHelper.clone(assignement.getAnnotations()));
        aCtAssignment.setType(this.cloneHelper.clone(assignement.getType()));
        aCtAssignment.setTypeCasts(this.cloneHelper.clone(assignement.getTypeCasts()));
        aCtAssignment.setAssigned(this.cloneHelper.clone(assignement.getAssigned()));
        aCtAssignment.setAssignment(this.cloneHelper.clone(assignement.getAssignment()));
        aCtAssignment.setComments(this.cloneHelper.clone(assignement.getComments()));
        this.builder.copy(assignement, aCtAssignment);
        this.cloneHelper.tailor(assignement, aCtAssignment);
        this.other = aCtAssignment;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtBinaryOperator(final spoon.reflect.code.CtBinaryOperator<T> operator) {
        spoon.reflect.code.CtBinaryOperator<T> aCtBinaryOperator = operator.getFactory().Core().createBinaryOperator();
        aCtBinaryOperator.setAnnotations(this.cloneHelper.clone(operator.getAnnotations()));
        aCtBinaryOperator.setType(this.cloneHelper.clone(operator.getType()));
        aCtBinaryOperator.setTypeCasts(this.cloneHelper.clone(operator.getTypeCasts()));
        aCtBinaryOperator.setLeftHandOperand(this.cloneHelper.clone(operator.getLeftHandOperand()));
        aCtBinaryOperator.setRightHandOperand(this.cloneHelper.clone(operator.getRightHandOperand()));
        aCtBinaryOperator.setComments(this.cloneHelper.clone(operator.getComments()));
        this.builder.copy(operator, aCtBinaryOperator);
        this.cloneHelper.tailor(operator, aCtBinaryOperator);
        this.other = aCtBinaryOperator;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <R> void visitCtBlock(final spoon.reflect.code.CtBlock<R> block) {
        spoon.reflect.code.CtBlock<R> aCtBlock = block.getFactory().Core().createBlock();
        aCtBlock.setAnnotations(this.cloneHelper.clone(block.getAnnotations()));
        aCtBlock.setStatements(this.cloneHelper.clone(block.getStatements()));
        aCtBlock.setComments(this.cloneHelper.clone(block.getComments()));
        this.builder.copy(block, aCtBlock);
        this.cloneHelper.tailor(block, aCtBlock);
        this.other = aCtBlock;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtBreak(final spoon.reflect.code.CtBreak breakStatement) {
        spoon.reflect.code.CtBreak aCtBreak = breakStatement.getFactory().Core().createBreak();
        aCtBreak.setAnnotations(this.cloneHelper.clone(breakStatement.getAnnotations()));
        aCtBreak.setComments(this.cloneHelper.clone(breakStatement.getComments()));
        this.builder.copy(breakStatement, aCtBreak);
        this.cloneHelper.tailor(breakStatement, aCtBreak);
        this.other = aCtBreak;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <S> void visitCtCase(final spoon.reflect.code.CtCase<S> caseStatement) {
        spoon.reflect.code.CtCase<S> aCtCase = caseStatement.getFactory().Core().createCase();
        aCtCase.setAnnotations(this.cloneHelper.clone(caseStatement.getAnnotations()));
        aCtCase.setCaseExpression(this.cloneHelper.clone(caseStatement.getCaseExpression()));
        aCtCase.setStatements(this.cloneHelper.clone(caseStatement.getStatements()));
        aCtCase.setComments(this.cloneHelper.clone(caseStatement.getComments()));
        this.builder.copy(caseStatement, aCtCase);
        this.cloneHelper.tailor(caseStatement, aCtCase);
        this.other = aCtCase;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtCatch(final spoon.reflect.code.CtCatch catchBlock) {
        spoon.reflect.code.CtCatch aCtCatch = catchBlock.getFactory().Core().createCatch();
        aCtCatch.setAnnotations(this.cloneHelper.clone(catchBlock.getAnnotations()));
        aCtCatch.setParameter(this.cloneHelper.clone(catchBlock.getParameter()));
        aCtCatch.setBody(this.cloneHelper.clone(catchBlock.getBody()));
        aCtCatch.setComments(this.cloneHelper.clone(catchBlock.getComments()));
        this.builder.copy(catchBlock, aCtCatch);
        this.cloneHelper.tailor(catchBlock, aCtCatch);
        this.other = aCtCatch;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtClass(final spoon.reflect.declaration.CtClass<T> ctClass) {
        spoon.reflect.declaration.CtClass<T> aCtClass = ctClass.getFactory().Core().createClass();
        aCtClass.setAnnotations(this.cloneHelper.clone(ctClass.getAnnotations()));
        aCtClass.setSuperclass(this.cloneHelper.clone(ctClass.getSuperclass()));
        aCtClass.setSuperInterfaces(this.cloneHelper.clone(ctClass.getSuperInterfaces()));
        aCtClass.setFormalCtTypeParameters(this.cloneHelper.clone(ctClass.getFormalCtTypeParameters()));
        aCtClass.setTypeMembers(this.cloneHelper.clone(ctClass.getTypeMembers()));
        aCtClass.setComments(this.cloneHelper.clone(ctClass.getComments()));
        this.builder.copy(ctClass, aCtClass);
        this.cloneHelper.tailor(ctClass, aCtClass);
        this.other = aCtClass;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter typeParameter) {
        spoon.reflect.declaration.CtTypeParameter aCtTypeParameter = typeParameter.getFactory().Core().createTypeParameter();
        aCtTypeParameter.setAnnotations(this.cloneHelper.clone(typeParameter.getAnnotations()));
        aCtTypeParameter.setSuperclass(this.cloneHelper.clone(typeParameter.getSuperclass()));
        aCtTypeParameter.setComments(this.cloneHelper.clone(typeParameter.getComments()));
        this.builder.copy(typeParameter, aCtTypeParameter);
        this.cloneHelper.tailor(typeParameter, aCtTypeParameter);
        this.other = aCtTypeParameter;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtConditional(final spoon.reflect.code.CtConditional<T> conditional) {
        spoon.reflect.code.CtConditional<T> aCtConditional = conditional.getFactory().Core().createConditional();
        aCtConditional.setType(this.cloneHelper.clone(conditional.getType()));
        aCtConditional.setAnnotations(this.cloneHelper.clone(conditional.getAnnotations()));
        aCtConditional.setCondition(this.cloneHelper.clone(conditional.getCondition()));
        aCtConditional.setThenExpression(this.cloneHelper.clone(conditional.getThenExpression()));
        aCtConditional.setElseExpression(this.cloneHelper.clone(conditional.getElseExpression()));
        aCtConditional.setComments(this.cloneHelper.clone(conditional.getComments()));
        aCtConditional.setTypeCasts(this.cloneHelper.clone(conditional.getTypeCasts()));
        this.builder.copy(conditional, aCtConditional);
        this.cloneHelper.tailor(conditional, aCtConditional);
        this.other = aCtConditional;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtConstructor(final spoon.reflect.declaration.CtConstructor<T> c) {
        spoon.reflect.declaration.CtConstructor<T> aCtConstructor = c.getFactory().Core().createConstructor();
        aCtConstructor.setAnnotations(this.cloneHelper.clone(c.getAnnotations()));
        aCtConstructor.setParameters(this.cloneHelper.clone(c.getParameters()));
        aCtConstructor.setThrownTypes(this.cloneHelper.clone(c.getThrownTypes()));
        aCtConstructor.setFormalCtTypeParameters(this.cloneHelper.clone(c.getFormalCtTypeParameters()));
        aCtConstructor.setBody(this.cloneHelper.clone(c.getBody()));
        aCtConstructor.setComments(this.cloneHelper.clone(c.getComments()));
        this.builder.copy(c, aCtConstructor);
        this.cloneHelper.tailor(c, aCtConstructor);
        this.other = aCtConstructor;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtContinue(final spoon.reflect.code.CtContinue continueStatement) {
        spoon.reflect.code.CtContinue aCtContinue = continueStatement.getFactory().Core().createContinue();
        aCtContinue.setAnnotations(this.cloneHelper.clone(continueStatement.getAnnotations()));
        aCtContinue.setComments(this.cloneHelper.clone(continueStatement.getComments()));
        this.builder.copy(continueStatement, aCtContinue);
        this.cloneHelper.tailor(continueStatement, aCtContinue);
        this.other = aCtContinue;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtDo(final spoon.reflect.code.CtDo doLoop) {
        spoon.reflect.code.CtDo aCtDo = doLoop.getFactory().Core().createDo();
        aCtDo.setAnnotations(this.cloneHelper.clone(doLoop.getAnnotations()));
        aCtDo.setLoopingExpression(this.cloneHelper.clone(doLoop.getLoopingExpression()));
        aCtDo.setBody(this.cloneHelper.clone(doLoop.getBody()));
        aCtDo.setComments(this.cloneHelper.clone(doLoop.getComments()));
        this.builder.copy(doLoop, aCtDo);
        this.cloneHelper.tailor(doLoop, aCtDo);
        this.other = aCtDo;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T extends java.lang.Enum<?>> void visitCtEnum(final spoon.reflect.declaration.CtEnum<T> ctEnum) {
        spoon.reflect.declaration.CtEnum<T> aCtEnum = ctEnum.getFactory().Core().createEnum();
        aCtEnum.setAnnotations(this.cloneHelper.clone(ctEnum.getAnnotations()));
        aCtEnum.setSuperInterfaces(this.cloneHelper.clone(ctEnum.getSuperInterfaces()));
        aCtEnum.setTypeMembers(this.cloneHelper.clone(ctEnum.getTypeMembers()));
        aCtEnum.setEnumValues(this.cloneHelper.clone(ctEnum.getEnumValues()));
        aCtEnum.setComments(this.cloneHelper.clone(ctEnum.getComments()));
        this.builder.copy(ctEnum, aCtEnum);
        this.cloneHelper.tailor(ctEnum, aCtEnum);
        this.other = aCtEnum;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtExecutableReference(final spoon.reflect.reference.CtExecutableReference<T> reference) {
        spoon.reflect.reference.CtExecutableReference<T> aCtExecutableReference = reference.getFactory().Core().createExecutableReference();
        aCtExecutableReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtExecutableReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtExecutableReference.setParameters(this.cloneHelper.clone(reference.getParameters()));
        aCtExecutableReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));
        aCtExecutableReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        aCtExecutableReference.setComments(this.cloneHelper.clone(reference.getComments()));
        this.builder.copy(reference, aCtExecutableReference);
        this.cloneHelper.tailor(reference, aCtExecutableReference);
        this.other = aCtExecutableReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtField(final spoon.reflect.declaration.CtField<T> f) {
        spoon.reflect.declaration.CtField<T> aCtField = f.getFactory().Core().createField();
        aCtField.setAnnotations(this.cloneHelper.clone(f.getAnnotations()));
        aCtField.setType(this.cloneHelper.clone(f.getType()));
        aCtField.setDefaultExpression(this.cloneHelper.clone(f.getDefaultExpression()));
        aCtField.setComments(this.cloneHelper.clone(f.getComments()));
        this.builder.copy(f, aCtField);
        this.cloneHelper.tailor(f, aCtField);
        this.other = aCtField;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtEnumValue(final spoon.reflect.declaration.CtEnumValue<T> enumValue) {
        spoon.reflect.declaration.CtEnumValue<T> aCtEnumValue = enumValue.getFactory().Core().createEnumValue();
        aCtEnumValue.setAnnotations(this.cloneHelper.clone(enumValue.getAnnotations()));
        aCtEnumValue.setType(this.cloneHelper.clone(enumValue.getType()));
        aCtEnumValue.setDefaultExpression(this.cloneHelper.clone(enumValue.getDefaultExpression()));
        aCtEnumValue.setComments(this.cloneHelper.clone(enumValue.getComments()));
        this.builder.copy(enumValue, aCtEnumValue);
        this.cloneHelper.tailor(enumValue, aCtEnumValue);
        this.other = aCtEnumValue;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtThisAccess(final spoon.reflect.code.CtThisAccess<T> thisAccess) {
        spoon.reflect.code.CtThisAccess<T> aCtThisAccess = thisAccess.getFactory().Core().createThisAccess();
        aCtThisAccess.setComments(this.cloneHelper.clone(thisAccess.getComments()));
        aCtThisAccess.setAnnotations(this.cloneHelper.clone(thisAccess.getAnnotations()));
        aCtThisAccess.setType(this.cloneHelper.clone(thisAccess.getType()));
        aCtThisAccess.setTypeCasts(this.cloneHelper.clone(thisAccess.getTypeCasts()));
        aCtThisAccess.setTarget(this.cloneHelper.clone(thisAccess.getTarget()));
        this.builder.copy(thisAccess, aCtThisAccess);
        this.cloneHelper.tailor(thisAccess, aCtThisAccess);
        this.other = aCtThisAccess;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtAnnotationFieldAccess(final spoon.reflect.code.CtAnnotationFieldAccess<T> annotationFieldAccess) {
        spoon.reflect.code.CtAnnotationFieldAccess<T> aCtAnnotationFieldAccess = annotationFieldAccess.getFactory().Core().createAnnotationFieldAccess();
        aCtAnnotationFieldAccess.setComments(this.cloneHelper.clone(annotationFieldAccess.getComments()));
        aCtAnnotationFieldAccess.setAnnotations(this.cloneHelper.clone(annotationFieldAccess.getAnnotations()));
        aCtAnnotationFieldAccess.setTypeCasts(this.cloneHelper.clone(annotationFieldAccess.getTypeCasts()));
        aCtAnnotationFieldAccess.setTarget(this.cloneHelper.clone(annotationFieldAccess.getTarget()));
        aCtAnnotationFieldAccess.setVariable(this.cloneHelper.clone(annotationFieldAccess.getVariable()));
        this.builder.copy(annotationFieldAccess, aCtAnnotationFieldAccess);
        this.cloneHelper.tailor(annotationFieldAccess, aCtAnnotationFieldAccess);
        this.other = aCtAnnotationFieldAccess;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtFieldReference(final spoon.reflect.reference.CtFieldReference<T> reference) {
        spoon.reflect.reference.CtFieldReference<T> aCtFieldReference = reference.getFactory().Core().createFieldReference();
        aCtFieldReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtFieldReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtFieldReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.builder.copy(reference, aCtFieldReference);
        this.cloneHelper.tailor(reference, aCtFieldReference);
        this.other = aCtFieldReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtFor(final spoon.reflect.code.CtFor forLoop) {
        spoon.reflect.code.CtFor aCtFor = forLoop.getFactory().Core().createFor();
        aCtFor.setAnnotations(this.cloneHelper.clone(forLoop.getAnnotations()));
        aCtFor.setForInit(this.cloneHelper.clone(forLoop.getForInit()));
        aCtFor.setExpression(this.cloneHelper.clone(forLoop.getExpression()));
        aCtFor.setForUpdate(this.cloneHelper.clone(forLoop.getForUpdate()));
        aCtFor.setBody(this.cloneHelper.clone(forLoop.getBody()));
        aCtFor.setComments(this.cloneHelper.clone(forLoop.getComments()));
        this.builder.copy(forLoop, aCtFor);
        this.cloneHelper.tailor(forLoop, aCtFor);
        this.other = aCtFor;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtForEach(final spoon.reflect.code.CtForEach foreach) {
        spoon.reflect.code.CtForEach aCtForEach = foreach.getFactory().Core().createForEach();
        aCtForEach.setAnnotations(this.cloneHelper.clone(foreach.getAnnotations()));
        aCtForEach.setVariable(this.cloneHelper.clone(foreach.getVariable()));
        aCtForEach.setExpression(this.cloneHelper.clone(foreach.getExpression()));
        aCtForEach.setBody(this.cloneHelper.clone(foreach.getBody()));
        aCtForEach.setComments(this.cloneHelper.clone(foreach.getComments()));
        this.builder.copy(foreach, aCtForEach);
        this.cloneHelper.tailor(foreach, aCtForEach);
        this.other = aCtForEach;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtIf(final spoon.reflect.code.CtIf ifElement) {
        spoon.reflect.code.CtIf aCtIf = ifElement.getFactory().Core().createIf();
        aCtIf.setAnnotations(this.cloneHelper.clone(ifElement.getAnnotations()));
        aCtIf.setCondition(this.cloneHelper.clone(ifElement.getCondition()));
        aCtIf.setThenStatement(this.cloneHelper.clone(((spoon.reflect.code.CtStatement) (ifElement.getThenStatement()))));
        aCtIf.setElseStatement(this.cloneHelper.clone(((spoon.reflect.code.CtStatement) (ifElement.getElseStatement()))));
        aCtIf.setComments(this.cloneHelper.clone(ifElement.getComments()));
        this.builder.copy(ifElement, aCtIf);
        this.cloneHelper.tailor(ifElement, aCtIf);
        this.other = aCtIf;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtInterface(final spoon.reflect.declaration.CtInterface<T> intrface) {
        spoon.reflect.declaration.CtInterface<T> aCtInterface = intrface.getFactory().Core().createInterface();
        aCtInterface.setAnnotations(this.cloneHelper.clone(intrface.getAnnotations()));
        aCtInterface.setSuperInterfaces(this.cloneHelper.clone(intrface.getSuperInterfaces()));
        aCtInterface.setFormalCtTypeParameters(this.cloneHelper.clone(intrface.getFormalCtTypeParameters()));
        aCtInterface.setTypeMembers(this.cloneHelper.clone(intrface.getTypeMembers()));
        aCtInterface.setComments(this.cloneHelper.clone(intrface.getComments()));
        this.builder.copy(intrface, aCtInterface);
        this.cloneHelper.tailor(intrface, aCtInterface);
        this.other = aCtInterface;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtInvocation(final spoon.reflect.code.CtInvocation<T> invocation) {
        spoon.reflect.code.CtInvocation<T> aCtInvocation = invocation.getFactory().Core().createInvocation();
        aCtInvocation.setAnnotations(this.cloneHelper.clone(invocation.getAnnotations()));
        aCtInvocation.setTypeCasts(this.cloneHelper.clone(invocation.getTypeCasts()));
        aCtInvocation.setTarget(this.cloneHelper.clone(invocation.getTarget()));
        aCtInvocation.setExecutable(this.cloneHelper.clone(invocation.getExecutable()));
        aCtInvocation.setArguments(this.cloneHelper.clone(invocation.getArguments()));
        aCtInvocation.setComments(this.cloneHelper.clone(invocation.getComments()));
        this.builder.copy(invocation, aCtInvocation);
        this.cloneHelper.tailor(invocation, aCtInvocation);
        this.other = aCtInvocation;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtLiteral(final spoon.reflect.code.CtLiteral<T> literal) {
        spoon.reflect.code.CtLiteral<T> aCtLiteral = literal.getFactory().Core().createLiteral();
        aCtLiteral.setAnnotations(this.cloneHelper.clone(literal.getAnnotations()));
        aCtLiteral.setType(this.cloneHelper.clone(literal.getType()));
        aCtLiteral.setTypeCasts(this.cloneHelper.clone(literal.getTypeCasts()));
        aCtLiteral.setComments(this.cloneHelper.clone(literal.getComments()));
        this.builder.copy(literal, aCtLiteral);
        this.cloneHelper.tailor(literal, aCtLiteral);
        this.other = aCtLiteral;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtLocalVariable(final spoon.reflect.code.CtLocalVariable<T> localVariable) {
        spoon.reflect.code.CtLocalVariable<T> aCtLocalVariable = localVariable.getFactory().Core().createLocalVariable();
        aCtLocalVariable.setAnnotations(this.cloneHelper.clone(localVariable.getAnnotations()));
        aCtLocalVariable.setType(this.cloneHelper.clone(localVariable.getType()));
        aCtLocalVariable.setDefaultExpression(this.cloneHelper.clone(localVariable.getDefaultExpression()));
        aCtLocalVariable.setComments(this.cloneHelper.clone(localVariable.getComments()));
        this.builder.copy(localVariable, aCtLocalVariable);
        this.cloneHelper.tailor(localVariable, aCtLocalVariable);
        this.other = aCtLocalVariable;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtLocalVariableReference(final spoon.reflect.reference.CtLocalVariableReference<T> reference) {
        spoon.reflect.reference.CtLocalVariableReference<T> aCtLocalVariableReference = reference.getFactory().Core().createLocalVariableReference();
        aCtLocalVariableReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtLocalVariableReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.builder.copy(reference, aCtLocalVariableReference);
        this.cloneHelper.tailor(reference, aCtLocalVariableReference);
        this.other = aCtLocalVariableReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtCatchVariable(final spoon.reflect.code.CtCatchVariable<T> catchVariable) {
        spoon.reflect.code.CtCatchVariable<T> aCtCatchVariable = catchVariable.getFactory().Core().createCatchVariable();
        aCtCatchVariable.setComments(this.cloneHelper.clone(catchVariable.getComments()));
        aCtCatchVariable.setAnnotations(this.cloneHelper.clone(catchVariable.getAnnotations()));
        aCtCatchVariable.setMultiTypes(this.cloneHelper.clone(catchVariable.getMultiTypes()));
        this.builder.copy(catchVariable, aCtCatchVariable);
        this.cloneHelper.tailor(catchVariable, aCtCatchVariable);
        this.other = aCtCatchVariable;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtCatchVariableReference(final spoon.reflect.reference.CtCatchVariableReference<T> reference) {
        spoon.reflect.reference.CtCatchVariableReference<T> aCtCatchVariableReference = reference.getFactory().Core().createCatchVariableReference();
        aCtCatchVariableReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtCatchVariableReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.builder.copy(reference, aCtCatchVariableReference);
        this.cloneHelper.tailor(reference, aCtCatchVariableReference);
        this.other = aCtCatchVariableReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtMethod(final spoon.reflect.declaration.CtMethod<T> m) {
        spoon.reflect.declaration.CtMethod<T> aCtMethod = m.getFactory().Core().createMethod();
        aCtMethod.setAnnotations(this.cloneHelper.clone(m.getAnnotations()));
        aCtMethod.setFormalCtTypeParameters(this.cloneHelper.clone(m.getFormalCtTypeParameters()));
        aCtMethod.setType(this.cloneHelper.clone(m.getType()));
        aCtMethod.setParameters(this.cloneHelper.clone(m.getParameters()));
        aCtMethod.setThrownTypes(this.cloneHelper.clone(m.getThrownTypes()));
        aCtMethod.setBody(this.cloneHelper.clone(m.getBody()));
        aCtMethod.setComments(this.cloneHelper.clone(m.getComments()));
        this.builder.copy(m, aCtMethod);
        this.cloneHelper.tailor(m, aCtMethod);
        this.other = aCtMethod;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod<T> annotationMethod) {
        spoon.reflect.declaration.CtAnnotationMethod<T> aCtAnnotationMethod = annotationMethod.getFactory().Core().createAnnotationMethod();
        aCtAnnotationMethod.setAnnotations(this.cloneHelper.clone(annotationMethod.getAnnotations()));
        aCtAnnotationMethod.setType(this.cloneHelper.clone(annotationMethod.getType()));
        aCtAnnotationMethod.setDefaultExpression(this.cloneHelper.clone(annotationMethod.getDefaultExpression()));
        aCtAnnotationMethod.setComments(this.cloneHelper.clone(annotationMethod.getComments()));
        this.builder.copy(annotationMethod, aCtAnnotationMethod);
        this.cloneHelper.tailor(annotationMethod, aCtAnnotationMethod);
        this.other = aCtAnnotationMethod;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtNewArray(final spoon.reflect.code.CtNewArray<T> newArray) {
        spoon.reflect.code.CtNewArray<T> aCtNewArray = newArray.getFactory().Core().createNewArray();
        aCtNewArray.setAnnotations(this.cloneHelper.clone(newArray.getAnnotations()));
        aCtNewArray.setType(this.cloneHelper.clone(newArray.getType()));
        aCtNewArray.setTypeCasts(this.cloneHelper.clone(newArray.getTypeCasts()));
        aCtNewArray.setElements(this.cloneHelper.clone(newArray.getElements()));
        aCtNewArray.setDimensionExpressions(this.cloneHelper.clone(newArray.getDimensionExpressions()));
        aCtNewArray.setComments(this.cloneHelper.clone(newArray.getComments()));
        this.builder.copy(newArray, aCtNewArray);
        this.cloneHelper.tailor(newArray, aCtNewArray);
        this.other = aCtNewArray;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtConstructorCall(final spoon.reflect.code.CtConstructorCall<T> ctConstructorCall) {
        spoon.reflect.code.CtConstructorCall<T> aCtConstructorCall = ctConstructorCall.getFactory().Core().createConstructorCall();
        aCtConstructorCall.setAnnotations(this.cloneHelper.clone(ctConstructorCall.getAnnotations()));
        aCtConstructorCall.setTypeCasts(this.cloneHelper.clone(ctConstructorCall.getTypeCasts()));
        aCtConstructorCall.setExecutable(this.cloneHelper.clone(ctConstructorCall.getExecutable()));
        aCtConstructorCall.setTarget(this.cloneHelper.clone(ctConstructorCall.getTarget()));
        aCtConstructorCall.setArguments(this.cloneHelper.clone(ctConstructorCall.getArguments()));
        aCtConstructorCall.setComments(this.cloneHelper.clone(ctConstructorCall.getComments()));
        this.builder.copy(ctConstructorCall, aCtConstructorCall);
        this.cloneHelper.tailor(ctConstructorCall, aCtConstructorCall);
        this.other = aCtConstructorCall;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtNewClass(final spoon.reflect.code.CtNewClass<T> newClass) {
        spoon.reflect.code.CtNewClass<T> aCtNewClass = newClass.getFactory().Core().createNewClass();
        aCtNewClass.setAnnotations(this.cloneHelper.clone(newClass.getAnnotations()));
        aCtNewClass.setTypeCasts(this.cloneHelper.clone(newClass.getTypeCasts()));
        aCtNewClass.setExecutable(this.cloneHelper.clone(newClass.getExecutable()));
        aCtNewClass.setTarget(this.cloneHelper.clone(newClass.getTarget()));
        aCtNewClass.setArguments(this.cloneHelper.clone(newClass.getArguments()));
        aCtNewClass.setAnonymousClass(this.cloneHelper.clone(newClass.getAnonymousClass()));
        aCtNewClass.setComments(this.cloneHelper.clone(newClass.getComments()));
        this.builder.copy(newClass, aCtNewClass);
        this.cloneHelper.tailor(newClass, aCtNewClass);
        this.other = aCtNewClass;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtLambda(final spoon.reflect.code.CtLambda<T> lambda) {
        spoon.reflect.code.CtLambda<T> aCtLambda = lambda.getFactory().Core().createLambda();
        aCtLambda.setAnnotations(this.cloneHelper.clone(lambda.getAnnotations()));
        aCtLambda.setType(this.cloneHelper.clone(lambda.getType()));
        aCtLambda.setTypeCasts(this.cloneHelper.clone(lambda.getTypeCasts()));
        aCtLambda.setParameters(this.cloneHelper.clone(lambda.getParameters()));
        aCtLambda.setBody(this.cloneHelper.clone(lambda.getBody()));
        aCtLambda.setExpression(this.cloneHelper.clone(lambda.getExpression()));
        aCtLambda.setComments(this.cloneHelper.clone(lambda.getComments()));
        this.builder.copy(lambda, aCtLambda);
        this.cloneHelper.tailor(lambda, aCtLambda);
        this.other = aCtLambda;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T, E extends spoon.reflect.code.CtExpression<?>> void visitCtExecutableReferenceExpression(final spoon.reflect.code.CtExecutableReferenceExpression<T, E> expression) {
        spoon.reflect.code.CtExecutableReferenceExpression<T, E> aCtExecutableReferenceExpression = expression.getFactory().Core().createExecutableReferenceExpression();
        aCtExecutableReferenceExpression.setComments(this.cloneHelper.clone(expression.getComments()));
        aCtExecutableReferenceExpression.setAnnotations(this.cloneHelper.clone(expression.getAnnotations()));
        aCtExecutableReferenceExpression.setType(this.cloneHelper.clone(expression.getType()));
        aCtExecutableReferenceExpression.setTypeCasts(this.cloneHelper.clone(expression.getTypeCasts()));
        aCtExecutableReferenceExpression.setExecutable(this.cloneHelper.clone(expression.getExecutable()));
        aCtExecutableReferenceExpression.setTarget(this.cloneHelper.clone(expression.getTarget()));
        this.builder.copy(expression, aCtExecutableReferenceExpression);
        this.cloneHelper.tailor(expression, aCtExecutableReferenceExpression);
        this.other = aCtExecutableReferenceExpression;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T, A extends T> void visitCtOperatorAssignment(final spoon.reflect.code.CtOperatorAssignment<T, A> assignment) {
        spoon.reflect.code.CtOperatorAssignment<T, A> aCtOperatorAssignment = assignment.getFactory().Core().createOperatorAssignment();
        aCtOperatorAssignment.setAnnotations(this.cloneHelper.clone(assignment.getAnnotations()));
        aCtOperatorAssignment.setType(this.cloneHelper.clone(assignment.getType()));
        aCtOperatorAssignment.setTypeCasts(this.cloneHelper.clone(assignment.getTypeCasts()));
        aCtOperatorAssignment.setAssigned(this.cloneHelper.clone(assignment.getAssigned()));
        aCtOperatorAssignment.setAssignment(this.cloneHelper.clone(assignment.getAssignment()));
        aCtOperatorAssignment.setComments(this.cloneHelper.clone(assignment.getComments()));
        this.builder.copy(assignment, aCtOperatorAssignment);
        this.cloneHelper.tailor(assignment, aCtOperatorAssignment);
        this.other = aCtOperatorAssignment;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtPackage(final spoon.reflect.declaration.CtPackage ctPackage) {
        spoon.reflect.declaration.CtPackage aCtPackage = ctPackage.getFactory().Core().createPackage();
        aCtPackage.setAnnotations(this.cloneHelper.clone(ctPackage.getAnnotations()));
        aCtPackage.setPackages(this.cloneHelper.clone(ctPackage.getPackages()));
        aCtPackage.setTypes(this.cloneHelper.clone(ctPackage.getTypes()));
        aCtPackage.setComments(this.cloneHelper.clone(ctPackage.getComments()));
        this.builder.copy(ctPackage, aCtPackage);
        this.cloneHelper.tailor(ctPackage, aCtPackage);
        this.other = aCtPackage;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtPackageReference(final spoon.reflect.reference.CtPackageReference reference) {
        spoon.reflect.reference.CtPackageReference aCtPackageReference = reference.getFactory().Core().createPackageReference();
        aCtPackageReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.builder.copy(reference, aCtPackageReference);
        this.cloneHelper.tailor(reference, aCtPackageReference);
        this.other = aCtPackageReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtParameter(final spoon.reflect.declaration.CtParameter<T> parameter) {
        spoon.reflect.declaration.CtParameter<T> aCtParameter = parameter.getFactory().Core().createParameter();
        aCtParameter.setAnnotations(this.cloneHelper.clone(parameter.getAnnotations()));
        aCtParameter.setType(this.cloneHelper.clone(parameter.getType()));
        aCtParameter.setComments(this.cloneHelper.clone(parameter.getComments()));
        this.builder.copy(parameter, aCtParameter);
        this.cloneHelper.tailor(parameter, aCtParameter);
        this.other = aCtParameter;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtParameterReference(final spoon.reflect.reference.CtParameterReference<T> reference) {
        spoon.reflect.reference.CtParameterReference<T> aCtParameterReference = reference.getFactory().Core().createParameterReference();
        aCtParameterReference.setType(this.cloneHelper.clone(reference.getType()));
        aCtParameterReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        this.builder.copy(reference, aCtParameterReference);
        this.cloneHelper.tailor(reference, aCtParameterReference);
        this.other = aCtParameterReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <R> void visitCtReturn(final spoon.reflect.code.CtReturn<R> returnStatement) {
        spoon.reflect.code.CtReturn<R> aCtReturn = returnStatement.getFactory().Core().createReturn();
        aCtReturn.setAnnotations(this.cloneHelper.clone(returnStatement.getAnnotations()));
        aCtReturn.setReturnedExpression(this.cloneHelper.clone(returnStatement.getReturnedExpression()));
        aCtReturn.setComments(this.cloneHelper.clone(returnStatement.getComments()));
        this.builder.copy(returnStatement, aCtReturn);
        this.cloneHelper.tailor(returnStatement, aCtReturn);
        this.other = aCtReturn;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <R> void visitCtStatementList(final spoon.reflect.code.CtStatementList statements) {
        spoon.reflect.code.CtStatementList aCtStatementList = statements.getFactory().Core().createStatementList();
        aCtStatementList.setAnnotations(this.cloneHelper.clone(statements.getAnnotations()));
        aCtStatementList.setStatements(this.cloneHelper.clone(statements.getStatements()));
        aCtStatementList.setComments(this.cloneHelper.clone(statements.getComments()));
        this.builder.copy(statements, aCtStatementList);
        this.cloneHelper.tailor(statements, aCtStatementList);
        this.other = aCtStatementList;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <S> void visitCtSwitch(final spoon.reflect.code.CtSwitch<S> switchStatement) {
        spoon.reflect.code.CtSwitch<S> aCtSwitch = switchStatement.getFactory().Core().createSwitch();
        aCtSwitch.setAnnotations(this.cloneHelper.clone(switchStatement.getAnnotations()));
        aCtSwitch.setSelector(this.cloneHelper.clone(switchStatement.getSelector()));
        aCtSwitch.setCases(this.cloneHelper.clone(switchStatement.getCases()));
        aCtSwitch.setComments(this.cloneHelper.clone(switchStatement.getComments()));
        this.builder.copy(switchStatement, aCtSwitch);
        this.cloneHelper.tailor(switchStatement, aCtSwitch);
        this.other = aCtSwitch;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtSynchronized(final spoon.reflect.code.CtSynchronized synchro) {
        spoon.reflect.code.CtSynchronized aCtSynchronized = synchro.getFactory().Core().createSynchronized();
        aCtSynchronized.setAnnotations(this.cloneHelper.clone(synchro.getAnnotations()));
        aCtSynchronized.setExpression(this.cloneHelper.clone(synchro.getExpression()));
        aCtSynchronized.setBlock(this.cloneHelper.clone(synchro.getBlock()));
        aCtSynchronized.setComments(this.cloneHelper.clone(synchro.getComments()));
        this.builder.copy(synchro, aCtSynchronized);
        this.cloneHelper.tailor(synchro, aCtSynchronized);
        this.other = aCtSynchronized;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtThrow(final spoon.reflect.code.CtThrow throwStatement) {
        spoon.reflect.code.CtThrow aCtThrow = throwStatement.getFactory().Core().createThrow();
        aCtThrow.setAnnotations(this.cloneHelper.clone(throwStatement.getAnnotations()));
        aCtThrow.setThrownExpression(this.cloneHelper.clone(throwStatement.getThrownExpression()));
        aCtThrow.setComments(this.cloneHelper.clone(throwStatement.getComments()));
        this.builder.copy(throwStatement, aCtThrow);
        this.cloneHelper.tailor(throwStatement, aCtThrow);
        this.other = aCtThrow;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtTry(final spoon.reflect.code.CtTry tryBlock) {
        spoon.reflect.code.CtTry aCtTry = tryBlock.getFactory().Core().createTry();
        aCtTry.setAnnotations(this.cloneHelper.clone(tryBlock.getAnnotations()));
        aCtTry.setBody(this.cloneHelper.clone(tryBlock.getBody()));
        aCtTry.setCatchers(this.cloneHelper.clone(tryBlock.getCatchers()));
        aCtTry.setFinalizer(this.cloneHelper.clone(tryBlock.getFinalizer()));
        aCtTry.setComments(this.cloneHelper.clone(tryBlock.getComments()));
        this.builder.copy(tryBlock, aCtTry);
        this.cloneHelper.tailor(tryBlock, aCtTry);
        this.other = aCtTry;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtTryWithResource(final spoon.reflect.code.CtTryWithResource tryWithResource) {
        spoon.reflect.code.CtTryWithResource aCtTryWithResource = tryWithResource.getFactory().Core().createTryWithResource();
        aCtTryWithResource.setAnnotations(this.cloneHelper.clone(tryWithResource.getAnnotations()));
        aCtTryWithResource.setResources(this.cloneHelper.clone(tryWithResource.getResources()));
        aCtTryWithResource.setBody(this.cloneHelper.clone(tryWithResource.getBody()));
        aCtTryWithResource.setCatchers(this.cloneHelper.clone(tryWithResource.getCatchers()));
        aCtTryWithResource.setFinalizer(this.cloneHelper.clone(tryWithResource.getFinalizer()));
        aCtTryWithResource.setComments(this.cloneHelper.clone(tryWithResource.getComments()));
        this.builder.copy(tryWithResource, aCtTryWithResource);
        this.cloneHelper.tailor(tryWithResource, aCtTryWithResource);
        this.other = aCtTryWithResource;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtTypeParameterReference(final spoon.reflect.reference.CtTypeParameterReference ref) {
        spoon.reflect.reference.CtTypeParameterReference aCtTypeParameterReference = ref.getFactory().Core().createTypeParameterReference();
        aCtTypeParameterReference.setPackage(this.cloneHelper.clone(ref.getPackage()));
        aCtTypeParameterReference.setDeclaringType(this.cloneHelper.clone(ref.getDeclaringType()));
        aCtTypeParameterReference.setAnnotations(this.cloneHelper.clone(ref.getAnnotations()));
        aCtTypeParameterReference.setBoundingType(this.cloneHelper.clone(ref.getBoundingType()));
        this.builder.copy(ref, aCtTypeParameterReference);
        this.cloneHelper.tailor(ref, aCtTypeParameterReference);
        this.other = aCtTypeParameterReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference wildcardReference) {
        spoon.reflect.reference.CtWildcardReference aCtWildcardReference = wildcardReference.getFactory().Core().createWildcardReference();
        aCtWildcardReference.setPackage(this.cloneHelper.clone(wildcardReference.getPackage()));
        aCtWildcardReference.setDeclaringType(this.cloneHelper.clone(wildcardReference.getDeclaringType()));
        aCtWildcardReference.setAnnotations(this.cloneHelper.clone(wildcardReference.getAnnotations()));
        aCtWildcardReference.setBoundingType(this.cloneHelper.clone(wildcardReference.getBoundingType()));
        this.builder.copy(wildcardReference, aCtWildcardReference);
        this.cloneHelper.tailor(wildcardReference, aCtWildcardReference);
        this.other = aCtWildcardReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtIntersectionTypeReference(final spoon.reflect.reference.CtIntersectionTypeReference<T> reference) {
        spoon.reflect.reference.CtIntersectionTypeReference<T> aCtIntersectionTypeReference = reference.getFactory().Core().createIntersectionTypeReference();
        aCtIntersectionTypeReference.setPackage(this.cloneHelper.clone(reference.getPackage()));
        aCtIntersectionTypeReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtIntersectionTypeReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));
        aCtIntersectionTypeReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        aCtIntersectionTypeReference.setBounds(this.cloneHelper.clone(reference.getBounds()));
        this.builder.copy(reference, aCtIntersectionTypeReference);
        this.cloneHelper.tailor(reference, aCtIntersectionTypeReference);
        this.other = aCtIntersectionTypeReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtTypeReference(final spoon.reflect.reference.CtTypeReference<T> reference) {
        spoon.reflect.reference.CtTypeReference<T> aCtTypeReference = reference.getFactory().Core().createTypeReference();
        aCtTypeReference.setPackage(this.cloneHelper.clone(reference.getPackage()));
        aCtTypeReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));
        aCtTypeReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));
        aCtTypeReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));
        aCtTypeReference.setComments(this.cloneHelper.clone(reference.getComments()));
        this.builder.copy(reference, aCtTypeReference);
        this.cloneHelper.tailor(reference, aCtTypeReference);
        this.other = aCtTypeReference;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtTypeAccess(final spoon.reflect.code.CtTypeAccess<T> typeAccess) {
        spoon.reflect.code.CtTypeAccess<T> aCtTypeAccess = typeAccess.getFactory().Core().createTypeAccess();
        aCtTypeAccess.setAnnotations(this.cloneHelper.clone(typeAccess.getAnnotations()));
        aCtTypeAccess.setTypeCasts(this.cloneHelper.clone(typeAccess.getTypeCasts()));
        aCtTypeAccess.setAccessedType(this.cloneHelper.clone(typeAccess.getAccessedType()));
        aCtTypeAccess.setComments(this.cloneHelper.clone(typeAccess.getComments()));
        this.builder.copy(typeAccess, aCtTypeAccess);
        this.cloneHelper.tailor(typeAccess, aCtTypeAccess);
        this.other = aCtTypeAccess;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtUnaryOperator(final spoon.reflect.code.CtUnaryOperator<T> operator) {
        spoon.reflect.code.CtUnaryOperator<T> aCtUnaryOperator = operator.getFactory().Core().createUnaryOperator();
        aCtUnaryOperator.setAnnotations(this.cloneHelper.clone(operator.getAnnotations()));
        aCtUnaryOperator.setType(this.cloneHelper.clone(operator.getType()));
        aCtUnaryOperator.setTypeCasts(this.cloneHelper.clone(operator.getTypeCasts()));
        aCtUnaryOperator.setOperand(this.cloneHelper.clone(operator.getOperand()));
        aCtUnaryOperator.setComments(this.cloneHelper.clone(operator.getComments()));
        this.builder.copy(operator, aCtUnaryOperator);
        this.cloneHelper.tailor(operator, aCtUnaryOperator);
        this.other = aCtUnaryOperator;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtVariableRead(final spoon.reflect.code.CtVariableRead<T> variableRead) {
        spoon.reflect.code.CtVariableRead<T> aCtVariableRead = variableRead.getFactory().Core().createVariableRead();
        aCtVariableRead.setAnnotations(this.cloneHelper.clone(variableRead.getAnnotations()));
        aCtVariableRead.setTypeCasts(this.cloneHelper.clone(variableRead.getTypeCasts()));
        aCtVariableRead.setVariable(this.cloneHelper.clone(variableRead.getVariable()));
        aCtVariableRead.setComments(this.cloneHelper.clone(variableRead.getComments()));
        this.builder.copy(variableRead, aCtVariableRead);
        this.cloneHelper.tailor(variableRead, aCtVariableRead);
        this.other = aCtVariableRead;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtVariableWrite(final spoon.reflect.code.CtVariableWrite<T> variableWrite) {
        spoon.reflect.code.CtVariableWrite<T> aCtVariableWrite = variableWrite.getFactory().Core().createVariableWrite();
        aCtVariableWrite.setAnnotations(this.cloneHelper.clone(variableWrite.getAnnotations()));
        aCtVariableWrite.setTypeCasts(this.cloneHelper.clone(variableWrite.getTypeCasts()));
        aCtVariableWrite.setVariable(this.cloneHelper.clone(variableWrite.getVariable()));
        aCtVariableWrite.setComments(this.cloneHelper.clone(variableWrite.getComments()));
        this.builder.copy(variableWrite, aCtVariableWrite);
        this.cloneHelper.tailor(variableWrite, aCtVariableWrite);
        this.other = aCtVariableWrite;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtWhile(final spoon.reflect.code.CtWhile whileLoop) {
        spoon.reflect.code.CtWhile aCtWhile = whileLoop.getFactory().Core().createWhile();
        aCtWhile.setAnnotations(this.cloneHelper.clone(whileLoop.getAnnotations()));
        aCtWhile.setLoopingExpression(this.cloneHelper.clone(whileLoop.getLoopingExpression()));
        aCtWhile.setBody(this.cloneHelper.clone(whileLoop.getBody()));
        aCtWhile.setComments(this.cloneHelper.clone(whileLoop.getComments()));
        this.builder.copy(whileLoop, aCtWhile);
        this.cloneHelper.tailor(whileLoop, aCtWhile);
        this.other = aCtWhile;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public <T> void visitCtCodeSnippetExpression(final spoon.reflect.code.CtCodeSnippetExpression<T> expression) {
        spoon.reflect.code.CtCodeSnippetExpression<T> aCtCodeSnippetExpression = expression.getFactory().Core().createCodeSnippetExpression();
        aCtCodeSnippetExpression.setType(this.cloneHelper.clone(expression.getType()));
        aCtCodeSnippetExpression.setComments(this.cloneHelper.clone(expression.getComments()));
        aCtCodeSnippetExpression.setAnnotations(this.cloneHelper.clone(expression.getAnnotations()));
        aCtCodeSnippetExpression.setTypeCasts(this.cloneHelper.clone(expression.getTypeCasts()));
        this.builder.copy(expression, aCtCodeSnippetExpression);
        this.cloneHelper.tailor(expression, aCtCodeSnippetExpression);
        this.other = aCtCodeSnippetExpression;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override
    public void visitCtCodeSnippetStatement(final spoon.reflect.code.CtCodeSnippetStatement statement) {
        spoon.reflect.code.CtCodeSnippetStatement aCtCodeSnippetStatement = statement.getFactory().Core().createCodeSnippetStatement();
        aCtCodeSnippetStatement.setComments(this.cloneHelper.clone(statement.getComments()));
        aCtCodeSnippetStatement.setAnnotations(this.cloneHelper.clone(statement.getAnnotations()));
        this.builder.copy(statement, aCtCodeSnippetStatement);
        this.cloneHelper.tailor(statement, aCtCodeSnippetStatement);
        this.other = aCtCodeSnippetStatement;
    }

    // auto-generated, see spoon.generating.CloneVisitorGenerator
    @java.lang.Override]
    public <T> void...>
[ERROR]   CtGenerationTest.testGenerateCtBiScanner:110
[INFO] 
[ERROR] Tests run: 1538, Failures: 4, Errors: 0, Skipped: 4
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 14:53 min
[INFO] Finished at: 2018-08-01T20:35:02+02:00
[INFO] Final Memory: 24M/525M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.21.0:test (default-test) on project spoon-core: There are test failures.
[ERROR] 
[ERROR] Please refer to /root/workspace/INRIA/spoon/410923097/target/surefire-reports for the individual test results.
[ERROR] Please refer to dump files (if any exist) [date]-jvmRun[N].dump, [date].dumpstream and [date]-jvmRun[N].dumpstream.
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
