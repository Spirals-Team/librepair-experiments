[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for fr.inria.gforge.spoon:spoon-core:jar:6.3.0-SNAPSHOT
[WARNING] 'build.plugins.plugin.version' for org.pitest:pitest-maven is missing. @ line 504, column 15
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
[INFO] Inspecting build with total of 1 modules...
[INFO] Installing Nexus Staging features:
[INFO]   ... total of 1 executions of maven-deploy-plugin replaced with nexus-staging-maven-plugin
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Spoon Core 6.3.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-enforcer-plugin:1.0:enforce (enforce-maven) @ spoon-core ---
[INFO] Skipping Rule Enforcement.
[INFO] 
[INFO] --- jacoco-maven-plugin:0.7.9:prepare-agent (default) @ spoon-core ---
[INFO] argLine set to -javaagent:/root/./workspace/INRIA/spoon/390834297/.m2/org/jacoco/org.jacoco.agent/0.7.9/org.jacoco.agent-0.7.9-runtime.jar=destfile=/root/workspace/INRIA/spoon/390834297/target/jacoco.exec
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ spoon-core ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 3 resources
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:compile (default-compile) @ spoon-core ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ spoon-core ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 166 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:testCompile (default-testCompile) @ spoon-core ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.21.0:test (default-test) @ spoon-core ---
[WARNING] useSystemClassloader setting has no effect when not forking
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.21.0/surefire-junit4-2.21.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.21.0/surefire-junit4-2.21.0.pom (4 KB at 9.3 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.21.0/surefire-providers-2.21.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.21.0/surefire-providers-2.21.0.pom (3 KB at 136.3 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.21.0/surefire-junit4-2.21.0.jar
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.21.0/surefire-junit4-2.21.0.jar (83 KB at 1796.9 KB/sec)
[INFO] Running spoon.test.api.NoClasspathTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.153 s - in spoon.test.api.NoClasspathTest
[INFO] Running spoon.test.api.FileSystemFolderTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 s - in spoon.test.api.FileSystemFolderTest
[INFO] Running spoon.test.api.APITest
./target/nooutput_ab1da6b0-3920-43ee-9278-55748b3cdf85
[ERROR] Tests run: 19, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 12.279 s <<< FAILURE! - in spoon.test.api.APITest
[ERROR] testSetterInNodes(spoon.test.api.APITest)  Time elapsed: 4.878 s  <<< FAILURE!
java.lang.AssertionError: Check the number of if in method setIndexExpression(spoon.reflect.code.CtExpression) in the declaring class spoon.support.reflect.code.CtArrayAccessImpl expected:<1> but was:<0>
	at spoon.test.api.APITest.testSetterInNodes(APITest.java:415)

[INFO] Running spoon.test.api.MetamodelTest
[ERROR] Tests run: 13, Failures: 0, Errors: 4, Skipped: 0, Time elapsed: 1.543 s <<< FAILURE! - in spoon.test.api.MetamodelTest
[ERROR] testMetamodelWithoutSources(spoon.test.api.MetamodelTest)  Time elapsed: 0.876 s  <<< ERROR!
java.lang.NullPointerException
	at spoon.test.api.MetamodelTest.testMetamodelWithoutSources(MetamodelTest.java:201)

[ERROR] testRoleOnField(spoon.test.api.MetamodelTest)  Time elapsed: 0.267 s  <<< ERROR!
java.lang.UnsupportedOperationException: no glb for [<T extends CtReference>, [MISSING:CtReference]]
	at spoon.test.api.MetamodelTest.testRoleOnField(MetamodelTest.java:117)

[ERROR] testGetterSetterFroRole(spoon.test.api.MetamodelTest)  Time elapsed: 0.139 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The hierarchy of the type CtFieldRead is inconsistent at /root/workspace/INRIA/spoon/390834297/src/main/java/spoon/reflect/code/CtFieldRead.java:34
	at spoon.test.api.MetamodelTest.testGetterSetterFroRole(MetamodelTest.java:89)

[ERROR] testGetAllMetamodelInterfacess(spoon.test.api.MetamodelTest)  Time elapsed: 0.132 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The hierarchy of the type CtFieldRead is inconsistent at /root/workspace/INRIA/spoon/390834297/src/main/java/spoon/reflect/code/CtFieldRead.java:34
	at spoon.test.api.MetamodelTest.testGetAllMetamodelInterfacess(MetamodelTest.java:78)

[INFO] Running spoon.test.exceptions.ExceptionTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.243 s - in spoon.test.exceptions.ExceptionTest
[INFO] Running spoon.test.module.TestModule
[WARNING] Tests run: 8, Failures: 0, Errors: 0, Skipped: 2, Time elapsed: 0.066 s - in spoon.test.module.TestModule
[INFO] Running spoon.test.imports.ImportAndExtendWithPackageNameTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.029 s - in spoon.test.imports.ImportAndExtendWithPackageNameTest
[INFO] Running spoon.test.imports.ImportScannerTest
[ERROR] Tests run: 6, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 7.043 s <<< FAILURE! - in spoon.test.imports.ImportScannerTest
[ERROR] testImportOnSpoon(spoon.test.imports.ImportScannerTest)  Time elapsed: 6.858 s  <<< ERROR!
spoon.compiler.ModelBuildingException: Logger cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/main/java/spoon/support/reflect/declaration/CtAnnotationImpl.java:250
	at spoon.test.imports.ImportScannerTest.testImportOnSpoon(ImportScannerTest.java:52)

[ERROR] testComputeImportsInClassWithSameName(spoon.test.imports.ImportScannerTest)  Time elapsed: 0.035 s  <<< ERROR!
spoon.compiler.ModelBuildingException: TestCase cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/resources/spoon/test/imports/testclasses2/apachetestsuite/enum2/EnumTestSuite.java:9
	at spoon.test.imports.ImportScannerTest.testComputeImportsInClassWithSameName(ImportScannerTest.java:250)

[INFO] Running spoon.test.imports.ImportTest
[ERROR] Tests run: 44, Failures: 0, Errors: 13, Skipped: 0, Time elapsed: 4.57 s <<< FAILURE! - in spoon.test.imports.ImportTest
[ERROR] testAccessType(spoon.test.imports.ImportTest)  Time elapsed: 0.165 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/imports/testclasses/StaticNoOrdered.java:4
	at spoon.test.imports.ImportTest.testAccessType(ImportTest.java:465)

[ERROR] testStaticMethodWithDifferentClassSameNameJava3NoCollision(spoon.test.imports.ImportTest)  Time elapsed: 0.042 s  <<< ERROR!
spoon.compiler.ModelBuildingException: TestCase cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/resources/spoon/test/imports/testclasses2/apachetestsuite/enum2/EnumTestSuite.java:9
	at spoon.test.imports.ImportTest.testStaticMethodWithDifferentClassSameNameJava3NoCollision(ImportTest.java:1092)

[ERROR] testStaticMethodWithDifferentClassSameNameJava7NoCollision(spoon.test.imports.ImportTest)  Time elapsed: 0.039 s  <<< ERROR!
spoon.compiler.ModelBuildingException: TestCase cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/resources/spoon/test/imports/testclasses2/apachetestsuite/enum2/EnumTestSuite.java:9
	at spoon.test.imports.ImportTest.testStaticMethodWithDifferentClassSameNameJava7NoCollision(ImportTest.java:1062)

[ERROR] testImportOfAnInnerClassInASuperClassPackageFullQualified(spoon.test.imports.ImportTest)  Time elapsed: 0.028 s  <<< ERROR!
spoon.compiler.ModelBuildingException: spoon.test.imports.testclasses.internal.PublicInterface2 cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/imports/testclasses/ClientClass.java:7
	at spoon.test.imports.ImportTest.testImportOfAnInnerClassInASuperClassPackageFullQualified(ImportTest.java:122)

[ERROR] testSuperInheritanceHierarchyFunctionListener(spoon.test.imports.ImportTest)  Time elapsed: 0.03 s  <<< ERROR!
spoon.compiler.ModelBuildingException: ChildClass cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/imports/testclasses/ClientClass.java:5
	at spoon.test.imports.ImportTest.testSuperInheritanceHierarchyFunctionListener(ImportTest.java:868)

[ERROR] testSuperInheritanceHierarchyFunction(spoon.test.imports.ImportTest)  Time elapsed: 0.028 s  <<< ERROR!
spoon.compiler.ModelBuildingException: ChildClass cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/imports/testclasses/ClientClass.java:5
	at spoon.test.imports.ImportTest.testSuperInheritanceHierarchyFunction(ImportTest.java:812)

[ERROR] testSortImportPutStaticImportAfterTypeImport(spoon.test.imports.ImportTest)  Time elapsed: 0.036 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/imports/testclasses/StaticNoOrdered.java:4
	at spoon.test.imports.ImportTest.testSortImportPutStaticImportAfterTypeImport(ImportTest.java:1190)

[ERROR] testCanAccess(spoon.test.imports.ImportTest)  Time elapsed: 0.217 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/imports/testclasses/StaticNoOrdered.java:4
	at spoon.test.imports.ImportTest.testCanAccess(ImportTest.java:551)

[ERROR] testSpoonWithImports(spoon.test.imports.ImportTest)  Time elapsed: 0.164 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/imports/testclasses/StaticNoOrdered.java:4
	at spoon.test.imports.ImportTest.testSpoonWithImports(ImportTest.java:258)

[ERROR] testAccessToNestedClass(spoon.test.imports.ImportTest)  Time elapsed: 0.155 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/imports/testclasses/StaticNoOrdered.java:4
	at spoon.test.imports.ImportTest.testAccessToNestedClass(ImportTest.java:449)

[ERROR] testWithInnerEnumDoesNotImportStaticInnerMethods(spoon.test.imports.ImportTest)  Time elapsed: 0.03 s  <<< ERROR!
spoon.compiler.ModelBuildingException: ItfWithEnum cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/imports/testclasses/StaticImportsFromEnum.java:39
	at spoon.test.imports.ImportTest.testWithInnerEnumDoesNotImportStaticInnerMethods(ImportTest.java:754)

[ERROR] testImportStarredPackageWithNonVisibleClass(spoon.test.imports.ImportTest)  Time elapsed: 0.037 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.test.imports.testclasses.ClientClass cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/imports/testclasses/internal/ChildClass.java:3
	at spoon.test.imports.ImportTest.testImportStarredPackageWithNonVisibleClass(ImportTest.java:1240)

[ERROR] testStaticMethodWithDifferentClassSameNameCollision(spoon.test.imports.ImportTest)  Time elapsed: 0.039 s  <<< ERROR!
spoon.compiler.ModelBuildingException: TestCase cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/resources/spoon/test/imports/testclasses2/apachetestsuite/enum2/EnumTestSuite.java:9
	at spoon.test.imports.ImportTest.testStaticMethodWithDifferentClassSameNameCollision(ImportTest.java:1122)

[INFO] Running spoon.test.prettyprinter.QualifiedThisRefTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.129 s - in spoon.test.prettyprinter.QualifiedThisRefTest
[INFO] Running spoon.test.prettyprinter.LinesTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.343 s - in spoon.test.prettyprinter.LinesTest
[INFO] Running spoon.test.prettyprinter.PrinterTest
[ERROR] Tests run: 9, Failures: 0, Errors: 3, Skipped: 0, Time elapsed: 2.058 s <<< FAILURE! - in spoon.test.prettyprinter.PrinterTest
[ERROR] testAutoimportModeDontImportUselessStatic(spoon.test.prettyprinter.PrinterTest)  Time elapsed: 0.058 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.test.prettyprinter.testclasses.sub cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/prettyprinter/testclasses/ImportStatic.java:3
	at spoon.test.prettyprinter.PrinterTest.testAutoimportModeDontImportUselessStatic(PrinterTest.java:104)

[ERROR] testFQNModeWriteFQNConstructorInCtVisitor(spoon.test.prettyprinter.PrinterTest)  Time elapsed: 0.217 s  <<< ERROR!
spoon.compiler.ModelBuildingException: spoon.reflect cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/main/java/spoon/support/visitor/replace/ReplacementVisitor.java:25
	at spoon.test.prettyprinter.PrinterTest.testFQNModeWriteFQNConstructorInCtVisitor(PrinterTest.java:86)

[ERROR] testJDTBatchCompilerCanBeBuild(spoon.test.prettyprinter.PrinterTest)  Time elapsed: 0.04 s  <<< ERROR!
spoon.compiler.ModelBuildingException: org.eclipse cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/main/java/spoon/support/compiler/jdt/JDTBatchCompiler.java:47
	at spoon.test.prettyprinter.PrinterTest.testJDTBatchCompilerCanBeBuild(PrinterTest.java:147)

[INFO] Running spoon.test.prettyprinter.DefaultPrettyPrinterTest
[ERROR] Tests run: 11, Failures: 0, Errors: 3, Skipped: 0, Time elapsed: 0.585 s <<< FAILURE! - in spoon.test.prettyprinter.DefaultPrettyPrinterTest
[ERROR] testPrintAClassWithImports(spoon.test.prettyprinter.DefaultPrettyPrinterTest)  Time elapsed: 0.077 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/prettyprinter/testclasses/ImportStatic.java:5
	at spoon.test.prettyprinter.DefaultPrettyPrinterTest.testPrintAClassWithImports(DefaultPrettyPrinterTest.java:87)

[ERROR] testPrintAMethodWithGeneric(spoon.test.prettyprinter.DefaultPrettyPrinterTest)  Time elapsed: 0.074 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/prettyprinter/testclasses/ImportStatic.java:5
	at spoon.test.prettyprinter.DefaultPrettyPrinterTest.testPrintAMethodWithGeneric(DefaultPrettyPrinterTest.java:145)

[ERROR] testPrintAMethodWithImports(spoon.test.prettyprinter.DefaultPrettyPrinterTest)  Time elapsed: 0.092 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/prettyprinter/testclasses/ImportStatic.java:5
	at spoon.test.prettyprinter.DefaultPrettyPrinterTest.testPrintAMethodWithImports(DefaultPrettyPrinterTest.java:118)

[INFO] Running spoon.test.visitor.AssignmentsEqualsTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.031 s - in spoon.test.visitor.AssignmentsEqualsTest
[INFO] Running spoon.test.visitor.VisitorTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.031 s - in spoon.test.visitor.VisitorTest
[INFO] Running spoon.test.loop.LoopTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.07 s - in spoon.test.loop.LoopTest
[INFO] Running spoon.test.intercession.insertBefore.InsertMethodsTest
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.568 s - in spoon.test.intercession.insertBefore.InsertMethodsTest
[INFO] Running spoon.test.intercession.IntercessionTest
[ERROR] Tests run: 8, Failures: 0, Errors: 1, Skipped: 1, Time elapsed: 3.091 s <<< FAILURE! - in spoon.test.intercession.IntercessionTest
[ERROR] testSettersAreAllGood(spoon.test.intercession.IntercessionTest)  Time elapsed: 2.88 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The hierarchy of the type CtFieldRead is inconsistent at /root/workspace/INRIA/spoon/390834297/src/main/java/spoon/reflect/code/CtFieldRead.java:34
	at spoon.test.intercession.IntercessionTest.testSettersAreAllGood(IntercessionTest.java:196)

[INFO] Running spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest
[INFO] Tests run: 117, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.35 s - in spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest
[INFO] Running spoon.test.intercession.RemoveTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.054 s - in spoon.test.intercession.RemoveTest
[INFO] Running spoon.test.variable.AccessFullyQualifiedFieldTest
[ERROR] Tests run: 9, Failures: 0, Errors: 7, Skipped: 0, Time elapsed: 0.409 s <<< FAILURE! - in spoon.test.variable.AccessFullyQualifiedFieldTest
[ERROR] testNoFQNWhenShadowedByLocalVariable(spoon.test.variable.AccessFullyQualifiedFieldTest)  Time elapsed: 0.049 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.Launcher cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/variable/testclasses/Burritos.java:5
	at spoon.test.variable.AccessFullyQualifiedFieldTest.buildResourceAndReturnResult(AccessFullyQualifiedFieldTest.java:31)
	at spoon.test.variable.AccessFullyQualifiedFieldTest.testNoFQNWhenShadowedByLocalVariable(AccessFullyQualifiedFieldTest.java:60)

[ERROR] testNoFQNWhenUsedInLoop(spoon.test.variable.AccessFullyQualifiedFieldTest)  Time elapsed: 0.05 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.Launcher cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/variable/testclasses/BurritosWithLoop.java:4
	at spoon.test.variable.AccessFullyQualifiedFieldTest.buildResourceAndReturnResult(AccessFullyQualifiedFieldTest.java:31)
	at spoon.test.variable.AccessFullyQualifiedFieldTest.testNoFQNWhenUsedInLoop(AccessFullyQualifiedFieldTest.java:97)

[ERROR] testNoFQNAndStaticImport(spoon.test.variable.AccessFullyQualifiedFieldTest)  Time elapsed: 0.052 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.Launcher cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/variable/testclasses/MultiBurritos.java:5
	at spoon.test.variable.AccessFullyQualifiedFieldTest.buildResourceAndReturnResult(AccessFullyQualifiedFieldTest.java:31)
	at spoon.test.variable.AccessFullyQualifiedFieldTest.testNoFQNAndStaticImport(AccessFullyQualifiedFieldTest.java:137)

[ERROR] testNoFQNWhenUsedInTryCatch(spoon.test.variable.AccessFullyQualifiedFieldTest)  Time elapsed: 0.052 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.Launcher cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/variable/testclasses/BurritosWithTryCatch.java:4
	at spoon.test.variable.AccessFullyQualifiedFieldTest.buildResourceAndReturnResult(AccessFullyQualifiedFieldTest.java:31)
	at spoon.test.variable.AccessFullyQualifiedFieldTest.testNoFQNWhenUsedInTryCatch(AccessFullyQualifiedFieldTest.java:86)

[ERROR] testStaticImportWithAutoImport(spoon.test.variable.AccessFullyQualifiedFieldTest)  Time elapsed: 0.048 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.Launcher cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/variable/testclasses/MultiBurritos.java:5
	at spoon.test.variable.AccessFullyQualifiedFieldTest.testStaticImportWithAutoImport(AccessFullyQualifiedFieldTest.java:112)

[ERROR] testNoFQNWhenShadowedByField(spoon.test.variable.AccessFullyQualifiedFieldTest)  Time elapsed: 0.028 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.Launcher cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/variable/testclasses/BurritosFielded.java:4
	at spoon.test.variable.AccessFullyQualifiedFieldTest.buildResourceAndReturnResult(AccessFullyQualifiedFieldTest.java:31)
	at spoon.test.variable.AccessFullyQualifiedFieldTest.testNoFQNWhenShadowedByField(AccessFullyQualifiedFieldTest.java:48)

[ERROR] testPrivateStaticImportShouldNotBeImportedInSameClass(spoon.test.variable.AccessFullyQualifiedFieldTest)  Time elapsed: 0.031 s  <<< ERROR!
spoon.compiler.ModelBuildingException: MessageDigest cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/variable/testclasses/digest/DigestUtil.java:23
	at spoon.test.variable.AccessFullyQualifiedFieldTest.buildResourceAndReturnResult(AccessFullyQualifiedFieldTest.java:31)
	at spoon.test.variable.AccessFullyQualifiedFieldTest.testPrivateStaticImportShouldNotBeImportedInSameClass(AccessFullyQualifiedFieldTest.java:148)

[INFO] Running spoon.test.variable.AccessTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.42 s - in spoon.test.variable.AccessTest
[INFO] Running spoon.test.comment.CommentTest
[INFO] Tests run: 17, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 19.636 s - in spoon.test.comment.CommentTest
[INFO] Running spoon.test.pkg.PackageTest
[ERROR] Tests run: 12, Failures: 1, Errors: 1, Skipped: 0, Time elapsed: 0.587 s <<< FAILURE! - in spoon.test.pkg.PackageTest
[ERROR] testAnnotationOnPackage(spoon.test.pkg.PackageTest)  Time elapsed: 0.03 s  <<< ERROR!
spoon.compiler.ModelBuildingException: AbstractProcessor cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/pkg/testclasses/ElementProcessor.java:10
	at spoon.test.pkg.PackageTest.testAnnotationOnPackage(PackageTest.java:93)

[ERROR] testAddAnnotationToPackage(spoon.test.pkg.PackageTest)  Time elapsed: 0.099 s  <<< FAILURE!
java.lang.AssertionError: Can't compile package-info.java because The import spoon.test.annotation cannot be resolved at /root/workspace/INRIA/spoon/390834297/target/spoon-packageinfo/spoon/test/pkg/testclasses/package-info.java:5
	at spoon.test.pkg.PackageTest.testAddAnnotationToPackage(PackageTest.java:254)
Caused by: spoon.compiler.ModelBuildingException: The import spoon.test.annotation cannot be resolved at /root/workspace/INRIA/spoon/390834297/target/spoon-packageinfo/spoon/test/pkg/testclasses/package-info.java:5
	at spoon.test.pkg.PackageTest.testAddAnnotationToPackage(PackageTest.java:254)

[INFO] Running spoon.test.annotation.AnnotationValuesTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.112 s - in spoon.test.annotation.AnnotationValuesTest
[INFO] Running spoon.test.annotation.AnnotationLoopTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.03 s - in spoon.test.annotation.AnnotationLoopTest
[INFO] Running spoon.test.annotation.AnnotationTest
[ERROR] Tests run: 52, Failures: 0, Errors: 25, Skipped: 0, Time elapsed: 1.78 s <<< FAILURE! - in spoon.test.annotation.AnnotationTest
[ERROR] testModelBuildingAnnotationBoundUsage(spoon.test.annotation.AnnotationTest)  Time elapsed: 0.031 s  <<< ERROR!
spoon.compiler.ModelBuildingException: TestAnnotation cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/annotation/testclasses/Main.java:3
	at spoon.test.annotation.AnnotationTest.testModelBuildingAnnotationBoundUsage(AnnotationTest.java:138)

[ERROR] testDefaultValueInAnnotationsForAnnotationFields(spoon.test.annotation.AnnotationTest)  Time elapsed: 0.027 s  <<< ERROR!
spoon.compiler.ModelBuildingException: InnerAnnot cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/annotation/testclasses/AnnotationDefaultAnnotation.java:4
	at spoon.test.annotation.AnnotationTest.testDefaultValueInAnnotationsForAnnotationFields(AnnotationTest.java:907)

[ERROR] testRepeatSameAnnotationOnMethod(spoon.test.annotation.AnnotationTest)  Time elapsed: 0.046 s  <<< ERROR!
spoon.compiler.ModelBuildingException: AnnotationRepeated cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/annotation/testclasses/AnnotationsRepeated.java:3
	at spoon.test.annotation.AnnotationTest.testRepeatSameAnnotationOnMethod(AnnotationTest.java:815)

[ERROR] testUsageOfTypeAnnotationInCast(spoon.test.annotation.AnnotationTest)  Time elapsed: 0.054 s  <<< ERROR!
spoon.compiler.ModelBuildingException: BasicAnnotation cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/annotation/testclasses/AnnotationsAppliedOnAnyTypeInAClass.java:44
	at spoon.test.annotation.AnnotationTest.testUsageOfTypeAnnotationInCast(AnnotationTest.java:506)

[ERROR] testUsageOfTypeAnnotationWithGenericTypesInStatements(spoon.test.annotation.AnnotationTest)  Time elapsed: 0.054 s  <<< ERROR!
spoon.compiler.ModelBuildingException: BasicAnnotation cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/annotation/testclasses/AnnotationsAppliedOnAnyTypeInAClass.java:44
	at spoon.test.annotation.AnnotationTest.testUsageOfTypeAnnotationWithGenericTypesInStatements(AnnotationTest.java:677)

[ERROR] testUsageOfTypeAnnotationInReturnTypeInMethod(spoon.test.annotation.AnnotationTest)  Time elapsed: 0.038 s  <<< ERROR!
spoon.compiler.ModelBuildingException: BasicAnnotation cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/annotation/testclasses/AnnotationsAppliedOnAnyTypeInAClass.java:44
	at spoon.test.annotation.AnnotationTest.testUsageOfTypeAnnotationInReturnTypeInMethod(AnnotationTest.java:548)

[ERROR] testUsageOfTypeAnnotationInNewInstance(spoon.test.annotation.AnnotationTest)  Time elapsed: 0.034 s  <<< ERROR!
spoon.compiler.ModelBuildingException: BasicAnnotation cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/annotation/testclasses/AnnotationsAppliedOnAnyTypeInAClass.java:44
	at spoon.test.annotation.AnnotationTest.testUsageOfTypeAnnotationInNewInstance(AnnotationTest.java:484)

[ERROR] testSpoonSpoonResult(spoon.test.annotation.AnnotationTest)  Time elapsed: 0.027 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.test.annotation.testclasses.PortRange cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/annotation/testclasses/dropwizard/GraphiteReporterFactory.java:15
	at spoon.test.annotation.AnnotationTest.testSpoonSpoonResult(AnnotationTest.java:1086)

[ERROR] testRepeatSameAnnotationOnParameter(spoon.test.annotation.AnnotationTest)  Time elapsed: 0.033 s  <<< ERROR!
spoon.compiler.ModelBuildingException: AnnotationRepeated cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/annotation/testclasses/AnnotationsRepeated.java:3
	at spoon.test.annotation.AnnotationTest.testRepeatSameAnnotationOnParameter(AnnotationTest.java:849)

[ERROR] testReplaceAnnotationValue(spoon.test.annotation.AnnotationTest)  Time elapsed: 0.031 s  <<< ERROR!
spoon.compiler.ModelBuildingException: TestAnnotation cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/annotation/testclasses/Main.java:3
	at spoon.test.annotation.AnnotationTest.testReplaceAnnotationValue(AnnotationTest.java:1200)

[ERROR] testUsageOfTypeAnnotationWithGenericTypesInClassDeclaration(spoon.test.annotation.AnnotationTest)  Time elapsed: 0.034 s  <<< ERROR!
spoon.compiler.ModelBuildingException: BasicAnnotation cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/annotation/testclasses/AnnotationsAppliedOnAnyTypeInAClass.java:44
	at spoon.test.annotation.AnnotationTest.testUsageOfTypeAnnotationWithGenericTypesInClassDeclaration(AnnotationTest.java:656)

[ERROR] testAnnotationIntrospection(spoon.test.annotation.AnnotationTest)  Time elapsed: 0.029 s  <<< ERROR!
spoon.compiler.ModelBuildingException: TestAnnotation cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/annotation/testclasses/AnnotationIntrospection.java:8
	at spoon.test.annotation.AnnotationTest.testAnnotationIntrospection(AnnotationTest.java:982)

[ERROR] testUsageOfTypeAnnotationOnParameterInMethod(spoon.test.annotation.AnnotationTest)  Time elapsed: 0.034 s  <<< ERROR!
spoon.compiler.ModelBuildingException: BasicAnnotation cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/annotation/testclasses/AnnotationsAppliedOnAnyTypeInAClass.java:44
	at spoon.test.annotation.AnnotationTest.testUsageOfTypeAnnotationOnParameterInMethod(AnnotationTest.java:568)

[ERROR] testRepeatSameAnnotationOnConstructor(spoon.test.annotation.AnnotationTest)  Time elapsed: 0.027 s  <<< ERROR!
spoon.compiler.ModelBuildingException: AnnotationRepeated cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/annotation/testclasses/AnnotationsRepeated.java:3
	at spoon.test.annotation.AnnotationTest.testRepeatSameAnnotationOnConstructor(AnnotationTest.java:832)

[ERROR] testAnnotationParameterTypes(spoon.test.annotation.AnnotationTest)  Time elapsed: 0.031 s  <<< ERROR!
spoon.compiler.ModelBuildingException: TestAnnotation cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/annotation/testclasses/Main.java:3
	at spoon.test.annotation.AnnotationTest.testAnnotationParameterTypes(AnnotationTest.java:204)

[ERROR] testUsageOfTypeAnnotationBeforeExceptionInSignatureOfMethod(spoon.test.annotation.AnnotationTest)  Time elapsed: 0.034 s  <<< ERROR!
spoon.compiler.ModelBuildingException: BasicAnnotation cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/annotation/testclasses/AnnotationsAppliedOnAnyTypeInAClass.java:44
	at spoon.test.annotation.AnnotationTest.testUsageOfTypeAnnotationBeforeExceptionInSignatureOfMethod(AnnotationTest.java:529)

[ERROR] testOutputGeneratedByTypeAnnotation(spoon.test.annotation.AnnotationTest)  Time elapsed: 0.034 s  <<< ERROR!
spoon.compiler.ModelBuildingException: BasicAnnotation cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/annotation/testclasses/AnnotationsAppliedOnAnyTypeInAClass.java:44
	at spoon.test.annotation.AnnotationTest.testOutputGeneratedByTypeAnnotation(AnnotationTest.java:770)

[ERROR] testAccessAnnotationValue(spoon.test.annotation.AnnotationTest)  Time elapsed: 0.03 s  <<< ERROR!
spoon.compiler.ModelBuildingException: TestAnnotation cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/annotation/testclasses/Main.java:3
	at spoon.test.annotation.AnnotationTest.testAccessAnnotationValue(AnnotationTest.java:468)

[ERROR] testUsageOfTypeAnnotationOnLocalVariableInMethod(spoon.test.annotation.AnnotationTest)  Time elapsed: 0.033 s  <<< ERROR!
spoon.compiler.ModelBuildingException: BasicAnnotation cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/annotation/testclasses/AnnotationsAppliedOnAnyTypeInAClass.java:44
	at spoon.test.annotation.AnnotationTest.testUsageOfTypeAnnotationOnLocalVariableInMethod(AnnotationTest.java:586)

[ERROR] testUsageOfTypeAnnotationInExtendsImplementsOfAClass(spoon.test.annotation.AnnotationTest)  Time elapsed: 0.033 s  <<< ERROR!
spoon.compiler.ModelBuildingException: BasicAnnotation cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/annotation/testclasses/AnnotationsAppliedOnAnyTypeInAClass.java:44
	at spoon.test.annotation.AnnotationTest.testUsageOfTypeAnnotationInExtendsImplementsOfAClass(AnnotationTest.java:609)

[ERROR] testRepeatSameAnnotationOnPackage(spoon.test.annotation.AnnotationTest)  Time elapsed: 0.028 s  <<< ERROR!
spoon.compiler.ModelBuildingException: AnnotationRepeated cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/annotation/testclasses/AnnotationsRepeated.java:3
	at spoon.test.annotation.AnnotationTest.testRepeatSameAnnotationOnPackage(AnnotationTest.java:891)

[ERROR] testUsageOfParametersInTypeAnnotation(spoon.test.annotation.AnnotationTest)  Time elapsed: 0.065 s  <<< ERROR!
spoon.compiler.ModelBuildingException: BasicAnnotation cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/annotation/testclasses/AnnotationsAppliedOnAnyTypeInAClass.java:44
	at spoon.test.annotation.AnnotationTest.testUsageOfParametersInTypeAnnotation(AnnotationTest.java:727)

[ERROR] testRepeatSameAnnotationOnClass(spoon.test.annotation.AnnotationTest)  Time elapsed: 0.041 s  <<< ERROR!
spoon.compiler.ModelBuildingException: AnnotationRepeated cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/annotation/testclasses/AnnotationsRepeated.java:3
	at spoon.test.annotation.AnnotationTest.testRepeatSameAnnotationOnClass(AnnotationTest.java:782)

[ERROR] testRepeatSameAnnotationOnField(spoon.test.annotation.AnnotationTest)  Time elapsed: 0.028 s  <<< ERROR!
spoon.compiler.ModelBuildingException: AnnotationRepeated cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/annotation/testclasses/AnnotationsRepeated.java:3
	at spoon.test.annotation.AnnotationTest.testRepeatSameAnnotationOnField(AnnotationTest.java:798)

[ERROR] testRepeatSameAnnotationOnLocalVariable(spoon.test.annotation.AnnotationTest)  Time elapsed: 0.028 s  <<< ERROR!
spoon.compiler.ModelBuildingException: AnnotationRepeated cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/annotation/testclasses/AnnotationsRepeated.java:3
	at spoon.test.annotation.AnnotationTest.testRepeatSameAnnotationOnLocalVariable(AnnotationTest.java:867)

[INFO] Running spoon.test.constructorcallnewclass.ConstructorCallTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.346 s - in spoon.test.constructorcallnewclass.ConstructorCallTest
[INFO] Running spoon.test.constructorcallnewclass.NewClassTest
[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.497 s - in spoon.test.constructorcallnewclass.NewClassTest
[INFO] Running spoon.test.position.PositionTest
[ERROR] Tests run: 19, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.689 s <<< FAILURE! - in spoon.test.position.PositionTest
[ERROR] testPositionTryCatch(spoon.test.position.PositionTest)  Time elapsed: 0.095 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/query_function/testclasses/VariableReferencesModelTest.java:3
	at spoon.test.position.PositionTest.testPositionTryCatch(PositionTest.java:725)

[INFO] Running spoon.test.executable.ExecutableTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.1 s - in spoon.test.executable.ExecutableTest
[INFO] Running spoon.test.executable.ExecutableRefTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.196 s - in spoon.test.executable.ExecutableRefTest
[INFO] Running spoon.test.methodreference.MethodReferenceTest
[INFO] Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.196 s - in spoon.test.methodreference.MethodReferenceTest
[INFO] Running spoon.test.template.TemplateArrayAccessTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.13 s - in spoon.test.template.TemplateArrayAccessTest
[INFO] Running spoon.test.template.TemplateEnumAccessTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.169 s - in spoon.test.template.TemplateEnumAccessTest
[INFO] Running spoon.test.template.TemplateReplaceReturnTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.193 s - in spoon.test.template.TemplateReplaceReturnTest
[INFO] Running spoon.test.template.PatternTest
[ERROR] Tests run: 31, Failures: 2, Errors: 20, Skipped: 0, Time elapsed: 1.135 s <<< FAILURE! - in spoon.test.template.PatternTest
[ERROR] testGenerateMultiValues(spoon.test.template.PatternTest)  Time elapsed: 0.051 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.pattern cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/template/testclasses/match/MatchMultiple.java:3
	at spoon.test.template.PatternTest.testGenerateMultiValues(PatternTest.java:264)

[ERROR] testMatchGreedyMultiValueMaxCountLimit(spoon.test.template.PatternTest)  Time elapsed: 0.051 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.pattern cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/template/testclasses/match/MatchMultiple.java:3
	at spoon.test.template.PatternTest.testMatchGreedyMultiValueMaxCountLimit(PatternTest.java:331)

[ERROR] testMatchGreedyMultiValueMinCount2(spoon.test.template.PatternTest)  Time elapsed: 0.029 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.template cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/template/testclasses/match/MatchMultiple2.java:3
	at spoon.test.template.PatternTest.testMatchGreedyMultiValueMinCount2(PatternTest.java:642)

[ERROR] testMatchReluctantMultivalueExactly2(spoon.test.template.PatternTest)  Time elapsed: 0.03 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.pattern cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/template/testclasses/match/MatchMultiple.java:3
	at spoon.test.template.PatternTest.testMatchReluctantMultivalueExactly2(PatternTest.java:472)

[ERROR] testMatchPossesiveMultiValueUnlimited(spoon.test.template.PatternTest)  Time elapsed: 0.03 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.pattern cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/template/testclasses/match/MatchMultiple.java:3
	at spoon.test.template.PatternTest.testMatchPossesiveMultiValueUnlimited(PatternTest.java:500)

[ERROR] testMatchOfMapAttribute(spoon.test.template.PatternTest)  Time elapsed: 0.028 s  <<< ERROR!
spoon.compiler.ModelBuildingException: Check cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/template/testclasses/match/MatchMap.java:22
	at spoon.test.template.PatternTest.testMatchOfMapAttribute(PatternTest.java:899)

[ERROR] testMatchReluctantMultivalue(spoon.test.template.PatternTest)  Time elapsed: 0.031 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.pattern cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/template/testclasses/match/MatchMultiple.java:3
	at spoon.test.template.PatternTest.testMatchReluctantMultivalue(PatternTest.java:376)

[ERROR] testMatchOfMapAttributeAndOtherAnnotations(spoon.test.template.PatternTest)  Time elapsed: 0.027 s  <<< ERROR!
spoon.compiler.ModelBuildingException: Check cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/template/testclasses/match/MatchMap.java:22
	at spoon.test.template.PatternTest.testMatchOfMapAttributeAndOtherAnnotations(PatternTest.java:962)

[ERROR] testPatternMatchOfMultipleElements(spoon.test.template.PatternTest)  Time elapsed: 0.028 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.pattern cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/template/testclasses/ToBeMatched.java:6
	at spoon.test.template.PatternTest.testPatternMatchOfMultipleElements(PatternTest.java:1408)

[ERROR] testMatchParameterValue(spoon.test.template.PatternTest)  Time elapsed: 0.029 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.pattern cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/template/testclasses/match/MatchWithParameterType.java:3
	at spoon.test.template.PatternTest.testMatchParameterValue(PatternTest.java:687)

[ERROR] testMatchSample1(spoon.test.template.PatternTest)  Time elapsed: 0.063 s  <<< FAILURE!
java.lang.AssertionError: expected:<2> but was:<0>
	at spoon.test.template.PatternTest.testMatchSample1(PatternTest.java:1262)

[ERROR] testMatchPossesiveMultiValueMinCount(spoon.test.template.PatternTest)  Time elapsed: 0.028 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.template cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/template/testclasses/match/MatchMultiple3.java:3
	at spoon.test.template.PatternTest.testMatchPossesiveMultiValueMinCount(PatternTest.java:561)

[ERROR] testMatchPossesiveMultiValueMaxCount4(spoon.test.template.PatternTest)  Time elapsed: 0.049 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.pattern cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/template/testclasses/match/MatchMultiple.java:3
	at spoon.test.template.PatternTest.testMatchPossesiveMultiValueMaxCount4(PatternTest.java:518)

[ERROR] testExtensionDecoupledSubstitutionVisitor(spoon.test.template.PatternTest)  Time elapsed: 0.058 s  <<< ERROR!
spoon.SpoonException: Parameter value class: spoon.support.reflect.code.CtBlockImpl cannot be converted to class is: spoon.reflect.code.CtExpression
	at spoon.test.template.PatternTest.testExtensionDecoupledSubstitutionVisitor(PatternTest.java:1543)

[ERROR] testMatchGreedyMultiValueUnlimited(spoon.test.template.PatternTest)  Time elapsed: 0.031 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.pattern cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/template/testclasses/match/MatchMultiple.java:3
	at spoon.test.template.PatternTest.testMatchGreedyMultiValueUnlimited(PatternTest.java:295)

[ERROR] testMatchOfMapKeySubstring(spoon.test.template.PatternTest)  Time elapsed: 0.027 s  <<< ERROR!
spoon.compiler.ModelBuildingException: Check cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/template/testclasses/match/MatchMap.java:22
	at spoon.test.template.PatternTest.testMatchOfMapKeySubstring(PatternTest.java:1001)

[ERROR] testMatchPossesiveMultiValueMinCount2(spoon.test.template.PatternTest)  Time elapsed: 0.028 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.template cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/template/testclasses/match/MatchMultiple2.java:3
	at spoon.test.template.PatternTest.testMatchPossesiveMultiValueMinCount2(PatternTest.java:600)

[ERROR] testPatternToString(spoon.test.template.PatternTest)  Time elapsed: 0.055 s  <<< FAILURE!
org.junit.ComparisonFailure: 
expected:<... CtForEach
        /[expression/ <= ${getIterable}
        /foreachVariable/ <= ${item}
     */
    for (/* CtLocalVariable
        / <= ${item}
     */
    java.lang.Object item : /* CtInvocation
        / <= ${getIterable}
     */
    getIterable()) /* CtBlock
        /statement/ <= ${statements}
     */
    {
        lp.printSeparatorIfAppropriate();
        /* CtInvocation
            / <= ${statements}
         */
        statements]();
    }
}
> but was:<... CtForEach
        /[foreachVariable/ <= ${item}
     */
    for (/* CtLocalVariable
        / <= ${item}
     */
    java.lang.Object item : /* CtInvocation
        /target/ <= ${getIterable}
     */
    /* CtInvocation
        / <= ${getIterable}
     */
    getIterable().S()) {
        lp.printSeparatorIfAppropriate();
        /* CtInvocation
            /target/ <= ${statements}
         */
        /* CtInvocation
            / <= ${statements}
         */
        statements().S]();
    }
}
>
	at spoon.test.template.PatternTest.testPatternToString(PatternTest.java:1161)

[ERROR] testMatchOfAttribute(spoon.test.template.PatternTest)  Time elapsed: 0.029 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.pattern cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/template/testclasses/match/MatchModifiers.java:3
	at spoon.test.template.PatternTest.testMatchOfAttribute(PatternTest.java:825)

[ERROR] testMatchReluctantMultivalueMinCount1(spoon.test.template.PatternTest)  Time elapsed: 0.03 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.pattern cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/template/testclasses/match/MatchMultiple.java:3
	at spoon.test.template.PatternTest.testMatchReluctantMultivalueMinCount1(PatternTest.java:429)

[ERROR] testMatchParameterCondition(spoon.test.template.PatternTest)  Time elapsed: 0.029 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.pattern cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/template/testclasses/match/MatchWithParameterCondition.java:3
	at spoon.test.template.PatternTest.testMatchParameterCondition(PatternTest.java:787)

[ERROR] testMatchParameterValueType(spoon.test.template.PatternTest)  Time elapsed: 0.028 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.pattern cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/template/testclasses/match/MatchWithParameterType.java:3
	at spoon.test.template.PatternTest.testMatchParameterValueType(PatternTest.java:727)

[INFO] Running spoon.test.template.core.ParameterInfoTest
[INFO] Tests run: 21, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.007 s - in spoon.test.template.core.ParameterInfoTest
[INFO] Running spoon.test.template.TemplateInvocationSubstitutionTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.145 s - in spoon.test.template.TemplateInvocationSubstitutionTest
[INFO] Running spoon.test.template.TemplateTest
0
[ERROR] Tests run: 24, Failures: 3, Errors: 4, Skipped: 0, Time elapsed: 1.568 s <<< FAILURE! - in spoon.test.template.TemplateTest
[ERROR] testExtensionBlock(spoon.test.template.TemplateTest)  Time elapsed: 0.087 s  <<< ERROR!
spoon.SpoonException: Parameter value class: spoon.support.reflect.code.CtBlockImpl$1 cannot be converted to class is: spoon.reflect.code.CtExpression
	at spoon.test.template.TemplateTest.testExtensionBlock(TemplateTest.java:631)

[ERROR] testTemplateInterfaces(spoon.test.template.TemplateTest)  Time elapsed: 0.027 s  <<< ERROR!
spoon.compiler.ModelBuildingException: SuperClass cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/template/testclasses/inheritance/SubClass.java:3
	at spoon.test.template.TemplateTest.testTemplateInterfaces(TemplateTest.java:660)

[ERROR] substituteTypeAccessReference(spoon.test.template.TemplateTest)  Time elapsed: 0.097 s  <<< FAILURE!
java.lang.AssertionError: Can't compile testclasses because spoon.template cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/target/spooned/test/template/testclasses/spoon/test/template/testclasses/TypeReferenceClassAccessTemplate.java:4
	at spoon.test.template.TemplateTest.substituteTypeAccessReference(TemplateTest.java:1130)
Caused by: spoon.compiler.ModelBuildingException: spoon.template cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/target/spooned/test/template/testclasses/spoon/test/template/testclasses/TypeReferenceClassAccessTemplate.java:4
	at spoon.test.template.TemplateTest.substituteTypeAccessReference(TemplateTest.java:1130)

[ERROR] testTemplateMatcher(spoon.test.template.TemplateTest)  Time elapsed: 0.065 s  <<< FAILURE!
java.lang.AssertionError: expected:<2> but was:<0>
	at spoon.test.template.TemplateTest.testTemplateMatcher(TemplateTest.java:438)

[ERROR] testTemplateMatcherMatchTwoSnippets(spoon.test.template.TemplateTest)  Time elapsed: 0.029 s  <<< ERROR!
spoon.compiler.ModelBuildingException: ContextHelper cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/template/testclasses/TwoSnippets.java:21
	at spoon.test.template.TemplateTest.testTemplateMatcherMatchTwoSnippets(TemplateTest.java:723)

[ERROR] testTemplateMatcherWithWholePackage(spoon.test.template.TemplateTest)  Time elapsed: 0.067 s  <<< FAILURE!
java.lang.AssertionError: expected:<1> but was:<0>
	at spoon.test.template.TemplateTest.testTemplateMatcherWithWholePackage(TemplateTest.java:690)

[ERROR] testTemplateArrayAccess(spoon.test.template.TemplateTest)  Time elapsed: 0.053 s  <<< ERROR!
java.lang.NullPointerException
	at spoon.test.template.TemplateTest.testTemplateArrayAccess(TemplateTest.java:814)

[INFO] Running spoon.test.template.TemplateClassAccessTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.091 s - in spoon.test.template.TemplateClassAccessTest
[INFO] Running spoon.test.generics.GenericsTest
[ERROR] Tests run: 45, Failures: 0, Errors: 10, Skipped: 0, Time elapsed: 1.914 s <<< FAILURE! - in spoon.test.generics.GenericsTest
[ERROR] testIsSameSignatureWithReferencedGenerics(spoon.test.generics.GenericsTest)  Time elapsed: 0.028 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.reflect cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/generics/testclasses2/SameSignature3.java:3
	at spoon.test.generics.GenericsTest.testIsSameSignatureWithReferencedGenerics(GenericsTest.java:1356)

[ERROR] testConstructorCallGenerics(spoon.test.generics.GenericsTest)  Time elapsed: 0.056 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.reflect cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/generics/testclasses/EnumSetOf.java:5
	at spoon.test.generics.GenericsTest.testConstructorCallGenerics(GenericsTest.java:367)

[ERROR] testName(spoon.test.generics.GenericsTest)  Time elapsed: 0.053 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.reflect cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/generics/testclasses/EnumSetOf.java:5
	at spoon.test.generics.GenericsTest.testName(GenericsTest.java:491)

[ERROR] testGenericsInQualifiedNameInConstructorCall(spoon.test.generics.GenericsTest)  Time elapsed: 0.053 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.reflect cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/generics/testclasses/EnumSetOf.java:5
	at spoon.test.generics.GenericsTest.testGenericsInQualifiedNameInConstructorCall(GenericsTest.java:532)

[ERROR] testNewClassGenerics(spoon.test.generics.GenericsTest)  Time elapsed: 0.054 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.reflect cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/generics/testclasses/EnumSetOf.java:5
	at spoon.test.generics.GenericsTest.testNewClassGenerics(GenericsTest.java:447)

[ERROR] testWildCardonShadowClass(spoon.test.generics.GenericsTest)  Time elapsed: 0.028 s  <<< ERROR!
spoon.compiler.ModelBuildingException: CtElement cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/generics/testclasses/FakeTpl.java:10
	at spoon.test.generics.GenericsTest.testWildCardonShadowClass(GenericsTest.java:1184)

[ERROR] testInvocationGenerics(spoon.test.generics.GenericsTest)  Time elapsed: 0.059 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.reflect cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/generics/testclasses/EnumSetOf.java:5
	at spoon.test.generics.GenericsTest.testInvocationGenerics(GenericsTest.java:420)

[ERROR] testIsSameSignatureWithMethodGenerics(spoon.test.generics.GenericsTest)  Time elapsed: 0.028 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.reflect cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/generics/testclasses2/SameSignature2.java:3
	at spoon.test.generics.GenericsTest.testIsSameSignatureWithMethodGenerics(GenericsTest.java:1307)

[ERROR] testGetExecDeclarationOfEnumSetOf(spoon.test.generics.GenericsTest)  Time elapsed: 0.027 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.reflect cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/generics/testclasses/EnumSetOf.java:5
	at spoon.test.generics.GenericsTest.testGetExecDeclarationOfEnumSetOf(GenericsTest.java:1328)

[ERROR] testMethodsWithGenericsWhoExtendsObject(spoon.test.generics.GenericsTest)  Time elapsed: 0.053 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.reflect cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/generics/testclasses/EnumSetOf.java:5
	at spoon.test.generics.GenericsTest.testMethodsWithGenericsWhoExtendsObject(GenericsTest.java:471)

[INFO] Running spoon.test.factory.CodeFactoryTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in spoon.test.factory.CodeFactoryTest
[INFO] Running spoon.test.factory.AnnotationFactoryTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.029 s - in spoon.test.factory.AnnotationFactoryTest
[INFO] Running spoon.test.factory.FieldFactoryTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.091 s - in spoon.test.factory.FieldFactoryTest
[INFO] Running spoon.test.factory.ClassFactoryTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in spoon.test.factory.ClassFactoryTest
[INFO] Running spoon.test.factory.ConstructorFactoryTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.028 s - in spoon.test.factory.ConstructorFactoryTest
[INFO] Running spoon.test.factory.FactoryTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.128 s - in spoon.test.factory.FactoryTest
[INFO] Running spoon.test.factory.ExecutableFactoryTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in spoon.test.factory.ExecutableFactoryTest
[INFO] Running spoon.test.factory.TypeFactoryTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.115 s - in spoon.test.factory.TypeFactoryTest
[INFO] Running spoon.test.processing.ProcessingTest
[ERROR] Tests run: 9, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 0.23 s <<< FAILURE! - in spoon.test.processing.ProcessingTest
[ERROR] testCallProcessorWithMultipleTypes(spoon.test.processing.ProcessingTest)  Time elapsed: 0.054 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/imports/testclasses/StaticNoOrdered.java:4
	at spoon.test.processing.ProcessingTest.testCallProcessorWithMultipleTypes(ProcessingTest.java:357)

[ERROR] testProcessorWithGenericType(spoon.test.processing.ProcessingTest)  Time elapsed: 0.052 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/imports/testclasses/StaticNoOrdered.java:4
	at spoon.test.processing.ProcessingTest.testProcessorWithGenericType(ProcessingTest.java:332)

[INFO] Running spoon.test.targeted.TargetedExpressionTest
[INFO] Tests run: 17, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.948 s - in spoon.test.targeted.TargetedExpressionTest
[INFO] Running spoon.test.sourcePosition.SourcePositionTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.127 s - in spoon.test.sourcePosition.SourcePositionTest
[INFO] Running spoon.test.modifiers.TestModifiers
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.354 s - in spoon.test.modifiers.TestModifiers
[INFO] Running spoon.test.ctBodyHolder.CtBodyHolderTest
[ERROR] Tests run: 6, Failures: 0, Errors: 6, Skipped: 0, Time elapsed: 0.203 s <<< FAILURE! - in spoon.test.ctBodyHolder.CtBodyHolderTest
[ERROR] testTryCatch(spoon.test.ctBodyHolder.CtBodyHolderTest)  Time elapsed: 0.035 s  <<< ERROR!
spoon.compiler.ModelBuildingException: StatementTemplate cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/ctBodyHolder/testclasses/CWBStatementTemplate.java:6
	at spoon.test.ctBodyHolder.CtBodyHolderTest.testTryCatch(CtBodyHolderTest.java:48)

[ERROR] testWhileWithBlock(spoon.test.ctBodyHolder.CtBodyHolderTest)  Time elapsed: 0.035 s  <<< ERROR!
spoon.compiler.ModelBuildingException: StatementTemplate cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/ctBodyHolder/testclasses/CWBStatementTemplate.java:6
	at spoon.test.ctBodyHolder.CtBodyHolderTest.testWhileWithBlock(CtBodyHolderTest.java:87)

[ERROR] testForWithStatement(spoon.test.ctBodyHolder.CtBodyHolderTest)  Time elapsed: 0.034 s  <<< ERROR!
spoon.compiler.ModelBuildingException: StatementTemplate cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/ctBodyHolder/testclasses/CWBStatementTemplate.java:6
	at spoon.test.ctBodyHolder.CtBodyHolderTest.testForWithStatement(CtBodyHolderTest.java:63)

[ERROR] testForWithBlock(spoon.test.ctBodyHolder.CtBodyHolderTest)  Time elapsed: 0.033 s  <<< ERROR!
spoon.compiler.ModelBuildingException: StatementTemplate cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/ctBodyHolder/testclasses/CWBStatementTemplate.java:6
	at spoon.test.ctBodyHolder.CtBodyHolderTest.testForWithBlock(CtBodyHolderTest.java:75)

[ERROR] testMethod(spoon.test.ctBodyHolder.CtBodyHolderTest)  Time elapsed: 0.033 s  <<< ERROR!
spoon.compiler.ModelBuildingException: StatementTemplate cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/ctBodyHolder/testclasses/CWBStatementTemplate.java:6
	at spoon.test.ctBodyHolder.CtBodyHolderTest.testMethod(CtBodyHolderTest.java:39)

[ERROR] testConstructor(spoon.test.ctBodyHolder.CtBodyHolderTest)  Time elapsed: 0.033 s  <<< ERROR!
spoon.compiler.ModelBuildingException: StatementTemplate cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/ctBodyHolder/testclasses/CWBStatementTemplate.java:6
	at spoon.test.ctBodyHolder.CtBodyHolderTest.testConstructor(CtBodyHolderTest.java:30)

[INFO] Running spoon.test.main.MainTest
[ERROR] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 2.935 s <<< FAILURE! - in spoon.test.main.MainTest
[ERROR] spoon.test.main.MainTest  Time elapsed: 2.935 s  <<< ERROR!
spoon.compiler.ModelBuildingException: Logger cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/main/java/spoon/support/reflect/declaration/CtAnnotationImpl.java:250
	at spoon.test.main.MainTest.loadModel(MainTest.java:89)

[INFO] Running spoon.test.reference.TypeReferenceTest
[INFO] Tests run: 28, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.782 s - in spoon.test.reference.TypeReferenceTest
[INFO] Running spoon.test.reference.ExecutableReferenceTest
[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.264 s - in spoon.test.reference.ExecutableReferenceTest
[INFO] Running spoon.test.reference.VariableAccessTest
2018-06-11 17:54:26,604 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable e at (/root/workspace/INRIA/spoon/390834297/src/test/resources/noclasspath/org/elasticsearch/indices/analysis/HunspellService.java:100)
[INFO] Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.336 s - in spoon.test.reference.VariableAccessTest
[INFO] Running spoon.test.reference.CloneReferenceTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.064 s - in spoon.test.reference.CloneReferenceTest
[INFO] Running spoon.test.reference.AnnotationFieldReferenceTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.027 s - in spoon.test.reference.AnnotationFieldReferenceTest
[INFO] Running spoon.test.reference.ExecutableReferenceGenericTest
[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.362 s - in spoon.test.reference.ExecutableReferenceGenericTest
[INFO] Running spoon.test.reference.ElasticsearchStackoverflowTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.047 s - in spoon.test.reference.ElasticsearchStackoverflowTest
[INFO] Running spoon.test.parent.ContractOnSettersParametrizedTest
[INFO] Tests run: 67, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.358 s - in spoon.test.parent.ContractOnSettersParametrizedTest
[INFO] Running spoon.test.parent.TopLevelTypeTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.031 s - in spoon.test.parent.TopLevelTypeTest
[INFO] Running spoon.test.parent.NullParentTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.23 s - in spoon.test.parent.NullParentTest
[INFO] Running spoon.test.parent.ParentTest
[WARNING] Tests run: 11, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 0.489 s - in spoon.test.parent.ParentTest
[INFO] Running spoon.test.parent.SetParentTest
[INFO] Tests run: 67, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.055 s - in spoon.test.parent.SetParentTest
[INFO] Running spoon.test.replace.ReplaceParametrizedTest
[INFO] Tests run: 80, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.128 s - in spoon.test.replace.ReplaceParametrizedTest
[INFO] Running spoon.test.replace.ReplaceTest
[INFO] Tests run: 17, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.716 s - in spoon.test.replace.ReplaceTest
[INFO] Running spoon.test.field.FieldTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.117 s - in spoon.test.field.FieldTest
[INFO] Running spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest
[ERROR] Tests run: 16, Failures: 0, Errors: 6, Skipped: 0, Time elapsed: 0.82 s <<< FAILURE! - in spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest
[ERROR] testAnnotationInChildWithConstantsAutoImport(spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest)  Time elapsed: 0.027 s  <<< ERROR!
spoon.compiler.ModelBuildingException: ALong cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/staticFieldAccess2/ChildOfConstants.java:4
	at spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest.checkFile(ImplicitStaticFieldReferenceTest.java:149)
	at spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest.testAnnotationInChildWithConstantsAutoImport(ImplicitStaticFieldReferenceTest.java:135)

[ERROR] testChildOfGenericsWithAmbiguousStaticFieldAutoImport(spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest)  Time elapsed: 0.027 s  <<< ERROR!
spoon.compiler.ModelBuildingException: GenericsWithAmbiguousStaticField cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/staticFieldAccess2/ChildOfGenericsWithAmbiguousStaticField.java:3
	at spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest.checkFile(ImplicitStaticFieldReferenceTest.java:149)
	at spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest.testChildOfGenericsWithAmbiguousStaticFieldAutoImport(ImplicitStaticFieldReferenceTest.java:109)

[ERROR] testImplicitStaticFieldReferenceAutoImport(spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest)  Time elapsed: 0.027 s  <<< ERROR!
spoon.compiler.ModelBuildingException: Constants cannot be resolved to a variable at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/staticFieldAccess2/ImplicitStaticFieldReference.java:10
	at spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest.checkFile(ImplicitStaticFieldReferenceTest.java:149)
	at spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest.testImplicitStaticFieldReferenceAutoImport(ImplicitStaticFieldReferenceTest.java:29)

[ERROR] testChildOfGenericsWithAmbiguousStaticField(spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest)  Time elapsed: 0.027 s  <<< ERROR!
spoon.compiler.ModelBuildingException: GenericsWithAmbiguousStaticField cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/staticFieldAccess2/ChildOfGenericsWithAmbiguousStaticField.java:3
	at spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest.checkFile(ImplicitStaticFieldReferenceTest.java:149)
	at spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest.testChildOfGenericsWithAmbiguousStaticField(ImplicitStaticFieldReferenceTest.java:104)

[ERROR] testAnnotationInChildWithConstants(spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest)  Time elapsed: 0.027 s  <<< ERROR!
spoon.compiler.ModelBuildingException: ALong cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/staticFieldAccess2/ChildOfConstants.java:4
	at spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest.checkFile(ImplicitStaticFieldReferenceTest.java:149)
	at spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest.testAnnotationInChildWithConstants(ImplicitStaticFieldReferenceTest.java:130)

[ERROR] testImplicitStaticFieldReference(spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest)  Time elapsed: 0.027 s  <<< ERROR!
spoon.compiler.ModelBuildingException: Constants cannot be resolved to a variable at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/staticFieldAccess2/ImplicitStaticFieldReference.java:10
	at spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest.checkFile(ImplicitStaticFieldReferenceTest.java:149)
	at spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest.testImplicitStaticFieldReference(ImplicitStaticFieldReferenceTest.java:17)

[INFO] Running spoon.test.control.ControlTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.123 s - in spoon.test.control.ControlTest
[INFO] Running spoon.test.jar.JarTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.115 s - in spoon.test.jar.JarTest
[INFO] Running spoon.test.limits.utils.InternalTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.058 s - in spoon.test.limits.utils.InternalTest
[INFO] Running spoon.test.reflect.visitor.ReferenceQueryTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.028 s - in spoon.test.reflect.visitor.ReferenceQueryTest
[INFO] Running spoon.test.fieldaccesses.FieldAccessTest
[INFO] Tests run: 16, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.465 s - in spoon.test.fieldaccesses.FieldAccessTest
[INFO] Running spoon.test.jdtimportbuilder.ImportBuilderTest
[ERROR] Tests run: 8, Failures: 0, Errors: 3, Skipped: 0, Time elapsed: 0.345 s <<< FAILURE! - in spoon.test.jdtimportbuilder.ImportBuilderTest
[ERROR] testWithSimpleImportNoAutoimport(spoon.test.jdtimportbuilder.ImportBuilderTest)  Time elapsed: 0.028 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.test.annotation cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/imports/testclasses/ClassWithInvocation.java:3
	at spoon.test.jdtimportbuilder.ImportBuilderTest.testWithSimpleImportNoAutoimport(ImportBuilderTest.java:70)

[ERROR] testSimpleStaticImport(spoon.test.jdtimportbuilder.ImportBuilderTest)  Time elapsed: 0.027 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.test.jdtimportbuilder.testclasses.staticimport cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/jdtimportbuilder/testclasses/StaticImport.java:3
	at spoon.test.jdtimportbuilder.ImportBuilderTest.testSimpleStaticImport(ImportBuilderTest.java:97)

[ERROR] testWithSimpleImport(spoon.test.jdtimportbuilder.ImportBuilderTest)  Time elapsed: 0.028 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.test.annotation cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/imports/testclasses/ClassWithInvocation.java:3
	at spoon.test.jdtimportbuilder.ImportBuilderTest.testWithSimpleImport(ImportBuilderTest.java:48)

[INFO] Running spoon.test.refactoring.RefactoringTest
[ERROR] Tests run: 4, Failures: 0, Errors: 4, Skipped: 0, Time elapsed: 0.137 s <<< FAILURE! - in spoon.test.refactoring.RefactoringTest
[ERROR] testTransformedInstanceofAfterATransformation(spoon.test.refactoring.RefactoringTest)  Time elapsed: 0.035 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/refactoring/testclasses/CtRenameLocalVariableRefactoringTestSubject.java:9
	at spoon.test.refactoring.RefactoringTest.testTransformedInstanceofAfterATransformation(RefactoringTest.java:105)

[ERROR] testRefactoringClassChangeAllCtTypeReferenceAssociatedWithClassConcerned(spoon.test.refactoring.RefactoringTest)  Time elapsed: 0.036 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/refactoring/testclasses/CtRenameLocalVariableRefactoringTestSubject.java:9
	at spoon.test.refactoring.RefactoringTest.testRefactoringClassChangeAllCtTypeReferenceAssociatedWithClassConcerned(RefactoringTest.java:28)

[ERROR] testThisInConstructor(spoon.test.refactoring.RefactoringTest)  Time elapsed: 0.033 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/refactoring/testclasses/CtRenameLocalVariableRefactoringTestSubject.java:9
	at spoon.test.refactoring.RefactoringTest.testThisInConstructor(RefactoringTest.java:66)

[ERROR] testThisInConstructorAfterATransformation(spoon.test.refactoring.RefactoringTest)  Time elapsed: 0.032 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/refactoring/testclasses/CtRenameLocalVariableRefactoringTestSubject.java:9
	at spoon.test.refactoring.RefactoringTest.testThisInConstructorAfterATransformation(RefactoringTest.java:86)

[INFO] Running spoon.test.refactoring.MethodsRefactoringTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.581 s - in spoon.test.refactoring.MethodsRefactoringTest
[INFO] Running spoon.test.refactoring.CtRenameLocalVariableRefactoringTest
[ERROR] Tests run: 4, Failures: 0, Errors: 3, Skipped: 0, Time elapsed: 0.108 s <<< FAILURE! - in spoon.test.refactoring.CtRenameLocalVariableRefactoringTest
[ERROR] testRenameAllLocalVariablesOfRenameTestSubject(spoon.test.refactoring.CtRenameLocalVariableRefactoringTest)  Time elapsed: 0.034 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/refactoring/testclasses/CtRenameLocalVariableRefactoringTestSubject.java:9
	at spoon.test.refactoring.CtRenameLocalVariableRefactoringTest.testRenameAllLocalVariablesOfRenameTestSubject(CtRenameLocalVariableRefactoringTest.java:63)

[ERROR] testRenameLocalVariableToSameName(spoon.test.refactoring.CtRenameLocalVariableRefactoringTest)  Time elapsed: 0.033 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/refactoring/testclasses/CtRenameLocalVariableRefactoringTestSubject.java:9
	at spoon.test.refactoring.CtRenameLocalVariableRefactoringTest.testRenameLocalVariableToSameName(CtRenameLocalVariableRefactoringTest.java:253)

[ERROR] testRefactorWrongUsage(spoon.test.refactoring.CtRenameLocalVariableRefactoringTest)  Time elapsed: 0.036 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/refactoring/testclasses/CtRenameLocalVariableRefactoringTestSubject.java:9
	at spoon.test.refactoring.CtRenameLocalVariableRefactoringTest.testRefactorWrongUsage(CtRenameLocalVariableRefactoringTest.java:205)

[INFO] Running spoon.test.visibility.VisibilityTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.378 s - in spoon.test.visibility.VisibilityTest
[INFO] Running spoon.test.trycatch.TryCatchTest
[ERROR] Tests run: 12, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.401 s <<< FAILURE! - in spoon.test.trycatch.TryCatchTest
[ERROR] testCatchWithExplicitFinalVariable(spoon.test.trycatch.TryCatchTest)  Time elapsed: 0.031 s  <<< ERROR!
spoon.compiler.ModelBuildingException: Statement cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/trycatch/testclasses/Bar.java:6
	at spoon.test.trycatch.TryCatchTest.testCatchWithExplicitFinalVariable(TryCatchTest.java:267)

[INFO] Running spoon.test.type.TypeTest
[INFO] Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.54 s - in spoon.test.type.TypeTest
[INFO] Running spoon.test.labels.TestLabels
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.03 s - in spoon.test.labels.TestLabels
[INFO] Running spoon.test.support.ResourceTest
[ERROR] Tests run: 4, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.047 s <<< FAILURE! - in spoon.test.support.ResourceTest
[ERROR] testFilteringFolder(spoon.test.support.ResourceTest)  Time elapsed: 0.045 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/visibility/VisibilityTest.java:3
	at spoon.test.support.ResourceTest.testFilteringFolder(ResourceTest.java:76)

[INFO] Running spoon.test.secondaryclasses.ClassesTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.2 s - in spoon.test.secondaryclasses.ClassesTest
[INFO] Running spoon.test.filters.FilterTest
2018-06-11 17:54:34,829 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-11 17:54:34,829 INFO spoon.Launcher - running Spoon...
2018-06-11 17:54:34,829 INFO spoon.Launcher - start processing...
2018-06-11 17:54:34,861 INFO spoon.Launcher - end of processing: 
2018-06-11 17:54:34,862 INFO spoon.Launcher - no errors, no warnings
2018-06-11 17:54:34,994 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-11 17:54:34,995 INFO spoon.Launcher - running Spoon...
2018-06-11 17:54:34,995 INFO spoon.Launcher - start processing...
2018-06-11 17:54:35,027 INFO spoon.Launcher - end of processing: 
2018-06-11 17:54:35,027 INFO spoon.Launcher - no errors, no warnings
2018-06-11 17:54:35,145 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-11 17:54:35,145 INFO spoon.Launcher - running Spoon...
2018-06-11 17:54:35,145 INFO spoon.Launcher - start processing...
2018-06-11 17:54:35,177 INFO spoon.Launcher - end of processing: 
2018-06-11 17:54:35,178 INFO spoon.Launcher - no errors, no warnings
2018-06-11 17:54:35,386 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-11 17:54:35,386 INFO spoon.Launcher - running Spoon...
2018-06-11 17:54:35,386 INFO spoon.Launcher - start processing...
2018-06-11 17:54:35,418 INFO spoon.Launcher - end of processing: 
2018-06-11 17:54:35,418 INFO spoon.Launcher - no errors, no warnings
2018-06-11 17:54:35,479 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-11 17:54:35,480 INFO spoon.Launcher - running Spoon...
2018-06-11 17:54:35,480 INFO spoon.Launcher - start processing...
2018-06-11 17:54:35,511 INFO spoon.Launcher - end of processing: 
2018-06-11 17:54:35,512 INFO spoon.Launcher - no errors, no warnings
2018-06-11 17:54:35,819 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-11 17:54:35,820 INFO spoon.Launcher - running Spoon...
2018-06-11 17:54:35,820 INFO spoon.Launcher - start processing...
2018-06-11 17:54:35,851 INFO spoon.Launcher - end of processing: 
2018-06-11 17:54:35,852 INFO spoon.Launcher - no errors, no warnings
2018-06-11 17:54:36,041 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-11 17:54:36,041 INFO spoon.Launcher - running Spoon...
2018-06-11 17:54:36,041 INFO spoon.Launcher - start processing...
2018-06-11 17:54:36,073 INFO spoon.Launcher - end of processing: 
2018-06-11 17:54:36,073 INFO spoon.Launcher - no errors, no warnings
2018-06-11 17:54:36,225 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-11 17:54:36,225 INFO spoon.Launcher - running Spoon...
2018-06-11 17:54:36,225 INFO spoon.Launcher - start processing...
2018-06-11 17:54:36,257 INFO spoon.Launcher - end of processing: 
2018-06-11 17:54:36,257 INFO spoon.Launcher - no errors, no warnings
2018-06-11 17:54:36,288 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-11 17:54:36,288 INFO spoon.Launcher - running Spoon...
2018-06-11 17:54:36,288 INFO spoon.Launcher - start processing...
2018-06-11 17:54:36,320 INFO spoon.Launcher - end of processing: 
2018-06-11 17:54:36,320 INFO spoon.Launcher - no errors, no warnings
2018-06-11 17:54:36,406 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-11 17:54:36,407 INFO spoon.Launcher - running Spoon...
2018-06-11 17:54:36,407 INFO spoon.Launcher - start processing...
2018-06-11 17:54:36,439 INFO spoon.Launcher - end of processing: 
2018-06-11 17:54:36,440 INFO spoon.Launcher - no errors, no warnings
2018-06-11 17:54:36,528 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-11 17:54:36,528 INFO spoon.Launcher - running Spoon...
2018-06-11 17:54:36,528 INFO spoon.Launcher - start processing...
2018-06-11 17:54:36,560 INFO spoon.Launcher - end of processing: 
2018-06-11 17:54:36,560 INFO spoon.Launcher - no errors, no warnings
2018-06-11 17:54:36,590 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-11 17:54:36,590 INFO spoon.Launcher - running Spoon...
2018-06-11 17:54:36,590 INFO spoon.Launcher - start processing...
2018-06-11 17:54:36,623 INFO spoon.Launcher - end of processing: 
2018-06-11 17:54:36,623 INFO spoon.Launcher - no errors, no warnings
2018-06-11 17:54:36,924 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-11 17:54:36,924 INFO spoon.Launcher - running Spoon...
2018-06-11 17:54:36,925 INFO spoon.Launcher - start processing...
2018-06-11 17:54:36,957 INFO spoon.Launcher - end of processing: 
2018-06-11 17:54:36,957 INFO spoon.Launcher - no errors, no warnings
2018-06-11 17:54:36,986 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-11 17:54:36,986 INFO spoon.Launcher - running Spoon...
2018-06-11 17:54:36,986 INFO spoon.Launcher - start processing...
2018-06-11 17:54:37,019 INFO spoon.Launcher - end of processing: 
2018-06-11 17:54:37,019 INFO spoon.Launcher - no errors, no warnings
2018-06-11 17:54:37,328 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-11 17:54:37,328 INFO spoon.Launcher - running Spoon...
2018-06-11 17:54:37,328 INFO spoon.Launcher - start processing...
2018-06-11 17:54:37,374 INFO spoon.Launcher - end of processing: 
2018-06-11 17:54:37,374 INFO spoon.Launcher - no errors, no warnings
2018-06-11 17:54:37,376 INFO spoon.Launcher - Step filter CtClass only) spoon.reflect.CtModelImpl$CtRootPackage cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtRootPackage: unnamed package
2018-06-11 17:54:37,377 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtPackageImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageImpl: spoon
2018-06-11 17:54:37,377 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtPackageImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageImpl: spoon.test
2018-06-11 17:54:37,377 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtPackageImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageImpl: spoon.test.filters
2018-06-11 17:54:37,377 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtPackageImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,378 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-06-11 17:54:37,378 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,378 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: AbstractTostada() {
}
2018-06-11 17:54:37,378 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-06-11 17:54:37,378 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-06-11 17:54:37,378 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.lang.Object()
2018-06-11 17:54:37,379 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-06-11 17:54:37,379 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,379 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-06-11 17:54:37,379 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,379 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}
2018-06-11 17:54:37,379 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-06-11 17:54:37,380 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-06-11 17:54:37,380 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,380 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-06-11 17:54:37,380 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,380 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-06-11 17:54:37,380 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,381 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}
2018-06-11 17:54:37,381 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}
2018-06-11 17:54:37,381 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtNewClassImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtNewClassImpl: new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}
2018-06-11 17:54:37,381 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.AbstractTostada$1()
2018-06-11 17:54:37,383 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada.1
2018-06-11 17:54:37,383 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-06-11 17:54:37,383 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,383 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-06-11 17:54:37,383 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,384 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-06-11 17:54:37,384 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,384 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: 1() {
}
2018-06-11 17:54:37,384 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-06-11 17:54:37,384 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-06-11 17:54:37,384 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.Tostada()
2018-06-11 17:54:37,384 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-06-11 17:54:37,385 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,385 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-06-11 17:54:37,385 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,385 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
    super.prepare();
}
2018-06-11 17:54:37,385 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-06-11 17:54:37,385 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-06-11 17:54:37,385 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,386 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-06-11 17:54:37,386 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,386 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-06-11 17:54:37,386 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    super.prepare();
}
2018-06-11 17:54:37,387 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.prepare()
2018-06-11 17:54:37,387 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-06-11 17:54:37,387 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-06-11 17:54:37,387 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-06-11 17:54:37,387 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,387 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: prepare()
2018-06-11 17:54:37,388 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-06-11 17:54:37,388 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,388 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-06-11 17:54:37,388 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}
2018-06-11 17:54:37,388 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-06-11 17:54:37,388 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-06-11 17:54:37,388 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,389 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-06-11 17:54:37,389 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,389 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-06-11 17:54:37,389 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,389 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return super.make();
}
2018-06-11 17:54:37,389 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return super.make()
2018-06-11 17:54:37,390 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.make()
2018-06-11 17:54:37,390 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-06-11 17:54:37,390 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-06-11 17:54:37,390 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-06-11 17:54:37,390 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,390 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: make()
2018-06-11 17:54:37,390 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-06-11 17:54:37,390 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,391 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-06-11 17:54:37,391 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,391 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public abstract void prepare();
2018-06-11 17:54:37,391 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-06-11 17:54:37,391 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void honey() {
}
2018-06-11 17:54:37,391 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-06-11 17:54:37,391 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-06-11 17:54:37,392 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-06-11 17:54:37,392 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,392 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: Antojito() {
}
2018-06-11 17:54:37,392 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-06-11 17:54:37,392 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-06-11 17:54:37,392 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.AbstractTostada()
2018-06-11 17:54:37,392 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-06-11 17:54:37,392 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,392 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-06-11 17:54:37,393 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,393 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}
2018-06-11 17:54:37,393 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-06-11 17:54:37,393 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-06-11 17:54:37,393 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,393 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-06-11 17:54:37,393 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,394 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-06-11 17:54:37,394 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    java.lang.System.out.println("Antojito");
}
2018-06-11 17:54:37,394 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println("Antojito")
2018-06-11 17:54:37,394 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-06-11 17:54:37,394 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-06-11 17:54:37,394 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-06-11 17:54:37,394 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,395 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-06-11 17:54:37,395 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-06-11 17:54:37,395 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,395 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-06-11 17:54:37,395 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-06-11 17:54:37,395 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(java.lang.String)
2018-06-11 17:54:37,395 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-06-11 17:54:37,395 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-06-11 17:54:37,395 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-06-11 17:54:37,396 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-06-11 17:54:37,396 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,396 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "Antojito"
2018-06-11 17:54:37,396 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-06-11 17:54:37,396 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,396 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void prepare(java.lang.String ingredient) {
}
2018-06-11 17:54:37,396 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-06-11 17:54:37,397 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtParameterImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtParameterImpl: java.lang.String ingredient
2018-06-11 17:54:37,397 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-06-11 17:54:37,397 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,397 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-06-11 17:54:37,397 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-06-11 17:54:37,397 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-06-11 17:54:37,397 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtFieldImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldImpl: private int myfield = 0;
2018-06-11 17:54:37,397 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-06-11 17:54:37,397 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 0
2018-06-11 17:54:37,398 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-06-11 17:54:37,398 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: FieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}
2018-06-11 17:54:37,398 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    super();
    this.myfield = 0;
}
2018-06-11 17:54:37,398 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-06-11 17:54:37,398 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.util.ArrayList()
2018-06-11 17:54:37,398 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-06-11 17:54:37,399 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-06-11 17:54:37,399 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-06-11 17:54:37,399 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-06-11 17:54:37,399 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtAssignmentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAssignmentImpl: this.myfield = 0
2018-06-11 17:54:37,399 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-06-11 17:54:37,399 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldWriteImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldWriteImpl: this.myfield
2018-06-11 17:54:37,399 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThisAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThisAccessImpl: this
2018-06-11 17:54:37,400 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-06-11 17:54:37,400 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,400 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-06-11 17:54:37,400 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-06-11 17:54:37,400 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,400 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: myfield
2018-06-11 17:54:37,400 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-06-11 17:54:37,400 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,400 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-06-11 17:54:37,400 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 0
2018-06-11 17:54:37,401 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-06-11 17:54:37,401 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}
2018-06-11 17:54:37,401 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-06-11 17:54:37,402 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}
2018-06-11 17:54:37,402 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtAssignmentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAssignmentImpl: myfield = super.size()
2018-06-11 17:54:37,402 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-06-11 17:54:37,402 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldWriteImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldWriteImpl: myfield
2018-06-11 17:54:37,402 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThisAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThisAccessImpl: 
2018-06-11 17:54:37,402 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-06-11 17:54:37,403 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,403 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-06-11 17:54:37,403 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-06-11 17:54:37,403 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,403 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: myfield
2018-06-11 17:54:37,403 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-06-11 17:54:37,403 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,403 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-06-11 17:54:37,403 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.size()
2018-06-11 17:54:37,403 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-06-11 17:54:37,404 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-06-11 17:54:37,404 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-06-11 17:54:37,404 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-06-11 17:54:37,404 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: size()
2018-06-11 17:54:37,404 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-06-11 17:54:37,404 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-06-11 17:54:37,404 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-06-11 17:54:37,405 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: java.lang.Object o = super.get(myfield)
2018-06-11 17:54:37,405 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-06-11 17:54:37,405 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,405 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.get(myfield)
2018-06-11 17:54:37,405 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-06-11 17:54:37,405 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-06-11 17:54:37,405 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-06-11 17:54:37,405 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-06-11 17:54:37,406 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: get(int)
2018-06-11 17:54:37,406 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-06-11 17:54:37,406 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-06-11 17:54:37,406 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-06-11 17:54:37,406 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,406 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-06-11 17:54:37,406 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: myfield
2018-06-11 17:54:37,407 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThisAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThisAccessImpl: 
2018-06-11 17:54:37,407 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-06-11 17:54:37,407 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,407 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-06-11 17:54:37,407 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-06-11 17:54:37,407 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,407 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: myfield
2018-06-11 17:54:37,407 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-06-11 17:54:37,408 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,408 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-06-11 17:54:37,408 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtInterfaceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInterfaceImpl: interface Foo {}
2018-06-11 17:54:37,408 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtInterfaceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInterfaceImpl: interface Honey {
    void honey();
}
2018-06-11 17:54:37,408 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: void honey();
2018-06-11 17:54:37,408 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-06-11 17:54:37,408 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtInterfaceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInterfaceImpl: public interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}
2018-06-11 17:54:37,408 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Foo
2018-06-11 17:54:37,408 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,409 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: spoon.test.filters.testclasses.ITostada make();
2018-06-11 17:54:37,409 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-06-11 17:54:37,409 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,409 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-06-11 17:54:37,409 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,409 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: SubTostada() {
}
2018-06-11 17:54:37,409 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-06-11 17:54:37,409 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-06-11 17:54:37,409 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.Tostada()
2018-06-11 17:54:37,410 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-06-11 17:54:37,410 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,410 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-06-11 17:54:37,410 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,410 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}
2018-06-11 17:54:37,410 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-06-11 17:54:37,410 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-06-11 17:54:37,410 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,410 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-06-11 17:54:37,410 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,411 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-06-11 17:54:37,411 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}
2018-06-11 17:54:37,411 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println("SubTostada")
2018-06-11 17:54:37,411 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-06-11 17:54:37,411 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-06-11 17:54:37,411 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-06-11 17:54:37,411 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,411 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-06-11 17:54:37,412 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-06-11 17:54:37,412 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,412 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-06-11 17:54:37,412 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-06-11 17:54:37,412 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(java.lang.String)
2018-06-11 17:54:37,412 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-06-11 17:54:37,412 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-06-11 17:54:37,412 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-06-11 17:54:37,412 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-06-11 17:54:37,412 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,412 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "SubTostada"
2018-06-11 17:54:37,412 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-06-11 17:54:37,413 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,413 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.prepare()
2018-06-11 17:54:37,413 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-06-11 17:54:37,413 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-06-11 17:54:37,413 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-06-11 17:54:37,413 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,413 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: prepare()
2018-06-11 17:54:37,413 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-06-11 17:54:37,413 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,413 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-06-11 17:54:37,414 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-06-11 17:54:37,414 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,414 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: Tacos() {
}
2018-06-11 17:54:37,414 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-06-11 17:54:37,414 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-06-11 17:54:37,414 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.lang.Object()
2018-06-11 17:54:37,414 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-06-11 17:54:37,414 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,414 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-06-11 17:54:37,415 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,415 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}
2018-06-11 17:54:37,415 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-06-11 17:54:37,415 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-06-11 17:54:37,415 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,415 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-06-11 17:54:37,415 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,415 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-06-11 17:54:37,415 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,415 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return null;
}
2018-06-11 17:54:37,415 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return null
2018-06-11 17:54:37,416 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: null
2018-06-11 17:54:37,416 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: <nulltype>
2018-06-11 17:54:37,416 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}
2018-06-11 17:54:37,416 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-06-11 17:54:37,416 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}
2018-06-11 17:54:37,416 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()
2018-06-11 17:54:37,416 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList<java.lang.String>
2018-06-11 17:54:37,416 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-06-11 17:54:37,416 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-06-11 17:54:37,416 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,417 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtConstructorCallImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorCallImpl: new java.util.ArrayList<java.lang.String>()
2018-06-11 17:54:37,417 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.util.ArrayList()
2018-06-11 17:54:37,417 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-06-11 17:54:37,417 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-06-11 17:54:37,417 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList<java.lang.String>
2018-06-11 17:54:37,417 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-06-11 17:54:37,417 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-06-11 17:54:37,417 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,417 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: strings.size()
2018-06-11 17:54:37,417 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: strings
2018-06-11 17:54:37,417 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: strings
2018-06-11 17:54:37,417 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList<java.lang.String>
2018-06-11 17:54:37,418 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-06-11 17:54:37,418 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-06-11 17:54:37,418 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,418 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: size()
2018-06-11 17:54:37,418 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-06-11 17:54:37,419 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-06-11 17:54:37,419 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-06-11 17:54:37,419 INFO spoon.Launcher - Step 6) Skipped element, because CtFunction#accept(input) returned false
Parameter 1) CtMethodImpl: void honey();
2018-06-11 17:54:37,419 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-06-11 17:54:37,419 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,419 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Honey
2018-06-11 17:54:37,419 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,419 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: Tostada() {
}
2018-06-11 17:54:37,420 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-06-11 17:54:37,420 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-06-11 17:54:37,420 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.AbstractTostada()
2018-06-11 17:54:37,420 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-06-11 17:54:37,420 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,420 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-06-11 17:54:37,420 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,420 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}
2018-06-11 17:54:37,420 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-06-11 17:54:37,420 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-06-11 17:54:37,421 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,421 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-06-11 17:54:37,421 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,421 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-06-11 17:54:37,421 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,421 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}
2018-06-11 17:54:37,421 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}
2018-06-11 17:54:37,421 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtNewClassImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtNewClassImpl: new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}
2018-06-11 17:54:37,422 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.Tostada$1()
2018-06-11 17:54:37,423 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada.1
2018-06-11 17:54:37,423 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-06-11 17:54:37,423 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,423 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-06-11 17:54:37,423 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,423 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-06-11 17:54:37,423 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,423 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: 1() {
}
2018-06-11 17:54:37,423 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-06-11 17:54:37,423 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-06-11 17:54:37,424 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.Tostada()
2018-06-11 17:54:37,424 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-06-11 17:54:37,424 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,424 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-06-11 17:54:37,424 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,424 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}
2018-06-11 17:54:37,424 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-06-11 17:54:37,424 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-06-11 17:54:37,424 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,424 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-06-11 17:54:37,424 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,425 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-06-11 17:54:37,425 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    int a = 3;
    super.prepare();
}
2018-06-11 17:54:37,425 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: int a = 3
2018-06-11 17:54:37,425 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-06-11 17:54:37,425 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 3
2018-06-11 17:54:37,425 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-06-11 17:54:37,425 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.prepare()
2018-06-11 17:54:37,425 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-06-11 17:54:37,425 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-06-11 17:54:37,425 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-06-11 17:54:37,425 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,425 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: prepare()
2018-06-11 17:54:37,426 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-06-11 17:54:37,426 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-06-11 17:54:37,426 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-06-11 17:54:37,426 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
}
2018-06-11 17:54:37,426 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-06-11 17:54:37,426 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-06-11 17:54:37,426 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,426 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-06-11 17:54:37,426 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,426 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-06-11 17:54:37,426 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-06-11 17:54:37,426 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public java.lang.String toString() {
    return "";
}
2018-06-11 17:54:37,427 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-06-11 17:54:37,427 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-06-11 17:54:37,427 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,427 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-06-11 17:54:37,427 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,427 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-06-11 17:54:37,427 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,427 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return "";
}
2018-06-11 17:54:37,427 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return ""
2018-06-11 17:54:37,427 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: ""
2018-06-11 17:54:37,427 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-06-11 17:54:37,428 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,428 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void honey() {
}
2018-06-11 17:54:37,428 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-06-11 17:54:37,428 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-06-11 17:54:37,428 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,428 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-06-11 17:54:37,428 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-06-11 17:54:37,428 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-06-11 17:54:37,428 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-06-11 17:54:37,428 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void foo() {
}
2018-06-11 17:54:37,428 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-06-11 17:54:37,428 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
[ERROR] Tests run: 43, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 2.764 s <<< FAILURE! - in spoon.test.filters.FilterTest
[ERROR] testNameFilterWithGenericType(spoon.test.filters.FilterTest)  Time elapsed: 0.079 s  <<< ERROR!
spoon.compiler.ModelBuildingException: Foo cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/imports/testclasses/internal4/Constants.java:4
	at spoon.test.filters.FilterTest.testNameFilterWithGenericType(FilterTest.java:1323)

[INFO] Running spoon.test.filters.CUFilterTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.138 s - in spoon.test.filters.CUFilterTest
[INFO] Running spoon.test.constructor.ConstructorTest
[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.423 s - in spoon.test.constructor.ConstructorTest
[INFO] Running spoon.test.strings.StringLiteralTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.04 s - in spoon.test.strings.StringLiteralTest
[INFO] Running spoon.test.strings.StringTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.044 s - in spoon.test.strings.StringTest
[INFO] Running spoon.test.serializable.SourcePositionTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.08 s - in spoon.test.serializable.SourcePositionTest
[INFO] Running spoon.test.serializable.SerializableTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.112 s - in spoon.test.serializable.SerializableTest
[INFO] Running spoon.test.interfaces.InterfaceTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.189 s - in spoon.test.interfaces.InterfaceTest
[INFO] Running spoon.test.interfaces.TestInterfaceWithoutSetup
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.096 s - in spoon.test.interfaces.TestInterfaceWithoutSetup
[INFO] Running spoon.test.lambda.LambdaTest
2018-06-11 17:54:39,604 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable Strings at (/root/workspace/INRIA/spoon/390834297/src/test/resources/noclasspath/lambdas/TypeAccessInLambda.java:6)
[INFO] Tests run: 23, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.382 s - in spoon.test.lambda.LambdaTest
[INFO] Running spoon.test.path.PathTest
[INFO] Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.338 s - in spoon.test.path.PathTest
[INFO] Running spoon.test.ctType.CtTypeTest
[ERROR] Tests run: 8, Failures: 0, Errors: 5, Skipped: 0, Time elapsed: 0.303 s <<< FAILURE! - in spoon.test.ctType.CtTypeTest
[ERROR] testIsSubTypeOfonTypeReferences(spoon.test.ctType.CtTypeTest)  Time elapsed: 0.039 s  <<< ERROR!
spoon.compiler.ModelBuildingException: X cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/ctType/testclasses/SubtypeModel.java:7
	at spoon.test.ctType.CtTypeTest.testIsSubTypeOfonTypeReferences(CtTypeTest.java:143)

[ERROR] testIsSubTypeOf(spoon.test.ctType.CtTypeTest)  Time elapsed: 0.032 s  <<< ERROR!
spoon.compiler.ModelBuildingException: List cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/ctType/testclasses/X.java:33
	at spoon.test.ctType.CtTypeTest.testIsSubTypeOf(CtTypeTest.java:88)

[ERROR] testHasMethodInDefaultMethod(spoon.test.ctType.CtTypeTest)  Time elapsed: 0.032 s  <<< ERROR!
spoon.compiler.ModelBuildingException: List cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/ctType/testclasses/X.java:33
	at spoon.test.ctType.CtTypeTest.testHasMethodInDefaultMethod(CtTypeTest.java:77)

[ERROR] testHasMethodInSuperClass(spoon.test.ctType.CtTypeTest)  Time elapsed: 0.032 s  <<< ERROR!
spoon.compiler.ModelBuildingException: List cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/ctType/testclasses/X.java:33
	at spoon.test.ctType.CtTypeTest.testHasMethodInSuperClass(CtTypeTest.java:63)

[ERROR] testIsSubTypeOfonTypeParameters(spoon.test.ctType.CtTypeTest)  Time elapsed: 0.033 s  <<< ERROR!
spoon.compiler.ModelBuildingException: List cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/ctType/testclasses/X.java:33
	at spoon.test.ctType.CtTypeTest.testIsSubTypeOfonTypeParameters(CtTypeTest.java:102)

[INFO] Running spoon.test.ctType.CtTypeParameterTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.137 s - in spoon.test.ctType.CtTypeParameterTest
[INFO] Running spoon.test.staticFieldAccess.StaticAccessTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.103 s - in spoon.test.staticFieldAccess.StaticAccessTest
[INFO] Running spoon.test.model.AnonymousExecutableTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.034 s - in spoon.test.model.AnonymousExecutableTest
[INFO] Running spoon.test.model.TypeTest
[ERROR] Tests run: 8, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 0.255 s <<< FAILURE! - in spoon.test.model.TypeTest
[ERROR] testGetDeclaredOrIheritedFieldOnType(spoon.test.model.TypeTest)  Time elapsed: 0.027 s  <<< ERROR!
spoon.compiler.ModelBuildingException: Foo cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/model/ClassWithSuperAndIFace.java:3
	at spoon.test.model.TypeTest.testGetDeclaredOrIheritedFieldOnType(TypeTest.java:72)

[ERROR] testGetDeclaredOrIheritedFieldOnTypeRef(spoon.test.model.TypeTest)  Time elapsed: 0.027 s  <<< ERROR!
spoon.compiler.ModelBuildingException: Foo cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/model/ClassWithSuperAndIFace.java:3
	at spoon.test.model.TypeTest.testGetDeclaredOrIheritedFieldOnTypeRef(TypeTest.java:85)

[INFO] Running spoon.test.model.BlockTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.058 s - in spoon.test.model.BlockTest
[INFO] Running spoon.test.model.SwitchCaseTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.057 s - in spoon.test.model.SwitchCaseTest
[INFO] Running spoon.test.method.MethodTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.141 s - in spoon.test.method.MethodTest
[INFO] Running spoon.test.enums.EnumsTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.149 s - in spoon.test.enums.EnumsTest
[INFO] Running spoon.test.enums.EnumsTypeTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.063 s - in spoon.test.enums.EnumsTypeTest
[INFO] Running spoon.test.ctClass.CtClassTest
2018-06-11 17:54:42,098 ERROR spoon.Launcher - cannot load class: daikon.Runtime
spoon.support.SpoonClassNotFoundException: cannot load class: daikon.Runtime
	at spoon.support.reflect.reference.CtTypeReferenceImpl.findClass(CtTypeReferenceImpl.java:160)
	at spoon.support.reflect.reference.CtTypeReferenceImpl.getActualClass(CtTypeReferenceImpl.java:142)
	at spoon.support.reflect.reference.CtFieldReferenceImpl.getActualField(CtFieldReferenceImpl.java:65)
	at spoon.support.reflect.reference.CtFieldReferenceImpl.getModifiers(CtFieldReferenceImpl.java:223)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.isInitializeStaticFinalField(DefaultJavaPrettyPrinter.java:889)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.printCtFieldAccess(DefaultJavaPrettyPrinter.java:836)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.visitCtFieldWrite(DefaultJavaPrettyPrinter.java:795)
	at spoon.support.reflect.code.CtFieldWriteImpl.accept(CtFieldWriteImpl.java:27)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.scan(DefaultJavaPrettyPrinter.java:343)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.visitCtAssignment(DefaultJavaPrettyPrinter.java:491)
	at spoon.support.reflect.code.CtAssignmentImpl.accept(CtAssignmentImpl.java:55)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.scan(DefaultJavaPrettyPrinter.java:343)
	at spoon.reflect.visitor.ElementPrinterHelper.writeStatement(ElementPrinterHelper.java:181)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.visitCtBlock(DefaultJavaPrettyPrinter.java:523)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:67)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.scan(DefaultJavaPrettyPrinter.java:343)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.visitCtAnonymousExecutable(DefaultJavaPrettyPrinter.java:442)
	at spoon.support.reflect.declaration.CtAnonymousExecutableImpl.accept(CtAnonymousExecutableImpl.java:46)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.scan(DefaultJavaPrettyPrinter.java:343)
	at spoon.reflect.visitor.ElementPrinterHelper.writeElementList(ElementPrinterHelper.java:195)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.visitCtClass(DefaultJavaPrettyPrinter.java:615)
	at spoon.support.reflect.declaration.CtClassImpl.accept(CtClassImpl.java:68)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.scan(DefaultJavaPrettyPrinter.java:343)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.calculate(DefaultJavaPrettyPrinter.java:1950)
	at spoon.support.JavaOutputProcessor.createJavaFile(JavaOutputProcessor.java:133)
	at spoon.support.JavaOutputProcessor.process(JavaOutputProcessor.java:171)
	at spoon.support.JavaOutputProcessor.process(JavaOutputProcessor.java:45)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:74)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:174)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:148)
	at spoon.reflect.visitor.CtScanner.visitCtPackage(CtScanner.java:650)
	at spoon.support.reflect.declaration.CtPackageImpl.accept(CtPackageImpl.java:102)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:182)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:174)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:148)
	at spoon.reflect.visitor.CtScanner.visitCtPackage(CtScanner.java:649)
	at spoon.support.reflect.declaration.CtPackageImpl.accept(CtPackageImpl.java:102)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:182)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:174)
	at spoon.reflect.visitor.CtScanner.visitCtModule(CtScanner.java:925)
	at spoon.reflect.factory.ModuleFactory$CtUnnamedModule.accept(ModuleFactory.java:105)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:182)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.support.QueueProcessingManager.process(QueueProcessingManager.java:119)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.generateProcessedSourceFilesUsingTypes(JDTBasedSpoonCompiler.java:497)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.generateProcessedSourceFiles(JDTBasedSpoonCompiler.java:208)
	at spoon.Launcher.prettyprint(Launcher.java:725)
	at spoon.Launcher.run(Launcher.java:663)
	at spoon.test.ctClass.CtClassTest.testParentOfTheEnclosingClassOfStaticClass(CtClassTest.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray2(ReflectionUtils.java:206)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:160)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:83)
	at org.apache.maven.plugin.surefire.InPluginVMSurefireStarter.runSuitesInProcess(InPluginVMSurefireStarter.java:87)
	at org.apache.maven.plugin.surefire.AbstractSurefireMojo.executeProvider(AbstractSurefireMojo.java:1132)
	at org.apache.maven.plugin.surefire.AbstractSurefireMojo.executeAfterPreconditionsChecked(AbstractSurefireMojo.java:978)
	at org.apache.maven.plugin.surefire.AbstractSurefireMojo.execute(AbstractSurefireMojo.java:854)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
Caused by: java.lang.ClassNotFoundException: daikon.Runtime
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at spoon.support.reflect.reference.CtTypeReferenceImpl.findClass(CtTypeReferenceImpl.java:158)
	... 104 more
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.358 s - in spoon.test.ctClass.CtClassTest
[INFO] Running spoon.test.parameters.ParameterTest
2018-06-11 17:54:44,189 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable typeRatingFilters at (/root/workspace/INRIA/spoon/390834297/src/test/resources/noclasspath/Tacos.java:4)
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.111 s - in spoon.test.parameters.ParameterTest
[INFO] Running spoon.test.literal.LiteralTest
2018-06-11 17:54:44,290 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable Longs at (/root/workspace/INRIA/spoon/390834297/src/test/resources/noclasspath/SecondaryIndexManager.java:611)
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.396 s - in spoon.test.literal.LiteralTest
[INFO] Running spoon.test.delete.DeleteTest
[INFO] Tests run: 14, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.398 s - in spoon.test.delete.DeleteTest
[INFO] Running spoon.test.method_overriding.MethodOverriddingTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.104 s - in spoon.test.method_overriding.MethodOverriddingTest
[INFO] Running spoon.test.architecture.SpoonArchitectureEnforcerTest
2018-06-11 17:54:52,840 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable MMMethodKind at (/root/workspace/INRIA/spoon/390834297/src/test/java/spoon/generating/RoleHandlersGenerator.java:78)
2018-06-11 17:54:52,847 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable Substitution at (/root/workspace/INRIA/spoon/390834297/src/test/java/spoon/generating/RoleHandlersGenerator.java:113)
2018-06-11 17:54:53,020 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable ABSTRACT at (/root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/architecture/SpoonArchitectureEnforcerTest.java:313)
2018-06-11 17:54:53,062 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable Pattern at (/root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/comment/CommentTest.java:788)
2018-06-11 17:54:53,069 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable StringEscapeUtils at (/root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/comment/CommentTest.java:798)
2018-06-11 17:54:53,223 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable Arrays at (/root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/filters/FilterTest.java:1121)
2018-06-11 17:54:53,401 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable Assert at (/root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/main/MainTest.java:427)
2018-06-11 17:54:53,556 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable Arrays at (/root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/refactoring/MethodsRefactoringTest.java:240)
[ERROR] Tests run: 8, Failures: 0, Errors: 8, Skipped: 0, Time elapsed: 11.289 s <<< FAILURE! - in spoon.test.architecture.SpoonArchitectureEnforcerTest
[ERROR] testInterfacesAreCtScannable(spoon.test.architecture.SpoonArchitectureEnforcerTest)  Time elapsed: 1.388 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The hierarchy of the type CtContinueImpl is inconsistent at /root/workspace/INRIA/spoon/390834297/src/main/java/spoon/support/reflect/code/CtContinueImpl.java:32
	at spoon.test.architecture.SpoonArchitectureEnforcerTest.testInterfacesAreCtScannable(SpoonArchitectureEnforcerTest.java:306)

[ERROR] metamodelPackageRule(spoon.test.architecture.SpoonArchitectureEnforcerTest)  Time elapsed: 0.14 s  <<< ERROR!
java.lang.UnsupportedOperationException: no glb for [<T extends CtReference>, [MISSING:CtReference]]
	at spoon.test.architecture.SpoonArchitectureEnforcerTest.metamodelPackageRule(SpoonArchitectureEnforcerTest.java:190)

[ERROR] testStaticClasses(spoon.test.architecture.SpoonArchitectureEnforcerTest)  Time elapsed: 2.577 s  <<< ERROR!
spoon.compiler.ModelBuildingException: Logger cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/main/java/spoon/support/reflect/declaration/CtAnnotationImpl.java:250
	at spoon.test.architecture.SpoonArchitectureEnforcerTest.testStaticClasses(SpoonArchitectureEnforcerTest.java:281)

[ERROR] testSrcMainJava(spoon.test.architecture.SpoonArchitectureEnforcerTest)  Time elapsed: 2.915 s  <<< ERROR!
spoon.compiler.ModelBuildingException: Logger cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/main/java/spoon/support/reflect/declaration/CtAnnotationImpl.java:250
	at spoon.test.architecture.SpoonArchitectureEnforcerTest.testSrcMainJava(SpoonArchitectureEnforcerTest.java:129)

[ERROR] testGoodTestClassNames(spoon.test.architecture.SpoonArchitectureEnforcerTest)  Time elapsed: 1.793 s  <<< ERROR!
spoon.compiler.ModelBuildingException: CtType cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/processing/testclasses/CtTypeProcessor.java:8
	at spoon.test.architecture.SpoonArchitectureEnforcerTest.testGoodTestClassNames(SpoonArchitectureEnforcerTest.java:218)

[ERROR] testFactorySubFactory(spoon.test.architecture.SpoonArchitectureEnforcerTest)  Time elapsed: 0.2 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.reflect.code cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/main/java/spoon/reflect/factory/CodeFactory.java:19
	at spoon.test.architecture.SpoonArchitectureEnforcerTest.testFactorySubFactory(SpoonArchitectureEnforcerTest.java:116)

[ERROR] statelessFactory(spoon.test.architecture.SpoonArchitectureEnforcerTest)  Time elapsed: 0.199 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.reflect.code cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/main/java/spoon/reflect/factory/CodeFactory.java:19
	at spoon.test.architecture.SpoonArchitectureEnforcerTest.statelessFactory(SpoonArchitectureEnforcerTest.java:48)

[ERROR] testSpecPackage(spoon.test.architecture.SpoonArchitectureEnforcerTest)  Time elapsed: 2.076 s  <<< ERROR!
spoon.compiler.ModelBuildingException: Logger cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/main/java/spoon/support/reflect/declaration/CtAnnotationImpl.java:250
	at spoon.test.architecture.SpoonArchitectureEnforcerTest.testSpecPackage(SpoonArchitectureEnforcerTest.java:392)

[INFO] Running spoon.test.compilation.CompilationTest
[ERROR] Tests run: 13, Failures: 0, Errors: 5, Skipped: 0, Time elapsed: 0.712 s <<< FAILURE! - in spoon.test.compilation.CompilationTest
[ERROR] testFilterResourcesFile(spoon.test.compilation.CompilationTest)  Time elapsed: 0.032 s  <<< ERROR!
spoon.compiler.ModelBuildingException: Bar cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/imports/testclasses/internal3/Foo.java:4
	at spoon.test.compilation.CompilationTest.testFilterResourcesFile(CompilationTest.java:197)

[ERROR] testPrecompile(spoon.test.compilation.CompilationTest)  Time elapsed: 0.137 s  <<< ERROR!
spoon.SpoonException: Unable to load processor "compilation.SimpleProcessor" - Check your classpath.
	at spoon.test.compilation.CompilationTest.testPrecompile(CompilationTest.java:274)
Caused by: java.lang.ClassNotFoundException: compilation.SimpleProcessor
	at spoon.test.compilation.CompilationTest.testPrecompile(CompilationTest.java:274)

[ERROR] testNewInstanceFromExistingClass(spoon.test.compilation.CompilationTest)  Time elapsed: 0.024 s  <<< ERROR!
spoon.compiler.ModelBuildingException: IBar cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/compilation/testclasses/Bar.java:3
	at spoon.test.compilation.CompilationTest.testNewInstanceFromExistingClass(CompilationTest.java:126)

[ERROR] testFilterResourcesDir(spoon.test.compilation.CompilationTest)  Time elapsed: 0.239 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/reference/ExecutableReferenceTest.java:3
	at spoon.test.compilation.CompilationTest.testFilterResourcesDir(CompilationTest.java:236)

[ERROR] testNewInstance(spoon.test.compilation.CompilationTest)  Time elapsed: 0.025 s  <<< ERROR!
spoon.compiler.ModelBuildingException: 
snippet compilation error while compiling: class Wrapper {
    static void wrap() throws java.lang.Throwable {
        class X implements spoon.test.compilation.Ifoo { public int foo() {int i=0; return i;} };
    }
}
	at spoon.test.compilation.CompilationTest.testNewInstance(CompilationTest.java:154)
Caused by: spoon.support.compiler.SnippetCompilationError: spoon cannot be resolved to a typeat line 3
	at spoon.test.compilation.CompilationTest.testNewInstance(CompilationTest.java:154)

[INFO] Running spoon.test.signature.SignatureTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.364 s - in spoon.test.signature.SignatureTest
[INFO] Running spoon.test.compilationunit.TestCompilationUnit
[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.124 s - in spoon.test.compilationunit.TestCompilationUnit
[INFO] Running spoon.test.compilationunit.GetBinaryFilesTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.252 s - in spoon.test.compilationunit.GetBinaryFilesTest
[INFO] Running spoon.test.query_function.testclasses.VariableReferencesModelTest
[INFO] Tests run: 15, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 s - in spoon.test.query_function.testclasses.VariableReferencesModelTest
[INFO] Running spoon.test.query_function.VariableReferencesTest
2018-06-11 17:54:57,853 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-11 17:54:57,854 INFO spoon.Launcher - running Spoon...
2018-06-11 17:54:57,854 INFO spoon.Launcher - start processing...
2018-06-11 17:54:57,882 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-11 17:54:57,882 INFO spoon.Launcher - running Spoon...
2018-06-11 17:54:57,882 INFO spoon.Launcher - start processing...
2018-06-11 17:54:57,910 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-11 17:54:57,911 INFO spoon.Launcher - running Spoon...
2018-06-11 17:54:57,911 INFO spoon.Launcher - start processing...
2018-06-11 17:54:57,939 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-11 17:54:57,939 INFO spoon.Launcher - running Spoon...
2018-06-11 17:54:57,939 INFO spoon.Launcher - start processing...
2018-06-11 17:54:57,967 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-11 17:54:57,967 INFO spoon.Launcher - running Spoon...
2018-06-11 17:54:57,967 INFO spoon.Launcher - start processing...
2018-06-11 17:54:57,995 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-11 17:54:57,995 INFO spoon.Launcher - running Spoon...
2018-06-11 17:54:57,995 INFO spoon.Launcher - start processing...
2018-06-11 17:54:58,023 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-11 17:54:58,023 INFO spoon.Launcher - running Spoon...
2018-06-11 17:54:58,023 INFO spoon.Launcher - start processing...
2018-06-11 17:54:58,051 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-06-11 17:54:58,051 INFO spoon.Launcher - running Spoon...
2018-06-11 17:54:58,051 INFO spoon.Launcher - start processing...
[ERROR] Tests run: 8, Failures: 0, Errors: 8, Skipped: 0, Time elapsed: 0.226 s <<< FAILURE! - in spoon.test.query_function.VariableReferencesTest
[ERROR] testLocalVariableReferenceFunction(spoon.test.query_function.VariableReferencesTest)  Time elapsed: 0.029 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/query_function/testclasses/VariableReferencesModelTest.java:3
	at spoon.test.query_function.VariableReferencesTest.setup(VariableReferencesTest.java:62)

[ERROR] testParameterReferenceFunction(spoon.test.query_function.VariableReferencesTest)  Time elapsed: 0.028 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/query_function/testclasses/VariableReferencesModelTest.java:3
	at spoon.test.query_function.VariableReferencesTest.setup(VariableReferencesTest.java:62)

[ERROR] testCatchVariableReferenceFunction(spoon.test.query_function.VariableReferencesTest)  Time elapsed: 0.028 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/query_function/testclasses/VariableReferencesModelTest.java:3
	at spoon.test.query_function.VariableReferencesTest.setup(VariableReferencesTest.java:62)

[ERROR] testCheckModelConsistency(spoon.test.query_function.VariableReferencesTest)  Time elapsed: 0.028 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/query_function/testclasses/VariableReferencesModelTest.java:3
	at spoon.test.query_function.VariableReferencesTest.setup(VariableReferencesTest.java:62)

[ERROR] testLocalVariableReferenceDeclarationFunction(spoon.test.query_function.VariableReferencesTest)  Time elapsed: 0.028 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/query_function/testclasses/VariableReferencesModelTest.java:3
	at spoon.test.query_function.VariableReferencesTest.setup(VariableReferencesTest.java:62)

[ERROR] testVariableScopeFunction(spoon.test.query_function.VariableReferencesTest)  Time elapsed: 0.028 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/query_function/testclasses/VariableReferencesModelTest.java:3
	at spoon.test.query_function.VariableReferencesTest.setup(VariableReferencesTest.java:62)

[ERROR] testPotentialVariableAccessFromStaticMethod(spoon.test.query_function.VariableReferencesTest)  Time elapsed: 0.028 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/query_function/testclasses/VariableReferencesModelTest.java:3
	at spoon.test.query_function.VariableReferencesTest.setup(VariableReferencesTest.java:62)

[ERROR] testVariableReferenceFunction(spoon.test.query_function.VariableReferencesTest)  Time elapsed: 0.028 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/query_function/testclasses/VariableReferencesModelTest.java:3
	at spoon.test.query_function.VariableReferencesTest.setup(VariableReferencesTest.java:62)

[INFO] Running spoon.test.arrays.ArraysTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.242 s - in spoon.test.arrays.ArraysTest
[INFO] Running spoon.test.invocations.InvocationTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.089 s - in spoon.test.invocations.InvocationTest
[INFO] Running spoon.test.initializers.InitializerTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.049 s - in spoon.test.initializers.InitializerTest
[INFO] Running spoon.test.change.ChangeCollectorTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.025 s - in spoon.test.change.ChangeCollectorTest
[INFO] Running spoon.test.OutputTypeTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in spoon.test.OutputTypeTest
[INFO] Running spoon.test.snippets.SnippetTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.195 s - in spoon.test.snippets.SnippetTest
[INFO] Running spoon.test.eval.EvalTest
[ERROR] Tests run: 9, Failures: 0, Errors: 6, Skipped: 0, Time elapsed: 0.304 s <<< FAILURE! - in spoon.test.eval.EvalTest
[ERROR] testDoNotSimplify(spoon.test.eval.EvalTest)  Time elapsed: 0.025 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.reflect cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/eval/ToEvaluate.java:3
	at spoon.test.eval.EvalTest.testDoNotSimplify(EvalTest.java:48)

[ERROR] testArrayLength(spoon.test.eval.EvalTest)  Time elapsed: 0.025 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.reflect cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/eval/ToEvaluate.java:3
	at spoon.test.eval.EvalTest.testArrayLength(EvalTest.java:37)

[ERROR] testTryCatchAndStatement(spoon.test.eval.EvalTest)  Time elapsed: 0.028 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.reflect cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/eval/ToEvaluate.java:3
	at spoon.test.eval.EvalTest.testTryCatchAndStatement(EvalTest.java:70)

[ERROR] testDoNotSimplifyToExpressionWhenStatementIsExpected(spoon.test.eval.EvalTest)  Time elapsed: 0.026 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.reflect cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/eval/ToEvaluate.java:3
	at spoon.test.eval.EvalTest.testDoNotSimplifyToExpressionWhenStatementIsExpected(EvalTest.java:81)

[ERROR] testStringConcatenation(spoon.test.eval.EvalTest)  Time elapsed: 0.025 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.reflect cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/eval/ToEvaluate.java:3
	at spoon.test.eval.EvalTest.testStringConcatenation(EvalTest.java:23)

[ERROR] testDoNotSimplifyCasts(spoon.test.eval.EvalTest)  Time elapsed: 0.025 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.reflect cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/eval/ToEvaluate.java:3
	at spoon.test.eval.EvalTest.testDoNotSimplifyCasts(EvalTest.java:59)

[INFO] Running spoon.test.properties.PropertiesTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.025 s - in spoon.test.properties.PropertiesTest
[INFO] Running spoon.test.ctCase.SwitchCaseTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.046 s - in spoon.test.ctCase.SwitchCaseTest
[INFO] Running spoon.test.varargs.VarArgsTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.023 s - in spoon.test.varargs.VarArgsTest
[INFO] Running spoon.test.ctElement.ElementTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.test.ctElement.ElementTest
[INFO] Running spoon.test.ctElement.MetadataTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.023 s - in spoon.test.ctElement.MetadataTest
[INFO] Running spoon.test.role.TestCtRole
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 s - in spoon.test.role.TestCtRole
[INFO] Running spoon.test.casts.CastTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.127 s - in spoon.test.casts.CastTest
[INFO] Running spoon.test.ctBlock.TestCtBlock
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.072 s - in spoon.test.ctBlock.TestCtBlock
[INFO] Running spoon.test.comparison.EqualTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.146 s - in spoon.test.comparison.EqualTest
[INFO] Running spoon.test.javadoc.JavaDocTest
[ERROR] Tests run: 2, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.057 s <<< FAILURE! - in spoon.test.javadoc.JavaDocTest
[ERROR] testJavadocNotPresentInAST(spoon.test.javadoc.JavaDocTest)  Time elapsed: 0.022 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import spoon.reflect cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/test/javadoc/testclasses/Bar.java:3
	at spoon.test.javadoc.JavaDocTest.testJavadocNotPresentInAST(JavaDocTest.java:66)

[INFO] Running spoon.test.logging.LogTest
2018-06-11 17:54:59,541 DEBUG spoon.Launcher - destination: /root/workspace/INRIA/spoon/390834297/spooned-classes
2018-06-11 17:54:59,541 DEBUG spoon.Launcher - source classpath: null
2018-06-11 17:54:59,541 DEBUG spoon.Launcher - template classpath: []
2018-06-11 17:54:59,541 INFO spoon.Launcher - Log info
2018-06-11 17:54:59,541 WARN spoon.Launcher - Log warn
2018-06-11 17:54:59,541 ERROR spoon.Launcher - Log error
2018-06-11 17:54:59,541 DEBUG spoon.Launcher - Log debug
2018-06-11 17:54:59,542 DEBUG spoon.Launcher - destination: /root/workspace/INRIA/spoon/390834297/spooned-classes
2018-06-11 17:54:59,542 DEBUG spoon.Launcher - source classpath: null
2018-06-11 17:54:59,542 DEBUG spoon.Launcher - template classpath: []
2018-06-11 17:54:59,542 INFO spoon.Launcher - Log info
2018-06-11 17:54:59,542 WARN spoon.Launcher - Log warn
2018-06-11 17:54:59,542 ERROR spoon.Launcher - Log error
2018-06-11 17:54:59,542 DEBUG spoon.Launcher - Log debug
2018-06-11 17:54:59,543 INFO spoon.Launcher - Log info
2018-06-11 17:54:59,543 WARN spoon.Launcher - Log warn
2018-06-11 17:54:59,543 ERROR spoon.Launcher - Log error
2018-06-11 17:54:59,543 WARN spoon.Launcher - Log warn
2018-06-11 17:54:59,543 ERROR spoon.Launcher - Log error
2018-06-11 17:54:59,544 ERROR spoon.Launcher - Log error
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 s - in spoon.test.logging.LogTest
[INFO] Running spoon.test.condition.ConditionalTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.094 s - in spoon.test.condition.ConditionalTest
[INFO] Running spoon.LauncherTest
[ERROR] Tests run: 4, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.153 s <<< FAILURE! - in spoon.LauncherTest
[ERROR] testLauncherInEmptyWorkingDir(spoon.LauncherTest)  Time elapsed: 0.026 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/LauncherTest.java:3
	at spoon.LauncherTest.testLauncherInEmptyWorkingDir(LauncherTest.java:91)

[INFO] Running spoon.reflect.declaration.CtTypeInformationTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.372 s - in spoon.reflect.declaration.CtTypeInformationTest
[INFO] Running spoon.reflect.declaration.UnknownDeclarationTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.026 s - in spoon.reflect.declaration.UnknownDeclarationTest
[INFO] Running spoon.reflect.visitor.CtScannerTest
[ERROR] Tests run: 3, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 1.798 s <<< FAILURE! - in spoon.reflect.visitor.CtScannerTest
[ERROR] testScannerCallsAllProperties(spoon.reflect.visitor.CtScannerTest)  Time elapsed: 0.981 s  <<< ERROR!
spoon.compiler.ModelBuildingException: The method getFactory() is undefined for the type CtElement at /root/workspace/INRIA/spoon/390834297/src/main/java/spoon/reflect/visitor/filter/ParentFunction.java:58
	at spoon.reflect.visitor.CtScannerTest.testScannerCallsAllProperties(CtScannerTest.java:119)

[INFO] Running spoon.reflect.visitor.CtInheritanceScannerMethodsTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.699 s - in spoon.reflect.visitor.CtInheritanceScannerMethodsTest
[INFO] Running spoon.reflect.visitor.CtIteratorTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.089 s - in spoon.reflect.visitor.CtIteratorTest
[INFO] Running spoon.reflect.visitor.CtInheritanceScannerTest
[INFO] Tests run: 81, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.277 s - in spoon.reflect.visitor.CtInheritanceScannerTest
[INFO] Running spoon.reflect.visitor.CtVisitorTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.554 s - in spoon.reflect.visitor.CtVisitorTest
[INFO] Running spoon.reflect.ast.CloneTest
[ERROR] Tests run: 5, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 8.507 s <<< FAILURE! - in spoon.reflect.ast.CloneTest
[ERROR] testCopyType(spoon.reflect.ast.CloneTest)  Time elapsed: 0.189 s  <<< ERROR!
java.lang.NullPointerException
	at spoon.reflect.ast.CloneTest.testCopyType(CloneTest.java:208)

[INFO] Running spoon.reflect.ast.AstCheckerTest
[ERROR] Tests run: 2, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 3.221 s <<< FAILURE! - in spoon.reflect.ast.AstCheckerTest
[ERROR] testPushToStackChanges(spoon.reflect.ast.AstCheckerTest)  Time elapsed: 0.157 s  <<< ERROR!
java.lang.UnsupportedOperationException: no glb for [<T extends CtReference>, [MISSING:CtReference]]
	at spoon.reflect.ast.AstCheckerTest.testPushToStackChanges(AstCheckerTest.java:99)

[INFO] Running spoon.processing.CtGenerationTest
[ERROR] Tests run: 4, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 36.863 s <<< FAILURE! - in spoon.processing.CtGenerationTest
[ERROR] testGenerateCtBiScanner(spoon.processing.CtGenerationTest)  Time elapsed: 0.642 s  <<< FAILURE!
java.lang.AssertionError
	at spoon.processing.CtGenerationTest.testGenerateCtBiScanner(CtGenerationTest.java:97)

[ERROR] testGenerateRoleHandler(spoon.processing.CtGenerationTest)  Time elapsed: 5.847 s  <<< FAILURE!
org.junit.ComparisonFailure: 
ModelRoleHandlers different expected:<...ndler extends spoon.[reflect.meta.impl.SingleHandler<spoon.reflect.code.CtTypeAccess, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypeAccess_ACCESSED_TYPE_RoleHandler() {
            super(CtRole.ACCESSED_TYPE, spoon.reflect.code.CtTypeAccess.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAccessedType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAccessedType(castValue(value));
        }
    }

    static class CtClass_ANNONYMOUS_EXECUTABLE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtClass, spoon.reflect.declaration.CtAnonymousExecutable> {
        private CtClass_ANNONYMOUS_EXECUTABLE_RoleHandler() {
            super(CtRole.ANNONYMOUS_EXECUTABLE, spoon.reflect.declaration.CtClass.class, spoon.reflect.declaration.CtAnonymousExecutable.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAnonymousExecutables())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAnonymousExecutables(castValue(value));
        }
    }

    static class CtElement_ANNOTATION_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtElement, spoon.reflect.declaration.CtAnnotation<? extends java.lang.annotation.Annotation>> {
        private CtElement_ANNOTATION_RoleHandler() {
            super(CtRole.ANNOTATION, spoon.reflect.declaration.CtElement.class, spoon.reflect.declaration.CtAnnotation.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAnnotations())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAnnotations(castValue(value));
        }
    }

    static class CtAnnotation_ANNOTATION_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtAnnotation, spoon.reflect.reference.CtTypeReference<? extends java.lang.annotation.Annotation>> {
        private CtAnnotation_ANNOTATION_TYPE_RoleHandler() {
            super(CtRole.ANNOTATION_TYPE, spoon.reflect.declaration.CtAnnotation.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAnnotationType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAnnotationType(castValue(value));
        }
    }

    static class CtAbstractInvocation_ARGUMENT_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtAbstractInvocation, spoon.reflect.code.CtExpression<?>> {
        private CtAbstractInvocation_ARGUMENT_RoleHandler() {
            super(CtRole.ARGUMENT, spoon.reflect.code.CtAbstractInvocation.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getArguments())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setArguments(castValue(value));
        }
    }

    static class CtExecutableReference_ARGUMENT_TYPE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.reference.CtExecutableReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtExecutableReference_ARGUMENT_TYPE_RoleHandler() {
            super(CtRole.ARGUMENT_TYPE, spoon.reflect.reference.CtExecutableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getParameters())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setParameters(castValue(value));
        }
    }

    static class CtAssignment_ASSIGNED_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtAssignment, spoon.reflect.code.CtExpression<?>> {
        private CtAssignment_ASSIGNED_RoleHandler() {
            super(CtRole.ASSIGNED, spoon.reflect.code.CtAssignment.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAssigned())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAssigned(castValue(value));
        }
    }

    static class CtRHSReceiver_ASSIGNMENT_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtRHSReceiver, spoon.reflect.code.CtExpression<?>> {
        private CtRHSReceiver_ASSIGNMENT_RoleHandler() {
            super(CtRole.ASSIGNMENT, spoon.reflect.code.CtRHSReceiver.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAssignment())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAssignment(castValue(value));
        }
    }

    static class CtBodyHolder_BODY_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtBodyHolder, spoon.reflect.code.CtStatement> {
        private CtBodyHolder_BODY_RoleHandler() {
            super(CtRole.BODY, spoon.reflect.code.CtBodyHolder.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getBody())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setBody(castValue(value));
        }
    }

    static class CtSynchronized_BODY_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtSynchronized, spoon.reflect.code.CtBlock<?>> {
        private CtSynchronized_BODY_RoleHandler() {
            super(CtRole.BODY, spoon.reflect.code.CtSynchronized.class, spoon.reflect.code.CtBlock.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getBlock())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setBlock(castValue(value));
        }
    }

    static class CtIntersectionTypeReference_BOUND_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.reference.CtIntersectionTypeReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtIntersectionTypeReference_BOUND_RoleHandler() {
            super(CtRole.BOUND, spoon.reflect.reference.CtIntersectionTypeReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getBounds())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setBounds(castValue(value));
        }
    }

    static class CtTypeParameterReference_BOUNDING_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtTypeParameterReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypeParameterReference_BOUNDING_TYPE_RoleHandler() {
            super(CtRole.BOUNDING_TYPE, spoon.reflect.reference.CtTypeParameterReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getBoundingType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setBoundingType(castValue(value));
        }
    }

    static class CtSwitch_CASE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtSwitch, spoon.reflect.code.CtCase<?>> {
        private CtSwitch_CASE_RoleHandler() {
            super(CtRole.CASE, spoon.reflect.code.CtSwitch.class, spoon.reflect.code.CtCase.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCases())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCases(castValue(value));
        }
    }

    static class CtExpression_CAST_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtExpression, spoon.reflect.reference.CtTypeReference<?>> {
        private CtExpression_CAST_RoleHandler() {
            super(CtRole.CAST, spoon.reflect.code.CtExpression.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTypeCasts())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTypeCasts(castValue(value));
        }
    }

    static class CtTry_CATCH_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtTry, spoon.reflect.code.CtCatch> {
        private CtTry_CATCH_RoleHandler() {
            super(CtRole.CATCH, spoon.reflect.code.CtTry.class, spoon.reflect.code.CtCatch.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCatchers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCatchers(castValue(value));
        }
    }

    static class CtElement_COMMENT_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtElement, spoon.reflect.code.CtComment> {
        private CtElement_COMMENT_RoleHandler() {
            super(CtRole.COMMENT, spoon.reflect.declaration.CtElement.class, spoon.reflect.code.CtComment.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getComments())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setComments(castValue(value));
        }
    }

    static class CtComment_COMMENT_CONTENT_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtComment, java.lang.String> {
        private CtComment_COMMENT_CONTENT_RoleHandler() {
            super(CtRole.COMMENT_CONTENT, spoon.reflect.code.CtComment.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getContent())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setContent(castValue(value));
        }
    }

    static class CtJavaDocTag_COMMENT_CONTENT_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtJavaDocTag, java.lang.String> {
        private CtJavaDocTag_COMMENT_CONTENT_RoleHandler() {
            super(CtRole.COMMENT_CONTENT, spoon.reflect.code.CtJavaDocTag.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getContent())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setContent(castValue(value));
        }
    }

    static class CtJavaDoc_COMMENT_TAG_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtJavaDoc, spoon.reflect.code.CtJavaDocTag> {
        private CtJavaDoc_COMMENT_TAG_RoleHandler() {
            super(CtRole.COMMENT_TAG, spoon.reflect.code.CtJavaDoc.class, spoon.reflect.code.CtJavaDocTag.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTags())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTags(castValue(value));
        }
    }

    static class CtComment_COMMENT_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtComment, spoon.reflect.code.CtComment.CommentType> {
        private CtComment_COMMENT_TYPE_RoleHandler() {
            super(CtRole.COMMENT_TYPE, spoon.reflect.code.CtComment.class, CtComment.CommentType.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCommentType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCommentType(castValue(value));
        }
    }

    static class CtAssert_CONDITION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtAssert, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtAssert_CONDITION_RoleHandler() {
            super(CtRole.CONDITION, spoon.reflect.code.CtAssert.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAssertExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAssertExpression(castValue(value));
        }
    }

    static class CtConditional_CONDITION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtConditional_CONDITION_RoleHandler() {
            super(CtRole.CONDITION, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCondition())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCondition(castValue(value));
        }
    }

    static class CtIf_CONDITION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtIf, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtIf_CONDITION_RoleHandler() {
            super(CtRole.CONDITION, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCondition())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCondition(castValue(value));
        }
    }

    static class CtClass_CONSTRUCTOR_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtClass, spoon.reflect.declaration.CtConstructor<?>> {
        private CtClass_CONSTRUCTOR_RoleHandler() {
            super(CtRole.CONSTRUCTOR, spoon.reflect.declaration.CtClass.class, spoon.reflect.declaration.CtConstructor.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getConstructors())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setConstructors(castValue(value));
        }
    }

    static class CtPackage_CONTAINED_TYPE_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtPackage, spoon.reflect.declaration.CtType<?>> {
        private CtPackage_CONTAINED_TYPE_RoleHandler() {
            super(CtRole.CONTAINED_TYPE, spoon.reflect.declaration.CtPackage.class, spoon.reflect.declaration.CtType.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTypes(castValue(value));
        }
    }

    static class CtExecutableReference_DECLARING_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtExecutableReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtExecutableReference_DECLARING_TYPE_RoleHandler() {
            super(CtRole.DECLARING_TYPE, spoon.reflect.reference.CtExecutableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDeclaringType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDeclaringType(castValue(value));
        }
    }

    static class CtFieldReference_DECLARING_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtFieldReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtFieldReference_DECLARING_TYPE_RoleHandler() {
            super(CtRole.DECLARING_TYPE, spoon.reflect.reference.CtFieldReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDeclaringType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDeclaringType(castValue(value));
        }
    }

    static class CtTypeReference_DECLARING_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtTypeReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypeReference_DECLARING_TYPE_RoleHandler() {
            super(CtRole.DECLARING_TYPE, spoon.reflect.reference.CtTypeReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDeclaringType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDeclaringType(castValue(value));
        }
    }

    static class CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtAnnotationMethod, spoon.reflect.code.CtExpression<?>> {
        private CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler() {
            super(CtRole.DEFAULT_EXPRESSION, spoon.reflect.declaration.CtAnnotationMethod.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDefaultExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDefaultExpression(castValue(value));
        }
    }

    static class CtVariable_DEFAULT_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtVariable, spoon.reflect.code.CtExpression<?>> {
        private CtVariable_DEFAULT_EXPRESSION_RoleHandler() {
            super(CtRole.DEFAULT_EXPRESSION, spoon.reflect.declaration.CtVariable.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDefaultExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDefaultExpression(castValue(value));
        }
    }

    static class CtNewArray_DIMENSION_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtNewArray, spoon.reflect.code.CtExpression<java.lang.Integer>> {
        private CtNewArray_DIMENSION_RoleHandler() {
            super(CtRole.DIMENSION, spoon.reflect.code.CtNewArray.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDimensionExpressions())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDimensionExpressions(castValue(value));
        }
    }

    static class CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtJavaDocTag, spoon.reflect.code.CtJavaDocTag.TagType> {
        private CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler() {
            super(CtRole.DOCUMENTATION_TYPE, spoon.reflect.code.CtJavaDocTag.class, CtJavaDocTag.TagType.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtConditional_ELSE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression<?>> {
        private CtConditional_ELSE_RoleHandler() {
            super(CtRole.ELSE, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getElseExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setElseExpression(castValue(value));
        }
    }

    static class CtIf_ELSE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtIf, spoon.reflect.code.CtStatement> {
        private CtIf_ELSE_RoleHandler() {
            super(CtRole.ELSE, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getElseStatement())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setElseStatement(castValue(value));
        }
    }

    static class CtAbstractInvocation_EXECUTABLE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtAbstractInvocation, spoon.reflect.reference.CtExecutableReference<?>> {
        private CtAbstractInvocation_EXECUTABLE_REF_RoleHandler() {
            super(CtRole.EXECUTABLE_REF, spoon.reflect.code.CtAbstractInvocation.class, spoon.reflect.reference.CtExecutableReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExecutable())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExecutable(castValue(value));
        }
    }

    static class CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtExecutableReferenceExpression, spoon.reflect.reference.CtExecutableReference<?>> {
        private CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler() {
            super(CtRole.EXECUTABLE_REF, spoon.reflect.code.CtExecutableReferenceExpression.class, spoon.reflect.reference.CtExecutableReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExecutable())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExecutable(castValue(value));
        }
    }

    static class CtModule_EXPORTED_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtPackageExport> {
        private CtModule_EXPORTED_PACKAGE_RoleHandler() {
            super(CtRole.EXPORTED_PACKAGE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtPackageExport.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExportedPackages())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExportedPackages(castValue(value));
        }
    }

    static class CtArrayAccess_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtArrayAccess, spoon.reflect.code.CtExpression<java.lang.Integer>> {
        private CtArrayAccess_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtArrayAccess.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getIndexExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setIndexExpression(castValue(value));
        }
    }

    static class CtAssert_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtAssert, spoon.reflect.code.CtExpression<?>> {
        private CtAssert_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtAssert.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtCase_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtCase, spoon.reflect.code.CtExpression<?>> {
        private CtCase_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtCase.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCaseExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCaseExpression(castValue(value));
        }
    }

    static class CtDo_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtDo, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtDo_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtDo.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getLoopingExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setLoopingExpression(castValue(value));
        }
    }

    static class CtFor_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtFor, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtFor_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtFor.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtForEach_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtForEach, spoon.reflect.code.CtExpression<?>> {
        private CtForEach_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtForEach.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtLambda_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLambda, spoon.reflect.code.CtExpression<?>> {
        private CtLambda_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtLambda.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtNewArray_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtNewArray, spoon.reflect.code.CtExpression<?>> {
        private CtNewArray_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtNewArray.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getElements())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setElements(castValue(value));
        }
    }

    static class CtReturn_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtReturn, spoon.reflect.code.CtExpression<?>> {
        private CtReturn_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtReturn.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getReturnedExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setReturnedExpression(castValue(value));
        }
    }

    static class CtSwitch_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtSwitch, spoon.reflect.code.CtExpression<?>> {
        private CtSwitch_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtSwitch.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSelector())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSelector(castValue(value));
        }
    }

    static class CtSynchronized_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtSynchronized, spoon.reflect.code.CtExpression<?>> {
        private CtSynchronized_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtSynchronized.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtThrow_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtThrow, spoon.reflect.code.CtExpression<? extends java.lang.Throwable>> {
        private CtThrow_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtThrow.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThrownExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThrownExpression(castValue(value));
        }
    }

    static class CtUnaryOperator_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtUnaryOperator, spoon.reflect.code.CtExpression<?>> {
        private CtUnaryOperator_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtUnaryOperator.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getOperand())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setOperand(castValue(value));
        }
    }

    static class CtWhile_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtWhile, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtWhile_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtWhile.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getLoopingExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setLoopingExpression(castValue(value));
        }
    }

    static class CtType_FIELD_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtField<?>> {
        private CtType_FIELD_RoleHandler() {
            super(CtRole.FIELD, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtField.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getFields())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFields(castValue(value));
        }
    }

    static class CtTry_FINALIZER_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtTry, spoon.reflect.code.CtBlock<?>> {
        private CtTry_FINALIZER_RoleHandler() {
            super(CtRole.FINALIZER, spoon.reflect.code.CtTry.class, spoon.reflect.code.CtBlock.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getFinalizer())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFinalizer(castValue(value));
        }
    }

    static class CtForEach_FOREACH_VARIABLE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtForEach, spoon.reflect.code.CtLocalVariable<?>> {
        private CtForEach_FOREACH_VARIABLE_RoleHandler() {
            super(CtRole.FOREACH_VARIABLE, spoon.reflect.code.CtForEach.class, spoon.reflect.code.CtLocalVariable.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getVariable())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setVariable(castValue(value));
        }
    }

    static class CtFor_FOR_INIT_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtFor, spoon.reflect.code.CtStatement> {
        private CtFor_FOR_INIT_RoleHandler() {
            super(CtRole.FOR_INIT, spoon.reflect.code.CtFor.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getForInit())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setForInit(castValue(value));
        }
    }

    static class CtFor_FOR_UPDATE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtFor, spoon.reflect.code.CtStatement> {
        private CtFor_FOR_UPDATE_RoleHandler() {
            super(CtRole.FOR_UPDATE, spoon.reflect.code.CtFor.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getForUpdate())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setForUpdate(castValue(value));
        }
    }

    static class CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtProvidedService, spoon.reflect.reference.CtTypeReference> {
        private CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler() {
            super(CtRole.IMPLEMENTATION_TYPE, spoon.reflect.declaration.CtProvidedService.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getImplementationTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setImplementationTypes(castValue(value));
        }
    }

    static class CtImport_IMPORT_REFERENCE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtImport, spoon.reflect.reference.CtReference> {
        private CtImport_IMPORT_REFERENCE_RoleHandler() {
            super(CtRole.IMPORT_REFERENCE, spoon.reflect.declaration.CtImport.class, spoon.reflect.reference.CtReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getReference())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setReference(castValue(value));
        }
    }

    static class CtType_INTERFACE_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtType, spoon.reflect.reference.CtTypeReference<?>> {
        private CtType_INTERFACE_RoleHandler() {
            super(CtRole.INTERFACE, spoon.reflect.declaration.CtType.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSuperInterfaces())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSuperInterfaces(castValue(value));
        }
    }

    static class CtTypeInformation_INTERFACE_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtTypeInformation, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypeInformation_INTERFACE_RoleHandler() {
            super(CtRole.INTERFACE, spoon.reflect.declaration.CtTypeInformation.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSuperInterfaces())));
        }
    }

    static class CtMethod_IS_DEFAULT_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtMethod, java.lang.Boolean> {
        private CtMethod_IS_DEFAULT_RoleHandler() {
            super(CtRole.IS_DEFAULT, spoon.reflect.declaration.CtMethod.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isDefaultMethod())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDefaultMethod(castValue(value));
        }
    }

    static class CtFieldReference_IS_FINAL_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtFieldReference, java.lang.Boolean> {
        private CtFieldReference_IS_FINAL_RoleHandler() {
            super(CtRole.IS_FINAL, spoon.reflect.reference.CtFieldReference.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isFinal())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFinal(castValue(value));
        }
    }

    static class CtElement_IS_IMPLICIT_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtElement, java.lang.Boolean> {
        private CtElement_IS_IMPLICIT_RoleHandler() {
            super(CtRole.IS_IMPLICIT, spoon.reflect.declaration.CtElement.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isImplicit())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setImplicit(castValue(value));
        }
    }

    static class CtShadowable_IS_SHADOW_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtShadowable, java.lang.Boolean> {
        private CtShadowable_IS_SHADOW_RoleHandler() {
            super(CtRole.IS_SHADOW, spoon.reflect.declaration.CtShadowable.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isShadow())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setShadow(castValue(value));
        }
    }

    static class CtExecutableReference_IS_STATIC_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtExecutableReference, java.lang.Boolean> {
        private CtExecutableReference_IS_STATIC_RoleHandler() {
            super(CtRole.IS_STATIC, spoon.reflect.reference.CtExecutableReference.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isStatic())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setStatic(castValue(value));
        }
    }

    static class CtFieldReference_IS_STATIC_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtFieldReference, java.lang.Boolean> {
        private CtFieldReference_IS_STATIC_RoleHandler() {
            super(CtRole.IS_STATIC, spoon.reflect.reference.CtFieldReference.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isStatic())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setStatic(castValue(value));
        }
    }

    static class CtTypeParameterReference_IS_UPPER_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtTypeParameterReference, java.lang.Boolean> {
        private CtTypeParameterReference_IS_UPPER_RoleHandler() {
            super(CtRole.IS_UPPER, spoon.reflect.reference.CtTypeParameterReference.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isUpper())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setUpper(castValue(value));
        }
    }

    static class CtParameter_IS_VARARGS_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtParameter, java.lang.Boolean> {
        private CtParameter_IS_VARARGS_RoleHandler() {
            super(CtRole.IS_VARARGS, spoon.reflect.declaration.CtParameter.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isVarArgs())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setVarArgs(castValue(value));
        }
    }

    static class CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtJavaDocTag, java.lang.String> {
        private CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler() {
            super(CtRole.JAVADOC_TAG_VALUE, spoon.reflect.code.CtJavaDocTag.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getParam())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setParam(castValue(value));
        }
    }

    static class CtStatement_LABEL_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtStatement, java.lang.String> {
        private CtStatement_LABEL_RoleHandler() {
            super(CtRole.LABEL, spoon.reflect.code.CtStatement.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getLabel())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setLabel(castValue(value));
        }
    }

    static class CtBinaryOperator_LEFT_OPERAND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtBinaryOperator, spoon.reflect.code.CtExpression<?>> {
        private CtBinaryOperator_LEFT_OPERAND_RoleHandler() {
            super(CtRole.LEFT_OPERAND, spoon.reflect.code.CtBinaryOperator.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getLeftHandOperand())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setLeftHandOperand(castValue(value));
        }
    }

    static class CtType_METHOD_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtMethod<?>> {
        private CtType_METHOD_RoleHandler() {
            super(CtRole.METHOD, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtMethod.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getMethods())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setMethods(castValue(value));
        }
    }

    static class CtModifiable_MODIFIER_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtModifiable, spoon.reflect.declaration.ModifierKind> {
        private CtModifiable_MODIFIER_RoleHandler() {
            super(CtRole.MODIFIER, spoon.reflect.declaration.CtModifiable.class, spoon.reflect.declaration.ModifierKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getModifiers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setModifiers(castValue(value));
        }
    }

    static class CtModule_MODIFIER_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtModule, java.lang.Boolean> {
        private CtModule_MODIFIER_RoleHandler() {
            super(CtRole.MODIFIER, spoon.reflect.declaration.CtModule.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isOpenModule())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setIsOpenModule(castValue(value));
        }
    }

    static class CtModuleRequirement_MODIFIER_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtModuleRequirement, spoon.reflect.declaration.CtModuleRequirement.RequiresModifier> {
        private CtModuleRequirement_MODIFIER_RoleHandler() {
            super(CtRole.MODIFIER, spoon.reflect.declaration.CtModuleRequirement.class, CtModuleRequirement.RequiresModifier.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getRequiresModifiers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setRequiresModifiers(castValue(value));
        }
    }

    static class CtTypeInformation_MODIFIER_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtTypeInformation, spoon.reflect.declaration.ModifierKind> {
        private CtTypeInformation_MODIFIER_RoleHandler() {
            super(CtRole.MODIFIER, spoon.reflect.declaration.CtTypeInformation.class, spoon.reflect.declaration.ModifierKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getModifiers())));
        }
    }

    static class CtModule_MODULE_DIRECTIVE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtModuleDirective> {
        private CtModule_MODULE_DIRECTIVE_RoleHandler() {
            super(CtRole.MODULE_DIRECTIVE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtModuleDirective.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getModuleDirectives())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setModuleDirectives(castValue(value));
        }
    }

    static class CtModuleRequirement_MODULE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtModuleRequirement, spoon.reflect.reference.CtModuleReference> {
        private CtModuleRequirement_MODULE_REF_RoleHandler() {
            super(CtRole.MODULE_REF, spoon.reflect.declaration.CtModuleRequirement.class, spoon.reflect.reference.CtModuleReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getModuleReference())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setModuleReference(castValue(value));
        }
    }

    static class CtPackageExport_MODULE_REF_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtPackageExport, spoon.reflect.reference.CtModuleReference> {
        private CtPackageExport_MODULE_REF_RoleHandler() {
            super(CtRole.MODULE_REF, spoon.reflect.declaration.CtPackageExport.class, spoon.reflect.reference.CtModuleReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTargetExport())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTargetExport(castValue(value));
        }
    }

    static class CtMultiTypedElement_MULTI_TYPE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtMultiTypedElement, spoon.reflect.reference.CtTypeReference<?>> {
        private CtMultiTypedElement_MULTI_TYPE_RoleHandler() {
            super(CtRole.MULTI_TYPE, spoon.reflect.declaration.CtMultiTypedElement.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getMultiTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setMultiTypes(castValue(value));
        }
    }

    static class CtNamedElement_NAME_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtNamedElement, java.lang.String> {
        private CtNamedElement_NAME_RoleHandler() {
            super(CtRole.NAME, spoon.reflect.declaration.CtNamedElement.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSimpleName())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSimpleName(castValue(value));
        }
    }

    static class CtReference_NAME_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtReference, java.lang.String> {
        private CtReference_NAME_RoleHandler() {
            super(CtRole.NAME, spoon.reflect.reference.CtReference.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSimpleName())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSimpleName(castValue(value));
        }
    }

    static class CtNewClass_NESTED_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtNewClass, spoon.reflect.declaration.CtClass<?>> {
        private CtNewClass_NESTED_TYPE_RoleHandler() {
            super(CtRole.NESTED_TYPE, spoon.reflect.code.CtNewClass.class, spoon.reflect.declaration.CtClass.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAnonymousClass())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAnonymousClass(castValue(value));
        }
    }

    static class CtType_NESTED_TYPE_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtType<?>> {
        private CtType_NESTED_TYPE_RoleHandler() {
            super(CtRole.NESTED_TYPE, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtType.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getNestedTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setNestedTypes(castValue(value));
        }
    }

    static class CtModule_OPENED_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtPackageExport> {
        private CtModule_OPENED_PACKAGE_RoleHandler() {
            super(CtRole.OPENED_PACKAGE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtPackageExport.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getOpenedPackages())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setOpenedPackages(castValue(value));
        }
    }

    static class CtPackageExport_OPENED_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtPackageExport, java.lang.Boolean> {
        private CtPackageExport_OPENED_PACKAGE_RoleHandler() {
            super(CtRole.OPENED_PACKAGE, spoon.reflect.declaration.CtPackageExport.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isOpenedPackage())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setOpenedPackage(castValue(value));
        }
    }

    static class CtBinaryOperator_OPERATOR_KIND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtBinaryOperator, spoon.reflect.code.BinaryOperatorKind> {
        private CtBinaryOperator_OPERATOR_KIND_RoleHandler() {
            super(CtRole.OPERATOR_KIND, spoon.reflect.code.CtBinaryOperator.class, spoon.reflect.code.BinaryOperatorKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getKind())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setKind(castValue(value));
        }
    }

    static class CtOperatorAssignment_OPERATOR_KIND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtOperatorAssignment, spoon.reflect.code.BinaryOperatorKind> {
        private CtOperatorAssignment_OPERATOR_KIND_RoleHandler() {
            super(CtRole.OPERATOR_KIND, spoon.reflect.code.CtOperatorAssignment.class, spoon.reflect.code.BinaryOperatorKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getKind())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setKind(castValue(value));
        }
    }

    static class CtUnaryOperator_OPERATOR_KIND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtUnaryOperator, spoon.reflect.code.UnaryOperatorKind> {
        private CtUnaryOperator_OPERATOR_KIND_RoleHandler() {
            super(CtRole.OPERATOR_KIND, spoon.reflect.code.CtUnaryOperator.class, spoon.reflect.code.UnaryOperatorKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getKind())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setKind(castValue(value));
        }
    }

    static class CtPackageExport_PACKAGE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtPackageExport, spoon.reflect.reference.CtPackageReference> {
        private CtPackageExport_PACKAGE_REF_RoleHandler() {
            super(CtRole.PACKAGE_REF, spoon.reflect.declaration.CtPackageExport.class, spoon.reflect.reference.CtPackageReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getPackageReference())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setPackageReference(castValue(value));
        }
    }

    static class CtTypeReference_PACKAGE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtTypeReference, spoon.reflect.reference.CtPackageReference> {
        private CtTypeReference_PACKAGE_REF_RoleHandler() {
            super(CtRole.PACKAGE_REF, spoon.reflect.reference.CtTypeReference.class, spoon.reflect.reference.CtPackageReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getPackage())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setPackage(castValue(value));
        }
    }

    static class CtCatch_PARAMETER_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtCatch, spoon.reflect.code.CtCatchVariable<? extends java.lang.Throwable>> {
        private CtCatch_PARAMETER_RoleHandler() {
            super(CtRole.PARAMETER, spoon.reflect.code.CtCatch.class, spoon.reflect.code.CtCatchVariable.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getParameter())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setParameter(castValue(value));
        }
    }

    static class CtExecutable_PARAMETER_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtExecutable, spoon.reflect.declaration.CtParameter<?>> {
        private CtExecutable_PARAMETER_RoleHandler() {
            super(CtRole.PARAMETER, spoon.reflect.declaration.CtExecutable.class, spoon.reflect.declaration.CtParameter.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getParameters())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setParameters(castValue(value));
        }
    }

    static class CtElement_POSITION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtElement, spoon.reflect.cu.SourcePosition> {
        private CtElement_POSITION_RoleHandler() {
            super(CtRole.POSITION, spoon.reflect.declaration.CtElement.class, spoon.reflect.cu.SourcePosition.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getPosition())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setPosition(castValue(value));
        }
    }

    static class CtModule_PROVIDED_SERVICE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtProvidedService> {
        private CtModule_PROVIDED_SERVICE_RoleHandler() {
            super(CtRole.PROVIDED_SERVICE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtProvidedService.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getProvidedServices())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setProvidedServices(castValue(value));
        }
    }

    static class CtModule_REQUIRED_MODULE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtModuleRequirement> {
        private CtModule_REQUIRED_MODULE_RoleHandler() {
            super(CtRole.REQUIRED_MODULE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtModuleRequirement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getRequiredModules())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setRequiredModules(castValue(value));
        }
    }

    static class CtBinaryOperator_RIGHT_OPERAND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtBinaryOperator, spoon.reflect.code.CtExpression<?>> {
        private CtBinaryOperator_RIGHT_OPERAND_RoleHandler() {
            super(CtRole.RIGHT_OPERAND, spoon.reflect.code.CtBinaryOperator.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getRightHandOperand())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setRightHandOperand(castValue(value));
        }
    }

    static class CtModule_SERVICE_TYPE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtUsedService> {
        private CtModule_SERVICE_TYPE_RoleHandler() {
            super(CtRole.SERVICE_TYPE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtUsedService.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getUsedServices())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setUsedServices(castValue(value));
        }
    }

    static class CtProvidedService_SERVICE_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtProvidedService, spoon.reflect.reference.CtTypeReference> {
        private CtProvidedService_SERVICE_TYPE_RoleHandler() {
            super(CtRole.SERVICE_TYPE, spoon.reflect.declaration.CtProvidedService.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getServiceType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setServiceType(castValue(value));
        }
    }

    static class CtUsedService_SERVICE_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtUsedService, spoon.reflect.reference.CtTypeReference> {
        private CtUsedService_SERVICE_TYPE_RoleHandler() {
            super(CtRole.SERVICE_TYPE, spoon.reflect.declaration.CtUsedService.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getServiceType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setServiceType(castValue(value));
        }
    }

    static class CtCodeSnippet_SNIPPET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtCodeSnippet, java.lang.String> {
        private CtCodeSnippet_SNIPPET_RoleHandler() {
            super(CtRole.SNIPPET, spoon.reflect.declaration.CtCodeSnippet.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getValue())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setValue(castValue(value));
        }
    }

    static class CtStatementList_STATEMENT_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtStatementList, spoon.reflect.code.CtStatement> {
        private CtStatementList_STATEMENT_RoleHandler() {
            super(CtRole.STATEMENT, spoon.reflect.code.CtStatementList.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getStatements())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setStatements(castValue(value));
        }
    }

    static class CtModule_SUB_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtPackage> {
        private CtModule_SUB_PACKAGE_RoleHandler() {
            super(CtRole.SUB_PACKAGE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtPackage.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getRootPackage())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setRootPackage(castValue(value));
        }
    }

    static class CtPackage_SUB_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtPackage, spoon.reflect.declaration.CtPackage> {
        private CtPackage_SUB_PACKAGE_RoleHandler() {
            super(CtRole.SUB_PACKAGE, spoon.reflect.declaration.CtPackage.class, spoon.reflect.declaration.CtPackage.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getPackages())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setPackages(castValue(value));
        }
    }

    static class CtType_SUPER_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtType, spoon.reflect.reference.CtTypeReference<?>> {
        private CtType_SUPER_TYPE_RoleHandler() {
            super(CtRole.SUPER_TYPE, spoon.reflect.declaration.CtType.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSuperclass())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSuperclass(castValue(value));
        }
    }

    static class CtTypeInformation_SUPER_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtTypeInformation, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypeInformation_SUPER_TYPE_RoleHandler() {
            super(CtRole.SUPER_TYPE, spoon.reflect.declaration.CtTypeInformation.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSuperclass())));
        }
    }

    static class CtTargetedExpression_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtTargetedExpression, spoon.reflect.code.CtExpression<?>> {
        private CtTargetedExpression_TARGET_RoleHandler() {
            super(CtRole.TARGET, spoon.reflect.code.CtTargetedExpression.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTarget(castValue(value));
        }
    }

    static class CtLabelledFlowBreak_TARGET_LABEL_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLabelledFlowBreak, java.lang.String> {
        private CtLabelledFlowBreak_TARGET_LABEL_RoleHandler() {
            super(CtRole.TARGET_LABEL, spoon.reflect.code.CtLabelledFlowBreak.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTargetLabel())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTargetLabel(castValue(value));
        }
    }

    static class CtConditional_THEN_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression<?>> {
        private CtConditional_THEN_RoleHandler() {
            super(CtRole.THEN, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThenExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThenExpression(castValue(value));
        }
    }

    static class CtIf_THEN_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtIf, spoon.reflect.code.CtStatement> {
        private CtIf_THEN_RoleHandler() {
            super(CtRole.THEN, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThenStatement())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThenStatement(castValue(value));
        }
    }

    static class CtExecutable_THROWN_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtExecutable, spoon.reflect.reference.CtTypeReference<? extends java.lang.Throwable>> {
        private CtExecutable_THROWN_RoleHandler() {
            super(CtRole.THROWN, spoon.reflect.declaration.CtExecutable.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThrownTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThrownTypes(castValue(value));
        }
    }

    static class CtTryWithResource_TRY_RESOURCE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtTryWithResource, spoon.reflect.code.CtLocalVariable<?>> {
        private CtTryWithResource_TRY_RESOURCE_RoleHandler() {
            super(CtRole.TRY_RESOURCE, spoon.reflect.code.CtTryWithResource.class, spoon.reflect.code.CtLocalVariable.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getResources())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setResources(castValue(value));
        }
    }

    static class CtArrayTypeReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtArrayTypeReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtArrayTypeReference_TYPE_RoleHandler() {
            super(CtRole.TYPE, spoon.reflect.reference.CtArrayTypeReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getComponentType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setComponentType(castValue(value));
        }
    }

    static class CtExecutableReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtExecutableReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtExecutableReference_TYPE_RoleHandler() {
            super(CtRole.TYPE, spoon.reflect.reference.CtExecutableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtTypedElement_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtTypedElement, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypedElement_TYPE_RoleHandler() {
            super(CtRole.TYPE, spoon.reflect.declaration.CtTypedElement.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtVariableReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtVariableReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtVariableReference_TYPE_RoleHandler() {
            super(CtRole.TYPE, spoon.reflect.reference.CtVariableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.reference.CtActualTypeContainer, spoon.reflect.reference.CtTypeReference<?>> {
        private CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler() {
            super(CtRole.TYPE_ARGUMENT, spoon.reflect.reference.CtActualTypeContainer.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getActualTypeArguments())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setActualTypeArguments(castValue(value));
        }
    }

    static class CtType_TYPE_MEMBER_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtTypeMember> {
        private CtType_TYPE_MEMBER_RoleHandler() {
            super(CtRole.TYPE_MEMBER, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtTypeMember.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTypeMembers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTypeMembers(castValue(value));
        }
    }

    static class CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtFormalTypeDeclarer, spoon.reflect.declaration.CtTypeParameter> {
        private CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler() {
            super(CtRole.TYPE_PARAMETER, spoon.reflect.declaration.CtFormalTypeDeclarer.class, spoon.reflect.declaration.CtTypeParameter.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getFormalCtTypeParameters())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFormalCtTypeParameters(castValue(value));
        }
    }

    static class CtAnnotation_VALUE_RoleHandler extends spoon.reflect.meta.impl.MapHandler<spoon.reflect.declaration.CtAnnotation, spoon.reflect.code.CtExpression> {
        private CtAnnotation_VALUE_RoleHandler() {
            super(CtRole.VALUE, spoon.reflect.declaration.CtAnnotation.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getValues())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setValues(castValue(value));
        }
    }

    static class CtEnum_VALUE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtEnum, spoon.reflect.declaration.CtEnumValue<?>> {
        private CtEnum_VALUE_RoleHandler() {
            super(CtRole.VALUE, spoon.reflect.declaration.CtEnum.class, spoon.reflect.declaration.CtEnumValue.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getEnumValues())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setEnumValues(castValue(value));
        }
    }

    static class CtLiteral_VALUE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLiteral, java.lang.Object> {
        private CtLiteral_VALUE_RoleHandler() {
            super(CtRole.VALUE, spoon.reflect.code.CtLiteral.class, java.lang.Object.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getValue())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setValue(castValue(value));
        }
    }

    static class CtVariableAccess_VARIABLE_RoleHandler extends ]spoon.reflect.meta.i...> but was:<...ndler extends spoon.[generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtTypeAccess, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypeAccess_ACCESSED_TYPE_RoleHandler() {
            super(CtRole.ACCESSED_TYPE, spoon.reflect.code.CtTypeAccess.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAccessedType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAccessedType(castValue(value));
        }
    }

    static class CtClass_ANNONYMOUS_EXECUTABLE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtClass, spoon.reflect.declaration.CtAnonymousExecutable> {
        private CtClass_ANNONYMOUS_EXECUTABLE_RoleHandler() {
            super(CtRole.ANNONYMOUS_EXECUTABLE, spoon.reflect.declaration.CtClass.class, spoon.reflect.declaration.CtAnonymousExecutable.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAnonymousExecutables())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAnonymousExecutables(castValue(value));
        }
    }

    static class CtElement_ANNOTATION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtElement, spoon.reflect.declaration.CtAnnotation<? extends java.lang.annotation.Annotation>> {
        private CtElement_ANNOTATION_RoleHandler() {
            super(CtRole.ANNOTATION, spoon.reflect.declaration.CtElement.class, spoon.reflect.declaration.CtAnnotation.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAnnotations())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAnnotations(castValue(value));
        }
    }

    static class CtAnnotation_ANNOTATION_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtAnnotation, spoon.reflect.reference.CtTypeReference<? extends java.lang.annotation.Annotation>> {
        private CtAnnotation_ANNOTATION_TYPE_RoleHandler() {
            super(CtRole.ANNOTATION_TYPE, spoon.reflect.declaration.CtAnnotation.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAnnotationType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAnnotationType(castValue(value));
        }
    }

    static class CtAbstractInvocation_ARGUMENT_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtAbstractInvocation, spoon.reflect.code.CtExpression<?>> {
        private CtAbstractInvocation_ARGUMENT_RoleHandler() {
            super(CtRole.ARGUMENT, spoon.reflect.code.CtAbstractInvocation.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getArguments())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setArguments(castValue(value));
        }
    }

    static class CtExecutableReference_ARGUMENT_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.reference.CtExecutableReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtExecutableReference_ARGUMENT_TYPE_RoleHandler() {
            super(CtRole.ARGUMENT_TYPE, spoon.reflect.reference.CtExecutableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getParameters())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setParameters(castValue(value));
        }
    }

    static class CtAssignment_ASSIGNED_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtAssignment, spoon.reflect.code.CtExpression<?>> {
        private CtAssignment_ASSIGNED_RoleHandler() {
            super(CtRole.ASSIGNED, spoon.reflect.code.CtAssignment.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAssigned())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAssigned(castValue(value));
        }
    }

    static class CtRHSReceiver_ASSIGNMENT_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtRHSReceiver, spoon.reflect.code.CtExpression<?>> {
        private CtRHSReceiver_ASSIGNMENT_RoleHandler() {
            super(CtRole.ASSIGNMENT, spoon.reflect.code.CtRHSReceiver.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAssignment())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAssignment(castValue(value));
        }
    }

    static class CtBodyHolder_BODY_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtBodyHolder, spoon.reflect.code.CtStatement> {
        private CtBodyHolder_BODY_RoleHandler() {
            super(CtRole.BODY, spoon.reflect.code.CtBodyHolder.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getBody())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setBody(castValue(value));
        }
    }

    static class CtSynchronized_BODY_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtSynchronized, spoon.reflect.code.CtBlock<? extends java.lang.Object>> {
        private CtSynchronized_BODY_RoleHandler() {
            super(CtRole.BODY, spoon.reflect.code.CtSynchronized.class, spoon.reflect.code.CtBlock.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getBlock())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setBlock(castValue(value));
        }
    }

    static class CtIntersectionTypeReference_BOUND_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.reference.CtIntersectionTypeReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtIntersectionTypeReference_BOUND_RoleHandler() {
            super(CtRole.BOUND, spoon.reflect.reference.CtIntersectionTypeReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getBounds())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setBounds(castValue(value));
        }
    }

    static class CtTypeParameterReference_BOUNDING_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtTypeParameterReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtTypeParameterReference_BOUNDING_TYPE_RoleHandler() {
            super(CtRole.BOUNDING_TYPE, spoon.reflect.reference.CtTypeParameterReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getBoundingType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setBoundingType(castValue(value));
        }
    }

    static class CtSwitch_CASE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtSwitch, spoon.reflect.code.CtCase<?>> {
        private CtSwitch_CASE_RoleHandler() {
            super(CtRole.CASE, spoon.reflect.code.CtSwitch.class, spoon.reflect.code.CtCase.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCases())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCases(castValue(value));
        }
    }

    static class CtExpression_CAST_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtExpression, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtExpression_CAST_RoleHandler() {
            super(CtRole.CAST, spoon.reflect.code.CtExpression.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTypeCasts())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTypeCasts(castValue(value));
        }
    }

    static class CtTry_CATCH_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtTry, spoon.reflect.code.CtCatch> {
        private CtTry_CATCH_RoleHandler() {
            super(CtRole.CATCH, spoon.reflect.code.CtTry.class, spoon.reflect.code.CtCatch.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCatchers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCatchers(castValue(value));
        }
    }

    static class CtElement_COMMENT_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtElement, spoon.reflect.code.CtComment> {
        private CtElement_COMMENT_RoleHandler() {
            super(CtRole.COMMENT, spoon.reflect.declaration.CtElement.class, spoon.reflect.code.CtComment.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getComments())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setComments(castValue(value));
        }
    }

    static class CtComment_COMMENT_CONTENT_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtComment, java.lang.String> {
        private CtComment_COMMENT_CONTENT_RoleHandler() {
            super(CtRole.COMMENT_CONTENT, spoon.reflect.code.CtComment.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getContent())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setContent(castValue(value));
        }
    }

    static class CtJavaDocTag_COMMENT_CONTENT_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtJavaDocTag, java.lang.String> {
        private CtJavaDocTag_COMMENT_CONTENT_RoleHandler() {
            super(CtRole.COMMENT_CONTENT, spoon.reflect.code.CtJavaDocTag.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getContent())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setContent(castValue(value));
        }
    }

    static class CtJavaDoc_COMMENT_TAG_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtJavaDoc, spoon.reflect.code.CtJavaDocTag> {
        private CtJavaDoc_COMMENT_TAG_RoleHandler() {
            super(CtRole.COMMENT_TAG, spoon.reflect.code.CtJavaDoc.class, spoon.reflect.code.CtJavaDocTag.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTags())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTags(castValue(value));
        }
    }

    static class CtComment_COMMENT_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtComment, spoon.reflect.code.CtComment.CommentType> {
        private CtComment_COMMENT_TYPE_RoleHandler() {
            super(CtRole.COMMENT_TYPE, spoon.reflect.code.CtComment.class, CtComment.CommentType.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCommentType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCommentType(castValue(value));
        }
    }

    static class CtAssert_CONDITION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtAssert, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtAssert_CONDITION_RoleHandler() {
            super(CtRole.CONDITION, spoon.reflect.code.CtAssert.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAssertExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAssertExpression(castValue(value));
        }
    }

    static class CtConditional_CONDITION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtConditional_CONDITION_RoleHandler() {
            super(CtRole.CONDITION, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCondition())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCondition(castValue(value));
        }
    }

    static class CtIf_CONDITION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtIf, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtIf_CONDITION_RoleHandler() {
            super(CtRole.CONDITION, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCondition())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCondition(castValue(value));
        }
    }

    static class CtClass_CONSTRUCTOR_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtClass, spoon.reflect.declaration.CtConstructor<?>> {
        private CtClass_CONSTRUCTOR_RoleHandler() {
            super(CtRole.CONSTRUCTOR, spoon.reflect.declaration.CtClass.class, spoon.reflect.declaration.CtConstructor.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getConstructors())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setConstructors(castValue(value));
        }
    }

    static class CtPackage_CONTAINED_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtPackage, spoon.reflect.declaration.CtType<? extends java.lang.Object>> {
        private CtPackage_CONTAINED_TYPE_RoleHandler() {
            super(CtRole.CONTAINED_TYPE, spoon.reflect.declaration.CtPackage.class, spoon.reflect.declaration.CtType.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTypes(castValue(value));
        }
    }

    static class CtExecutableReference_DECLARING_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtExecutableReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtExecutableReference_DECLARING_TYPE_RoleHandler() {
            super(CtRole.DECLARING_TYPE, spoon.reflect.reference.CtExecutableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDeclaringType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDeclaringType(castValue(value));
        }
    }

    static class CtFieldReference_DECLARING_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtFieldReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtFieldReference_DECLARING_TYPE_RoleHandler() {
            super(CtRole.DECLARING_TYPE, spoon.reflect.reference.CtFieldReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDeclaringType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDeclaringType(castValue(value));
        }
    }

    static class CtTypeReference_DECLARING_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtTypeReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtTypeReference_DECLARING_TYPE_RoleHandler() {
            super(CtRole.DECLARING_TYPE, spoon.reflect.reference.CtTypeReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDeclaringType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDeclaringType(castValue(value));
        }
    }

    static class CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtAnnotationMethod, spoon.reflect.code.CtExpression<?>> {
        private CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler() {
            super(CtRole.DEFAULT_EXPRESSION, spoon.reflect.declaration.CtAnnotationMethod.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDefaultExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDefaultExpression(castValue(value));
        }
    }

    static class CtVariable_DEFAULT_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtVariable, spoon.reflect.code.CtExpression<?>> {
        private CtVariable_DEFAULT_EXPRESSION_RoleHandler() {
            super(CtRole.DEFAULT_EXPRESSION, spoon.reflect.declaration.CtVariable.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDefaultExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDefaultExpression(castValue(value));
        }
    }

    static class CtNewArray_DIMENSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtNewArray, spoon.reflect.code.CtExpression<java.lang.Integer>> {
        private CtNewArray_DIMENSION_RoleHandler() {
            super(CtRole.DIMENSION, spoon.reflect.code.CtNewArray.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDimensionExpressions())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDimensionExpressions(castValue(value));
        }
    }

    static class CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtJavaDocTag, spoon.reflect.code.CtJavaDocTag.TagType> {
        private CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler() {
            super(CtRole.DOCUMENTATION_TYPE, spoon.reflect.code.CtJavaDocTag.class, CtJavaDocTag.TagType.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtConditional_ELSE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression<?>> {
        private CtConditional_ELSE_RoleHandler() {
            super(CtRole.ELSE, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getElseExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setElseExpression(castValue(value));
        }
    }

    static class CtIf_ELSE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtIf, spoon.reflect.code.CtStatement> {
        private CtIf_ELSE_RoleHandler() {
            super(CtRole.ELSE, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getElseStatement())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setElseStatement(castValue(value));
        }
    }

    static class CtAbstractInvocation_EXECUTABLE_REF_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtAbstractInvocation, spoon.reflect.reference.CtExecutableReference<?>> {
        private CtAbstractInvocation_EXECUTABLE_REF_RoleHandler() {
            super(CtRole.EXECUTABLE_REF, spoon.reflect.code.CtAbstractInvocation.class, spoon.reflect.reference.CtExecutableReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExecutable())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExecutable(castValue(value));
        }
    }

    static class CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtExecutableReferenceExpression, spoon.reflect.reference.CtExecutableReference<?>> {
        private CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler() {
            super(CtRole.EXECUTABLE_REF, spoon.reflect.code.CtExecutableReferenceExpression.class, spoon.reflect.reference.CtExecutableReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExecutable())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExecutable(castValue(value));
        }
    }

    static class CtModule_EXPORTED_PACKAGE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtPackageExport> {
        private CtModule_EXPORTED_PACKAGE_RoleHandler() {
            super(CtRole.EXPORTED_PACKAGE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtPackageExport.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExportedPackages())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExportedPackages(castValue(value));
        }
    }

    static class CtArrayAccess_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtArrayAccess, spoon.reflect.code.CtExpression<java.lang.Integer>> {
        private CtArrayAccess_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtArrayAccess.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getIndexExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setIndexExpression(castValue(value));
        }
    }

    static class CtAssert_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtAssert, spoon.reflect.code.CtExpression<?>> {
        private CtAssert_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtAssert.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtCase_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtCase, spoon.reflect.code.CtExpression<?>> {
        private CtCase_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtCase.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCaseExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCaseExpression(castValue(value));
        }
    }

    static class CtDo_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtDo, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtDo_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtDo.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getLoopingExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setLoopingExpression(castValue(value));
        }
    }

    static class CtFor_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtFor, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtFor_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtFor.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtForEach_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtForEach, spoon.reflect.code.CtExpression<? extends java.lang.Object>> {
        private CtForEach_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtForEach.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtLambda_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLambda, spoon.reflect.code.CtExpression<?>> {
        private CtLambda_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtLambda.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtNewArray_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtNewArray, spoon.reflect.code.CtExpression<? extends java.lang.Object>> {
        private CtNewArray_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtNewArray.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getElements())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setElements(castValue(value));
        }
    }

    static class CtReturn_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtReturn, spoon.reflect.code.CtExpression<?>> {
        private CtReturn_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtReturn.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getReturnedExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setReturnedExpression(castValue(value));
        }
    }

    static class CtSwitch_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtSwitch, spoon.reflect.code.CtExpression<?>> {
        private CtSwitch_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtSwitch.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSelector())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSelector(castValue(value));
        }
    }

    static class CtSynchronized_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtSynchronized, spoon.reflect.code.CtExpression<? extends java.lang.Object>> {
        private CtSynchronized_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtSynchronized.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtThrow_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtThrow, spoon.reflect.code.CtExpression<? extends java.lang.Throwable>> {
        private CtThrow_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtThrow.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThrownExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThrownExpression(castValue(value));
        }
    }

    static class CtUnaryOperator_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtUnaryOperator, spoon.reflect.code.CtExpression<?>> {
        private CtUnaryOperator_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtUnaryOperator.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getOperand())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setOperand(castValue(value));
        }
    }

    static class CtWhile_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtWhile, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtWhile_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtWhile.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getLoopingExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setLoopingExpression(castValue(value));
        }
    }

    static class CtType_FIELD_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtField<? extends java.lang.Object>> {
        private CtType_FIELD_RoleHandler() {
            super(CtRole.FIELD, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtField.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getFields())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFields(castValue(value));
        }
    }

    static class CtTry_FINALIZER_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtTry, spoon.reflect.code.CtBlock<? extends java.lang.Object>> {
        private CtTry_FINALIZER_RoleHandler() {
            super(CtRole.FINALIZER, spoon.reflect.code.CtTry.class, spoon.reflect.code.CtBlock.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getFinalizer())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFinalizer(castValue(value));
        }
    }

    static class CtForEach_FOREACH_VARIABLE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtForEach, spoon.reflect.code.CtLocalVariable<? extends java.lang.Object>> {
        private CtForEach_FOREACH_VARIABLE_RoleHandler() {
            super(CtRole.FOREACH_VARIABLE, spoon.reflect.code.CtForEach.class, spoon.reflect.code.CtLocalVariable.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getVariable())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setVariable(castValue(value));
        }
    }

    static class CtFor_FOR_INIT_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtFor, spoon.reflect.code.CtStatement> {
        private CtFor_FOR_INIT_RoleHandler() {
            super(CtRole.FOR_INIT, spoon.reflect.code.CtFor.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getForInit())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setForInit(castValue(value));
        }
    }

    static class CtFor_FOR_UPDATE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtFor, spoon.reflect.code.CtStatement> {
        private CtFor_FOR_UPDATE_RoleHandler() {
            super(CtRole.FOR_UPDATE, spoon.reflect.code.CtFor.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getForUpdate())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setForUpdate(castValue(value));
        }
    }

    static class CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtProvidedService, spoon.reflect.reference.CtTypeReference> {
        private CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler() {
            super(CtRole.IMPLEMENTATION_TYPE, spoon.reflect.declaration.CtProvidedService.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getImplementationTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setImplementationTypes(castValue(value));
        }
    }

    static class CtImport_IMPORT_REFERENCE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtImport, spoon.reflect.reference.CtReference> {
        private CtImport_IMPORT_REFERENCE_RoleHandler() {
            super(CtRole.IMPORT_REFERENCE, spoon.reflect.declaration.CtImport.class, spoon.reflect.reference.CtReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getReference())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setReference(castValue(value));
        }
    }

    static class CtType_INTERFACE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtType, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtType_INTERFACE_RoleHandler() {
            super(CtRole.INTERFACE, spoon.reflect.declaration.CtType.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSuperInterfaces())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSuperInterfaces(castValue(value));
        }
    }

    static class CtTypeInformation_INTERFACE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtTypeInformation, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypeInformation_INTERFACE_RoleHandler() {
            super(CtRole.INTERFACE, spoon.reflect.declaration.CtTypeInformation.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSuperInterfaces())));
        }
    }

    static class CtMethod_IS_DEFAULT_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtMethod, java.lang.Boolean> {
        private CtMethod_IS_DEFAULT_RoleHandler() {
            super(CtRole.IS_DEFAULT, spoon.reflect.declaration.CtMethod.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isDefaultMethod())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDefaultMethod(castValue(value));
        }
    }

    static class CtFieldReference_IS_FINAL_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtFieldReference, java.lang.Boolean> {
        private CtFieldReference_IS_FINAL_RoleHandler() {
            super(CtRole.IS_FINAL, spoon.reflect.reference.CtFieldReference.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isFinal())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFinal(castValue(value));
        }
    }

    static class CtElement_IS_IMPLICIT_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtElement, java.lang.Boolean> {
        private CtElement_IS_IMPLICIT_RoleHandler() {
            super(CtRole.IS_IMPLICIT, spoon.reflect.declaration.CtElement.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isImplicit())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setImplicit(castValue(value));
        }
    }

    static class CtShadowable_IS_SHADOW_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtShadowable, java.lang.Boolean> {
        private CtShadowable_IS_SHADOW_RoleHandler() {
            super(CtRole.IS_SHADOW, spoon.reflect.declaration.CtShadowable.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isShadow())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setShadow(castValue(value));
        }
    }

    static class CtExecutableReference_IS_STATIC_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtExecutableReference, java.lang.Boolean> {
        private CtExecutableReference_IS_STATIC_RoleHandler() {
            super(CtRole.IS_STATIC, spoon.reflect.reference.CtExecutableReference.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isStatic())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setStatic(castValue(value));
        }
    }

    static class CtFieldReference_IS_STATIC_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtFieldReference, java.lang.Boolean> {
        private CtFieldReference_IS_STATIC_RoleHandler() {
            super(CtRole.IS_STATIC, spoon.reflect.reference.CtFieldReference.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isStatic())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setStatic(castValue(value));
        }
    }

    static class CtTypeParameterReference_IS_UPPER_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtTypeParameterReference, java.lang.Boolean> {
        private CtTypeParameterReference_IS_UPPER_RoleHandler() {
            super(CtRole.IS_UPPER, spoon.reflect.reference.CtTypeParameterReference.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isUpper())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setUpper(castValue(value));
        }
    }

    static class CtParameter_IS_VARARGS_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtParameter, java.lang.Boolean> {
        private CtParameter_IS_VARARGS_RoleHandler() {
            super(CtRole.IS_VARARGS, spoon.reflect.declaration.CtParameter.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isVarArgs())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setVarArgs(castValue(value));
        }
    }

    static class CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtJavaDocTag, java.lang.String> {
        private CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler() {
            super(CtRole.JAVADOC_TAG_VALUE, spoon.reflect.code.CtJavaDocTag.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getParam())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setParam(castValue(value));
        }
    }

    static class CtStatement_LABEL_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtStatement, java.lang.String> {
        private CtStatement_LABEL_RoleHandler() {
            super(CtRole.LABEL, spoon.reflect.code.CtStatement.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getLabel())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setLabel(castValue(value));
        }
    }

    static class CtBinaryOperator_LEFT_OPERAND_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtBinaryOperator, spoon.reflect.code.CtExpression<? extends java.lang.Object>> {
        private CtBinaryOperator_LEFT_OPERAND_RoleHandler() {
            super(CtRole.LEFT_OPERAND, spoon.reflect.code.CtBinaryOperator.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getLeftHandOperand())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setLeftHandOperand(castValue(value));
        }
    }

    static class CtType_METHOD_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtMethod<? extends java.lang.Object>> {
        private CtType_METHOD_RoleHandler() {
            super(CtRole.METHOD, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtMethod.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getMethods())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setMethods(castValue(value));
        }
    }

    static class CtModifiable_MODIFIER_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtModifiable, spoon.reflect.declaration.ModifierKind> {
        private CtModifiable_MODIFIER_RoleHandler() {
            super(CtRole.MODIFIER, spoon.reflect.declaration.CtModifiable.class, spoon.reflect.declaration.ModifierKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getModifiers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setModifiers(castValue(value));
        }
    }

    static class CtModule_MODIFIER_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtModule, java.lang.Boolean> {
        private CtModule_MODIFIER_RoleHandler() {
            super(CtRole.MODIFIER, spoon.reflect.declaration.CtModule.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isOpenModule())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setIsOpenModule(castValue(value));
        }
    }

    static class CtModuleRequirement_MODIFIER_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtModuleRequirement, spoon.reflect.declaration.CtModuleRequirement.RequiresModifier> {
        private CtModuleRequirement_MODIFIER_RoleHandler() {
            super(CtRole.MODIFIER, spoon.reflect.declaration.CtModuleRequirement.class, CtModuleRequirement.RequiresModifier.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getRequiresModifiers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setRequiresModifiers(castValue(value));
        }
    }

    static class CtTypeInformation_MODIFIER_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtTypeInformation, spoon.reflect.declaration.ModifierKind> {
        private CtTypeInformation_MODIFIER_RoleHandler() {
            super(CtRole.MODIFIER, spoon.reflect.declaration.CtTypeInformation.class, spoon.reflect.declaration.ModifierKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getModifiers())));
        }
    }

    static class CtModule_MODULE_DIRECTIVE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtModuleDirective> {
        private CtModule_MODULE_DIRECTIVE_RoleHandler() {
            super(CtRole.MODULE_DIRECTIVE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtModuleDirective.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getModuleDirectives())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setModuleDirectives(castValue(value));
        }
    }

    static class CtModuleRequirement_MODULE_REF_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtModuleRequirement, spoon.reflect.reference.CtModuleReference> {
        private CtModuleRequirement_MODULE_REF_RoleHandler() {
            super(CtRole.MODULE_REF, spoon.reflect.declaration.CtModuleRequirement.class, spoon.reflect.reference.CtModuleReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getModuleReference())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setModuleReference(castValue(value));
        }
    }

    static class CtPackageExport_MODULE_REF_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtPackageExport, spoon.reflect.reference.CtModuleReference> {
        private CtPackageExport_MODULE_REF_RoleHandler() {
            super(CtRole.MODULE_REF, spoon.reflect.declaration.CtPackageExport.class, spoon.reflect.reference.CtModuleReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTargetExport())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTargetExport(castValue(value));
        }
    }

    static class CtMultiTypedElement_MULTI_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtMultiTypedElement, spoon.reflect.reference.CtTypeReference<?>> {
        private CtMultiTypedElement_MULTI_TYPE_RoleHandler() {
            super(CtRole.MULTI_TYPE, spoon.reflect.declaration.CtMultiTypedElement.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getMultiTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setMultiTypes(castValue(value));
        }
    }

    static class CtNamedElement_NAME_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtNamedElement, java.lang.String> {
        private CtNamedElement_NAME_RoleHandler() {
            super(CtRole.NAME, spoon.reflect.declaration.CtNamedElement.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSimpleName())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSimpleName(castValue(value));
        }
    }

    static class CtReference_NAME_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtReference, java.lang.String> {
        private CtReference_NAME_RoleHandler() {
            super(CtRole.NAME, spoon.reflect.reference.CtReference.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSimpleName())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSimpleName(castValue(value));
        }
    }

    static class CtNewClass_NESTED_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtNewClass, spoon.reflect.declaration.CtClass<? extends java.lang.Object>> {
        private CtNewClass_NESTED_TYPE_RoleHandler() {
            super(CtRole.NESTED_TYPE, spoon.reflect.code.CtNewClass.class, spoon.reflect.declaration.CtClass.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAnonymousClass())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAnonymousClass(castValue(value));
        }
    }

    static class CtType_NESTED_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtType<? extends java.lang.Object>> {
        private CtType_NESTED_TYPE_RoleHandler() {
            super(CtRole.NESTED_TYPE, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtType.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getNestedTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setNestedTypes(castValue(value));
        }
    }

    static class CtModule_OPENED_PACKAGE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtPackageExport> {
        private CtModule_OPENED_PACKAGE_RoleHandler() {
            super(CtRole.OPENED_PACKAGE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtPackageExport.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getOpenedPackages())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setOpenedPackages(castValue(value));
        }
    }

    static class CtPackageExport_OPENED_PACKAGE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtPackageExport, java.lang.Boolean> {
        private CtPackageExport_OPENED_PACKAGE_RoleHandler() {
            super(CtRole.OPENED_PACKAGE, spoon.reflect.declaration.CtPackageExport.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isOpenedPackage())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setOpenedPackage(castValue(value));
        }
    }

    static class CtBinaryOperator_OPERATOR_KIND_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtBinaryOperator, spoon.reflect.code.BinaryOperatorKind> {
        private CtBinaryOperator_OPERATOR_KIND_RoleHandler() {
            super(CtRole.OPERATOR_KIND, spoon.reflect.code.CtBinaryOperator.class, spoon.reflect.code.BinaryOperatorKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getKind())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setKind(castValue(value));
        }
    }

    static class CtOperatorAssignment_OPERATOR_KIND_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtOperatorAssignment, spoon.reflect.code.BinaryOperatorKind> {
        private CtOperatorAssignment_OPERATOR_KIND_RoleHandler() {
            super(CtRole.OPERATOR_KIND, spoon.reflect.code.CtOperatorAssignment.class, spoon.reflect.code.BinaryOperatorKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getKind())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setKind(castValue(value));
        }
    }

    static class CtUnaryOperator_OPERATOR_KIND_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtUnaryOperator, spoon.reflect.code.UnaryOperatorKind> {
        private CtUnaryOperator_OPERATOR_KIND_RoleHandler() {
            super(CtRole.OPERATOR_KIND, spoon.reflect.code.CtUnaryOperator.class, spoon.reflect.code.UnaryOperatorKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getKind())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setKind(castValue(value));
        }
    }

    static class CtPackageExport_PACKAGE_REF_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtPackageExport, spoon.reflect.reference.CtPackageReference> {
        private CtPackageExport_PACKAGE_REF_RoleHandler() {
            super(CtRole.PACKAGE_REF, spoon.reflect.declaration.CtPackageExport.class, spoon.reflect.reference.CtPackageReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getPackageReference())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setPackageReference(castValue(value));
        }
    }

    static class CtTypeReference_PACKAGE_REF_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtTypeReference, spoon.reflect.reference.CtPackageReference> {
        private CtTypeReference_PACKAGE_REF_RoleHandler() {
            super(CtRole.PACKAGE_REF, spoon.reflect.reference.CtTypeReference.class, spoon.reflect.reference.CtPackageReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getPackage())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setPackage(castValue(value));
        }
    }

    static class CtCatch_PARAMETER_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtCatch, spoon.reflect.code.CtCatchVariable<? extends java.lang.Throwable>> {
        private CtCatch_PARAMETER_RoleHandler() {
            super(CtRole.PARAMETER, spoon.reflect.code.CtCatch.class, spoon.reflect.code.CtCatchVariable.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getParameter())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setParameter(castValue(value));
        }
    }

    static class CtExecutable_PARAMETER_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtExecutable, spoon.reflect.declaration.CtParameter<? extends java.lang.Object>> {
        private CtExecutable_PARAMETER_RoleHandler() {
            super(CtRole.PARAMETER, spoon.reflect.declaration.CtExecutable.class, spoon.reflect.declaration.CtParameter.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getParameters())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setParameters(castValue(value));
        }
    }

    static class CtElement_POSITION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtElement, spoon.reflect.cu.SourcePosition> {
        private CtElement_POSITION_RoleHandler() {
            super(CtRole.POSITION, spoon.reflect.declaration.CtElement.class, spoon.reflect.cu.SourcePosition.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getPosition())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setPosition(castValue(value));
        }
    }

    static class CtModule_PROVIDED_SERVICE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtProvidedService> {
        private CtModule_PROVIDED_SERVICE_RoleHandler() {
            super(CtRole.PROVIDED_SERVICE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtProvidedService.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getProvidedServices())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setProvidedServices(castValue(value));
        }
    }

    static class CtModule_REQUIRED_MODULE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtModuleRequirement> {
        private CtModule_REQUIRED_MODULE_RoleHandler() {
            super(CtRole.REQUIRED_MODULE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtModuleRequirement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getRequiredModules())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setRequiredModules(castValue(value));
        }
    }

    static class CtBinaryOperator_RIGHT_OPERAND_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtBinaryOperator, spoon.reflect.code.CtExpression<? extends java.lang.Object>> {
        private CtBinaryOperator_RIGHT_OPERAND_RoleHandler() {
            super(CtRole.RIGHT_OPERAND, spoon.reflect.code.CtBinaryOperator.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getRightHandOperand())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setRightHandOperand(castValue(value));
        }
    }

    static class CtModule_SERVICE_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtUsedService> {
        private CtModule_SERVICE_TYPE_RoleHandler() {
            super(CtRole.SERVICE_TYPE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtUsedService.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getUsedServices())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setUsedServices(castValue(value));
        }
    }

    static class CtProvidedService_SERVICE_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtProvidedService, spoon.reflect.reference.CtTypeReference> {
        private CtProvidedService_SERVICE_TYPE_RoleHandler() {
            super(CtRole.SERVICE_TYPE, spoon.reflect.declaration.CtProvidedService.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getServiceType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setServiceType(castValue(value));
        }
    }

    static class CtUsedService_SERVICE_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtUsedService, spoon.reflect.reference.CtTypeReference> {
        private CtUsedService_SERVICE_TYPE_RoleHandler() {
            super(CtRole.SERVICE_TYPE, spoon.reflect.declaration.CtUsedService.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getServiceType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setServiceType(castValue(value));
        }
    }

    static class CtCodeSnippet_SNIPPET_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtCodeSnippet, java.lang.String> {
        private CtCodeSnippet_SNIPPET_RoleHandler() {
            super(CtRole.SNIPPET, spoon.reflect.declaration.CtCodeSnippet.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getValue())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setValue(castValue(value));
        }
    }

    static class CtStatementList_STATEMENT_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtStatementList, spoon.reflect.code.CtStatement> {
        private CtStatementList_STATEMENT_RoleHandler() {
            super(CtRole.STATEMENT, spoon.reflect.code.CtStatementList.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getStatements())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setStatements(castValue(value));
        }
    }

    static class CtModule_SUB_PACKAGE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtPackage> {
        private CtModule_SUB_PACKAGE_RoleHandler() {
            super(CtRole.SUB_PACKAGE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtPackage.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getRootPackage())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setRootPackage(castValue(value));
        }
    }

    static class CtPackage_SUB_PACKAGE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtPackage, spoon.reflect.declaration.CtPackage> {
        private CtPackage_SUB_PACKAGE_RoleHandler() {
            super(CtRole.SUB_PACKAGE, spoon.reflect.declaration.CtPackage.class, spoon.reflect.declaration.CtPackage.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getPackages())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setPackages(castValue(value));
        }
    }

    static class CtType_SUPER_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtType, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtType_SUPER_TYPE_RoleHandler() {
            super(CtRole.SUPER_TYPE, spoon.reflect.declaration.CtType.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSuperclass())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSuperclass(castValue(value));
        }
    }

    static class CtTypeInformation_SUPER_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtTypeInformation, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypeInformation_SUPER_TYPE_RoleHandler() {
            super(CtRole.SUPER_TYPE, spoon.reflect.declaration.CtTypeInformation.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSuperclass())));
        }
    }

    static class CtTargetedExpression_TARGET_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtTargetedExpression, spoon.reflect.code.CtExpression<?>> {
        private CtTargetedExpression_TARGET_RoleHandler() {
            super(CtRole.TARGET, spoon.reflect.code.CtTargetedExpression.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTarget(castValue(value));
        }
    }

    static class CtLabelledFlowBreak_TARGET_LABEL_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLabelledFlowBreak, java.lang.String> {
        private CtLabelledFlowBreak_TARGET_LABEL_RoleHandler() {
            super(CtRole.TARGET_LABEL, spoon.reflect.code.CtLabelledFlowBreak.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTargetLabel())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTargetLabel(castValue(value));
        }
    }

    static class CtConditional_THEN_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression<?>> {
        private CtConditional_THEN_RoleHandler() {
            super(CtRole.THEN, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThenExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThenExpression(castValue(value));
        }
    }

    static class CtIf_THEN_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtIf, spoon.reflect.code.CtStatement> {
        private CtIf_THEN_RoleHandler() {
            super(CtRole.THEN, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThenStatement())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThenStatement(castValue(value));
        }
    }

    static class CtExecutable_THROWN_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtExecutable, spoon.reflect.reference.CtTypeReference<? extends java.lang.Throwable>> {
        private CtExecutable_THROWN_RoleHandler() {
            super(CtRole.THROWN, spoon.reflect.declaration.CtExecutable.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThrownTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThrownTypes(castValue(value));
        }
    }

    static class CtTryWithResource_TRY_RESOURCE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtTryWithResource, spoon.reflect.code.CtLocalVariable<? extends java.lang.Object>> {
        private CtTryWithResource_TRY_RESOURCE_RoleHandler() {
            super(CtRole.TRY_RESOURCE, spoon.reflect.code.CtTryWithResource.class, spoon.reflect.code.CtLocalVariable.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getResources())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setResources(castValue(value));
        }
    }

    static class CtArrayTypeReference_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtArrayTypeReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtArrayTypeReference_TYPE_RoleHandler() {
            super(CtRole.TYPE, spoon.reflect.reference.CtArrayTypeReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getComponentType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setComponentType(castValue(value));
        }
    }

    static class CtExecutableReference_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtExecutableReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtExecutableReference_TYPE_RoleHandler() {
            super(CtRole.TYPE, spoon.reflect.reference.CtExecutableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtTypedElement_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtTypedElement, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypedElement_TYPE_RoleHandler() {
            super(CtRole.TYPE, spoon.reflect.declaration.CtTypedElement.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtVariableReference_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtVariableReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtVariableReference_TYPE_RoleHandler() {
            super(CtRole.TYPE, spoon.reflect.reference.CtVariableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.reference.CtActualTypeContainer, spoon.reflect.reference.CtTypeReference<?>> {
        private CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler() {
            super(CtRole.TYPE_ARGUMENT, spoon.reflect.reference.CtActualTypeContainer.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getActualTypeArguments())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setActualTypeArguments(castValue(value));
        }
    }

    static class CtType_TYPE_MEMBER_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtTypeMember> {
        private CtType_TYPE_MEMBER_RoleHandler() {
            super(CtRole.TYPE_MEMBER, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtTypeMember.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTypeMembers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTypeMembers(castValue(value));
        }
    }

    static class CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtFormalTypeDeclarer, spoon.reflect.declaration.CtTypeParameter> {
        private CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler() {
            super(CtRole.TYPE_PARAMETER, spoon.reflect.declaration.CtFormalTypeDeclarer.class, spoon.reflect.declaration.CtTypeParameter.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getFormalCtTypeParameters())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFormalCtTypeParameters(castValue(value));
        }
    }

    static class CtAnnotation_VALUE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.MapHandler<spoon.reflect.declaration.CtAnnotation, spoon.reflect.code.CtExpression> {
        private CtAnnotation_VALUE_RoleHandler() {
            super(CtRole.VALUE, spoon.reflect.declaration.CtAnnotation.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getValues())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setValues(castValue(value));
        }
    }

    static class CtEnum_VALUE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtEnum, spoon.reflect.declaration.CtEnumValue<? extends java.lang.Object>> {
        private CtEnum_VALUE_RoleHandler() {
            super(CtRole.VALUE, spoon.reflect.declaration.CtEnum.class, spoon.reflect.declaration.CtEnumValue.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getEnumValues())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setEnumValues(castValue(value));
        }
    }

    static class CtLiteral_VALUE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLiteral, java.lang.Object> {
        private CtLiteral_VALUE_RoleHandler() {
            super(CtRole.VALUE, spoon.reflect.code.CtLiteral.class, java.lang.Object.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getValue())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setValue(castValue(value));
        }
    }

    static class CtVariableAccess_VARIABLE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.]spoon.reflect.meta.i...>
	at spoon.processing.CtGenerationTest.testGenerateRoleHandler(CtGenerationTest.java:184)

[INFO] Running spoon.processing.ProcessingTest
[ERROR] Tests run: 2, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.052 s <<< FAILURE! - in spoon.processing.ProcessingTest
[ERROR] testInterruptAProcessor(spoon.processing.ProcessingTest)  Time elapsed: 0.048 s  <<< ERROR!
spoon.compiler.ModelBuildingException: Filter cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/src/test/java/spoon/processing/CtGenerationTest.java:189
	at spoon.processing.ProcessingTest.testInterruptAProcessor(ProcessingTest.java:40)

[INFO] Running spoon.support.compiler.jdt.JDTBasedSpoonCompilerTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.02 s - in spoon.support.compiler.jdt.JDTBasedSpoonCompilerTest
[INFO] Running spoon.support.compiler.jdt.JDTBuilderTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in spoon.support.compiler.jdt.JDTBuilderTest
[INFO] Running spoon.support.compiler.jdt.JDTBatchCompilerTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.057 s - in spoon.support.compiler.jdt.JDTBatchCompilerTest
[INFO] Running spoon.support.compiler.jdt.ExtendedStringLiteralTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.03 s - in spoon.support.compiler.jdt.ExtendedStringLiteralTest
[INFO] Running spoon.support.compiler.classpath.ComputeClasspathTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in spoon.support.compiler.classpath.ComputeClasspathTest
[INFO] Running spoon.support.visitor.java.JavaReflectionTreeBuilderTest
[ERROR] Tests run: 18, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.708 s <<< FAILURE! - in spoon.support.visitor.java.JavaReflectionTreeBuilderTest
[ERROR] testShadowModelEqualsNormalModel(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)  Time elapsed: 0.628 s  <<< ERROR!
java.lang.NullPointerException
	at spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testShadowModelEqualsNormalModel(JavaReflectionTreeBuilderTest.java:188)

[INFO] Running spoon.testing.FileAssertTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.106 s - in spoon.testing.FileAssertTest
[INFO] Running spoon.testing.CtPackageAssertTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.081 s - in spoon.testing.CtPackageAssertTest
[INFO] Running spoon.testing.CtElementAssertTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.118 s - in spoon.testing.CtElementAssertTest
[INFO] Running spoon.testing.AbstractAssertTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.18 s - in spoon.testing.AbstractAssertTest
[INFO] Running spoon.MavenLauncherTest
2018-06-11 17:55:54,656 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,657 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-cas/3.0.0-SNAPSHOT
2018-06-11 17:55:54,657 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-saml/3.0.0-SNAPSHOT
2018-06-11 17:55:54,657 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oauth/3.0.0-SNAPSHOT
2018-06-11 17:55:54,657 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oidc/3.0.0-SNAPSHOT
2018-06-11 17:55:54,657 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-ldap/3.0.0-SNAPSHOT
2018-06-11 17:55:54,657 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-http/3.0.0-SNAPSHOT
2018-06-11 17:55:54,657 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/zaxxer/HikariCP/2.6.1
2018-06-11 17:55:54,657 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-sql/3.0.0-SNAPSHOT
2018-06-11 17:55:54,657 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/security/spring-security-crypto/4.2.2.RELEASE
2018-06-11 17:55:54,657 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-06-11 17:55:54,657 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,657 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-11 17:55:54,657 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-11 17:55:54,657 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-ldap/3.0.0-SNAPSHOT
2018-06-11 17:55:54,657 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/unboundid/unboundid-ldapsdk/3.2.1
2018-06-11 17:55:54,657 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-sql/3.0.0-SNAPSHOT
2018-06-11 17:55:54,657 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,657 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-config/3.0.0-SNAPSHOT
2018-06-11 17:55:54,657 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oauth/3.0.0-SNAPSHOT
2018-06-11 17:55:54,657 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-cas/3.0.0-SNAPSHOT
2018-06-11 17:55:54,657 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-openid/3.0.0-SNAPSHOT
2018-06-11 17:55:54,658 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-http/3.0.0-SNAPSHOT
2018-06-11 17:55:54,658 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-saml/3.0.0-SNAPSHOT
2018-06-11 17:55:54,658 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-gae/3.0.0-SNAPSHOT
2018-06-11 17:55:54,658 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oidc/3.0.0-SNAPSHOT
2018-06-11 17:55:54,658 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-jwt/3.0.0-SNAPSHOT
2018-06-11 17:55:54,658 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-ldap/3.0.0-SNAPSHOT
2018-06-11 17:55:54,658 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-sql/3.0.0-SNAPSHOT
2018-06-11 17:55:54,658 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-mongo/3.0.0-SNAPSHOT
2018-06-11 17:55:54,658 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-couch/3.0.0-SNAPSHOT
2018-06-11 17:55:54,658 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-kerberos/3.0.0-SNAPSHOT
2018-06-11 17:55:54,658 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/slf4j/slf4j-api/1.7.25
2018-06-11 17:55:54,658 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-06-11 17:55:54,658 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/guava/guava/21.0
2018-06-11 17:55:54,658 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/security/spring-security-crypto/4.2.2.RELEASE
2018-06-11 17:55:54,658 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-06-11 17:55:54,658 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-11 17:55:54,658 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-test/4.3.7.RELEASE
2018-06-11 17:55:54,658 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.25
2018-06-11 17:55:54,658 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-11 17:55:54,658 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mockito/mockito-core/2.7.19
2018-06-11 17:55:54,658 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,658 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-cas/3.0.0-SNAPSHOT
2018-06-11 17:55:54,658 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-saml/3.0.0-SNAPSHOT
2018-06-11 17:55:54,658 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oauth/3.0.0-SNAPSHOT
2018-06-11 17:55:54,658 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oidc/3.0.0-SNAPSHOT
2018-06-11 17:55:54,658 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-ldap/3.0.0-SNAPSHOT
2018-06-11 17:55:54,658 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-http/3.0.0-SNAPSHOT
2018-06-11 17:55:54,659 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/zaxxer/HikariCP/2.6.1
2018-06-11 17:55:54,659 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-sql/3.0.0-SNAPSHOT
2018-06-11 17:55:54,659 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/security/spring-security-crypto/4.2.2.RELEASE
2018-06-11 17:55:54,659 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-06-11 17:55:54,659 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,659 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-11 17:55:54,659 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-11 17:55:54,659 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-ldap/3.0.0-SNAPSHOT
2018-06-11 17:55:54,659 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/unboundid/unboundid-ldapsdk/3.2.1
2018-06-11 17:55:54,659 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-sql/3.0.0-SNAPSHOT
2018-06-11 17:55:54,659 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,659 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/commons-codec/commons-codec/1.10
2018-06-11 17:55:54,659 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/github/scribejava/scribejava-apis/3.3.0
2018-06-11 17:55:54,659 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.7
2018-06-11 17:55:54,659 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-06-11 17:55:54,659 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,659 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-11 17:55:54,659 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-11 17:55:54,659 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,659 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/jasig/cas/client/cas-client-core/3.4.1
2018-06-11 17:55:54,659 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/jasig/cas/client/cas-client-support-saml/3.4.1
2018-06-11 17:55:54,659 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-06-11 17:55:54,659 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/guava/guava/21.0
2018-06-11 17:55:54,659 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,659 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-11 17:55:54,659 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-11 17:55:54,660 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,660 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/openid4java/openid4java/1.0.0
2018-06-11 17:55:54,660 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.25
2018-06-11 17:55:54,660 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/xml-apis/xml-apis/2.0.2
2018-06-11 17:55:54,660 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-06-11 17:55:54,660 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,660 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-11 17:55:54,660 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-11 17:55:54,660 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,660 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/commons-codec/commons-codec/1.10
2018-06-11 17:55:54,660 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.7
2018-06-11 17:55:54,660 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,660 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-11 17:55:54,660 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-11 17:55:54,660 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mockito/mockito-core/2.7.19
2018-06-11 17:55:54,660 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/guava/guava/21.0
2018-06-11 17:55:54,660 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/nanohttpd/nanohttpd/2.3.1
2018-06-11 17:55:54,660 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,660 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-core/3.3.0
2018-06-11 17:55:54,660 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/net/shibboleth/utilities/java-support/7.3.0
2018-06-11 17:55:54,660 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-saml-api/3.3.0
2018-06-11 17:55:54,660 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-saml-impl/3.3.0
2018-06-11 17:55:54,660 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-soap-api/3.3.0
2018-06-11 17:55:54,660 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-xmlsec-api/3.3.0
2018-06-11 17:55:54,660 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-security-api/3.3.0
2018-06-11 17:55:54,660 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-security-impl/3.3.0
2018-06-11 17:55:54,660 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-profile-api/3.3.0
2018-06-11 17:55:54,661 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-profile-impl/3.3.0
2018-06-11 17:55:54,661 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-messaging-api/3.3.0
2018-06-11 17:55:54,661 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-messaging-impl/3.3.0
2018-06-11 17:55:54,661 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-xmlsec-impl/3.3.0
2018-06-11 17:55:54,661 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/guava/guava/21.0
2018-06-11 17:55:54,661 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/cryptacular/cryptacular/1.1.0
2018-06-11 17:55:54,661 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/joda-time/joda-time/2.9.2
2018-06-11 17:55:54,661 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/xalan/xalan/2.7.2
2018-06-11 17:55:54,661 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/velocity/velocity/1.7
2018-06-11 17:55:54,661 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/commons-collections/commons-collections/3.2.2
2018-06-11 17:55:54,661 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.25
2018-06-11 17:55:54,661 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-06-11 17:55:54,661 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-core/4.3.7.RELEASE
2018-06-11 17:55:54,661 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,661 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-11 17:55:54,661 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-11 17:55:54,661 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-test/4.3.7.RELEASE
2018-06-11 17:55:54,661 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-web/4.3.7.RELEASE
2018-06-11 17:55:54,661 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mockito/mockito-core/2.7.19
2018-06-11 17:55:54,661 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,661 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-api-1.0-sdk/1.9.50
2018-06-11 17:55:54,661 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-jsr107cache/1.9.50
2018-06-11 17:55:54,661 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/net/sf/jsr107cache/jsr107cache/1.1
2018-06-11 17:55:54,661 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-06-11 17:55:54,662 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,662 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-11 17:55:54,662 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-11 17:55:54,662 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-testing/1.9.50
2018-06-11 17:55:54,662 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-api-labs/1.9.50
2018-06-11 17:55:54,662 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-api-stubs/1.9.50
2018-06-11 17:55:54,662 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,662 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/nimbusds/oauth2-oidc-sdk/5.24.2
2018-06-11 17:55:54,662 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/nimbusds/nimbus-jose-jwt/4.35
2018-06-11 17:55:54,662 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,662 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-11 17:55:54,662 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-11 17:55:54,662 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,662 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/nimbusds/nimbus-jose-jwt/4.35
2018-06-11 17:55:54,662 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.56
2018-06-11 17:55:54,662 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,662 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-11 17:55:54,662 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-11 17:55:54,662 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oauth/3.0.0-SNAPSHOT
2018-06-11 17:55:54,662 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,663 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/ldaptive/ldaptive/1.2.1
2018-06-11 17:55:54,663 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,663 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-11 17:55:54,663 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-11 17:55:54,663 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/unboundid/unboundid-ldapsdk/3.2.1
2018-06-11 17:55:54,663 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,663 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/jdbi/jdbi/2.78
2018-06-11 17:55:54,663 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,663 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-11 17:55:54,663 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/security/spring-security-crypto/4.2.2.RELEASE
2018-06-11 17:55:54,663 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/h2database/h2/1.4.194
2018-06-11 17:55:54,663 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,663 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mongodb/mongo-java-driver/3.4.2
2018-06-11 17:55:54,663 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,664 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-11 17:55:54,664 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-11 17:55:54,664 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-06-11 17:55:54,664 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/de/flapdoodle/embed/de.flapdoodle.embed.mongo/2.0.0
2018-06-11 17:55:54,664 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,664 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/ektorp/org.ektorp/1.4.4
2018-06-11 17:55:54,664 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.3.3
2018-06-11 17:55:54,664 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,664 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/io/bdrc/mcouch-ektorp/1.0.0
2018-06-11 17:55:54,664 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-11 17:55:54,664 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-11 17:55:54,664 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-06-11 17:55:54,664 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,664 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-core/4.3.7.RELEASE
2018-06-11 17:55:54,665 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,665 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-11 17:55:54,665 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-11 17:55:54,665 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mockito/mockito-core/2.7.19
2018-06-11 17:55:54,665 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-06-11 17:55:54,665 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/kerby-kdc/1.0.0
2018-06-11 17:55:54,665 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/kerb-simplekdc/1.0.0
2018-06-11 17:55:54,665 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/kerb-client/1.0.0
2018-06-11 17:55:54,665 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/token-provider/1.0.0
2018-06-11 17:55:54,665 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/integration-test/1.0.0
2018-06-11 17:55:54,679 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,680 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-config/3.0.0-SNAPSHOT
2018-06-11 17:55:54,680 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oauth/3.0.0-SNAPSHOT
2018-06-11 17:55:54,680 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-cas/3.0.0-SNAPSHOT
2018-06-11 17:55:54,680 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-openid/3.0.0-SNAPSHOT
2018-06-11 17:55:54,680 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-http/3.0.0-SNAPSHOT
2018-06-11 17:55:54,680 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-saml/3.0.0-SNAPSHOT
2018-06-11 17:55:54,680 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-gae/3.0.0-SNAPSHOT
2018-06-11 17:55:54,680 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oidc/3.0.0-SNAPSHOT
2018-06-11 17:55:54,680 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-jwt/3.0.0-SNAPSHOT
2018-06-11 17:55:54,680 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-ldap/3.0.0-SNAPSHOT
2018-06-11 17:55:54,680 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-sql/3.0.0-SNAPSHOT
2018-06-11 17:55:54,680 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-mongo/3.0.0-SNAPSHOT
2018-06-11 17:55:54,680 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-couch/3.0.0-SNAPSHOT
2018-06-11 17:55:54,681 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-kerberos/3.0.0-SNAPSHOT
2018-06-11 17:55:54,681 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/slf4j/slf4j-api/1.7.25
2018-06-11 17:55:54,681 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-06-11 17:55:54,681 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/guava/guava/21.0
2018-06-11 17:55:54,681 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/security/spring-security-crypto/4.2.2.RELEASE
2018-06-11 17:55:54,681 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-06-11 17:55:54,681 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-11 17:55:54,681 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-test/4.3.7.RELEASE
2018-06-11 17:55:54,681 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.25
2018-06-11 17:55:54,681 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-11 17:55:54,681 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mockito/mockito-core/2.7.19
2018-06-11 17:55:54,681 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,681 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-cas/3.0.0-SNAPSHOT
2018-06-11 17:55:54,681 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-saml/3.0.0-SNAPSHOT
2018-06-11 17:55:54,681 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oauth/3.0.0-SNAPSHOT
2018-06-11 17:55:54,681 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oidc/3.0.0-SNAPSHOT
2018-06-11 17:55:54,681 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-ldap/3.0.0-SNAPSHOT
2018-06-11 17:55:54,682 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-http/3.0.0-SNAPSHOT
2018-06-11 17:55:54,682 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/zaxxer/HikariCP/2.6.1
2018-06-11 17:55:54,682 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-sql/3.0.0-SNAPSHOT
2018-06-11 17:55:54,682 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/security/spring-security-crypto/4.2.2.RELEASE
2018-06-11 17:55:54,682 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-06-11 17:55:54,682 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,682 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-11 17:55:54,682 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-11 17:55:54,682 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-ldap/3.0.0-SNAPSHOT
2018-06-11 17:55:54,682 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/unboundid/unboundid-ldapsdk/3.2.1
2018-06-11 17:55:54,682 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-sql/3.0.0-SNAPSHOT
2018-06-11 17:55:54,682 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,682 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/commons-codec/commons-codec/1.10
2018-06-11 17:55:54,682 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/github/scribejava/scribejava-apis/3.3.0
2018-06-11 17:55:54,682 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.7
2018-06-11 17:55:54,682 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-06-11 17:55:54,682 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,682 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-11 17:55:54,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-11 17:55:54,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/jasig/cas/client/cas-client-core/3.4.1
2018-06-11 17:55:54,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/jasig/cas/client/cas-client-support-saml/3.4.1
2018-06-11 17:55:54,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-06-11 17:55:54,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/guava/guava/21.0
2018-06-11 17:55:54,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-11 17:55:54,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-11 17:55:54,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/openid4java/openid4java/1.0.0
2018-06-11 17:55:54,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.25
2018-06-11 17:55:54,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/xml-apis/xml-apis/2.0.2
2018-06-11 17:55:54,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-06-11 17:55:54,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-11 17:55:54,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-11 17:55:54,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/commons-codec/commons-codec/1.10
2018-06-11 17:55:54,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.7
2018-06-11 17:55:54,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-11 17:55:54,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-11 17:55:54,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mockito/mockito-core/2.7.19
2018-06-11 17:55:54,683 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/guava/guava/21.0
2018-06-11 17:55:54,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/nanohttpd/nanohttpd/2.3.1
2018-06-11 17:55:54,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-core/3.3.0
2018-06-11 17:55:54,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/net/shibboleth/utilities/java-support/7.3.0
2018-06-11 17:55:54,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-saml-api/3.3.0
2018-06-11 17:55:54,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-saml-impl/3.3.0
2018-06-11 17:55:54,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-soap-api/3.3.0
2018-06-11 17:55:54,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-xmlsec-api/3.3.0
2018-06-11 17:55:54,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-security-api/3.3.0
2018-06-11 17:55:54,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-security-impl/3.3.0
2018-06-11 17:55:54,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-profile-api/3.3.0
2018-06-11 17:55:54,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-profile-impl/3.3.0
2018-06-11 17:55:54,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-messaging-api/3.3.0
2018-06-11 17:55:54,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-messaging-impl/3.3.0
2018-06-11 17:55:54,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-xmlsec-impl/3.3.0
2018-06-11 17:55:54,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/guava/guava/21.0
2018-06-11 17:55:54,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/cryptacular/cryptacular/1.1.0
2018-06-11 17:55:54,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/joda-time/joda-time/2.9.2
2018-06-11 17:55:54,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/xalan/xalan/2.7.2
2018-06-11 17:55:54,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/velocity/velocity/1.7
2018-06-11 17:55:54,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/commons-collections/commons-collections/3.2.2
2018-06-11 17:55:54,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.25
2018-06-11 17:55:54,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-06-11 17:55:54,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-core/4.3.7.RELEASE
2018-06-11 17:55:54,684 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-11 17:55:54,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-11 17:55:54,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-test/4.3.7.RELEASE
2018-06-11 17:55:54,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-web/4.3.7.RELEASE
2018-06-11 17:55:54,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mockito/mockito-core/2.7.19
2018-06-11 17:55:54,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-api-1.0-sdk/1.9.50
2018-06-11 17:55:54,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-jsr107cache/1.9.50
2018-06-11 17:55:54,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/net/sf/jsr107cache/jsr107cache/1.1
2018-06-11 17:55:54,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-06-11 17:55:54,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-11 17:55:54,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-11 17:55:54,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-testing/1.9.50
2018-06-11 17:55:54,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-api-labs/1.9.50
2018-06-11 17:55:54,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-api-stubs/1.9.50
2018-06-11 17:55:54,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/nimbusds/oauth2-oidc-sdk/5.24.2
2018-06-11 17:55:54,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/nimbusds/nimbus-jose-jwt/4.35
2018-06-11 17:55:54,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-11 17:55:54,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-11 17:55:54,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/nimbusds/nimbus-jose-jwt/4.35
2018-06-11 17:55:54,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.56
2018-06-11 17:55:54,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,685 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-11 17:55:54,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-11 17:55:54,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oauth/3.0.0-SNAPSHOT
2018-06-11 17:55:54,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/ldaptive/ldaptive/1.2.1
2018-06-11 17:55:54,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-11 17:55:54,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-11 17:55:54,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/unboundid/unboundid-ldapsdk/3.2.1
2018-06-11 17:55:54,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/jdbi/jdbi/2.78
2018-06-11 17:55:54,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-11 17:55:54,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/security/spring-security-crypto/4.2.2.RELEASE
2018-06-11 17:55:54,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/h2database/h2/1.4.194
2018-06-11 17:55:54,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mongodb/mongo-java-driver/3.4.2
2018-06-11 17:55:54,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-11 17:55:54,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-11 17:55:54,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-06-11 17:55:54,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/de/flapdoodle/embed/de.flapdoodle.embed.mongo/2.0.0
2018-06-11 17:55:54,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/ektorp/org.ektorp/1.4.4
2018-06-11 17:55:54,686 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.3.3
2018-06-11 17:55:54,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/io/bdrc/mcouch-ektorp/1.0.0
2018-06-11 17:55:54,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-11 17:55:54,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-11 17:55:54,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-06-11 17:55:54,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-core/4.3.7.RELEASE
2018-06-11 17:55:54,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-06-11 17:55:54,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-06-11 17:55:54,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-06-11 17:55:54,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mockito/mockito-core/2.7.19
2018-06-11 17:55:54,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-06-11 17:55:54,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/kerby-kdc/1.0.0
2018-06-11 17:55:54,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/kerb-simplekdc/1.0.0
2018-06-11 17:55:54,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/kerb-client/1.0.0
2018-06-11 17:55:54,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/token-provider/1.0.0
2018-06-11 17:55:54,687 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/integration-test/1.0.0
2018-06-11 17:55:54,726 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/eclipse/tycho/org.eclipse.jdt.core/3.13.50.v20171007-0855
2018-06-11 17:55:54,726 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/martiansoftware/jsap/2.1
2018-06-11 17:55:54,726 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/log4j/log4j/1.2.17
2018-06-11 17:55:54,726 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/commons-io/commons-io/2.5
2018-06-11 17:55:54,726 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/maven/maven-model/3.3.9
2018-06-11 17:55:54,726 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/commons/commons-lang3/3.5
2018-06-11 17:55:54,726 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.9.2
[ERROR] Tests run: 6, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.101 s <<< FAILURE! - in spoon.MavenLauncherTest
[ERROR] mavenLauncherTestMultiModulesAndVariables(spoon.MavenLauncherTest)  Time elapsed: 0.04 s  <<< FAILURE!
java.lang.AssertionError: Content of classpath: 
	at spoon.MavenLauncherTest.mavenLauncherTestMultiModulesAndVariables(MavenLauncherTest.java:70)

[ERROR] spoonMavenLauncherTest(spoon.MavenLauncherTest)  Time elapsed: 0.038 s  <<< FAILURE!
java.lang.AssertionError: expected:<10> but was:<0>
	at spoon.MavenLauncherTest.spoonMavenLauncherTest(MavenLauncherTest.java:18)

[INFO] 
[INFO] Results:
[INFO] 
[ERROR] Failures: 
[ERROR]   MavenLauncherTest.mavenLauncherTestMultiModulesAndVariables:70 Content of classpath: 
[ERROR]   MavenLauncherTest.spoonMavenLauncherTest:18 expected:<10> but was:<0>
[ERROR]   CtGenerationTest.testGenerateCtBiScanner:97
[ERROR]   CtGenerationTest.testGenerateRoleHandler:184 ModelRoleHandlers different expected:<...ndler extends spoon.[reflect.meta.impl.SingleHandler<spoon.reflect.code.CtTypeAccess, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypeAccess_ACCESSED_TYPE_RoleHandler() {
            super(CtRole.ACCESSED_TYPE, spoon.reflect.code.CtTypeAccess.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAccessedType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAccessedType(castValue(value));
        }
    }

    static class CtClass_ANNONYMOUS_EXECUTABLE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtClass, spoon.reflect.declaration.CtAnonymousExecutable> {
        private CtClass_ANNONYMOUS_EXECUTABLE_RoleHandler() {
            super(CtRole.ANNONYMOUS_EXECUTABLE, spoon.reflect.declaration.CtClass.class, spoon.reflect.declaration.CtAnonymousExecutable.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAnonymousExecutables())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAnonymousExecutables(castValue(value));
        }
    }

    static class CtElement_ANNOTATION_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtElement, spoon.reflect.declaration.CtAnnotation<? extends java.lang.annotation.Annotation>> {
        private CtElement_ANNOTATION_RoleHandler() {
            super(CtRole.ANNOTATION, spoon.reflect.declaration.CtElement.class, spoon.reflect.declaration.CtAnnotation.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAnnotations())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAnnotations(castValue(value));
        }
    }

    static class CtAnnotation_ANNOTATION_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtAnnotation, spoon.reflect.reference.CtTypeReference<? extends java.lang.annotation.Annotation>> {
        private CtAnnotation_ANNOTATION_TYPE_RoleHandler() {
            super(CtRole.ANNOTATION_TYPE, spoon.reflect.declaration.CtAnnotation.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAnnotationType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAnnotationType(castValue(value));
        }
    }

    static class CtAbstractInvocation_ARGUMENT_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtAbstractInvocation, spoon.reflect.code.CtExpression<?>> {
        private CtAbstractInvocation_ARGUMENT_RoleHandler() {
            super(CtRole.ARGUMENT, spoon.reflect.code.CtAbstractInvocation.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getArguments())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setArguments(castValue(value));
        }
    }

    static class CtExecutableReference_ARGUMENT_TYPE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.reference.CtExecutableReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtExecutableReference_ARGUMENT_TYPE_RoleHandler() {
            super(CtRole.ARGUMENT_TYPE, spoon.reflect.reference.CtExecutableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getParameters())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setParameters(castValue(value));
        }
    }

    static class CtAssignment_ASSIGNED_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtAssignment, spoon.reflect.code.CtExpression<?>> {
        private CtAssignment_ASSIGNED_RoleHandler() {
            super(CtRole.ASSIGNED, spoon.reflect.code.CtAssignment.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAssigned())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAssigned(castValue(value));
        }
    }

    static class CtRHSReceiver_ASSIGNMENT_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtRHSReceiver, spoon.reflect.code.CtExpression<?>> {
        private CtRHSReceiver_ASSIGNMENT_RoleHandler() {
            super(CtRole.ASSIGNMENT, spoon.reflect.code.CtRHSReceiver.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAssignment())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAssignment(castValue(value));
        }
    }

    static class CtBodyHolder_BODY_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtBodyHolder, spoon.reflect.code.CtStatement> {
        private CtBodyHolder_BODY_RoleHandler() {
            super(CtRole.BODY, spoon.reflect.code.CtBodyHolder.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getBody())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setBody(castValue(value));
        }
    }

    static class CtSynchronized_BODY_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtSynchronized, spoon.reflect.code.CtBlock<?>> {
        private CtSynchronized_BODY_RoleHandler() {
            super(CtRole.BODY, spoon.reflect.code.CtSynchronized.class, spoon.reflect.code.CtBlock.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getBlock())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setBlock(castValue(value));
        }
    }

    static class CtIntersectionTypeReference_BOUND_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.reference.CtIntersectionTypeReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtIntersectionTypeReference_BOUND_RoleHandler() {
            super(CtRole.BOUND, spoon.reflect.reference.CtIntersectionTypeReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getBounds())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setBounds(castValue(value));
        }
    }

    static class CtTypeParameterReference_BOUNDING_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtTypeParameterReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypeParameterReference_BOUNDING_TYPE_RoleHandler() {
            super(CtRole.BOUNDING_TYPE, spoon.reflect.reference.CtTypeParameterReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getBoundingType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setBoundingType(castValue(value));
        }
    }

    static class CtSwitch_CASE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtSwitch, spoon.reflect.code.CtCase<?>> {
        private CtSwitch_CASE_RoleHandler() {
            super(CtRole.CASE, spoon.reflect.code.CtSwitch.class, spoon.reflect.code.CtCase.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCases())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCases(castValue(value));
        }
    }

    static class CtExpression_CAST_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtExpression, spoon.reflect.reference.CtTypeReference<?>> {
        private CtExpression_CAST_RoleHandler() {
            super(CtRole.CAST, spoon.reflect.code.CtExpression.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTypeCasts())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTypeCasts(castValue(value));
        }
    }

    static class CtTry_CATCH_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtTry, spoon.reflect.code.CtCatch> {
        private CtTry_CATCH_RoleHandler() {
            super(CtRole.CATCH, spoon.reflect.code.CtTry.class, spoon.reflect.code.CtCatch.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCatchers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCatchers(castValue(value));
        }
    }

    static class CtElement_COMMENT_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtElement, spoon.reflect.code.CtComment> {
        private CtElement_COMMENT_RoleHandler() {
            super(CtRole.COMMENT, spoon.reflect.declaration.CtElement.class, spoon.reflect.code.CtComment.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getComments())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setComments(castValue(value));
        }
    }

    static class CtComment_COMMENT_CONTENT_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtComment, java.lang.String> {
        private CtComment_COMMENT_CONTENT_RoleHandler() {
            super(CtRole.COMMENT_CONTENT, spoon.reflect.code.CtComment.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getContent())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setContent(castValue(value));
        }
    }

    static class CtJavaDocTag_COMMENT_CONTENT_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtJavaDocTag, java.lang.String> {
        private CtJavaDocTag_COMMENT_CONTENT_RoleHandler() {
            super(CtRole.COMMENT_CONTENT, spoon.reflect.code.CtJavaDocTag.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getContent())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setContent(castValue(value));
        }
    }

    static class CtJavaDoc_COMMENT_TAG_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtJavaDoc, spoon.reflect.code.CtJavaDocTag> {
        private CtJavaDoc_COMMENT_TAG_RoleHandler() {
            super(CtRole.COMMENT_TAG, spoon.reflect.code.CtJavaDoc.class, spoon.reflect.code.CtJavaDocTag.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTags())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTags(castValue(value));
        }
    }

    static class CtComment_COMMENT_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtComment, spoon.reflect.code.CtComment.CommentType> {
        private CtComment_COMMENT_TYPE_RoleHandler() {
            super(CtRole.COMMENT_TYPE, spoon.reflect.code.CtComment.class, CtComment.CommentType.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCommentType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCommentType(castValue(value));
        }
    }

    static class CtAssert_CONDITION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtAssert, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtAssert_CONDITION_RoleHandler() {
            super(CtRole.CONDITION, spoon.reflect.code.CtAssert.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAssertExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAssertExpression(castValue(value));
        }
    }

    static class CtConditional_CONDITION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtConditional_CONDITION_RoleHandler() {
            super(CtRole.CONDITION, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCondition())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCondition(castValue(value));
        }
    }

    static class CtIf_CONDITION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtIf, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtIf_CONDITION_RoleHandler() {
            super(CtRole.CONDITION, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCondition())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCondition(castValue(value));
        }
    }

    static class CtClass_CONSTRUCTOR_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtClass, spoon.reflect.declaration.CtConstructor<?>> {
        private CtClass_CONSTRUCTOR_RoleHandler() {
            super(CtRole.CONSTRUCTOR, spoon.reflect.declaration.CtClass.class, spoon.reflect.declaration.CtConstructor.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getConstructors())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setConstructors(castValue(value));
        }
    }

    static class CtPackage_CONTAINED_TYPE_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtPackage, spoon.reflect.declaration.CtType<?>> {
        private CtPackage_CONTAINED_TYPE_RoleHandler() {
            super(CtRole.CONTAINED_TYPE, spoon.reflect.declaration.CtPackage.class, spoon.reflect.declaration.CtType.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTypes(castValue(value));
        }
    }

    static class CtExecutableReference_DECLARING_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtExecutableReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtExecutableReference_DECLARING_TYPE_RoleHandler() {
            super(CtRole.DECLARING_TYPE, spoon.reflect.reference.CtExecutableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDeclaringType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDeclaringType(castValue(value));
        }
    }

    static class CtFieldReference_DECLARING_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtFieldReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtFieldReference_DECLARING_TYPE_RoleHandler() {
            super(CtRole.DECLARING_TYPE, spoon.reflect.reference.CtFieldReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDeclaringType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDeclaringType(castValue(value));
        }
    }

    static class CtTypeReference_DECLARING_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtTypeReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypeReference_DECLARING_TYPE_RoleHandler() {
            super(CtRole.DECLARING_TYPE, spoon.reflect.reference.CtTypeReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDeclaringType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDeclaringType(castValue(value));
        }
    }

    static class CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtAnnotationMethod, spoon.reflect.code.CtExpression<?>> {
        private CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler() {
            super(CtRole.DEFAULT_EXPRESSION, spoon.reflect.declaration.CtAnnotationMethod.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDefaultExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDefaultExpression(castValue(value));
        }
    }

    static class CtVariable_DEFAULT_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtVariable, spoon.reflect.code.CtExpression<?>> {
        private CtVariable_DEFAULT_EXPRESSION_RoleHandler() {
            super(CtRole.DEFAULT_EXPRESSION, spoon.reflect.declaration.CtVariable.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDefaultExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDefaultExpression(castValue(value));
        }
    }

    static class CtNewArray_DIMENSION_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtNewArray, spoon.reflect.code.CtExpression<java.lang.Integer>> {
        private CtNewArray_DIMENSION_RoleHandler() {
            super(CtRole.DIMENSION, spoon.reflect.code.CtNewArray.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDimensionExpressions())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDimensionExpressions(castValue(value));
        }
    }

    static class CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtJavaDocTag, spoon.reflect.code.CtJavaDocTag.TagType> {
        private CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler() {
            super(CtRole.DOCUMENTATION_TYPE, spoon.reflect.code.CtJavaDocTag.class, CtJavaDocTag.TagType.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtConditional_ELSE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression<?>> {
        private CtConditional_ELSE_RoleHandler() {
            super(CtRole.ELSE, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getElseExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setElseExpression(castValue(value));
        }
    }

    static class CtIf_ELSE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtIf, spoon.reflect.code.CtStatement> {
        private CtIf_ELSE_RoleHandler() {
            super(CtRole.ELSE, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getElseStatement())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setElseStatement(castValue(value));
        }
    }

    static class CtAbstractInvocation_EXECUTABLE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtAbstractInvocation, spoon.reflect.reference.CtExecutableReference<?>> {
        private CtAbstractInvocation_EXECUTABLE_REF_RoleHandler() {
            super(CtRole.EXECUTABLE_REF, spoon.reflect.code.CtAbstractInvocation.class, spoon.reflect.reference.CtExecutableReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExecutable())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExecutable(castValue(value));
        }
    }

    static class CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtExecutableReferenceExpression, spoon.reflect.reference.CtExecutableReference<?>> {
        private CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler() {
            super(CtRole.EXECUTABLE_REF, spoon.reflect.code.CtExecutableReferenceExpression.class, spoon.reflect.reference.CtExecutableReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExecutable())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExecutable(castValue(value));
        }
    }

    static class CtModule_EXPORTED_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtPackageExport> {
        private CtModule_EXPORTED_PACKAGE_RoleHandler() {
            super(CtRole.EXPORTED_PACKAGE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtPackageExport.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExportedPackages())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExportedPackages(castValue(value));
        }
    }

    static class CtArrayAccess_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtArrayAccess, spoon.reflect.code.CtExpression<java.lang.Integer>> {
        private CtArrayAccess_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtArrayAccess.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getIndexExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setIndexExpression(castValue(value));
        }
    }

    static class CtAssert_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtAssert, spoon.reflect.code.CtExpression<?>> {
        private CtAssert_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtAssert.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtCase_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtCase, spoon.reflect.code.CtExpression<?>> {
        private CtCase_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtCase.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCaseExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCaseExpression(castValue(value));
        }
    }

    static class CtDo_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtDo, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtDo_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtDo.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getLoopingExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setLoopingExpression(castValue(value));
        }
    }

    static class CtFor_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtFor, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtFor_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtFor.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtForEach_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtForEach, spoon.reflect.code.CtExpression<?>> {
        private CtForEach_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtForEach.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtLambda_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLambda, spoon.reflect.code.CtExpression<?>> {
        private CtLambda_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtLambda.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtNewArray_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtNewArray, spoon.reflect.code.CtExpression<?>> {
        private CtNewArray_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtNewArray.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getElements())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setElements(castValue(value));
        }
    }

    static class CtReturn_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtReturn, spoon.reflect.code.CtExpression<?>> {
        private CtReturn_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtReturn.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getReturnedExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setReturnedExpression(castValue(value));
        }
    }

    static class CtSwitch_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtSwitch, spoon.reflect.code.CtExpression<?>> {
        private CtSwitch_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtSwitch.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSelector())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSelector(castValue(value));
        }
    }

    static class CtSynchronized_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtSynchronized, spoon.reflect.code.CtExpression<?>> {
        private CtSynchronized_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtSynchronized.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtThrow_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtThrow, spoon.reflect.code.CtExpression<? extends java.lang.Throwable>> {
        private CtThrow_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtThrow.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThrownExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThrownExpression(castValue(value));
        }
    }

    static class CtUnaryOperator_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtUnaryOperator, spoon.reflect.code.CtExpression<?>> {
        private CtUnaryOperator_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtUnaryOperator.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getOperand())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setOperand(castValue(value));
        }
    }

    static class CtWhile_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtWhile, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtWhile_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtWhile.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getLoopingExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setLoopingExpression(castValue(value));
        }
    }

    static class CtType_FIELD_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtField<?>> {
        private CtType_FIELD_RoleHandler() {
            super(CtRole.FIELD, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtField.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getFields())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFields(castValue(value));
        }
    }

    static class CtTry_FINALIZER_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtTry, spoon.reflect.code.CtBlock<?>> {
        private CtTry_FINALIZER_RoleHandler() {
            super(CtRole.FINALIZER, spoon.reflect.code.CtTry.class, spoon.reflect.code.CtBlock.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getFinalizer())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFinalizer(castValue(value));
        }
    }

    static class CtForEach_FOREACH_VARIABLE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtForEach, spoon.reflect.code.CtLocalVariable<?>> {
        private CtForEach_FOREACH_VARIABLE_RoleHandler() {
            super(CtRole.FOREACH_VARIABLE, spoon.reflect.code.CtForEach.class, spoon.reflect.code.CtLocalVariable.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getVariable())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setVariable(castValue(value));
        }
    }

    static class CtFor_FOR_INIT_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtFor, spoon.reflect.code.CtStatement> {
        private CtFor_FOR_INIT_RoleHandler() {
            super(CtRole.FOR_INIT, spoon.reflect.code.CtFor.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getForInit())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setForInit(castValue(value));
        }
    }

    static class CtFor_FOR_UPDATE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtFor, spoon.reflect.code.CtStatement> {
        private CtFor_FOR_UPDATE_RoleHandler() {
            super(CtRole.FOR_UPDATE, spoon.reflect.code.CtFor.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getForUpdate())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setForUpdate(castValue(value));
        }
    }

    static class CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtProvidedService, spoon.reflect.reference.CtTypeReference> {
        private CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler() {
            super(CtRole.IMPLEMENTATION_TYPE, spoon.reflect.declaration.CtProvidedService.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getImplementationTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setImplementationTypes(castValue(value));
        }
    }

    static class CtImport_IMPORT_REFERENCE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtImport, spoon.reflect.reference.CtReference> {
        private CtImport_IMPORT_REFERENCE_RoleHandler() {
            super(CtRole.IMPORT_REFERENCE, spoon.reflect.declaration.CtImport.class, spoon.reflect.reference.CtReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getReference())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setReference(castValue(value));
        }
    }

    static class CtType_INTERFACE_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtType, spoon.reflect.reference.CtTypeReference<?>> {
        private CtType_INTERFACE_RoleHandler() {
            super(CtRole.INTERFACE, spoon.reflect.declaration.CtType.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSuperInterfaces())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSuperInterfaces(castValue(value));
        }
    }

    static class CtTypeInformation_INTERFACE_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtTypeInformation, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypeInformation_INTERFACE_RoleHandler() {
            super(CtRole.INTERFACE, spoon.reflect.declaration.CtTypeInformation.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSuperInterfaces())));
        }
    }

    static class CtMethod_IS_DEFAULT_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtMethod, java.lang.Boolean> {
        private CtMethod_IS_DEFAULT_RoleHandler() {
            super(CtRole.IS_DEFAULT, spoon.reflect.declaration.CtMethod.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isDefaultMethod())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDefaultMethod(castValue(value));
        }
    }

    static class CtFieldReference_IS_FINAL_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtFieldReference, java.lang.Boolean> {
        private CtFieldReference_IS_FINAL_RoleHandler() {
            super(CtRole.IS_FINAL, spoon.reflect.reference.CtFieldReference.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isFinal())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFinal(castValue(value));
        }
    }

    static class CtElement_IS_IMPLICIT_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtElement, java.lang.Boolean> {
        private CtElement_IS_IMPLICIT_RoleHandler() {
            super(CtRole.IS_IMPLICIT, spoon.reflect.declaration.CtElement.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isImplicit())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setImplicit(castValue(value));
        }
    }

    static class CtShadowable_IS_SHADOW_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtShadowable, java.lang.Boolean> {
        private CtShadowable_IS_SHADOW_RoleHandler() {
            super(CtRole.IS_SHADOW, spoon.reflect.declaration.CtShadowable.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isShadow())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setShadow(castValue(value));
        }
    }

    static class CtExecutableReference_IS_STATIC_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtExecutableReference, java.lang.Boolean> {
        private CtExecutableReference_IS_STATIC_RoleHandler() {
            super(CtRole.IS_STATIC, spoon.reflect.reference.CtExecutableReference.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isStatic())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setStatic(castValue(value));
        }
    }

    static class CtFieldReference_IS_STATIC_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtFieldReference, java.lang.Boolean> {
        private CtFieldReference_IS_STATIC_RoleHandler() {
            super(CtRole.IS_STATIC, spoon.reflect.reference.CtFieldReference.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isStatic())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setStatic(castValue(value));
        }
    }

    static class CtTypeParameterReference_IS_UPPER_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtTypeParameterReference, java.lang.Boolean> {
        private CtTypeParameterReference_IS_UPPER_RoleHandler() {
            super(CtRole.IS_UPPER, spoon.reflect.reference.CtTypeParameterReference.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isUpper())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setUpper(castValue(value));
        }
    }

    static class CtParameter_IS_VARARGS_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtParameter, java.lang.Boolean> {
        private CtParameter_IS_VARARGS_RoleHandler() {
            super(CtRole.IS_VARARGS, spoon.reflect.declaration.CtParameter.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isVarArgs())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setVarArgs(castValue(value));
        }
    }

    static class CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtJavaDocTag, java.lang.String> {
        private CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler() {
            super(CtRole.JAVADOC_TAG_VALUE, spoon.reflect.code.CtJavaDocTag.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getParam())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setParam(castValue(value));
        }
    }

    static class CtStatement_LABEL_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtStatement, java.lang.String> {
        private CtStatement_LABEL_RoleHandler() {
            super(CtRole.LABEL, spoon.reflect.code.CtStatement.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getLabel())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setLabel(castValue(value));
        }
    }

    static class CtBinaryOperator_LEFT_OPERAND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtBinaryOperator, spoon.reflect.code.CtExpression<?>> {
        private CtBinaryOperator_LEFT_OPERAND_RoleHandler() {
            super(CtRole.LEFT_OPERAND, spoon.reflect.code.CtBinaryOperator.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getLeftHandOperand())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setLeftHandOperand(castValue(value));
        }
    }

    static class CtType_METHOD_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtMethod<?>> {
        private CtType_METHOD_RoleHandler() {
            super(CtRole.METHOD, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtMethod.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getMethods())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setMethods(castValue(value));
        }
    }

    static class CtModifiable_MODIFIER_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtModifiable, spoon.reflect.declaration.ModifierKind> {
        private CtModifiable_MODIFIER_RoleHandler() {
            super(CtRole.MODIFIER, spoon.reflect.declaration.CtModifiable.class, spoon.reflect.declaration.ModifierKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getModifiers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setModifiers(castValue(value));
        }
    }

    static class CtModule_MODIFIER_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtModule, java.lang.Boolean> {
        private CtModule_MODIFIER_RoleHandler() {
            super(CtRole.MODIFIER, spoon.reflect.declaration.CtModule.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isOpenModule())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setIsOpenModule(castValue(value));
        }
    }

    static class CtModuleRequirement_MODIFIER_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtModuleRequirement, spoon.reflect.declaration.CtModuleRequirement.RequiresModifier> {
        private CtModuleRequirement_MODIFIER_RoleHandler() {
            super(CtRole.MODIFIER, spoon.reflect.declaration.CtModuleRequirement.class, CtModuleRequirement.RequiresModifier.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getRequiresModifiers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setRequiresModifiers(castValue(value));
        }
    }

    static class CtTypeInformation_MODIFIER_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtTypeInformation, spoon.reflect.declaration.ModifierKind> {
        private CtTypeInformation_MODIFIER_RoleHandler() {
            super(CtRole.MODIFIER, spoon.reflect.declaration.CtTypeInformation.class, spoon.reflect.declaration.ModifierKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getModifiers())));
        }
    }

    static class CtModule_MODULE_DIRECTIVE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtModuleDirective> {
        private CtModule_MODULE_DIRECTIVE_RoleHandler() {
            super(CtRole.MODULE_DIRECTIVE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtModuleDirective.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getModuleDirectives())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setModuleDirectives(castValue(value));
        }
    }

    static class CtModuleRequirement_MODULE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtModuleRequirement, spoon.reflect.reference.CtModuleReference> {
        private CtModuleRequirement_MODULE_REF_RoleHandler() {
            super(CtRole.MODULE_REF, spoon.reflect.declaration.CtModuleRequirement.class, spoon.reflect.reference.CtModuleReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getModuleReference())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setModuleReference(castValue(value));
        }
    }

    static class CtPackageExport_MODULE_REF_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtPackageExport, spoon.reflect.reference.CtModuleReference> {
        private CtPackageExport_MODULE_REF_RoleHandler() {
            super(CtRole.MODULE_REF, spoon.reflect.declaration.CtPackageExport.class, spoon.reflect.reference.CtModuleReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTargetExport())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTargetExport(castValue(value));
        }
    }

    static class CtMultiTypedElement_MULTI_TYPE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtMultiTypedElement, spoon.reflect.reference.CtTypeReference<?>> {
        private CtMultiTypedElement_MULTI_TYPE_RoleHandler() {
            super(CtRole.MULTI_TYPE, spoon.reflect.declaration.CtMultiTypedElement.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getMultiTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setMultiTypes(castValue(value));
        }
    }

    static class CtNamedElement_NAME_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtNamedElement, java.lang.String> {
        private CtNamedElement_NAME_RoleHandler() {
            super(CtRole.NAME, spoon.reflect.declaration.CtNamedElement.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSimpleName())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSimpleName(castValue(value));
        }
    }

    static class CtReference_NAME_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtReference, java.lang.String> {
        private CtReference_NAME_RoleHandler() {
            super(CtRole.NAME, spoon.reflect.reference.CtReference.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSimpleName())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSimpleName(castValue(value));
        }
    }

    static class CtNewClass_NESTED_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtNewClass, spoon.reflect.declaration.CtClass<?>> {
        private CtNewClass_NESTED_TYPE_RoleHandler() {
            super(CtRole.NESTED_TYPE, spoon.reflect.code.CtNewClass.class, spoon.reflect.declaration.CtClass.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAnonymousClass())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAnonymousClass(castValue(value));
        }
    }

    static class CtType_NESTED_TYPE_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtType<?>> {
        private CtType_NESTED_TYPE_RoleHandler() {
            super(CtRole.NESTED_TYPE, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtType.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getNestedTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setNestedTypes(castValue(value));
        }
    }

    static class CtModule_OPENED_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtPackageExport> {
        private CtModule_OPENED_PACKAGE_RoleHandler() {
            super(CtRole.OPENED_PACKAGE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtPackageExport.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getOpenedPackages())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setOpenedPackages(castValue(value));
        }
    }

    static class CtPackageExport_OPENED_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtPackageExport, java.lang.Boolean> {
        private CtPackageExport_OPENED_PACKAGE_RoleHandler() {
            super(CtRole.OPENED_PACKAGE, spoon.reflect.declaration.CtPackageExport.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isOpenedPackage())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setOpenedPackage(castValue(value));
        }
    }

    static class CtBinaryOperator_OPERATOR_KIND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtBinaryOperator, spoon.reflect.code.BinaryOperatorKind> {
        private CtBinaryOperator_OPERATOR_KIND_RoleHandler() {
            super(CtRole.OPERATOR_KIND, spoon.reflect.code.CtBinaryOperator.class, spoon.reflect.code.BinaryOperatorKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getKind())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setKind(castValue(value));
        }
    }

    static class CtOperatorAssignment_OPERATOR_KIND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtOperatorAssignment, spoon.reflect.code.BinaryOperatorKind> {
        private CtOperatorAssignment_OPERATOR_KIND_RoleHandler() {
            super(CtRole.OPERATOR_KIND, spoon.reflect.code.CtOperatorAssignment.class, spoon.reflect.code.BinaryOperatorKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getKind())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setKind(castValue(value));
        }
    }

    static class CtUnaryOperator_OPERATOR_KIND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtUnaryOperator, spoon.reflect.code.UnaryOperatorKind> {
        private CtUnaryOperator_OPERATOR_KIND_RoleHandler() {
            super(CtRole.OPERATOR_KIND, spoon.reflect.code.CtUnaryOperator.class, spoon.reflect.code.UnaryOperatorKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getKind())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setKind(castValue(value));
        }
    }

    static class CtPackageExport_PACKAGE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtPackageExport, spoon.reflect.reference.CtPackageReference> {
        private CtPackageExport_PACKAGE_REF_RoleHandler() {
            super(CtRole.PACKAGE_REF, spoon.reflect.declaration.CtPackageExport.class, spoon.reflect.reference.CtPackageReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getPackageReference())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setPackageReference(castValue(value));
        }
    }

    static class CtTypeReference_PACKAGE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtTypeReference, spoon.reflect.reference.CtPackageReference> {
        private CtTypeReference_PACKAGE_REF_RoleHandler() {
            super(CtRole.PACKAGE_REF, spoon.reflect.reference.CtTypeReference.class, spoon.reflect.reference.CtPackageReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getPackage())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setPackage(castValue(value));
        }
    }

    static class CtCatch_PARAMETER_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtCatch, spoon.reflect.code.CtCatchVariable<? extends java.lang.Throwable>> {
        private CtCatch_PARAMETER_RoleHandler() {
            super(CtRole.PARAMETER, spoon.reflect.code.CtCatch.class, spoon.reflect.code.CtCatchVariable.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getParameter())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setParameter(castValue(value));
        }
    }

    static class CtExecutable_PARAMETER_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtExecutable, spoon.reflect.declaration.CtParameter<?>> {
        private CtExecutable_PARAMETER_RoleHandler() {
            super(CtRole.PARAMETER, spoon.reflect.declaration.CtExecutable.class, spoon.reflect.declaration.CtParameter.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getParameters())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setParameters(castValue(value));
        }
    }

    static class CtElement_POSITION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtElement, spoon.reflect.cu.SourcePosition> {
        private CtElement_POSITION_RoleHandler() {
            super(CtRole.POSITION, spoon.reflect.declaration.CtElement.class, spoon.reflect.cu.SourcePosition.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getPosition())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setPosition(castValue(value));
        }
    }

    static class CtModule_PROVIDED_SERVICE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtProvidedService> {
        private CtModule_PROVIDED_SERVICE_RoleHandler() {
            super(CtRole.PROVIDED_SERVICE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtProvidedService.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getProvidedServices())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setProvidedServices(castValue(value));
        }
    }

    static class CtModule_REQUIRED_MODULE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtModuleRequirement> {
        private CtModule_REQUIRED_MODULE_RoleHandler() {
            super(CtRole.REQUIRED_MODULE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtModuleRequirement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getRequiredModules())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setRequiredModules(castValue(value));
        }
    }

    static class CtBinaryOperator_RIGHT_OPERAND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtBinaryOperator, spoon.reflect.code.CtExpression<?>> {
        private CtBinaryOperator_RIGHT_OPERAND_RoleHandler() {
            super(CtRole.RIGHT_OPERAND, spoon.reflect.code.CtBinaryOperator.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getRightHandOperand())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setRightHandOperand(castValue(value));
        }
    }

    static class CtModule_SERVICE_TYPE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtUsedService> {
        private CtModule_SERVICE_TYPE_RoleHandler() {
            super(CtRole.SERVICE_TYPE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtUsedService.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getUsedServices())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setUsedServices(castValue(value));
        }
    }

    static class CtProvidedService_SERVICE_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtProvidedService, spoon.reflect.reference.CtTypeReference> {
        private CtProvidedService_SERVICE_TYPE_RoleHandler() {
            super(CtRole.SERVICE_TYPE, spoon.reflect.declaration.CtProvidedService.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getServiceType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setServiceType(castValue(value));
        }
    }

    static class CtUsedService_SERVICE_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtUsedService, spoon.reflect.reference.CtTypeReference> {
        private CtUsedService_SERVICE_TYPE_RoleHandler() {
            super(CtRole.SERVICE_TYPE, spoon.reflect.declaration.CtUsedService.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getServiceType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setServiceType(castValue(value));
        }
    }

    static class CtCodeSnippet_SNIPPET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtCodeSnippet, java.lang.String> {
        private CtCodeSnippet_SNIPPET_RoleHandler() {
            super(CtRole.SNIPPET, spoon.reflect.declaration.CtCodeSnippet.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getValue())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setValue(castValue(value));
        }
    }

    static class CtStatementList_STATEMENT_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtStatementList, spoon.reflect.code.CtStatement> {
        private CtStatementList_STATEMENT_RoleHandler() {
            super(CtRole.STATEMENT, spoon.reflect.code.CtStatementList.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getStatements())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setStatements(castValue(value));
        }
    }

    static class CtModule_SUB_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtPackage> {
        private CtModule_SUB_PACKAGE_RoleHandler() {
            super(CtRole.SUB_PACKAGE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtPackage.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getRootPackage())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setRootPackage(castValue(value));
        }
    }

    static class CtPackage_SUB_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtPackage, spoon.reflect.declaration.CtPackage> {
        private CtPackage_SUB_PACKAGE_RoleHandler() {
            super(CtRole.SUB_PACKAGE, spoon.reflect.declaration.CtPackage.class, spoon.reflect.declaration.CtPackage.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getPackages())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setPackages(castValue(value));
        }
    }

    static class CtType_SUPER_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtType, spoon.reflect.reference.CtTypeReference<?>> {
        private CtType_SUPER_TYPE_RoleHandler() {
            super(CtRole.SUPER_TYPE, spoon.reflect.declaration.CtType.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSuperclass())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSuperclass(castValue(value));
        }
    }

    static class CtTypeInformation_SUPER_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtTypeInformation, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypeInformation_SUPER_TYPE_RoleHandler() {
            super(CtRole.SUPER_TYPE, spoon.reflect.declaration.CtTypeInformation.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSuperclass())));
        }
    }

    static class CtTargetedExpression_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtTargetedExpression, spoon.reflect.code.CtExpression<?>> {
        private CtTargetedExpression_TARGET_RoleHandler() {
            super(CtRole.TARGET, spoon.reflect.code.CtTargetedExpression.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTarget(castValue(value));
        }
    }

    static class CtLabelledFlowBreak_TARGET_LABEL_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLabelledFlowBreak, java.lang.String> {
        private CtLabelledFlowBreak_TARGET_LABEL_RoleHandler() {
            super(CtRole.TARGET_LABEL, spoon.reflect.code.CtLabelledFlowBreak.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTargetLabel())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTargetLabel(castValue(value));
        }
    }

    static class CtConditional_THEN_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression<?>> {
        private CtConditional_THEN_RoleHandler() {
            super(CtRole.THEN, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThenExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThenExpression(castValue(value));
        }
    }

    static class CtIf_THEN_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtIf, spoon.reflect.code.CtStatement> {
        private CtIf_THEN_RoleHandler() {
            super(CtRole.THEN, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThenStatement())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThenStatement(castValue(value));
        }
    }

    static class CtExecutable_THROWN_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtExecutable, spoon.reflect.reference.CtTypeReference<? extends java.lang.Throwable>> {
        private CtExecutable_THROWN_RoleHandler() {
            super(CtRole.THROWN, spoon.reflect.declaration.CtExecutable.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThrownTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThrownTypes(castValue(value));
        }
    }

    static class CtTryWithResource_TRY_RESOURCE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtTryWithResource, spoon.reflect.code.CtLocalVariable<?>> {
        private CtTryWithResource_TRY_RESOURCE_RoleHandler() {
            super(CtRole.TRY_RESOURCE, spoon.reflect.code.CtTryWithResource.class, spoon.reflect.code.CtLocalVariable.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getResources())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setResources(castValue(value));
        }
    }

    static class CtArrayTypeReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtArrayTypeReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtArrayTypeReference_TYPE_RoleHandler() {
            super(CtRole.TYPE, spoon.reflect.reference.CtArrayTypeReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getComponentType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setComponentType(castValue(value));
        }
    }

    static class CtExecutableReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtExecutableReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtExecutableReference_TYPE_RoleHandler() {
            super(CtRole.TYPE, spoon.reflect.reference.CtExecutableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtTypedElement_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtTypedElement, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypedElement_TYPE_RoleHandler() {
            super(CtRole.TYPE, spoon.reflect.declaration.CtTypedElement.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtVariableReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtVariableReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtVariableReference_TYPE_RoleHandler() {
            super(CtRole.TYPE, spoon.reflect.reference.CtVariableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.reference.CtActualTypeContainer, spoon.reflect.reference.CtTypeReference<?>> {
        private CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler() {
            super(CtRole.TYPE_ARGUMENT, spoon.reflect.reference.CtActualTypeContainer.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getActualTypeArguments())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setActualTypeArguments(castValue(value));
        }
    }

    static class CtType_TYPE_MEMBER_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtTypeMember> {
        private CtType_TYPE_MEMBER_RoleHandler() {
            super(CtRole.TYPE_MEMBER, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtTypeMember.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTypeMembers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTypeMembers(castValue(value));
        }
    }

    static class CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtFormalTypeDeclarer, spoon.reflect.declaration.CtTypeParameter> {
        private CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler() {
            super(CtRole.TYPE_PARAMETER, spoon.reflect.declaration.CtFormalTypeDeclarer.class, spoon.reflect.declaration.CtTypeParameter.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getFormalCtTypeParameters())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFormalCtTypeParameters(castValue(value));
        }
    }

    static class CtAnnotation_VALUE_RoleHandler extends spoon.reflect.meta.impl.MapHandler<spoon.reflect.declaration.CtAnnotation, spoon.reflect.code.CtExpression> {
        private CtAnnotation_VALUE_RoleHandler() {
            super(CtRole.VALUE, spoon.reflect.declaration.CtAnnotation.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getValues())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setValues(castValue(value));
        }
    }

    static class CtEnum_VALUE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtEnum, spoon.reflect.declaration.CtEnumValue<?>> {
        private CtEnum_VALUE_RoleHandler() {
            super(CtRole.VALUE, spoon.reflect.declaration.CtEnum.class, spoon.reflect.declaration.CtEnumValue.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getEnumValues())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setEnumValues(castValue(value));
        }
    }

    static class CtLiteral_VALUE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLiteral, java.lang.Object> {
        private CtLiteral_VALUE_RoleHandler() {
            super(CtRole.VALUE, spoon.reflect.code.CtLiteral.class, java.lang.Object.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getValue())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setValue(castValue(value));
        }
    }

    static class CtVariableAccess_VARIABLE_RoleHandler extends ]spoon.reflect.meta.i...> but was:<...ndler extends spoon.[generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtTypeAccess, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypeAccess_ACCESSED_TYPE_RoleHandler() {
            super(CtRole.ACCESSED_TYPE, spoon.reflect.code.CtTypeAccess.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAccessedType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAccessedType(castValue(value));
        }
    }

    static class CtClass_ANNONYMOUS_EXECUTABLE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtClass, spoon.reflect.declaration.CtAnonymousExecutable> {
        private CtClass_ANNONYMOUS_EXECUTABLE_RoleHandler() {
            super(CtRole.ANNONYMOUS_EXECUTABLE, spoon.reflect.declaration.CtClass.class, spoon.reflect.declaration.CtAnonymousExecutable.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAnonymousExecutables())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAnonymousExecutables(castValue(value));
        }
    }

    static class CtElement_ANNOTATION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtElement, spoon.reflect.declaration.CtAnnotation<? extends java.lang.annotation.Annotation>> {
        private CtElement_ANNOTATION_RoleHandler() {
            super(CtRole.ANNOTATION, spoon.reflect.declaration.CtElement.class, spoon.reflect.declaration.CtAnnotation.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAnnotations())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAnnotations(castValue(value));
        }
    }

    static class CtAnnotation_ANNOTATION_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtAnnotation, spoon.reflect.reference.CtTypeReference<? extends java.lang.annotation.Annotation>> {
        private CtAnnotation_ANNOTATION_TYPE_RoleHandler() {
            super(CtRole.ANNOTATION_TYPE, spoon.reflect.declaration.CtAnnotation.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAnnotationType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAnnotationType(castValue(value));
        }
    }

    static class CtAbstractInvocation_ARGUMENT_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtAbstractInvocation, spoon.reflect.code.CtExpression<?>> {
        private CtAbstractInvocation_ARGUMENT_RoleHandler() {
            super(CtRole.ARGUMENT, spoon.reflect.code.CtAbstractInvocation.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getArguments())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setArguments(castValue(value));
        }
    }

    static class CtExecutableReference_ARGUMENT_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.reference.CtExecutableReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtExecutableReference_ARGUMENT_TYPE_RoleHandler() {
            super(CtRole.ARGUMENT_TYPE, spoon.reflect.reference.CtExecutableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getParameters())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setParameters(castValue(value));
        }
    }

    static class CtAssignment_ASSIGNED_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtAssignment, spoon.reflect.code.CtExpression<?>> {
        private CtAssignment_ASSIGNED_RoleHandler() {
            super(CtRole.ASSIGNED, spoon.reflect.code.CtAssignment.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAssigned())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAssigned(castValue(value));
        }
    }

    static class CtRHSReceiver_ASSIGNMENT_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtRHSReceiver, spoon.reflect.code.CtExpression<?>> {
        private CtRHSReceiver_ASSIGNMENT_RoleHandler() {
            super(CtRole.ASSIGNMENT, spoon.reflect.code.CtRHSReceiver.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAssignment())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAssignment(castValue(value));
        }
    }

    static class CtBodyHolder_BODY_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtBodyHolder, spoon.reflect.code.CtStatement> {
        private CtBodyHolder_BODY_RoleHandler() {
            super(CtRole.BODY, spoon.reflect.code.CtBodyHolder.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getBody())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setBody(castValue(value));
        }
    }

    static class CtSynchronized_BODY_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtSynchronized, spoon.reflect.code.CtBlock<? extends java.lang.Object>> {
        private CtSynchronized_BODY_RoleHandler() {
            super(CtRole.BODY, spoon.reflect.code.CtSynchronized.class, spoon.reflect.code.CtBlock.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getBlock())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setBlock(castValue(value));
        }
    }

    static class CtIntersectionTypeReference_BOUND_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.reference.CtIntersectionTypeReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtIntersectionTypeReference_BOUND_RoleHandler() {
            super(CtRole.BOUND, spoon.reflect.reference.CtIntersectionTypeReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getBounds())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setBounds(castValue(value));
        }
    }

    static class CtTypeParameterReference_BOUNDING_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtTypeParameterReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtTypeParameterReference_BOUNDING_TYPE_RoleHandler() {
            super(CtRole.BOUNDING_TYPE, spoon.reflect.reference.CtTypeParameterReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getBoundingType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setBoundingType(castValue(value));
        }
    }

    static class CtSwitch_CASE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtSwitch, spoon.reflect.code.CtCase<?>> {
        private CtSwitch_CASE_RoleHandler() {
            super(CtRole.CASE, spoon.reflect.code.CtSwitch.class, spoon.reflect.code.CtCase.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCases())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCases(castValue(value));
        }
    }

    static class CtExpression_CAST_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtExpression, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtExpression_CAST_RoleHandler() {
            super(CtRole.CAST, spoon.reflect.code.CtExpression.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTypeCasts())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTypeCasts(castValue(value));
        }
    }

    static class CtTry_CATCH_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtTry, spoon.reflect.code.CtCatch> {
        private CtTry_CATCH_RoleHandler() {
            super(CtRole.CATCH, spoon.reflect.code.CtTry.class, spoon.reflect.code.CtCatch.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCatchers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCatchers(castValue(value));
        }
    }

    static class CtElement_COMMENT_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtElement, spoon.reflect.code.CtComment> {
        private CtElement_COMMENT_RoleHandler() {
            super(CtRole.COMMENT, spoon.reflect.declaration.CtElement.class, spoon.reflect.code.CtComment.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getComments())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setComments(castValue(value));
        }
    }

    static class CtComment_COMMENT_CONTENT_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtComment, java.lang.String> {
        private CtComment_COMMENT_CONTENT_RoleHandler() {
            super(CtRole.COMMENT_CONTENT, spoon.reflect.code.CtComment.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getContent())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setContent(castValue(value));
        }
    }

    static class CtJavaDocTag_COMMENT_CONTENT_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtJavaDocTag, java.lang.String> {
        private CtJavaDocTag_COMMENT_CONTENT_RoleHandler() {
            super(CtRole.COMMENT_CONTENT, spoon.reflect.code.CtJavaDocTag.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getContent())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setContent(castValue(value));
        }
    }

    static class CtJavaDoc_COMMENT_TAG_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtJavaDoc, spoon.reflect.code.CtJavaDocTag> {
        private CtJavaDoc_COMMENT_TAG_RoleHandler() {
            super(CtRole.COMMENT_TAG, spoon.reflect.code.CtJavaDoc.class, spoon.reflect.code.CtJavaDocTag.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTags())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTags(castValue(value));
        }
    }

    static class CtComment_COMMENT_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtComment, spoon.reflect.code.CtComment.CommentType> {
        private CtComment_COMMENT_TYPE_RoleHandler() {
            super(CtRole.COMMENT_TYPE, spoon.reflect.code.CtComment.class, CtComment.CommentType.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCommentType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCommentType(castValue(value));
        }
    }

    static class CtAssert_CONDITION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtAssert, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtAssert_CONDITION_RoleHandler() {
            super(CtRole.CONDITION, spoon.reflect.code.CtAssert.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAssertExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAssertExpression(castValue(value));
        }
    }

    static class CtConditional_CONDITION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtConditional_CONDITION_RoleHandler() {
            super(CtRole.CONDITION, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCondition())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCondition(castValue(value));
        }
    }

    static class CtIf_CONDITION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtIf, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtIf_CONDITION_RoleHandler() {
            super(CtRole.CONDITION, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCondition())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCondition(castValue(value));
        }
    }

    static class CtClass_CONSTRUCTOR_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtClass, spoon.reflect.declaration.CtConstructor<?>> {
        private CtClass_CONSTRUCTOR_RoleHandler() {
            super(CtRole.CONSTRUCTOR, spoon.reflect.declaration.CtClass.class, spoon.reflect.declaration.CtConstructor.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getConstructors())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setConstructors(castValue(value));
        }
    }

    static class CtPackage_CONTAINED_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtPackage, spoon.reflect.declaration.CtType<? extends java.lang.Object>> {
        private CtPackage_CONTAINED_TYPE_RoleHandler() {
            super(CtRole.CONTAINED_TYPE, spoon.reflect.declaration.CtPackage.class, spoon.reflect.declaration.CtType.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTypes(castValue(value));
        }
    }

    static class CtExecutableReference_DECLARING_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtExecutableReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtExecutableReference_DECLARING_TYPE_RoleHandler() {
            super(CtRole.DECLARING_TYPE, spoon.reflect.reference.CtExecutableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDeclaringType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDeclaringType(castValue(value));
        }
    }

    static class CtFieldReference_DECLARING_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtFieldReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtFieldReference_DECLARING_TYPE_RoleHandler() {
            super(CtRole.DECLARING_TYPE, spoon.reflect.reference.CtFieldReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDeclaringType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDeclaringType(castValue(value));
        }
    }

    static class CtTypeReference_DECLARING_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtTypeReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtTypeReference_DECLARING_TYPE_RoleHandler() {
            super(CtRole.DECLARING_TYPE, spoon.reflect.reference.CtTypeReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDeclaringType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDeclaringType(castValue(value));
        }
    }

    static class CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtAnnotationMethod, spoon.reflect.code.CtExpression<?>> {
        private CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler() {
            super(CtRole.DEFAULT_EXPRESSION, spoon.reflect.declaration.CtAnnotationMethod.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDefaultExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDefaultExpression(castValue(value));
        }
    }

    static class CtVariable_DEFAULT_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtVariable, spoon.reflect.code.CtExpression<?>> {
        private CtVariable_DEFAULT_EXPRESSION_RoleHandler() {
            super(CtRole.DEFAULT_EXPRESSION, spoon.reflect.declaration.CtVariable.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDefaultExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDefaultExpression(castValue(value));
        }
    }

    static class CtNewArray_DIMENSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtNewArray, spoon.reflect.code.CtExpression<java.lang.Integer>> {
        private CtNewArray_DIMENSION_RoleHandler() {
            super(CtRole.DIMENSION, spoon.reflect.code.CtNewArray.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDimensionExpressions())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDimensionExpressions(castValue(value));
        }
    }

    static class CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtJavaDocTag, spoon.reflect.code.CtJavaDocTag.TagType> {
        private CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler() {
            super(CtRole.DOCUMENTATION_TYPE, spoon.reflect.code.CtJavaDocTag.class, CtJavaDocTag.TagType.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtConditional_ELSE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression<?>> {
        private CtConditional_ELSE_RoleHandler() {
            super(CtRole.ELSE, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getElseExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setElseExpression(castValue(value));
        }
    }

    static class CtIf_ELSE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtIf, spoon.reflect.code.CtStatement> {
        private CtIf_ELSE_RoleHandler() {
            super(CtRole.ELSE, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getElseStatement())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setElseStatement(castValue(value));
        }
    }

    static class CtAbstractInvocation_EXECUTABLE_REF_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtAbstractInvocation, spoon.reflect.reference.CtExecutableReference<?>> {
        private CtAbstractInvocation_EXECUTABLE_REF_RoleHandler() {
            super(CtRole.EXECUTABLE_REF, spoon.reflect.code.CtAbstractInvocation.class, spoon.reflect.reference.CtExecutableReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExecutable())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExecutable(castValue(value));
        }
    }

    static class CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtExecutableReferenceExpression, spoon.reflect.reference.CtExecutableReference<?>> {
        private CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler() {
            super(CtRole.EXECUTABLE_REF, spoon.reflect.code.CtExecutableReferenceExpression.class, spoon.reflect.reference.CtExecutableReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExecutable())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExecutable(castValue(value));
        }
    }

    static class CtModule_EXPORTED_PACKAGE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtPackageExport> {
        private CtModule_EXPORTED_PACKAGE_RoleHandler() {
            super(CtRole.EXPORTED_PACKAGE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtPackageExport.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExportedPackages())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExportedPackages(castValue(value));
        }
    }

    static class CtArrayAccess_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtArrayAccess, spoon.reflect.code.CtExpression<java.lang.Integer>> {
        private CtArrayAccess_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtArrayAccess.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getIndexExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setIndexExpression(castValue(value));
        }
    }

    static class CtAssert_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtAssert, spoon.reflect.code.CtExpression<?>> {
        private CtAssert_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtAssert.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtCase_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtCase, spoon.reflect.code.CtExpression<?>> {
        private CtCase_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtCase.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCaseExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCaseExpression(castValue(value));
        }
    }

    static class CtDo_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtDo, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtDo_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtDo.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getLoopingExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setLoopingExpression(castValue(value));
        }
    }

    static class CtFor_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtFor, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtFor_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtFor.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtForEach_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtForEach, spoon.reflect.code.CtExpression<? extends java.lang.Object>> {
        private CtForEach_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtForEach.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtLambda_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLambda, spoon.reflect.code.CtExpression<?>> {
        private CtLambda_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtLambda.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtNewArray_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtNewArray, spoon.reflect.code.CtExpression<? extends java.lang.Object>> {
        private CtNewArray_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtNewArray.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getElements())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setElements(castValue(value));
        }
    }

    static class CtReturn_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtReturn, spoon.reflect.code.CtExpression<?>> {
        private CtReturn_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtReturn.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getReturnedExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setReturnedExpression(castValue(value));
        }
    }

    static class CtSwitch_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtSwitch, spoon.reflect.code.CtExpression<?>> {
        private CtSwitch_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtSwitch.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSelector())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSelector(castValue(value));
        }
    }

    static class CtSynchronized_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtSynchronized, spoon.reflect.code.CtExpression<? extends java.lang.Object>> {
        private CtSynchronized_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtSynchronized.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtThrow_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtThrow, spoon.reflect.code.CtExpression<? extends java.lang.Throwable>> {
        private CtThrow_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtThrow.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThrownExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThrownExpression(castValue(value));
        }
    }

    static class CtUnaryOperator_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtUnaryOperator, spoon.reflect.code.CtExpression<?>> {
        private CtUnaryOperator_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtUnaryOperator.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getOperand())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setOperand(castValue(value));
        }
    }

    static class CtWhile_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtWhile, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtWhile_EXPRESSION_RoleHandler() {
            super(CtRole.EXPRESSION, spoon.reflect.code.CtWhile.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getLoopingExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setLoopingExpression(castValue(value));
        }
    }

    static class CtType_FIELD_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtField<? extends java.lang.Object>> {
        private CtType_FIELD_RoleHandler() {
            super(CtRole.FIELD, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtField.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getFields())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFields(castValue(value));
        }
    }

    static class CtTry_FINALIZER_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtTry, spoon.reflect.code.CtBlock<? extends java.lang.Object>> {
        private CtTry_FINALIZER_RoleHandler() {
            super(CtRole.FINALIZER, spoon.reflect.code.CtTry.class, spoon.reflect.code.CtBlock.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getFinalizer())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFinalizer(castValue(value));
        }
    }

    static class CtForEach_FOREACH_VARIABLE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtForEach, spoon.reflect.code.CtLocalVariable<? extends java.lang.Object>> {
        private CtForEach_FOREACH_VARIABLE_RoleHandler() {
            super(CtRole.FOREACH_VARIABLE, spoon.reflect.code.CtForEach.class, spoon.reflect.code.CtLocalVariable.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getVariable())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setVariable(castValue(value));
        }
    }

    static class CtFor_FOR_INIT_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtFor, spoon.reflect.code.CtStatement> {
        private CtFor_FOR_INIT_RoleHandler() {
            super(CtRole.FOR_INIT, spoon.reflect.code.CtFor.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getForInit())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setForInit(castValue(value));
        }
    }

    static class CtFor_FOR_UPDATE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtFor, spoon.reflect.code.CtStatement> {
        private CtFor_FOR_UPDATE_RoleHandler() {
            super(CtRole.FOR_UPDATE, spoon.reflect.code.CtFor.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getForUpdate())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setForUpdate(castValue(value));
        }
    }

    static class CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtProvidedService, spoon.reflect.reference.CtTypeReference> {
        private CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler() {
            super(CtRole.IMPLEMENTATION_TYPE, spoon.reflect.declaration.CtProvidedService.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getImplementationTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setImplementationTypes(castValue(value));
        }
    }

    static class CtImport_IMPORT_REFERENCE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtImport, spoon.reflect.reference.CtReference> {
        private CtImport_IMPORT_REFERENCE_RoleHandler() {
            super(CtRole.IMPORT_REFERENCE, spoon.reflect.declaration.CtImport.class, spoon.reflect.reference.CtReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getReference())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setReference(castValue(value));
        }
    }

    static class CtType_INTERFACE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtType, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtType_INTERFACE_RoleHandler() {
            super(CtRole.INTERFACE, spoon.reflect.declaration.CtType.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSuperInterfaces())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSuperInterfaces(castValue(value));
        }
    }

    static class CtTypeInformation_INTERFACE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtTypeInformation, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypeInformation_INTERFACE_RoleHandler() {
            super(CtRole.INTERFACE, spoon.reflect.declaration.CtTypeInformation.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSuperInterfaces())));
        }
    }

    static class CtMethod_IS_DEFAULT_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtMethod, java.lang.Boolean> {
        private CtMethod_IS_DEFAULT_RoleHandler() {
            super(CtRole.IS_DEFAULT, spoon.reflect.declaration.CtMethod.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isDefaultMethod())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDefaultMethod(castValue(value));
        }
    }

    static class CtFieldReference_IS_FINAL_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtFieldReference, java.lang.Boolean> {
        private CtFieldReference_IS_FINAL_RoleHandler() {
            super(CtRole.IS_FINAL, spoon.reflect.reference.CtFieldReference.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isFinal())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFinal(castValue(value));
        }
    }

    static class CtElement_IS_IMPLICIT_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtElement, java.lang.Boolean> {
        private CtElement_IS_IMPLICIT_RoleHandler() {
            super(CtRole.IS_IMPLICIT, spoon.reflect.declaration.CtElement.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isImplicit())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setImplicit(castValue(value));
        }
    }

    static class CtShadowable_IS_SHADOW_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtShadowable, java.lang.Boolean> {
        private CtShadowable_IS_SHADOW_RoleHandler() {
            super(CtRole.IS_SHADOW, spoon.reflect.declaration.CtShadowable.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isShadow())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setShadow(castValue(value));
        }
    }

    static class CtExecutableReference_IS_STATIC_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtExecutableReference, java.lang.Boolean> {
        private CtExecutableReference_IS_STATIC_RoleHandler() {
            super(CtRole.IS_STATIC, spoon.reflect.reference.CtExecutableReference.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isStatic())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setStatic(castValue(value));
        }
    }

    static class CtFieldReference_IS_STATIC_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtFieldReference, java.lang.Boolean> {
        private CtFieldReference_IS_STATIC_RoleHandler() {
            super(CtRole.IS_STATIC, spoon.reflect.reference.CtFieldReference.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isStatic())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setStatic(castValue(value));
        }
    }

    static class CtTypeParameterReference_IS_UPPER_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtTypeParameterReference, java.lang.Boolean> {
        private CtTypeParameterReference_IS_UPPER_RoleHandler() {
            super(CtRole.IS_UPPER, spoon.reflect.reference.CtTypeParameterReference.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isUpper())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setUpper(castValue(value));
        }
    }

    static class CtParameter_IS_VARARGS_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtParameter, java.lang.Boolean> {
        private CtParameter_IS_VARARGS_RoleHandler() {
            super(CtRole.IS_VARARGS, spoon.reflect.declaration.CtParameter.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isVarArgs())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setVarArgs(castValue(value));
        }
    }

    static class CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtJavaDocTag, java.lang.String> {
        private CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler() {
            super(CtRole.JAVADOC_TAG_VALUE, spoon.reflect.code.CtJavaDocTag.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getParam())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setParam(castValue(value));
        }
    }

    static class CtStatement_LABEL_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtStatement, java.lang.String> {
        private CtStatement_LABEL_RoleHandler() {
            super(CtRole.LABEL, spoon.reflect.code.CtStatement.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getLabel())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setLabel(castValue(value));
        }
    }

    static class CtBinaryOperator_LEFT_OPERAND_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtBinaryOperator, spoon.reflect.code.CtExpression<? extends java.lang.Object>> {
        private CtBinaryOperator_LEFT_OPERAND_RoleHandler() {
            super(CtRole.LEFT_OPERAND, spoon.reflect.code.CtBinaryOperator.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getLeftHandOperand())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setLeftHandOperand(castValue(value));
        }
    }

    static class CtType_METHOD_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtMethod<? extends java.lang.Object>> {
        private CtType_METHOD_RoleHandler() {
            super(CtRole.METHOD, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtMethod.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getMethods())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setMethods(castValue(value));
        }
    }

    static class CtModifiable_MODIFIER_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtModifiable, spoon.reflect.declaration.ModifierKind> {
        private CtModifiable_MODIFIER_RoleHandler() {
            super(CtRole.MODIFIER, spoon.reflect.declaration.CtModifiable.class, spoon.reflect.declaration.ModifierKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getModifiers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setModifiers(castValue(value));
        }
    }

    static class CtModule_MODIFIER_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtModule, java.lang.Boolean> {
        private CtModule_MODIFIER_RoleHandler() {
            super(CtRole.MODIFIER, spoon.reflect.declaration.CtModule.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isOpenModule())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setIsOpenModule(castValue(value));
        }
    }

    static class CtModuleRequirement_MODIFIER_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtModuleRequirement, spoon.reflect.declaration.CtModuleRequirement.RequiresModifier> {
        private CtModuleRequirement_MODIFIER_RoleHandler() {
            super(CtRole.MODIFIER, spoon.reflect.declaration.CtModuleRequirement.class, CtModuleRequirement.RequiresModifier.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getRequiresModifiers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setRequiresModifiers(castValue(value));
        }
    }

    static class CtTypeInformation_MODIFIER_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtTypeInformation, spoon.reflect.declaration.ModifierKind> {
        private CtTypeInformation_MODIFIER_RoleHandler() {
            super(CtRole.MODIFIER, spoon.reflect.declaration.CtTypeInformation.class, spoon.reflect.declaration.ModifierKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getModifiers())));
        }
    }

    static class CtModule_MODULE_DIRECTIVE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtModuleDirective> {
        private CtModule_MODULE_DIRECTIVE_RoleHandler() {
            super(CtRole.MODULE_DIRECTIVE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtModuleDirective.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getModuleDirectives())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setModuleDirectives(castValue(value));
        }
    }

    static class CtModuleRequirement_MODULE_REF_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtModuleRequirement, spoon.reflect.reference.CtModuleReference> {
        private CtModuleRequirement_MODULE_REF_RoleHandler() {
            super(CtRole.MODULE_REF, spoon.reflect.declaration.CtModuleRequirement.class, spoon.reflect.reference.CtModuleReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getModuleReference())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setModuleReference(castValue(value));
        }
    }

    static class CtPackageExport_MODULE_REF_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtPackageExport, spoon.reflect.reference.CtModuleReference> {
        private CtPackageExport_MODULE_REF_RoleHandler() {
            super(CtRole.MODULE_REF, spoon.reflect.declaration.CtPackageExport.class, spoon.reflect.reference.CtModuleReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTargetExport())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTargetExport(castValue(value));
        }
    }

    static class CtMultiTypedElement_MULTI_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtMultiTypedElement, spoon.reflect.reference.CtTypeReference<?>> {
        private CtMultiTypedElement_MULTI_TYPE_RoleHandler() {
            super(CtRole.MULTI_TYPE, spoon.reflect.declaration.CtMultiTypedElement.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getMultiTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setMultiTypes(castValue(value));
        }
    }

    static class CtNamedElement_NAME_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtNamedElement, java.lang.String> {
        private CtNamedElement_NAME_RoleHandler() {
            super(CtRole.NAME, spoon.reflect.declaration.CtNamedElement.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSimpleName())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSimpleName(castValue(value));
        }
    }

    static class CtReference_NAME_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtReference, java.lang.String> {
        private CtReference_NAME_RoleHandler() {
            super(CtRole.NAME, spoon.reflect.reference.CtReference.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSimpleName())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSimpleName(castValue(value));
        }
    }

    static class CtNewClass_NESTED_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtNewClass, spoon.reflect.declaration.CtClass<? extends java.lang.Object>> {
        private CtNewClass_NESTED_TYPE_RoleHandler() {
            super(CtRole.NESTED_TYPE, spoon.reflect.code.CtNewClass.class, spoon.reflect.declaration.CtClass.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAnonymousClass())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAnonymousClass(castValue(value));
        }
    }

    static class CtType_NESTED_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtType<? extends java.lang.Object>> {
        private CtType_NESTED_TYPE_RoleHandler() {
            super(CtRole.NESTED_TYPE, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtType.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getNestedTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setNestedTypes(castValue(value));
        }
    }

    static class CtModule_OPENED_PACKAGE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtPackageExport> {
        private CtModule_OPENED_PACKAGE_RoleHandler() {
            super(CtRole.OPENED_PACKAGE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtPackageExport.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getOpenedPackages())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setOpenedPackages(castValue(value));
        }
    }

    static class CtPackageExport_OPENED_PACKAGE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtPackageExport, java.lang.Boolean> {
        private CtPackageExport_OPENED_PACKAGE_RoleHandler() {
            super(CtRole.OPENED_PACKAGE, spoon.reflect.declaration.CtPackageExport.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isOpenedPackage())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setOpenedPackage(castValue(value));
        }
    }

    static class CtBinaryOperator_OPERATOR_KIND_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtBinaryOperator, spoon.reflect.code.BinaryOperatorKind> {
        private CtBinaryOperator_OPERATOR_KIND_RoleHandler() {
            super(CtRole.OPERATOR_KIND, spoon.reflect.code.CtBinaryOperator.class, spoon.reflect.code.BinaryOperatorKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getKind())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setKind(castValue(value));
        }
    }

    static class CtOperatorAssignment_OPERATOR_KIND_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtOperatorAssignment, spoon.reflect.code.BinaryOperatorKind> {
        private CtOperatorAssignment_OPERATOR_KIND_RoleHandler() {
            super(CtRole.OPERATOR_KIND, spoon.reflect.code.CtOperatorAssignment.class, spoon.reflect.code.BinaryOperatorKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getKind())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setKind(castValue(value));
        }
    }

    static class CtUnaryOperator_OPERATOR_KIND_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtUnaryOperator, spoon.reflect.code.UnaryOperatorKind> {
        private CtUnaryOperator_OPERATOR_KIND_RoleHandler() {
            super(CtRole.OPERATOR_KIND, spoon.reflect.code.CtUnaryOperator.class, spoon.reflect.code.UnaryOperatorKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getKind())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setKind(castValue(value));
        }
    }

    static class CtPackageExport_PACKAGE_REF_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtPackageExport, spoon.reflect.reference.CtPackageReference> {
        private CtPackageExport_PACKAGE_REF_RoleHandler() {
            super(CtRole.PACKAGE_REF, spoon.reflect.declaration.CtPackageExport.class, spoon.reflect.reference.CtPackageReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getPackageReference())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setPackageReference(castValue(value));
        }
    }

    static class CtTypeReference_PACKAGE_REF_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtTypeReference, spoon.reflect.reference.CtPackageReference> {
        private CtTypeReference_PACKAGE_REF_RoleHandler() {
            super(CtRole.PACKAGE_REF, spoon.reflect.reference.CtTypeReference.class, spoon.reflect.reference.CtPackageReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getPackage())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setPackage(castValue(value));
        }
    }

    static class CtCatch_PARAMETER_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtCatch, spoon.reflect.code.CtCatchVariable<? extends java.lang.Throwable>> {
        private CtCatch_PARAMETER_RoleHandler() {
            super(CtRole.PARAMETER, spoon.reflect.code.CtCatch.class, spoon.reflect.code.CtCatchVariable.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getParameter())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setParameter(castValue(value));
        }
    }

    static class CtExecutable_PARAMETER_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtExecutable, spoon.reflect.declaration.CtParameter<? extends java.lang.Object>> {
        private CtExecutable_PARAMETER_RoleHandler() {
            super(CtRole.PARAMETER, spoon.reflect.declaration.CtExecutable.class, spoon.reflect.declaration.CtParameter.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getParameters())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setParameters(castValue(value));
        }
    }

    static class CtElement_POSITION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtElement, spoon.reflect.cu.SourcePosition> {
        private CtElement_POSITION_RoleHandler() {
            super(CtRole.POSITION, spoon.reflect.declaration.CtElement.class, spoon.reflect.cu.SourcePosition.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getPosition())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setPosition(castValue(value));
        }
    }

    static class CtModule_PROVIDED_SERVICE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtProvidedService> {
        private CtModule_PROVIDED_SERVICE_RoleHandler() {
            super(CtRole.PROVIDED_SERVICE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtProvidedService.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getProvidedServices())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setProvidedServices(castValue(value));
        }
    }

    static class CtModule_REQUIRED_MODULE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtModuleRequirement> {
        private CtModule_REQUIRED_MODULE_RoleHandler() {
            super(CtRole.REQUIRED_MODULE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtModuleRequirement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getRequiredModules())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setRequiredModules(castValue(value));
        }
    }

    static class CtBinaryOperator_RIGHT_OPERAND_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtBinaryOperator, spoon.reflect.code.CtExpression<? extends java.lang.Object>> {
        private CtBinaryOperator_RIGHT_OPERAND_RoleHandler() {
            super(CtRole.RIGHT_OPERAND, spoon.reflect.code.CtBinaryOperator.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getRightHandOperand())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setRightHandOperand(castValue(value));
        }
    }

    static class CtModule_SERVICE_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtUsedService> {
        private CtModule_SERVICE_TYPE_RoleHandler() {
            super(CtRole.SERVICE_TYPE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtUsedService.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getUsedServices())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setUsedServices(castValue(value));
        }
    }

    static class CtProvidedService_SERVICE_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtProvidedService, spoon.reflect.reference.CtTypeReference> {
        private CtProvidedService_SERVICE_TYPE_RoleHandler() {
            super(CtRole.SERVICE_TYPE, spoon.reflect.declaration.CtProvidedService.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getServiceType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setServiceType(castValue(value));
        }
    }

    static class CtUsedService_SERVICE_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtUsedService, spoon.reflect.reference.CtTypeReference> {
        private CtUsedService_SERVICE_TYPE_RoleHandler() {
            super(CtRole.SERVICE_TYPE, spoon.reflect.declaration.CtUsedService.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getServiceType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setServiceType(castValue(value));
        }
    }

    static class CtCodeSnippet_SNIPPET_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtCodeSnippet, java.lang.String> {
        private CtCodeSnippet_SNIPPET_RoleHandler() {
            super(CtRole.SNIPPET, spoon.reflect.declaration.CtCodeSnippet.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getValue())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setValue(castValue(value));
        }
    }

    static class CtStatementList_STATEMENT_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtStatementList, spoon.reflect.code.CtStatement> {
        private CtStatementList_STATEMENT_RoleHandler() {
            super(CtRole.STATEMENT, spoon.reflect.code.CtStatementList.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getStatements())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setStatements(castValue(value));
        }
    }

    static class CtModule_SUB_PACKAGE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtPackage> {
        private CtModule_SUB_PACKAGE_RoleHandler() {
            super(CtRole.SUB_PACKAGE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtPackage.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getRootPackage())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setRootPackage(castValue(value));
        }
    }

    static class CtPackage_SUB_PACKAGE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtPackage, spoon.reflect.declaration.CtPackage> {
        private CtPackage_SUB_PACKAGE_RoleHandler() {
            super(CtRole.SUB_PACKAGE, spoon.reflect.declaration.CtPackage.class, spoon.reflect.declaration.CtPackage.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getPackages())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setPackages(castValue(value));
        }
    }

    static class CtType_SUPER_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtType, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtType_SUPER_TYPE_RoleHandler() {
            super(CtRole.SUPER_TYPE, spoon.reflect.declaration.CtType.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSuperclass())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSuperclass(castValue(value));
        }
    }

    static class CtTypeInformation_SUPER_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtTypeInformation, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypeInformation_SUPER_TYPE_RoleHandler() {
            super(CtRole.SUPER_TYPE, spoon.reflect.declaration.CtTypeInformation.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSuperclass())));
        }
    }

    static class CtTargetedExpression_TARGET_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtTargetedExpression, spoon.reflect.code.CtExpression<?>> {
        private CtTargetedExpression_TARGET_RoleHandler() {
            super(CtRole.TARGET, spoon.reflect.code.CtTargetedExpression.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTarget(castValue(value));
        }
    }

    static class CtLabelledFlowBreak_TARGET_LABEL_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLabelledFlowBreak, java.lang.String> {
        private CtLabelledFlowBreak_TARGET_LABEL_RoleHandler() {
            super(CtRole.TARGET_LABEL, spoon.reflect.code.CtLabelledFlowBreak.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTargetLabel())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTargetLabel(castValue(value));
        }
    }

    static class CtConditional_THEN_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression<?>> {
        private CtConditional_THEN_RoleHandler() {
            super(CtRole.THEN, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThenExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThenExpression(castValue(value));
        }
    }

    static class CtIf_THEN_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtIf, spoon.reflect.code.CtStatement> {
        private CtIf_THEN_RoleHandler() {
            super(CtRole.THEN, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThenStatement())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThenStatement(castValue(value));
        }
    }

    static class CtExecutable_THROWN_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtExecutable, spoon.reflect.reference.CtTypeReference<? extends java.lang.Throwable>> {
        private CtExecutable_THROWN_RoleHandler() {
            super(CtRole.THROWN, spoon.reflect.declaration.CtExecutable.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThrownTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThrownTypes(castValue(value));
        }
    }

    static class CtTryWithResource_TRY_RESOURCE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtTryWithResource, spoon.reflect.code.CtLocalVariable<? extends java.lang.Object>> {
        private CtTryWithResource_TRY_RESOURCE_RoleHandler() {
            super(CtRole.TRY_RESOURCE, spoon.reflect.code.CtTryWithResource.class, spoon.reflect.code.CtLocalVariable.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getResources())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setResources(castValue(value));
        }
    }

    static class CtArrayTypeReference_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtArrayTypeReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtArrayTypeReference_TYPE_RoleHandler() {
            super(CtRole.TYPE, spoon.reflect.reference.CtArrayTypeReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getComponentType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setComponentType(castValue(value));
        }
    }

    static class CtExecutableReference_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtExecutableReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtExecutableReference_TYPE_RoleHandler() {
            super(CtRole.TYPE, spoon.reflect.reference.CtExecutableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtTypedElement_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtTypedElement, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypedElement_TYPE_RoleHandler() {
            super(CtRole.TYPE, spoon.reflect.declaration.CtTypedElement.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtVariableReference_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtVariableReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtVariableReference_TYPE_RoleHandler() {
            super(CtRole.TYPE, spoon.reflect.reference.CtVariableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.reference.CtActualTypeContainer, spoon.reflect.reference.CtTypeReference<?>> {
        private CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler() {
            super(CtRole.TYPE_ARGUMENT, spoon.reflect.reference.CtActualTypeContainer.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getActualTypeArguments())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setActualTypeArguments(castValue(value));
        }
    }

    static class CtType_TYPE_MEMBER_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtTypeMember> {
        private CtType_TYPE_MEMBER_RoleHandler() {
            super(CtRole.TYPE_MEMBER, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtTypeMember.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTypeMembers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTypeMembers(castValue(value));
        }
    }

    static class CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtFormalTypeDeclarer, spoon.reflect.declaration.CtTypeParameter> {
        private CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler() {
            super(CtRole.TYPE_PARAMETER, spoon.reflect.declaration.CtFormalTypeDeclarer.class, spoon.reflect.declaration.CtTypeParameter.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getFormalCtTypeParameters())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFormalCtTypeParameters(castValue(value));
        }
    }

    static class CtAnnotation_VALUE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.MapHandler<spoon.reflect.declaration.CtAnnotation, spoon.reflect.code.CtExpression> {
        private CtAnnotation_VALUE_RoleHandler() {
            super(CtRole.VALUE, spoon.reflect.declaration.CtAnnotation.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getValues())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setValues(castValue(value));
        }
    }

    static class CtEnum_VALUE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtEnum, spoon.reflect.declaration.CtEnumValue<? extends java.lang.Object>> {
        private CtEnum_VALUE_RoleHandler() {
            super(CtRole.VALUE, spoon.reflect.declaration.CtEnum.class, spoon.reflect.declaration.CtEnumValue.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getEnumValues())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setEnumValues(castValue(value));
        }
    }

    static class CtLiteral_VALUE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLiteral, java.lang.Object> {
        private CtLiteral_VALUE_RoleHandler() {
            super(CtRole.VALUE, spoon.reflect.code.CtLiteral.class, java.lang.Object.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getValue())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setValue(castValue(value));
        }
    }

    static class CtVariableAccess_VARIABLE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.]spoon.reflect.meta.i...>
[ERROR]   APITest.testSetterInNodes:415 Check the number of if in method setIndexExpression(spoon.reflect.code.CtExpression) in the declaring class spoon.support.reflect.code.CtArrayAccessImpl expected:<1> but was:<0>
[ERROR]   PackageTest.testAddAnnotationToPackage:254 Can't compile package-info.java because The import spoon.test.annotation cannot be resolved at /root/workspace/INRIA/spoon/390834297/target/spoon-packageinfo/spoon/test/pkg/testclasses/package-info.java:5
[ERROR]   PatternTest.testMatchSample1:1262 expected:<2> but was:<0>
[ERROR]   PatternTest.testPatternToString:1161 expected:<... CtForEach
        /[expression/ <= ${getIterable}
        /foreachVariable/ <= ${item}
     */
    for (/* CtLocalVariable
        / <= ${item}
     */
    java.lang.Object item : /* CtInvocation
        / <= ${getIterable}
     */
    getIterable()) /* CtBlock
        /statement/ <= ${statements}
     */
    {
        lp.printSeparatorIfAppropriate();
        /* CtInvocation
            / <= ${statements}
         */
        statements]();
    }
}
> but was:<... CtForEach
        /[foreachVariable/ <= ${item}
     */
    for (/* CtLocalVariable
        / <= ${item}
     */
    java.lang.Object item : /* CtInvocation
        /target/ <= ${getIterable}
     */
    /* CtInvocation
        / <= ${getIterable}
     */
    getIterable().S()) {
        lp.printSeparatorIfAppropriate();
        /* CtInvocation
            /target/ <= ${statements}
         */
        /* CtInvocation
            / <= ${statements}
         */
        statements().S]();
    }
}
>
[ERROR]   TemplateTest.substituteTypeAccessReference:1130 Can't compile testclasses because spoon.template cannot be resolved to a type at /root/workspace/INRIA/spoon/390834297/target/spooned/test/template/testclasses/spoon/test/template/testclasses/TypeReferenceClassAccessTemplate.java:4
[ERROR]   TemplateTest.testTemplateMatcher:438 expected:<2> but was:<0>
[ERROR]   TemplateTest.testTemplateMatcherWithWholePackage:690 expected:<1> but was:<0>
[ERROR] Errors: 
[ERROR]   LauncherTest.testLauncherInEmptyWorkingDir:91 » ModelBuilding The import org.j...
[ERROR]   ProcessingTest.testInterruptAProcessor:40 » ModelBuilding Filter cannot be res...
[ERROR]   AstCheckerTest.testPushToStackChanges:99 » UnsupportedOperation no glb for [<T...
[ERROR]   CloneTest.testCopyType:208 » NullPointer
[ERROR]   CtScannerTest.testScannerCallsAllProperties:119 » ModelBuilding The method get...
[ERROR]   JavaReflectionTreeBuilderTest.testShadowModelEqualsNormalModel:188 » NullPointer
[ERROR]   AnnotationTest.testAccessAnnotationValue:468 » ModelBuilding TestAnnotation ca...
[ERROR]   AnnotationTest.testAnnotationIntrospection:982 » ModelBuilding TestAnnotation ...
[ERROR]   AnnotationTest.testAnnotationParameterTypes:204 » ModelBuilding TestAnnotation...
[ERROR]   AnnotationTest.testDefaultValueInAnnotationsForAnnotationFields:907 » ModelBuilding
[ERROR]   AnnotationTest.testModelBuildingAnnotationBoundUsage:138 » ModelBuilding TestA...
[ERROR]   AnnotationTest.testOutputGeneratedByTypeAnnotation:770 » ModelBuilding BasicAn...
[ERROR]   AnnotationTest.testRepeatSameAnnotationOnClass:782 » ModelBuilding AnnotationR...
[ERROR]   AnnotationTest.testRepeatSameAnnotationOnConstructor:832 » ModelBuilding Annot...
[ERROR]   AnnotationTest.testRepeatSameAnnotationOnField:798 » ModelBuilding AnnotationR...
[ERROR]   AnnotationTest.testRepeatSameAnnotationOnLocalVariable:867 » ModelBuilding Ann...
[ERROR]   AnnotationTest.testRepeatSameAnnotationOnMethod:815 » ModelBuilding Annotation...
[ERROR]   AnnotationTest.testRepeatSameAnnotationOnPackage:891 » ModelBuilding Annotatio...
[ERROR]   AnnotationTest.testRepeatSameAnnotationOnParameter:849 » ModelBuilding Annotat...
[ERROR]   AnnotationTest.testReplaceAnnotationValue:1200 » ModelBuilding TestAnnotation ...
[ERROR]   AnnotationTest.testSpoonSpoonResult:1086 » ModelBuilding The import spoon.test...
[ERROR]   AnnotationTest.testUsageOfParametersInTypeAnnotation:727 » ModelBuilding Basic...
[ERROR]   AnnotationTest.testUsageOfTypeAnnotationBeforeExceptionInSignatureOfMethod:529 » ModelBuilding
[ERROR]   AnnotationTest.testUsageOfTypeAnnotationInCast:506 » ModelBuilding BasicAnnota...
[ERROR]   AnnotationTest.testUsageOfTypeAnnotationInExtendsImplementsOfAClass:609 » ModelBuilding
[ERROR]   AnnotationTest.testUsageOfTypeAnnotationInNewInstance:484 » ModelBuilding Basi...
[ERROR]   AnnotationTest.testUsageOfTypeAnnotationInReturnTypeInMethod:548 » ModelBuilding
[ERROR]   AnnotationTest.testUsageOfTypeAnnotationOnLocalVariableInMethod:586 » ModelBuilding
[ERROR]   AnnotationTest.testUsageOfTypeAnnotationOnParameterInMethod:568 » ModelBuilding
[ERROR]   AnnotationTest.testUsageOfTypeAnnotationWithGenericTypesInClassDeclaration:656 » ModelBuilding
[ERROR]   AnnotationTest.testUsageOfTypeAnnotationWithGenericTypesInStatements:677 » ModelBuilding
[ERROR]   MetamodelTest.testGetAllMetamodelInterfacess:78 » ModelBuilding The hierarchy ...
[ERROR]   MetamodelTest.testGetterSetterFroRole:89 » ModelBuilding The hierarchy of the ...
[ERROR]   MetamodelTest.testMetamodelWithoutSources:201 » NullPointer
[ERROR]   MetamodelTest.testRoleOnField:117 » UnsupportedOperation no glb for [<T extend...
[ERROR]   SpoonArchitectureEnforcerTest.metamodelPackageRule:190 » UnsupportedOperation ...
[ERROR]   SpoonArchitectureEnforcerTest.statelessFactory:48 » ModelBuilding The import s...
[ERROR]   SpoonArchitectureEnforcerTest.testFactorySubFactory:116 » ModelBuilding The im...
[ERROR]   SpoonArchitectureEnforcerTest.testGoodTestClassNames:218 » ModelBuilding CtTyp...
[ERROR]   SpoonArchitectureEnforcerTest.testInterfacesAreCtScannable:306 » ModelBuilding
[ERROR]   SpoonArchitectureEnforcerTest.testSpecPackage:392 » ModelBuilding Logger canno...
[ERROR]   SpoonArchitectureEnforcerTest.testSrcMainJava:129 » ModelBuilding Logger canno...
[ERROR]   SpoonArchitectureEnforcerTest.testStaticClasses:281 » ModelBuilding Logger can...
[ERROR]   CompilationTest.testFilterResourcesDir:236 » ModelBuilding The import org.juni...
[ERROR]   CompilationTest.testFilterResourcesFile:197 » ModelBuilding Bar cannot be reso...
[ERROR]   CompilationTest.testNewInstance:154 » ModelBuilding snippet compilation error ...
[ERROR]   CompilationTest.testNewInstanceFromExistingClass:126 » ModelBuilding IBar cann...
[ERROR]   CompilationTest.testPrecompile:274 » Spoon Unable to load processor "compilati...
[ERROR]   CtBodyHolderTest.testConstructor:30 » ModelBuilding StatementTemplate cannot b...
[ERROR]   CtBodyHolderTest.testForWithBlock:75 » ModelBuilding StatementTemplate cannot ...
[ERROR]   CtBodyHolderTest.testForWithStatement:63 » ModelBuilding StatementTemplate can...
[ERROR]   CtBodyHolderTest.testMethod:39 » ModelBuilding StatementTemplate cannot be res...
[ERROR]   CtBodyHolderTest.testTryCatch:48 » ModelBuilding StatementTemplate cannot be r...
[ERROR]   CtBodyHolderTest.testWhileWithBlock:87 » ModelBuilding StatementTemplate canno...
[ERROR]   CtTypeTest.testHasMethodInDefaultMethod:77 » ModelBuilding List cannot be reso...
[ERROR]   CtTypeTest.testHasMethodInSuperClass:63 » ModelBuilding List cannot be resolve...
[ERROR]   CtTypeTest.testIsSubTypeOf:88 » ModelBuilding List cannot be resolved to a typ...
[ERROR]   CtTypeTest.testIsSubTypeOfonTypeParameters:102 » ModelBuilding List cannot be ...
[ERROR]   CtTypeTest.testIsSubTypeOfonTypeReferences:143 » ModelBuilding X cannot be res...
[ERROR]   EvalTest.testArrayLength:37 » ModelBuilding The import spoon.reflect cannot be...
[ERROR]   EvalTest.testDoNotSimplify:48 » ModelBuilding The import spoon.reflect cannot ...
[ERROR]   EvalTest.testDoNotSimplifyCasts:59 » ModelBuilding The import spoon.reflect ca...
[ERROR]   EvalTest.testDoNotSimplifyToExpressionWhenStatementIsExpected:81 » ModelBuilding
[ERROR]   EvalTest.testStringConcatenation:23 » ModelBuilding The import spoon.reflect c...
[ERROR]   EvalTest.testTryCatchAndStatement:70 » ModelBuilding The import spoon.reflect ...
[ERROR]   FilterTest.testNameFilterWithGenericType:1323 » ModelBuilding Foo cannot be re...
[ERROR]   GenericsTest.testConstructorCallGenerics:367 » ModelBuilding The import spoon....
[ERROR]   GenericsTest.testGenericsInQualifiedNameInConstructorCall:532 » ModelBuilding ...
[ERROR]   GenericsTest.testGetExecDeclarationOfEnumSetOf:1328 » ModelBuilding The import...
[ERROR]   GenericsTest.testInvocationGenerics:420 » ModelBuilding The import spoon.refle...
[ERROR]   GenericsTest.testIsSameSignatureWithMethodGenerics:1307 » ModelBuilding The im...
[ERROR]   GenericsTest.testIsSameSignatureWithReferencedGenerics:1356 » ModelBuilding Th...
[ERROR]   GenericsTest.testMethodsWithGenericsWhoExtendsObject:471 » ModelBuilding The i...
[ERROR]   GenericsTest.testName:491 » ModelBuilding The import spoon.reflect cannot be r...
[ERROR]   GenericsTest.testNewClassGenerics:447 » ModelBuilding The import spoon.reflect...
[ERROR]   GenericsTest.testWildCardonShadowClass:1184 » ModelBuilding CtElement cannot b...
[ERROR]   ImportScannerTest.testComputeImportsInClassWithSameName:250 » ModelBuilding Te...
[ERROR]   ImportScannerTest.testImportOnSpoon:52 » ModelBuilding Logger cannot be resolv...
[ERROR]   ImportTest.testAccessToNestedClass:449 » ModelBuilding The import org.junit ca...
[ERROR]   ImportTest.testAccessType:465 » ModelBuilding The import org.junit cannot be r...
[ERROR]   ImportTest.testCanAccess:551 » ModelBuilding The import org.junit cannot be re...
[ERROR]   ImportTest.testImportOfAnInnerClassInASuperClassPackageFullQualified:122 » ModelBuilding
[ERROR]   ImportTest.testImportStarredPackageWithNonVisibleClass:1240 » ModelBuilding Th...
[ERROR]   ImportTest.testSortImportPutStaticImportAfterTypeImport:1190 » ModelBuilding T...
[ERROR]   ImportTest.testSpoonWithImports:258 » ModelBuilding The import org.junit canno...
[ERROR]   ImportTest.testStaticMethodWithDifferentClassSameNameCollision:1122 » ModelBuilding
[ERROR]   ImportTest.testStaticMethodWithDifferentClassSameNameJava3NoCollision:1092 » ModelBuilding
[ERROR]   ImportTest.testStaticMethodWithDifferentClassSameNameJava7NoCollision:1062 » ModelBuilding
[ERROR]   ImportTest.testSuperInheritanceHierarchyFunction:812 » ModelBuilding ChildClas...
[ERROR]   ImportTest.testSuperInheritanceHierarchyFunctionListener:868 » ModelBuilding C...
[ERROR]   ImportTest.testWithInnerEnumDoesNotImportStaticInnerMethods:754 » ModelBuilding
[ERROR]   IntercessionTest.testSettersAreAllGood:196 » ModelBuilding The hierarchy of th...
[ERROR]   JavaDocTest.testJavadocNotPresentInAST:66 » ModelBuilding The import spoon.ref...
[ERROR]   ImportBuilderTest.testSimpleStaticImport:97 » ModelBuilding The import spoon.t...
[ERROR]   ImportBuilderTest.testWithSimpleImport:48 » ModelBuilding The import spoon.tes...
[ERROR]   ImportBuilderTest.testWithSimpleImportNoAutoimport:70 » ModelBuilding The impo...
[ERROR]   MainTest.loadModel:89 » ModelBuilding Logger cannot be resolved to a type at /...
[ERROR]   TypeTest.testGetDeclaredOrIheritedFieldOnType:72 » ModelBuilding Foo cannot be...
[ERROR]   TypeTest.testGetDeclaredOrIheritedFieldOnTypeRef:85 » ModelBuilding Foo cannot...
[ERROR]   PackageTest.testAnnotationOnPackage:93 » ModelBuilding AbstractProcessor canno...
[ERROR]   PositionTest.testPositionTryCatch:725 » ModelBuilding The import org.junit can...
[ERROR]   DefaultPrettyPrinterTest.testPrintAClassWithImports:87 » ModelBuilding The imp...
[ERROR]   DefaultPrettyPrinterTest.testPrintAMethodWithGeneric:145 » ModelBuilding The i...
[ERROR]   DefaultPrettyPrinterTest.testPrintAMethodWithImports:118 » ModelBuilding The i...
[ERROR]   PrinterTest.testAutoimportModeDontImportUselessStatic:104 » ModelBuilding The ...
[ERROR]   PrinterTest.testFQNModeWriteFQNConstructorInCtVisitor:86 » ModelBuilding spoon...
[ERROR]   PrinterTest.testJDTBatchCompilerCanBeBuild:147 » ModelBuilding org.eclipse can...
[ERROR]   ProcessingTest.testCallProcessorWithMultipleTypes:357 » ModelBuilding The impo...
[ERROR]   ProcessingTest.testProcessorWithGenericType:332 » ModelBuilding The import org...
[ERROR]   VariableReferencesTest.setup:62 » ModelBuilding The import org.junit cannot be...
[ERROR]   VariableReferencesTest.setup:62 » ModelBuilding The import org.junit cannot be...
[ERROR]   VariableReferencesTest.setup:62 » ModelBuilding The import org.junit cannot be...
[ERROR]   VariableReferencesTest.setup:62 » ModelBuilding The import org.junit cannot be...
[ERROR]   VariableReferencesTest.setup:62 » ModelBuilding The import org.junit cannot be...
[ERROR]   VariableReferencesTest.setup:62 » ModelBuilding The import org.junit cannot be...
[ERROR]   VariableReferencesTest.setup:62 » ModelBuilding The import org.junit cannot be...
[ERROR]   VariableReferencesTest.setup:62 » ModelBuilding The import org.junit cannot be...
[ERROR]   CtRenameLocalVariableRefactoringTest.testRefactorWrongUsage:205 » ModelBuilding
[ERROR]   CtRenameLocalVariableRefactoringTest.testRenameAllLocalVariablesOfRenameTestSubject:63 » ModelBuilding
[ERROR]   CtRenameLocalVariableRefactoringTest.testRenameLocalVariableToSameName:253 » ModelBuilding
[ERROR]   RefactoringTest.testRefactoringClassChangeAllCtTypeReferenceAssociatedWithClassConcerned:28 » ModelBuilding
[ERROR]   RefactoringTest.testThisInConstructor:66 » ModelBuilding The import org.junit ...
[ERROR]   RefactoringTest.testThisInConstructorAfterATransformation:86 » ModelBuilding T...
[ERROR]   RefactoringTest.testTransformedInstanceofAfterATransformation:105 » ModelBuilding
[ERROR]   ImplicitStaticFieldReferenceTest.testAnnotationInChildWithConstants:130->checkFile:149 » ModelBuilding
[ERROR]   ImplicitStaticFieldReferenceTest.testAnnotationInChildWithConstantsAutoImport:135->checkFile:149 » ModelBuilding
[ERROR]   ImplicitStaticFieldReferenceTest.testChildOfGenericsWithAmbiguousStaticField:104->checkFile:149 » ModelBuilding
[ERROR]   ImplicitStaticFieldReferenceTest.testChildOfGenericsWithAmbiguousStaticFieldAutoImport:109->checkFile:149 » ModelBuilding
[ERROR]   ImplicitStaticFieldReferenceTest.testImplicitStaticFieldReference:17->checkFile:149 » ModelBuilding
[ERROR]   ImplicitStaticFieldReferenceTest.testImplicitStaticFieldReferenceAutoImport:29->checkFile:149 » ModelBuilding
[ERROR]   ResourceTest.testFilteringFolder:76 » ModelBuilding The import org.junit canno...
[ERROR]   PatternTest.testExtensionDecoupledSubstitutionVisitor:1543 » Spoon Parameter v...
[ERROR]   PatternTest.testGenerateMultiValues:264 » ModelBuilding The import spoon.patte...
[ERROR]   PatternTest.testMatchGreedyMultiValueMaxCountLimit:331 » ModelBuilding The imp...
[ERROR]   PatternTest.testMatchGreedyMultiValueMinCount2:642 » ModelBuilding The import ...
[ERROR]   PatternTest.testMatchGreedyMultiValueUnlimited:295 » ModelBuilding The import ...
[ERROR]   PatternTest.testMatchOfAttribute:825 » ModelBuilding The import spoon.pattern ...
[ERROR]   PatternTest.testMatchOfMapAttribute:899 » ModelBuilding Check cannot be resolv...
[ERROR]   PatternTest.testMatchOfMapAttributeAndOtherAnnotations:962 » ModelBuilding Che...
[ERROR]   PatternTest.testMatchOfMapKeySubstring:1001 » ModelBuilding Check cannot be re...
[ERROR]   PatternTest.testMatchParameterCondition:787 » ModelBuilding The import spoon.p...
[ERROR]   PatternTest.testMatchParameterValue:687 » ModelBuilding The import spoon.patte...
[ERROR]   PatternTest.testMatchParameterValueType:727 » ModelBuilding The import spoon.p...
[ERROR]   PatternTest.testMatchPossesiveMultiValueMaxCount4:518 » ModelBuilding The impo...
[ERROR]   PatternTest.testMatchPossesiveMultiValueMinCount:561 » ModelBuilding The impor...
[ERROR]   PatternTest.testMatchPossesiveMultiValueMinCount2:600 » ModelBuilding The impo...
[ERROR]   PatternTest.testMatchPossesiveMultiValueUnlimited:500 » ModelBuilding The impo...
[ERROR]   PatternTest.testMatchReluctantMultivalue:376 » ModelBuilding The import spoon....
[ERROR]   PatternTest.testMatchReluctantMultivalueExactly2:472 » ModelBuilding The impor...
[ERROR]   PatternTest.testMatchReluctantMultivalueMinCount1:429 » ModelBuilding The impo...
[ERROR]   PatternTest.testPatternMatchOfMultipleElements:1408 » ModelBuilding The import...
[ERROR]   TemplateTest.testExtensionBlock:631 » Spoon Parameter value class: spoon.suppo...
[ERROR]   TemplateTest.testTemplateArrayAccess:814 » NullPointer
[ERROR]   TemplateTest.testTemplateInterfaces:660 » ModelBuilding SuperClass cannot be r...
[ERROR]   TemplateTest.testTemplateMatcherMatchTwoSnippets:723 » ModelBuilding ContextHe...
[ERROR]   TryCatchTest.testCatchWithExplicitFinalVariable:267 » ModelBuilding Statement ...
[ERROR]   AccessFullyQualifiedFieldTest.testNoFQNAndStaticImport:137->buildResourceAndReturnResult:31 » ModelBuilding
[ERROR]   AccessFullyQualifiedFieldTest.testNoFQNWhenShadowedByField:48->buildResourceAndReturnResult:31 » ModelBuilding
[ERROR]   AccessFullyQualifiedFieldTest.testNoFQNWhenShadowedByLocalVariable:60->buildResourceAndReturnResult:31 » ModelBuilding
[ERROR]   AccessFullyQualifiedFieldTest.testNoFQNWhenUsedInLoop:97->buildResourceAndReturnResult:31 » ModelBuilding
[ERROR]   AccessFullyQualifiedFieldTest.testNoFQNWhenUsedInTryCatch:86->buildResourceAndReturnResult:31 » ModelBuilding
[ERROR]   AccessFullyQualifiedFieldTest.testPrivateStaticImportShouldNotBeImportedInSameClass:148->buildResourceAndReturnResult:31 » ModelBuilding
[ERROR]   AccessFullyQualifiedFieldTest.testStaticImportWithAutoImport:112 » ModelBuilding
[INFO] 
[ERROR] Tests run: 1490, Failures: 11, Errors: 163, Skipped: 4
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 02:43 min
[INFO] Finished at: 2018-06-11T17:55:54+02:00
[INFO] Final Memory: 444M/5708M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.21.0:test (default-test) on project spoon-core: There are test failures.
[ERROR] 
[ERROR] Please refer to /root/workspace/INRIA/spoon/390834297/target/surefire-reports for the individual test results.
[ERROR] Please refer to dump files (if any exist) [date]-jvmRun[N].dump, [date].dumpstream and [date]-jvmRun[N].dumpstream.
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
